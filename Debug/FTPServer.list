
FTPServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012548  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fb8  08012718  08012718  00022718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080156d0  080156d0  000256d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080156d8  080156d8  000256d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080156dc  080156dc  000256dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  080156e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000f9f8  20000098  08015778  00030098  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000fa90  08015778  0003fa90  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00082c59  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f659  00000000  00000000  000b2d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0002e43b  00000000  00000000  000c237a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000024e0  00000000  00000000  000f07b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00003f98  00000000  00000000  000f2c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f0be  00000000  00000000  000f6c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00058a32  00000000  00000000  00135cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0011176f  00000000  00000000  0018e720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0029fe8f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000078b8  00000000  00000000  0029fee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012700 	.word	0x08012700

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	08012700 	.word	0x08012700

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a8:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005aa:	2003      	movs	r0, #3
 80005ac:	f000 f82c 	bl	8000608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005b0:	2000      	movs	r0, #0
 80005b2:	f010 fb89 	bl	8010cc8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005b6:	f010 fb1b 	bl	8010bf0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80005ba:	2000      	movs	r0, #0
 80005bc:	bd08      	pop	{r3, pc}
	...

080005c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005c0:	4a03      	ldr	r2, [pc, #12]	; (80005d0 <HAL_IncTick+0x10>)
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <HAL_IncTick+0x14>)
 80005c4:	6811      	ldr	r1, [r2, #0]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	440b      	add	r3, r1
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	200085e8 	.word	0x200085e8
 80005d4:	20000000 	.word	0x20000000

080005d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005d8:	4b01      	ldr	r3, [pc, #4]	; (80005e0 <HAL_GetTick+0x8>)
 80005da:	6818      	ldr	r0, [r3, #0]
}
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200085e8 	.word	0x200085e8

080005e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e4:	b538      	push	{r3, r4, r5, lr}
 80005e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff fff6 	bl	80005d8 <HAL_GetTick>
 80005ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ee:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005f0:	bf1e      	ittt	ne
 80005f2:	4b04      	ldrne	r3, [pc, #16]	; (8000604 <HAL_Delay+0x20>)
 80005f4:	781b      	ldrbne	r3, [r3, #0]
 80005f6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005f8:	f7ff ffee 	bl	80005d8 <HAL_GetTick>
 80005fc:	1b43      	subs	r3, r0, r5
 80005fe:	42a3      	cmp	r3, r4
 8000600:	d3fa      	bcc.n	80005f8 <HAL_Delay+0x14>
  {
  }
}
 8000602:	bd38      	pop	{r3, r4, r5, pc}
 8000604:	20000000 	.word	0x20000000

08000608 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000608:	4907      	ldr	r1, [pc, #28]	; (8000628 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800060a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800060e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000616:	0412      	lsls	r2, r2, #16
 8000618:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000624:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000626:	4770      	bx	lr
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	68dc      	ldr	r4, [r3, #12]
 8000632:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000636:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800063c:	2d04      	cmp	r5, #4
 800063e:	bf28      	it	cs
 8000640:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000642:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000648:	bf8c      	ite	hi
 800064a:	3c03      	subhi	r4, #3
 800064c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064e:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) < 0)
 8000652:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000654:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000658:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800065c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000660:	fa01 f104 	lsl.w	r1, r1, r4
 8000664:	ea41 0302 	orr.w	r3, r1, r2
 8000668:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800066c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) < 0)
 800066e:	da04      	bge.n	800067a <HAL_NVIC_SetPriority+0x4e>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	f000 000f 	and.w	r0, r0, #15
 8000674:	4a05      	ldr	r2, [pc, #20]	; (800068c <HAL_NVIC_SetPriority+0x60>)
 8000676:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000678:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800067e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000682:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8000686:	e7f7      	b.n	8000678 <HAL_NVIC_SetPriority+0x4c>
 8000688:	e000ed00 	.word	0xe000ed00
 800068c:	e000ed14 	.word	0xe000ed14

08000690 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000690:	0942      	lsrs	r2, r0, #5
 8000692:	2301      	movs	r3, #1
 8000694:	f000 001f 	and.w	r0, r0, #31
 8000698:	fa03 f000 	lsl.w	r0, r3, r0
 800069c:	4b01      	ldr	r3, [pc, #4]	; (80006a4 <HAL_NVIC_EnableIRQ+0x14>)
 800069e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a8:	3801      	subs	r0, #1
 80006aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ae:	d20a      	bcs.n	80006c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b2:	21f0      	movs	r1, #240	; 0xf0
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b6:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006b8:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006be:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006c0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80006d6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	bf0c      	ite	eq
 80006dc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80006e0:	f022 0204 	bicne.w	r2, r2, #4
 80006e4:	601a      	str	r2, [r3, #0]
  }
}
 80006e6:	4770      	bx	lr
 80006e8:	e000e010 	.word	0xe000e010

080006ec <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 80006ec:	2300      	movs	r3, #0
{
 80006ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80006f0:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 80006f4:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80006f6:	6803      	ldr	r3, [r0, #0]
{
 80006f8:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80006fa:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80006fc:	591a      	ldr	r2, [r3, r4]
 80006fe:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000702:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8000704:	591b      	ldr	r3, [r3, r4]
 8000706:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000708:	f7ff ff6c 	bl	80005e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800070c:	682b      	ldr	r3, [r5, #0]
 800070e:	9a01      	ldr	r2, [sp, #4]
 8000710:	511a      	str	r2, [r3, r4]
}
 8000712:	b003      	add	sp, #12
 8000714:	bd30      	pop	{r4, r5, pc}
	...

08000718 <ETH_MACDMAConfig>:
{
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800071c:	b129      	cbz	r1, 800072a <ETH_MACDMAConfig+0x12>
    (heth->Init).Speed = ETH_SPEED_100M;
 800071e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000722:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000726:	e9c0 3202 	strd	r3, r2, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800072a:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 800072c:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800072e:	2b00      	cmp	r3, #0
  tmpreg = (heth->Instance)->MACCR;
 8000730:	6810      	ldr	r0, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000732:	bf0c      	ite	eq
 8000734:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8000738:	2100      	movne	r1, #0
                       macinit.LoopbackMode |
 800073a:	e9d4 3502 	ldrd	r3, r5, [r4, #8]
 800073e:	432b      	orrs	r3, r5
                       (heth->Init).DuplexMode | 
 8000740:	430b      	orrs	r3, r1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000742:	492d      	ldr	r1, [pc, #180]	; (80007f8 <ETH_MACDMAConfig+0xe0>)
 8000744:	4001      	ands	r1, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000746:	2001      	movs	r0, #1
 8000748:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800074a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800074e:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000750:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000752:	f7ff ff47 	bl	80005e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8000756:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000758:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800075a:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 800075c:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800075e:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000760:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000762:	f7ff ff3f 	bl	80005e4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8000766:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000768:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 800076a:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800076c:	2500      	movs	r5, #0
 800076e:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000770:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8000772:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8000774:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 8000778:	0412      	lsls	r2, r2, #16
 800077a:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800077c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8000780:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8000782:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000784:	f7ff ff2e 	bl	80005e4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8000788:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800078a:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 800078c:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800078e:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8000790:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000792:	f7ff ff27 	bl	80005e4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8000796:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8000798:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800079a:	4b18      	ldr	r3, [pc, #96]	; (80007fc <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->MACVLANTR = tmpreg;
 800079c:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 800079e:	f241 0518 	movw	r5, #4120	; 0x1018
 80007a2:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007a4:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007a6:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007aa:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80007ae:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80007b0:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b2:	f7ff ff17 	bl	80005e4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80007b6:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b8:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007ba:	4a11      	ldr	r2, [pc, #68]	; (8000800 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->DMAOMR = tmpreg;
 80007bc:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80007c4:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c6:	f7ff ff0d 	bl	80005e4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80007ca:	6822      	ldr	r2, [r4, #0]
 80007cc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80007d0:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80007d2:	69a3      	ldr	r3, [r4, #24]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d107      	bne.n	80007e8 <ETH_MACDMAConfig+0xd0>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80007d8:	f241 011c 	movw	r1, #4124	; 0x101c
 80007dc:	5853      	ldr	r3, [r2, r1]
 80007de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e6:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80007e8:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80007ea:	4a06      	ldr	r2, [pc, #24]	; (8000804 <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80007ec:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80007ee:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80007f0:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <ETH_MACDMAConfig+0xf0>)
 80007f4:	601a      	str	r2, [r3, #0]
}
 80007f6:	bd70      	pop	{r4, r5, r6, pc}
 80007f8:	ff20810f 	.word	0xff20810f
 80007fc:	f8de3f23 	.word	0xf8de3f23
 8000800:	02c12080 	.word	0x02c12080
 8000804:	40028040 	.word	0x40028040
 8000808:	40028044 	.word	0x40028044

0800080c <HAL_ETH_DMATxDescListInit>:
{
 800080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 8000810:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000814:	2c01      	cmp	r4, #1
 8000816:	f04f 0402 	mov.w	r4, #2
 800081a:	d031      	beq.n	8000880 <HAL_ETH_DMATxDescListInit+0x74>
 800081c:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800081e:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000822:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
  for(i=0; i < TxBuffCount; i++)
 8000826:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 8000828:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800082c:	f240 5cf4 	movw	ip, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8000830:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 8000832:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
  heth->TxDesc = DMATxDescTab;
 8000836:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8000838:	429d      	cmp	r5, r3
 800083a:	d10c      	bne.n	8000856 <HAL_ETH_DMATxDescListInit+0x4a>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800083c:	6802      	ldr	r2, [r0, #0]
 800083e:	f241 0310 	movw	r3, #4112	; 0x1010
 8000842:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000844:	2301      	movs	r3, #1
 8000846:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800084a:	2300      	movs	r3, #0
 800084c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000850:	4618      	mov	r0, r3
}
 8000852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000856:	fb0c 2605 	mla	r6, ip, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800085a:	6027      	str	r7, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800085c:	60a6      	str	r6, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800085e:	69c6      	ldr	r6, [r0, #28]
 8000860:	b91e      	cbnz	r6, 800086a <HAL_ETH_DMATxDescListInit+0x5e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000862:	6826      	ldr	r6, [r4, #0]
 8000864:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000868:	6026      	str	r6, [r4, #0]
    if(i < (TxBuffCount-1))
 800086a:	f104 0620 	add.w	r6, r4, #32
 800086e:	45ae      	cmp	lr, r5
 8000870:	bf94      	ite	ls
 8000872:	4688      	movls	r8, r1
 8000874:	46b0      	movhi	r8, r6
 8000876:	3501      	adds	r5, #1
 8000878:	f8c4 800c 	str.w	r8, [r4, #12]
  for(i=0; i < TxBuffCount; i++)
 800087c:	4634      	mov	r4, r6
 800087e:	e7db      	b.n	8000838 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 8000880:	4620      	mov	r0, r4
 8000882:	e7e6      	b.n	8000852 <HAL_ETH_DMATxDescListInit+0x46>

08000884 <HAL_ETH_DMARxDescListInit>:
{
 8000884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(heth);
 8000888:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800088c:	2c01      	cmp	r4, #1
 800088e:	f04f 0402 	mov.w	r4, #2
 8000892:	d02f      	beq.n	80008f4 <HAL_ETH_DMARxDescListInit+0x70>
 8000894:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000896:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800089a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  for(i=0; i < RxBuffCount; i++)
 800089e:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 80008a0:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008a4:	f244 5cf4 	movw	ip, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80008a8:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008aa:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80008ae:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
  heth->RxDesc = DMARxDescTab; 
 80008b2:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80008b4:	42ab      	cmp	r3, r5
 80008b6:	d10c      	bne.n	80008d2 <HAL_ETH_DMARxDescListInit+0x4e>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80008b8:	6802      	ldr	r2, [r0, #0]
 80008ba:	f241 030c 	movw	r3, #4108	; 0x100c
 80008be:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008c0:	2301      	movs	r3, #1
 80008c2:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008c6:	2300      	movs	r3, #0
 80008c8:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008cc:	4618      	mov	r0, r3
}
 80008ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008d2:	fb0e 2605 	mla	r6, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008d6:	6027      	str	r7, [r4, #0]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008d8:	60a6      	str	r6, [r4, #8]
 80008da:	f104 0620 	add.w	r6, r4, #32
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008de:	f8c4 c004 	str.w	ip, [r4, #4]
    if(i < (RxBuffCount-1))
 80008e2:	45a8      	cmp	r8, r5
 80008e4:	bf94      	ite	ls
 80008e6:	4689      	movls	r9, r1
 80008e8:	46b1      	movhi	r9, r6
 80008ea:	3501      	adds	r5, #1
 80008ec:	f8c4 900c 	str.w	r9, [r4, #12]
  for(i=0; i < RxBuffCount; i++)
 80008f0:	4634      	mov	r4, r6
 80008f2:	e7df      	b.n	80008b4 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_LOCK(heth);
 80008f4:	4620      	mov	r0, r4
 80008f6:	e7ea      	b.n	80008ce <HAL_ETH_DMARxDescListInit+0x4a>

080008f8 <HAL_ETH_TransmitFrame>:
{
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80008fa:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80008fe:	2b01      	cmp	r3, #1
 8000900:	f04f 0302 	mov.w	r3, #2
 8000904:	d066      	beq.n	80009d4 <HAL_ETH_TransmitFrame+0xdc>
 8000906:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000908:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800090c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8000910:	b929      	cbnz	r1, 800091e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000912:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000916:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800091a:	4610      	mov	r0, r2
}
 800091c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800091e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000920:	681c      	ldr	r4, [r3, #0]
 8000922:	2c00      	cmp	r4, #0
 8000924:	da06      	bge.n	8000934 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000926:	2312      	movs	r3, #18
 8000928:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800092c:	2300      	movs	r3, #0
 800092e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000932:	e7f2      	b.n	800091a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000934:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000938:	42a1      	cmp	r1, r4
 800093a:	d92c      	bls.n	8000996 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800093c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000940:	fb04 1412 	mls	r4, r4, r2, r1
 8000944:	b32c      	cbz	r4, 8000992 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000946:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000948:	4c23      	ldr	r4, [pc, #140]	; (80009d8 <HAL_ETH_TransmitFrame+0xe0>)
 800094a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800094e:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8000952:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000954:	fb04 1102 	mla	r1, r4, r2, r1
    for (i=0; i< bufcount; i++)
 8000958:	2400      	movs	r4, #0
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800095a:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800095e:	681d      	ldr	r5, [r3, #0]
 8000960:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000964:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000966:	b91c      	cbnz	r4, 8000970 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000968:	681d      	ldr	r5, [r3, #0]
 800096a:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800096e:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 8000970:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000972:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 8000974:	d104      	bne.n	8000980 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000976:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000978:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800097a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800097e:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000980:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 8000982:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000984:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8000988:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800098a:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800098c:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 800098e:	d1e6      	bne.n	800095e <HAL_ETH_TransmitFrame+0x66>
 8000990:	e00d      	b.n	80009ae <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 8000992:	2a01      	cmp	r2, #1
 8000994:	d1d8      	bne.n	8000948 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000996:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000998:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800099c:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009a0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009a2:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009aa:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009ac:	68db      	ldr	r3, [r3, #12]
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009ae:	f241 0214 	movw	r2, #4116	; 0x1014
 80009b2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80009b4:	6803      	ldr	r3, [r0, #0]
 80009b6:	5899      	ldr	r1, [r3, r2]
 80009b8:	0749      	lsls	r1, r1, #29
 80009ba:	d505      	bpl.n	80009c8 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009bc:	2104      	movs	r1, #4
 80009be:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80009c0:	f241 0204 	movw	r2, #4100	; 0x1004
 80009c4:	2100      	movs	r1, #0
 80009c6:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80009c8:	2301      	movs	r3, #1
 80009ca:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009ce:	2300      	movs	r3, #0
 80009d0:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 80009d4:	4618      	mov	r0, r3
 80009d6:	e7a1      	b.n	800091c <HAL_ETH_TransmitFrame+0x24>
 80009d8:	fffffa0c 	.word	0xfffffa0c

080009dc <HAL_ETH_GetReceivedFrame_IT>:
{
 80009dc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 80009de:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	f04f 0302 	mov.w	r3, #2
 80009e8:	d03b      	beq.n	8000a62 <HAL_ETH_GetReceivedFrame_IT+0x86>
 80009ea:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80009ec:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 80009ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 80009f2:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 80009f4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80009f8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	db01      	blt.n	8000a04 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000a00:	3c01      	subs	r4, #1
 8000a02:	d106      	bne.n	8000a12 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000a04:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000a06:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000a08:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a0c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000a10:	e027      	b.n	8000a62 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	68dd      	ldr	r5, [r3, #12]
 8000a16:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a1a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a1e:	d103      	bne.n	8000a28 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a20:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000a22:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a24:	6285      	str	r5, [r0, #40]	; 0x28
 8000a26:	e7e7      	b.n	80009f8 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a28:	681e      	ldr	r6, [r3, #0]
 8000a2a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a2c:	f416 7f40 	tst.w	r6, #768	; 0x300
 8000a30:	f102 0201 	add.w	r2, r2, #1
 8000a34:	d101      	bne.n	8000a3a <HAL_ETH_GetReceivedFrame_IT+0x5e>
      (heth->RxFrameInfos.SegCount)++;
 8000a36:	6382      	str	r2, [r0, #56]	; 0x38
 8000a38:	e7f4      	b.n	8000a24 <HAL_ETH_GetReceivedFrame_IT+0x48>
      if ((heth->RxFrameInfos.SegCount) == 1)
 8000a3a:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 8000a3c:	e9c0 320d 	strd	r3, r2, [r0, #52]	; 0x34
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a40:	bf08      	it	eq
 8000a42:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a50:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a52:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a54:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd70      	pop	{r4, r5, r6, pc}

08000a66 <HAL_ETH_TxCpltCallback>:
 8000a66:	4770      	bx	lr

08000a68 <HAL_ETH_ErrorCallback>:
 8000a68:	4770      	bx	lr

08000a6a <HAL_ETH_IRQHandler>:
{
 8000a6a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000a6c:	6802      	ldr	r2, [r0, #0]
 8000a6e:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000a72:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000a74:	5995      	ldr	r5, [r2, r6]
 8000a76:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000a7a:	d021      	beq.n	8000ac0 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000a7c:	f00f fd48 	bl	8010510 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000a80:	6823      	ldr	r3, [r4, #0]
 8000a82:	2240      	movs	r2, #64	; 0x40
 8000a84:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000a86:	2301      	movs	r3, #1
 8000a88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	f241 0514 	movw	r5, #4116	; 0x1014
 8000a98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a9c:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000a9e:	595b      	ldr	r3, [r3, r5]
 8000aa0:	041b      	lsls	r3, r3, #16
 8000aa2:	d50c      	bpl.n	8000abe <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000aa4:	4620      	mov	r0, r4
 8000aa6:	f7ff ffdf 	bl	8000a68 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000aaa:	6823      	ldr	r3, [r4, #0]
 8000aac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ab0:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000ac0:	5993      	ldr	r3, [r2, r6]
 8000ac2:	07da      	lsls	r2, r3, #31
 8000ac4:	d5e5      	bpl.n	8000a92 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000ac6:	f7ff ffce 	bl	8000a66 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000aca:	2301      	movs	r3, #1
 8000acc:	6822      	ldr	r2, [r4, #0]
 8000ace:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000ad0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ad4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000ad8:	e7db      	b.n	8000a92 <HAL_ETH_IRQHandler+0x28>

08000ada <HAL_ETH_ReadPHYRegister>:
{
 8000ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000adc:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000ae0:	4606      	mov	r6, r0
 8000ae2:	4615      	mov	r5, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000ae4:	2b82      	cmp	r3, #130	; 0x82
 8000ae6:	d031      	beq.n	8000b4c <HAL_ETH_ReadPHYRegister+0x72>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000ae8:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000aea:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000aec:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000af0:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000af4:	8a34      	ldrh	r4, [r6, #16]
  tmpreg = heth->Instance->MACMIIAR;
 8000af6:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000af8:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 8000afa:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000afc:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000afe:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b02:	430c      	orrs	r4, r1
 8000b04:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b06:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000b0a:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b0c:	f7ff fd64 	bl	80005d8 <HAL_GetTick>
 8000b10:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b12:	f014 0401 	ands.w	r4, r4, #1
 8000b16:	d108      	bne.n	8000b2a <HAL_ETH_ReadPHYRegister+0x50>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b18:	6833      	ldr	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b1a:	4620      	mov	r0, r4
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	602b      	str	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b22:	2301      	movs	r3, #1
 8000b24:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8000b28:	e00c      	b.n	8000b44 <HAL_ETH_ReadPHYRegister+0x6a>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b2a:	f7ff fd55 	bl	80005d8 <HAL_GetTick>
 8000b2e:	1bc0      	subs	r0, r0, r7
 8000b30:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b34:	d307      	bcc.n	8000b46 <HAL_ETH_ReadPHYRegister+0x6c>
      heth->State= HAL_ETH_STATE_READY;
 8000b36:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000b38:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000b3a:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
}
 8000b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000b46:	6833      	ldr	r3, [r6, #0]
 8000b48:	691c      	ldr	r4, [r3, #16]
 8000b4a:	e7e2      	b.n	8000b12 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	e7f9      	b.n	8000b44 <HAL_ETH_ReadPHYRegister+0x6a>

08000b50 <HAL_ETH_WritePHYRegister>:
{
 8000b50:	b570      	push	{r4, r5, r6, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b52:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000b56:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b58:	2b42      	cmp	r3, #66	; 0x42
 8000b5a:	d02f      	beq.n	8000bbc <HAL_ETH_WritePHYRegister+0x6c>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b5c:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b5e:	0189      	lsls	r1, r1, #6
 8000b60:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b62:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b66:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b6a:	8a2c      	ldrh	r4, [r5, #16]
  tmpreg = heth->Instance->MACMIIAR;
 8000b6c:	6803      	ldr	r3, [r0, #0]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b6e:	02e4      	lsls	r4, r4, #11
  tmpreg = heth->Instance->MACMIIAR;
 8000b70:	6918      	ldr	r0, [r3, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000b72:	b2a4      	uxth	r4, r4
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000b74:	615a      	str	r2, [r3, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b76:	f000 001c 	and.w	r0, r0, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b7a:	430c      	orrs	r4, r1
 8000b7c:	4304      	orrs	r4, r0
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000b7e:	f044 0403 	orr.w	r4, r4, #3
  heth->Instance->MACMIIAR = tmpreg;
 8000b82:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000b84:	f7ff fd28 	bl	80005d8 <HAL_GetTick>
 8000b88:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b8a:	f014 0401 	ands.w	r4, r4, #1
 8000b8e:	d104      	bne.n	8000b9a <HAL_ETH_WritePHYRegister+0x4a>
  heth->State = HAL_ETH_STATE_READY;
 8000b90:	2301      	movs	r3, #1
  return HAL_OK; 
 8000b92:	4620      	mov	r0, r4
  heth->State = HAL_ETH_STATE_READY;
 8000b94:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
  return HAL_OK; 
 8000b98:	e00c      	b.n	8000bb4 <HAL_ETH_WritePHYRegister+0x64>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000b9a:	f7ff fd1d 	bl	80005d8 <HAL_GetTick>
 8000b9e:	1b80      	subs	r0, r0, r6
 8000ba0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000ba4:	d307      	bcc.n	8000bb6 <HAL_ETH_WritePHYRegister+0x66>
      heth->State= HAL_ETH_STATE_READY;
 8000ba6:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000ba8:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000baa:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8000bb4:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000bb6:	682b      	ldr	r3, [r5, #0]
 8000bb8:	691c      	ldr	r4, [r3, #16]
 8000bba:	e7e6      	b.n	8000b8a <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	e7f9      	b.n	8000bb4 <HAL_ETH_WritePHYRegister+0x64>

08000bc0 <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000bc0:	2300      	movs	r3, #0
{
 8000bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000bc4:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000bc6:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	f000 80dd 	beq.w	8000d88 <HAL_ETH_Init+0x1c8>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000bce:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bd6:	b91b      	cbnz	r3, 8000be0 <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000bd8:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000bdc:	f00f fc32 	bl	8010444 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be0:	4b6a      	ldr	r3, [pc, #424]	; (8000d8c <HAL_ETH_Init+0x1cc>)
 8000be2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000be8:	645a      	str	r2, [r3, #68]	; 0x44
 8000bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf0:	9301      	str	r3, [sp, #4]
 8000bf2:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000bf4:	4b66      	ldr	r3, [pc, #408]	; (8000d90 <HAL_ETH_Init+0x1d0>)
 8000bf6:	685a      	ldr	r2, [r3, #4]
 8000bf8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000bfc:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000bfe:	685a      	ldr	r2, [r3, #4]
 8000c00:	6a21      	ldr	r1, [r4, #32]
 8000c02:	430a      	orrs	r2, r1
 8000c04:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	f042 0201 	orr.w	r2, r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c14:	f7ff fce0 	bl	80005d8 <HAL_GetTick>
 8000c18:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	07d0      	lsls	r0, r2, #31
 8000c24:	d41d      	bmi.n	8000c62 <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000c26:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c28:	f001 f86a 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c2c:	4b59      	ldr	r3, [pc, #356]	; (8000d94 <HAL_ETH_Init+0x1d4>)
 8000c2e:	4a5a      	ldr	r2, [pc, #360]	; (8000d98 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000c30:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c34:	4403      	add	r3, r0
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d222      	bcs.n	8000c80 <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c3a:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c3e:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c44:	2100      	movs	r1, #0
 8000c46:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c48:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c4a:	f7ff ff81 	bl	8000b50 <HAL_ETH_WritePHYRegister>
 8000c4e:	4605      	mov	r5, r0
 8000c50:	b368      	cbz	r0, 8000cae <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000c52:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c54:	2101      	movs	r1, #1
 8000c56:	4620      	mov	r0, r4
 8000c58:	f7ff fd5e 	bl	8000718 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c5c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c60:	e00b      	b.n	8000c7a <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c62:	f7ff fcb9 	bl	80005d8 <HAL_GetTick>
 8000c66:	1b40      	subs	r0, r0, r5
 8000c68:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c6c:	d9d5      	bls.n	8000c1a <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c6e:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c70:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c72:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000c7a:	4628      	mov	r0, r5
 8000c7c:	b003      	add	sp, #12
 8000c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000c80:	4b46      	ldr	r3, [pc, #280]	; (8000d9c <HAL_ETH_Init+0x1dc>)
 8000c82:	4a47      	ldr	r2, [pc, #284]	; (8000da0 <HAL_ETH_Init+0x1e0>)
 8000c84:	4403      	add	r3, r0
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d802      	bhi.n	8000c90 <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000c8a:	f045 050c 	orr.w	r5, r5, #12
 8000c8e:	e7d6      	b.n	8000c3e <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000c90:	4b44      	ldr	r3, [pc, #272]	; (8000da4 <HAL_ETH_Init+0x1e4>)
 8000c92:	4a45      	ldr	r2, [pc, #276]	; (8000da8 <HAL_ETH_Init+0x1e8>)
 8000c94:	4403      	add	r3, r0
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d3d1      	bcc.n	8000c3e <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000c9a:	4b44      	ldr	r3, [pc, #272]	; (8000dac <HAL_ETH_Init+0x1ec>)
 8000c9c:	4a44      	ldr	r2, [pc, #272]	; (8000db0 <HAL_ETH_Init+0x1f0>)
 8000c9e:	4403      	add	r3, r0
 8000ca0:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000ca2:	bf94      	ite	ls
 8000ca4:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000ca8:	f045 0510 	orrhi.w	r5, r5, #16
 8000cac:	e7c7      	b.n	8000c3e <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000cae:	20ff      	movs	r0, #255	; 0xff
 8000cb0:	f7ff fc98 	bl	80005e4 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d054      	beq.n	8000d64 <HAL_ETH_Init+0x1a4>
    tickstart = HAL_GetTick();
 8000cba:	f7ff fc8d 	bl	80005d8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cbe:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cc2:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cc4:	466a      	mov	r2, sp
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff ff06 	bl	8000ada <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cce:	f7ff fc83 	bl	80005d8 <HAL_GetTick>
 8000cd2:	1b80      	subs	r0, r0, r6
 8000cd4:	42b8      	cmp	r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000cd8:	2101      	movs	r1, #1
 8000cda:	4620      	mov	r0, r4
 8000cdc:	f7ff fd1c 	bl	8000718 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000ce0:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000ce2:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000ce4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000cee:	e7c4      	b.n	8000c7a <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000cf0:	9b00      	ldr	r3, [sp, #0]
 8000cf2:	0759      	lsls	r1, r3, #29
 8000cf4:	d5e6      	bpl.n	8000cc4 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000cf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f7ff ff27 	bl	8000b50 <HAL_ETH_WritePHYRegister>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d1a5      	bne.n	8000c52 <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000d06:	f7ff fc67 	bl	80005d8 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d0a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d0e:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d10:	466a      	mov	r2, sp
 8000d12:	2101      	movs	r1, #1
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff fee0 	bl	8000ada <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d1a:	f7ff fc5d 	bl	80005d8 <HAL_GetTick>
 8000d1e:	1b80      	subs	r0, r0, r6
 8000d20:	42b8      	cmp	r0, r7
 8000d22:	d8d9      	bhi.n	8000cd8 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d24:	9b00      	ldr	r3, [sp, #0]
 8000d26:	069a      	lsls	r2, r3, #26
 8000d28:	d5f2      	bpl.n	8000d10 <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d2a:	466a      	mov	r2, sp
 8000d2c:	2110      	movs	r1, #16
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f7ff fed3 	bl	8000ada <HAL_ETH_ReadPHYRegister>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d18c      	bne.n	8000c52 <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d38:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d3a:	f013 0204 	ands.w	r2, r3, #4
 8000d3e:	bf18      	it	ne
 8000d40:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d44:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d46:	bf58      	it	pl
 8000d48:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8000d4c:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d4e:	bf4c      	ite	mi
 8000d50:	60a0      	strmi	r0, [r4, #8]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d52:	60a3      	strpl	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d54:	2100      	movs	r1, #0
 8000d56:	4620      	mov	r0, r4
 8000d58:	f7ff fcde 	bl	8000718 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d62:	e78a      	b.n	8000c7a <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000d64:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000d68:	4629      	mov	r1, r5
 8000d6a:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000d6c:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000d6e:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d72:	b292      	uxth	r2, r2
 8000d74:	f7ff feec 	bl	8000b50 <HAL_ETH_WritePHYRegister>
 8000d78:	2800      	cmp	r0, #0
 8000d7a:	f47f af6a 	bne.w	8000c52 <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000d7e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000d82:	f7ff fc2f 	bl	80005e4 <HAL_Delay>
 8000d86:	e7e5      	b.n	8000d54 <HAL_ETH_Init+0x194>
    return HAL_ERROR;
 8000d88:	2501      	movs	r5, #1
 8000d8a:	e776      	b.n	8000c7a <HAL_ETH_Init+0xba>
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40013800 	.word	0x40013800
 8000d94:	feced300 	.word	0xfeced300
 8000d98:	00e4e1c0 	.word	0x00e4e1c0
 8000d9c:	fde9f140 	.word	0xfde9f140
 8000da0:	017d783f 	.word	0x017d783f
 8000da4:	fc6c7900 	.word	0xfc6c7900
 8000da8:	02625a00 	.word	0x02625a00
 8000dac:	fa0a1f00 	.word	0xfa0a1f00
 8000db0:	02faf07f 	.word	0x02faf07f

08000db4 <HAL_ETH_Start>:
{  
 8000db4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(heth);
 8000db6:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
{  
 8000dba:	4604      	mov	r4, r0
 8000dbc:	2002      	movs	r0, #2
  __HAL_LOCK(heth);
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d033      	beq.n	8000e2a <HAL_ETH_Start+0x76>
 8000dc2:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000dc4:	2500      	movs	r5, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dc6:	6823      	ldr	r3, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000dc8:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000dcc:	4630      	mov	r0, r6
  __IO uint32_t tmpreg = 0;
 8000dce:	9501      	str	r5, [sp, #4]
  __HAL_LOCK(heth);
 8000dd0:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	f042 0208 	orr.w	r2, r2, #8
 8000dda:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000de0:	f7ff fc00 	bl	80005e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000de4:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000de6:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000de8:	6823      	ldr	r3, [r4, #0]
 8000dea:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000dec:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	f042 0204 	orr.w	r2, r2, #4
 8000df4:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000dfa:	f7ff fbf3 	bl	80005e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000dfe:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e00:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 8000e02:	9a00      	ldr	r2, [sp, #0]
 8000e04:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e06:	f7ff fc71 	bl	80006ec <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e0a:	6822      	ldr	r2, [r4, #0]
 8000e0c:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e10:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e12:	58d1      	ldr	r1, [r2, r3]
 8000e14:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e18:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e1a:	58d1      	ldr	r1, [r2, r3]
 8000e1c:	f041 0102 	orr.w	r1, r1, #2
 8000e20:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e22:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e26:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8000e2a:	b002      	add	sp, #8
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e34:	2300      	movs	r3, #0
{
 8000e36:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e38:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 800100c <HAL_GPIO_Init+0x1dc>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3c:	4a71      	ldr	r2, [pc, #452]	; (8001004 <HAL_GPIO_Init+0x1d4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e3e:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8001010 <HAL_GPIO_Init+0x1e0>
    ioposition = ((uint32_t)0x01) << position;
 8000e42:	2701      	movs	r7, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e44:	680c      	ldr	r4, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8000e46:	409f      	lsls	r7, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e48:	ea07 0504 	and.w	r5, r7, r4
    if(iocurrent == ioposition)
 8000e4c:	ea37 0404 	bics.w	r4, r7, r4
 8000e50:	f040 80be 	bne.w	8000fd0 <HAL_GPIO_Init+0x1a0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	684c      	ldr	r4, [r1, #4]
 8000e56:	f024 0a10 	bic.w	sl, r4, #16
 8000e5a:	f1ba 0f02 	cmp.w	sl, #2
 8000e5e:	d116      	bne.n	8000e8e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->AFR[position >> 3];
 8000e60:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e64:	f003 0b07 	and.w	fp, r3, #7
 8000e68:	f04f 0c0f 	mov.w	ip, #15
 8000e6c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8000e70:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000e74:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e78:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e7c:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e80:	690e      	ldr	r6, [r1, #16]
 8000e82:	fa06 f60b 	lsl.w	r6, r6, fp
 8000e86:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000e8a:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 8000e8e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e92:	f04f 0c03 	mov.w	ip, #3
      temp = GPIOx->MODER;
 8000e96:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e9e:	fa0c fc0e 	lsl.w	ip, ip, lr
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea2:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ea6:	ea6f 060c 	mvn.w	r6, ip
 8000eaa:	ea2b 0b0c 	bic.w	fp, fp, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eae:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eb2:	9601      	str	r6, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000eb4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8000eb8:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000ebc:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec0:	d815      	bhi.n	8000eee <HAL_GPIO_Init+0xbe>
        temp = GPIOx->OSPEEDR; 
 8000ec2:	f8d0 c008 	ldr.w	ip, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ec6:	ea06 0c0c 	and.w	ip, r6, ip
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eca:	68ce      	ldr	r6, [r1, #12]
 8000ecc:	fa06 fa0e 	lsl.w	sl, r6, lr
 8000ed0:	ea4a 0c0c 	orr.w	ip, sl, ip
        GPIOx->OSPEEDR = temp;
 8000ed4:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ed8:	f8d0 c004 	ldr.w	ip, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000edc:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ee0:	f3c4 1c00 	ubfx	ip, r4, #4, #1
 8000ee4:	fa0c fc03 	lsl.w	ip, ip, r3
 8000ee8:	ea4c 0707 	orr.w	r7, ip, r7
        GPIOx->OTYPER = temp;
 8000eec:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000eee:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ef0:	9e01      	ldr	r6, [sp, #4]
 8000ef2:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ef4:	688e      	ldr	r6, [r1, #8]
 8000ef6:	fa06 f60e 	lsl.w	r6, r6, lr
 8000efa:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8000efc:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efe:	00e6      	lsls	r6, r4, #3
 8000f00:	d566      	bpl.n	8000fd0 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000f06:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f0a:	f003 0c03 	and.w	ip, r3, #3
 8000f0e:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000f16:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f1a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000f22:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f26:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000f2a:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000f2e:	9603      	str	r6, [sp, #12]
 8000f30:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f32:	fa0e f60c 	lsl.w	r6, lr, ip
        temp = SYSCFG->EXTICR[position >> 2];
 8000f36:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f3a:	ea2a 0e06 	bic.w	lr, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f3e:	4e32      	ldr	r6, [pc, #200]	; (8001008 <HAL_GPIO_Init+0x1d8>)
 8000f40:	42b0      	cmp	r0, r6
 8000f42:	d04c      	beq.n	8000fde <HAL_GPIO_Init+0x1ae>
 8000f44:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f48:	42b0      	cmp	r0, r6
 8000f4a:	d04a      	beq.n	8000fe2 <HAL_GPIO_Init+0x1b2>
 8000f4c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f50:	42b0      	cmp	r0, r6
 8000f52:	d048      	beq.n	8000fe6 <HAL_GPIO_Init+0x1b6>
 8000f54:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f58:	42b0      	cmp	r0, r6
 8000f5a:	d046      	beq.n	8000fea <HAL_GPIO_Init+0x1ba>
 8000f5c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f60:	42b0      	cmp	r0, r6
 8000f62:	d044      	beq.n	8000fee <HAL_GPIO_Init+0x1be>
 8000f64:	4548      	cmp	r0, r9
 8000f66:	d044      	beq.n	8000ff2 <HAL_GPIO_Init+0x1c2>
 8000f68:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000f6c:	42b0      	cmp	r0, r6
 8000f6e:	d042      	beq.n	8000ff6 <HAL_GPIO_Init+0x1c6>
 8000f70:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f74:	42b0      	cmp	r0, r6
 8000f76:	d040      	beq.n	8000ffa <HAL_GPIO_Init+0x1ca>
 8000f78:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f7c:	42b0      	cmp	r0, r6
 8000f7e:	d03e      	beq.n	8000ffe <HAL_GPIO_Init+0x1ce>
 8000f80:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000f84:	42b0      	cmp	r0, r6
 8000f86:	bf0c      	ite	eq
 8000f88:	2609      	moveq	r6, #9
 8000f8a:	260a      	movne	r6, #10
 8000f8c:	fa06 f60c 	lsl.w	r6, r6, ip
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f90:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f94:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f98:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000f9e:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	bf0c      	ite	eq
 8000fa2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fa4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000faa:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000fac:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fae:	bf0c      	ite	eq
 8000fb0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fb2:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fb4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000fb8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000fba:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	bf0c      	ite	eq
 8000fbe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000fc0:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fc2:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000fc4:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000fc6:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	bf54      	ite	pl
 8000fca:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000fcc:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000fce:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	2b10      	cmp	r3, #16
 8000fd4:	f47f af35 	bne.w	8000e42 <HAL_GPIO_Init+0x12>
      }
    }
  }
}
 8000fd8:	b005      	add	sp, #20
 8000fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fde:	2600      	movs	r6, #0
 8000fe0:	e7d4      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8000fe2:	2601      	movs	r6, #1
 8000fe4:	e7d2      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8000fe6:	2602      	movs	r6, #2
 8000fe8:	e7d0      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8000fea:	2603      	movs	r6, #3
 8000fec:	e7ce      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8000fee:	2604      	movs	r6, #4
 8000ff0:	e7cc      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8000ff2:	2605      	movs	r6, #5
 8000ff4:	e7ca      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8000ff6:	2606      	movs	r6, #6
 8000ff8:	e7c8      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8000ffa:	2607      	movs	r6, #7
 8000ffc:	e7c6      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8000ffe:	2608      	movs	r6, #8
 8001000:	e7c4      	b.n	8000f8c <HAL_GPIO_Init+0x15c>
 8001002:	bf00      	nop
 8001004:	40013c00 	.word	0x40013c00
 8001008:	40020000 	.word	0x40020000
 800100c:	40023800 	.word	0x40023800
 8001010:	40021400 	.word	0x40021400

08001014 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001014:	b10a      	cbz	r2, 800101a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001016:	6181      	str	r1, [r0, #24]
  }
}
 8001018:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800101a:	0409      	lsls	r1, r1, #16
 800101c:	e7fb      	b.n	8001016 <HAL_GPIO_WritePin+0x2>

0800101e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800101e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001022:	4605      	mov	r5, r0
 8001024:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001026:	f895 42b8 	ldrb.w	r4, [r5, #696]	; 0x2b8
{
 800102a:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 800102e:	2c01      	cmp	r4, #1
{
 8001030:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 8001034:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8001038:	d025      	beq.n	8001086 <HAL_HCD_HC_Init+0x68>
 800103a:	2401      	movs	r4, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 800103c:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 800103e:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001040:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
 8001044:	f885 42b8 	strb.w	r4, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001048:	2428      	movs	r4, #40	; 0x28
 800104a:	fb04 5401 	mla	r4, r4, r1, r5
 800104e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001052:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001056:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800105a:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800105e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 8001062:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8001066:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 800106a:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 800106e:	6828      	ldr	r0, [r5, #0]
 8001070:	f8cd e000 	str.w	lr, [sp]
 8001074:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8001078:	f001 fe20 	bl	8002cbc <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800107c:	f885 72b8 	strb.w	r7, [r5, #696]	; 0x2b8

  return status;
}
 8001080:	b005      	add	sp, #20
 8001082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 8001086:	2002      	movs	r0, #2
 8001088:	e7fa      	b.n	8001080 <HAL_HCD_HC_Init+0x62>

0800108a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800108a:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800108c:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 8001090:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001092:	2b01      	cmp	r3, #1
 8001094:	d009      	beq.n	80010aa <HAL_HCD_HC_Halt+0x20>
 8001096:	2301      	movs	r3, #1
 8001098:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800109c:	6800      	ldr	r0, [r0, #0]
 800109e:	f001 fe8d 	bl	8002dbc <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80010a2:	2000      	movs	r0, #0
 80010a4:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 80010a8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80010aa:	2002      	movs	r0, #2
 80010ac:	e7fc      	b.n	80010a8 <HAL_HCD_HC_Halt+0x1e>

080010ae <HAL_HCD_Init>:
{
 80010ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hhcd == NULL)
 80010b2:	4607      	mov	r7, r0
{
 80010b4:	b08a      	sub	sp, #40	; 0x28
  if(hhcd == NULL)
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d03b      	beq.n	8001132 <HAL_HCD_Init+0x84>
  if(hhcd->State == HAL_HCD_STATE_RESET)
 80010ba:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
 80010be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010c2:	b91b      	cbnz	r3, 80010cc <HAL_HCD_Init+0x1e>
    hhcd->Lock = HAL_UNLOCKED;
 80010c4:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80010c8:	f00f ffac 	bl	8011024 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80010cc:	2303      	movs	r3, #3
  __HAL_HCD_DISABLE(hhcd);
 80010ce:	463c      	mov	r4, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010d0:	466d      	mov	r5, sp
 80010d2:	f107 0804 	add.w	r8, r7, #4
  hhcd->State = HAL_HCD_STATE_BUSY;
 80010d6:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80010da:	463e      	mov	r6, r7
  __HAL_HCD_DISABLE(hhcd);
 80010dc:	f854 0b10 	ldr.w	r0, [r4], #16
 80010e0:	f001 fcb3 	bl	8002a4a <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80010f8:	6838      	ldr	r0, [r7, #0]
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80010fa:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80010fc:	f001 fc64 	bl	80029c8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001100:	f856 0b10 	ldr.w	r0, [r6], #16
 8001104:	2101      	movs	r1, #1
 8001106:	f001 fca6 	bl	8002a56 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800110a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800110c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001112:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001116:	e885 0003 	stmia.w	r5, {r0, r1}
 800111a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800111e:	6838      	ldr	r0, [r7, #0]
 8001120:	f001 fd56 	bl	8002bd0 <USB_HostInit>
  hhcd->State= HAL_HCD_STATE_READY;
 8001124:	2301      	movs	r3, #1
  return HAL_OK;
 8001126:	2000      	movs	r0, #0
  hhcd->State= HAL_HCD_STATE_READY;
 8001128:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 800112c:	b00a      	add	sp, #40	; 0x28
 800112e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001132:	2001      	movs	r0, #1
 8001134:	e7fa      	b.n	800112c <HAL_HCD_Init+0x7e>

08001136 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t* pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001136:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001138:	f89d 7014 	ldrb.w	r7, [sp, #20]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800113c:	2428      	movs	r4, #40	; 0x28
{
 800113e:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_type  = ep_type;

  if(token == 0U)
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001140:	2f00      	cmp	r7, #0
  hhcd->hc[ch_num].ep_is_in = direction;
 8001142:	fb04 0c01 	mla	ip, r4, r1, r0
{
 8001146:	f8bd 501c 	ldrh.w	r5, [sp, #28]
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800114a:	bf14      	ite	ne
 800114c:	f04f 0e02 	movne.w	lr, #2
 8001150:	f04f 0e03 	moveq.w	lr, #3
  hhcd->hc[ch_num].ep_is_in = direction;
 8001154:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001158:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if(token == 0U)
 800115c:	f88c e042 	strb.w	lr, [ip, #66]	; 0x42
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch(ep_type)
 8001160:	2b03      	cmp	r3, #3
 8001162:	d817      	bhi.n	8001194 <HAL_HCD_HC_SubmitRequest+0x5e>
 8001164:	e8df f003 	tbb	[pc, r3]
 8001168:	2b2b3c02 	.word	0x2b2b3c02
  {
  case EP_TYPE_CTRL:
    if((token == 1U) && (direction == 0U)) /*send data */
 800116c:	2f01      	cmp	r7, #1
 800116e:	d111      	bne.n	8001194 <HAL_HCD_HC_SubmitRequest+0x5e>
 8001170:	b982      	cbnz	r2, 8001194 <HAL_HCD_HC_SubmitRequest+0x5e>
    {
      if (length == 0U)
 8001172:	2328      	movs	r3, #40	; 0x28
      { /* For Status OUT stage, Length==0, Status Out PID = 1 */
        hhcd->hc[ch_num].toggle_out = 1U;
 8001174:	fb03 0301 	mla	r3, r3, r1, r0
      if (length == 0U)
 8001178:	b935      	cbnz	r5, 8001188 <HAL_HCD_HC_SubmitRequest+0x52>
        hhcd->hc[ch_num].toggle_out = 1U;
 800117a:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
      { /* Put the PID 0 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
      }
      else
      { /* Put the PID 1 */
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800117e:	2328      	movs	r3, #40	; 0x28
 8001180:	2202      	movs	r2, #2
 8001182:	fb03 0301 	mla	r3, r3, r1, r0
 8001186:	e003      	b.n	8001190 <HAL_HCD_HC_SubmitRequest+0x5a>
      if (hhcd->hc[ch_num].toggle_out == 0U)
 8001188:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 800118c:	2c00      	cmp	r4, #0
 800118e:	d1f6      	bne.n	800117e <HAL_HCD_HC_SubmitRequest+0x48>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  default:
    break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001194:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001196:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001198:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 800119c:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011a0:	4619      	mov	r1, r3
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80011a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].state = HC_IDLE;
 80011a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011aa:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].xfer_count = 0U;
 80011ac:	64da      	str	r2, [r3, #76]	; 0x4c
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011ae:	7c02      	ldrb	r2, [r0, #16]
 80011b0:	6800      	ldr	r0, [r0, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80011b2:	e9c3 6511 	strd	r6, r5, [r3, #68]	; 0x44
}
 80011b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80011ba:	f001 be63 	b.w	8002e84 <USB_HC_StartXfer>
      if ( hhcd->hc[ch_num].toggle_out == 0U)
 80011be:	fb04 0401 	mla	r4, r4, r1, r0
    if(direction == 0U)
 80011c2:	b92a      	cbnz	r2, 80011d0 <HAL_HCD_HC_SubmitRequest+0x9a>
      if ( hhcd->hc[ch_num].toggle_out == 0U)
 80011c4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80011c8:	b943      	cbnz	r3, 80011dc <HAL_HCD_HC_SubmitRequest+0xa6>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80011ca:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80011ce:	e7e1      	b.n	8001194 <HAL_HCD_HC_SubmitRequest+0x5e>
      if( hhcd->hc[ch_num].toggle_in == 0U)
 80011d0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80011d4:	b913      	cbnz	r3, 80011dc <HAL_HCD_HC_SubmitRequest+0xa6>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80011d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    break;
 80011da:	e7db      	b.n	8001194 <HAL_HCD_HC_SubmitRequest+0x5e>
        hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80011dc:	2302      	movs	r3, #2
 80011de:	e7fa      	b.n	80011d6 <HAL_HCD_HC_SubmitRequest+0xa0>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80011e0:	fb04 0401 	mla	r4, r4, r1, r0
 80011e4:	2300      	movs	r3, #0
 80011e6:	e7f6      	b.n	80011d6 <HAL_HCD_HC_SubmitRequest+0xa0>

080011e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80011e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80011ec:	6806      	ldr	r6, [r0, #0]
{
 80011ee:	b085      	sub	sp, #20
 80011f0:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80011f2:	4630      	mov	r0, r6
 80011f4:	f001 fc8d 	bl	8002b12 <USB_GetMode>
 80011f8:	2801      	cmp	r0, #1
 80011fa:	f040 80ea 	bne.w	80013d2 <HAL_HCD_IRQHandler+0x1ea>
  {
    /* Avoid spurious interrupt */
    if(__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80011fe:	6828      	ldr	r0, [r5, #0]
 8001200:	f001 fc83 	bl	8002b0a <USB_ReadInterrupts>
 8001204:	2800      	cmp	r0, #0
 8001206:	f000 80e4 	beq.w	80013d2 <HAL_HCD_IRQHandler+0x1ea>
    {
      return;
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800120a:	6828      	ldr	r0, [r5, #0]
 800120c:	f001 fc7d 	bl	8002b0a <USB_ReadInterrupts>
 8001210:	0280      	lsls	r0, r0, #10
 8001212:	d503      	bpl.n	800121c <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001214:	682b      	ldr	r3, [r5, #0]
 8001216:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800121a:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800121c:	6828      	ldr	r0, [r5, #0]
 800121e:	f001 fc74 	bl	8002b0a <USB_ReadInterrupts>
 8001222:	02c1      	lsls	r1, r0, #11
 8001224:	d503      	bpl.n	800122e <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800122c:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800122e:	6828      	ldr	r0, [r5, #0]
 8001230:	f001 fc6b 	bl	8002b0a <USB_ReadInterrupts>
 8001234:	0142      	lsls	r2, r0, #5
 8001236:	d503      	bpl.n	8001240 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800123e:	615a      	str	r2, [r3, #20]
    }

    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001240:	6828      	ldr	r0, [r5, #0]
 8001242:	f001 fc62 	bl	8002b0a <USB_ReadInterrupts>
 8001246:	0783      	lsls	r3, r0, #30
 8001248:	d502      	bpl.n	8001250 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800124a:	682b      	ldr	r3, [r5, #0]
 800124c:	2202      	movs	r2, #2
 800124e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001250:	6828      	ldr	r0, [r5, #0]
 8001252:	f001 fc5a 	bl	8002b0a <USB_ReadInterrupts>
 8001256:	0087      	lsls	r7, r0, #2
 8001258:	d510      	bpl.n	800127c <HAL_HCD_IRQHandler+0x94>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 800125a:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
        USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG );

      /* Handle Host Port Interrupts */
      HAL_HCD_Disconnect_Callback(hhcd);
 800125e:	4628      	mov	r0, r5
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001260:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001264:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8001268:	f00f ff24 	bl	80110b4 <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800126c:	2101      	movs	r1, #1
 800126e:	6828      	ldr	r0, [r5, #0]
 8001270:	f001 fc53 	bl	8002b1a <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800127a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800127c:	6828      	ldr	r0, [r5, #0]
 800127e:	f001 fc44 	bl	8002b0a <USB_ReadInterrupts>
 8001282:	01c4      	lsls	r4, r0, #7
 8001284:	d543      	bpl.n	800130e <HAL_HCD_IRQHandler+0x126>
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler (HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001286:	682c      	ldr	r4, [r5, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001288:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 800128c:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 800128e:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8001292:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 8001294:	9b03      	ldr	r3, [sp, #12]
 8001296:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800129a:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800129c:	9b02      	ldr	r3, [sp, #8]
 800129e:	0798      	lsls	r0, r3, #30
 80012a0:	d50d      	bpl.n	80012be <HAL_HCD_IRQHandler+0xd6>
  {
    if((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80012a2:	9b02      	ldr	r3, [sp, #8]
 80012a4:	07d9      	lsls	r1, r3, #31
 80012a6:	d506      	bpl.n	80012b6 <HAL_HCD_IRQHandler+0xce>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80012a8:	69a3      	ldr	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 80012aa:	4628      	mov	r0, r5
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80012ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80012b0:	61a3      	str	r3, [r4, #24]
      HAL_HCD_Connect_Callback(hhcd);
 80012b2:	f00f fefb 	bl	80110ac <HAL_HCD_Connect_Callback>
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80012b6:	9b03      	ldr	r3, [sp, #12]
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80012be:	9b02      	ldr	r3, [sp, #8]
 80012c0:	071a      	lsls	r2, r3, #28
 80012c2:	d51a      	bpl.n	80012fa <HAL_HCD_IRQHandler+0x112>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80012c4:	9b03      	ldr	r3, [sp, #12]
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	9303      	str	r3, [sp, #12]

    if((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80012cc:	9b02      	ldr	r3, [sp, #8]
 80012ce:	075b      	lsls	r3, r3, #29
 80012d0:	f140 808a 	bpl.w	80013e8 <HAL_HCD_IRQHandler+0x200>
    {
      if(hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80012d4:	69a9      	ldr	r1, [r5, #24]
 80012d6:	2902      	cmp	r1, #2
 80012d8:	d17e      	bne.n	80013d8 <HAL_HCD_IRQHandler+0x1f0>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80012da:	9b02      	ldr	r3, [sp, #8]
 80012dc:	6828      	ldr	r0, [r5, #0]
 80012de:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80012e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80012e6:	bf18      	it	ne
 80012e8:	2101      	movne	r1, #1
 80012ea:	f001 fc16 	bl	8002b1a <USB_InitFSLSPClkSel>
        {
          USBx_HOST->HFIR = 60000U;
        }
      }

      HAL_HCD_PortEnabled_Callback(hhcd);
 80012ee:	4628      	mov	r0, r5
 80012f0:	f00f fee8 	bl	80110c4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 80012f4:	4628      	mov	r0, r5
 80012f6:	f00f fed9 	bl	80110ac <HAL_HCD_Connect_Callback>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80012fa:	9b02      	ldr	r3, [sp, #8]
 80012fc:	069f      	lsls	r7, r3, #26
 80012fe:	d503      	bpl.n	8001308 <HAL_HCD_IRQHandler+0x120>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001300:	9b03      	ldr	r3, [sp, #12]
 8001302:	f043 0320 	orr.w	r3, r3, #32
 8001306:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001308:	9b03      	ldr	r3, [sp, #12]
 800130a:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800130e:	6828      	ldr	r0, [r5, #0]
 8001310:	f001 fbfb 	bl	8002b0a <USB_ReadInterrupts>
 8001314:	0700      	lsls	r0, r0, #28
 8001316:	d505      	bpl.n	8001324 <HAL_HCD_IRQHandler+0x13c>
      HAL_HCD_SOF_Callback(hhcd);
 8001318:	4628      	mov	r0, r5
 800131a:	f00f fec3 	bl	80110a4 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800131e:	682b      	ldr	r3, [r5, #0]
 8001320:	2208      	movs	r2, #8
 8001322:	615a      	str	r2, [r3, #20]
    if(__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001324:	6828      	ldr	r0, [r5, #0]
 8001326:	f001 fbf0 	bl	8002b0a <USB_ReadInterrupts>
 800132a:	0181      	lsls	r1, r0, #6
 800132c:	d512      	bpl.n	8001354 <HAL_HCD_IRQHandler+0x16c>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800132e:	6828      	ldr	r0, [r5, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001330:	f04f 0900 	mov.w	r9, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001334:	f001 fd3d 	bl	8002db2 <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001338:	2728      	movs	r7, #40	; 0x28
 800133a:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800133e:	f04f 0802 	mov.w	r8, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001342:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	68ab      	ldr	r3, [r5, #8]
 8001348:	6828      	ldr	r0, [r5, #0]
 800134a:	454b      	cmp	r3, r9
 800134c:	d85b      	bhi.n	8001406 <HAL_HCD_IRQHandler+0x21e>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800134e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001352:	6143      	str	r3, [r0, #20]
    if((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001354:	6828      	ldr	r0, [r5, #0]
 8001356:	f001 fbd8 	bl	8002b0a <USB_ReadInterrupts>
 800135a:	06c3      	lsls	r3, r0, #27
 800135c:	d539      	bpl.n	80013d2 <HAL_HCD_IRQHandler+0x1ea>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800135e:	682e      	ldr	r6, [r5, #0]
 8001360:	69b3      	ldr	r3, [r6, #24]
 8001362:	f023 0310 	bic.w	r3, r3, #16
 8001366:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 8001368:	6a37      	ldr	r7, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800136a:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 800136e:	2b02      	cmp	r3, #2
 8001370:	d12a      	bne.n	80013c8 <HAL_HCD_IRQHandler+0x1e0>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001372:	f3c7 180a 	ubfx	r8, r7, #4, #11
    if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void  *)0))
 8001376:	f1b8 0f00 	cmp.w	r8, #0
 800137a:	d025      	beq.n	80013c8 <HAL_HCD_IRQHandler+0x1e0>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800137c:	f007 070f 	and.w	r7, r7, #15
    if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void  *)0))
 8001380:	2428      	movs	r4, #40	; 0x28
 8001382:	fb04 5407 	mla	r4, r4, r7, r5
 8001386:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001388:	b1f1      	cbz	r1, 80013c8 <HAL_HCD_IRQHandler+0x1e0>
      (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800138a:	4642      	mov	r2, r8
 800138c:	4630      	mov	r0, r6
 800138e:	f001 fbae 	bl	8002aee <USB_ReadPacket>
      hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001392:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001394:	6c63      	ldr	r3, [r4, #68]	; 0x44
      if((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001396:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
      hhcd->hc[ch_num].xfer_count  += pktcnt;
 800139a:	4442      	add	r2, r8
      hhcd->hc[ch_num].xfer_buff += pktcnt;
 800139c:	4443      	add	r3, r8
      hhcd->hc[ch_num].xfer_count  += pktcnt;
 800139e:	64e2      	str	r2, [r4, #76]	; 0x4c
      if((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80013a0:	017a      	lsls	r2, r7, #5
 80013a2:	eb06 1747 	add.w	r7, r6, r7, lsl #5
      hhcd->hc[ch_num].xfer_buff += pktcnt;
 80013a6:	6463      	str	r3, [r4, #68]	; 0x44
      if((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80013a8:	4bba      	ldr	r3, [pc, #744]	; (8001694 <HAL_HCD_IRQHandler+0x4ac>)
 80013aa:	6939      	ldr	r1, [r7, #16]
 80013ac:	400b      	ands	r3, r1
 80013ae:	b15b      	cbz	r3, 80013c8 <HAL_HCD_IRQHandler+0x1e0>
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80013b0:	58b3      	ldr	r3, [r6, r2]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80013b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80013b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80013ba:	50b3      	str	r3, [r6, r2]
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80013bc:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80013c0:	f083 0301 	eor.w	r3, r3, #1
 80013c4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c8:	682a      	ldr	r2, [r5, #0]
 80013ca:	6993      	ldr	r3, [r2, #24]
 80013cc:	f043 0310 	orr.w	r3, r3, #16
 80013d0:	6193      	str	r3, [r2, #24]
}
 80013d2:	b005      	add	sp, #20
 80013d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(hhcd->Init.speed == HCD_SPEED_FULL)
 80013d8:	68eb      	ldr	r3, [r5, #12]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d187      	bne.n	80012ee <HAL_HCD_IRQHandler+0x106>
          USBx_HOST->HFIR = 60000U;
 80013de:	f64e 2260 	movw	r2, #60000	; 0xea60
 80013e2:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
 80013e6:	e782      	b.n	80012ee <HAL_HCD_IRQHandler+0x106>
      HAL_HCD_PortDisabled_Callback(hhcd);
 80013e8:	4628      	mov	r0, r5
 80013ea:	f00f fe6f 	bl	80110cc <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80013ee:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80013f2:	682a      	ldr	r2, [r5, #0]
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |\
 80013f4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80013f8:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80013fc:	6993      	ldr	r3, [r2, #24]
 80013fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	e779      	b.n	80012fa <HAL_HCD_IRQHandler+0x112>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001406:	9a00      	ldr	r2, [sp, #0]
 8001408:	f009 030f 	and.w	r3, r9, #15
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	07da      	lsls	r2, r3, #31
 8001412:	f140 8085 	bpl.w	8001520 <HAL_HCD_IRQHandler+0x338>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001416:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800141a:	9a01      	ldr	r2, [sp, #4]
 800141c:	fa5f f689 	uxtb.w	r6, r9
 8001420:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 8001424:	5899      	ldr	r1, [r3, r2]
 8001426:	eb0b 1446 	add.w	r4, fp, r6, lsl #5
 800142a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800142e:	ea4f 1a46 	mov.w	sl, r6, lsl #5
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001432:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001434:	f000 80ec 	beq.w	8001610 <HAL_HCD_IRQHandler+0x428>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001438:	074b      	lsls	r3, r1, #29
 800143a:	d513      	bpl.n	8001464 <HAL_HCD_IRQHandler+0x27c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800143c:	2104      	movs	r1, #4
 800143e:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001440:	68e1      	ldr	r1, [r4, #12]
 8001442:	f041 0102 	orr.w	r1, r1, #2
 8001446:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001448:	68a1      	ldr	r1, [r4, #8]
 800144a:	0588      	lsls	r0, r1, #22
 800144c:	d539      	bpl.n	80014c2 <HAL_HCD_IRQHandler+0x2da>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800144e:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001450:	4631      	mov	r1, r6
 8001452:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001454:	f043 0302 	orr.w	r3, r3, #2
 8001458:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800145a:	f001 fcaf 	bl	8002dbc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800145e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001462:	e0c8      	b.n	80015f6 <HAL_HCD_IRQHandler+0x40e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001464:	68a1      	ldr	r1, [r4, #8]
 8001466:	0689      	lsls	r1, r1, #26
 8001468:	d502      	bpl.n	8001470 <HAL_HCD_IRQHandler+0x288>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800146a:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800146c:	60a1      	str	r1, [r4, #8]
 800146e:	e7eb      	b.n	8001448 <HAL_HCD_IRQHandler+0x260>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001470:	68a1      	ldr	r1, [r4, #8]
 8001472:	070a      	lsls	r2, r1, #28
 8001474:	d511      	bpl.n	800149a <HAL_HCD_IRQHandler+0x2b2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001476:	68e1      	ldr	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001478:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800147c:	f041 0102 	orr.w	r1, r1, #2
 8001480:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001482:	fb07 5106 	mla	r1, r7, r6, r5
 8001486:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800148a:	2110      	movs	r1, #16
 800148c:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800148e:	2108      	movs	r1, #8
 8001490:	60a1      	str	r1, [r4, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001492:	4631      	mov	r1, r6
 8001494:	f001 fc92 	bl	8002dbc <USB_HC_Halt>
 8001498:	e7d6      	b.n	8001448 <HAL_HCD_IRQHandler+0x260>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800149a:	68a1      	ldr	r1, [r4, #8]
 800149c:	054b      	lsls	r3, r1, #21
 800149e:	d5d3      	bpl.n	8001448 <HAL_HCD_IRQHandler+0x260>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014a0:	68e1      	ldr	r1, [r4, #12]
 80014a2:	f041 0102 	orr.w	r1, r1, #2
 80014a6:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014a8:	4631      	mov	r1, r6
 80014aa:	f001 fc87 	bl	8002dbc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014ae:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80014b0:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014b2:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80014b4:	fb07 5106 	mla	r1, r7, r6, r5
 80014b8:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80014bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c0:	e7d4      	b.n	800146c <HAL_HCD_IRQHandler+0x284>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80014c2:	68a1      	ldr	r1, [r4, #8]
 80014c4:	07c9      	lsls	r1, r1, #31
 80014c6:	d53d      	bpl.n	8001544 <HAL_HCD_IRQHandler+0x35c>
    if (hhcd->Init.dma_enable != 0U)
 80014c8:	6929      	ldr	r1, [r5, #16]
 80014ca:	b149      	cbz	r1, 80014e0 <HAL_HCD_IRQHandler+0x2f8>
                               (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80014cc:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80014ce:	fb07 5c06 	mla	ip, r7, r6, r5
                               (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80014d2:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80014d6:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
 80014da:	1a09      	subs	r1, r1, r0
 80014dc:	f8cc 104c 	str.w	r1, [ip, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 80014e0:	fb07 5c06 	mla	ip, r7, r6, r5
 80014e4:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014e6:	2100      	movs	r1, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 80014e8:	f88c 205d 	strb.w	r2, [ip, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80014ec:	f8cc 1058 	str.w	r1, [ip, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80014f0:	60a2      	str	r2, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL)||
 80014f2:	f89c 103f 	ldrb.w	r1, [ip, #63]	; 0x3f
 80014f6:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 80014fa:	d114      	bne.n	8001526 <HAL_HCD_IRQHandler+0x33e>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014fc:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014fe:	4631      	mov	r1, r6
 8001500:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001508:	f001 fc58 	bl	8002dbc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800150c:	2310      	movs	r3, #16
 800150e:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001510:	fb07 5606 	mla	r6, r7, r6, r5
 8001514:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 8001518:	f083 0301 	eor.w	r3, r3, #1
 800151c:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001520:	f109 0901 	add.w	r9, r9, #1
 8001524:	e70f      	b.n	8001346 <HAL_HCD_IRQHandler+0x15e>
    else if(hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001526:	2903      	cmp	r1, #3
 8001528:	d1f2      	bne.n	8001510 <HAL_HCD_IRQHandler+0x328>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800152a:	f85b 100a 	ldr.w	r1, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800152e:	4628      	mov	r0, r5
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001530:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8001534:	f84b 100a 	str.w	r1, [fp, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001538:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800153a:	f88c 205c 	strb.w	r2, [ip, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800153e:	f00f fdbd 	bl	80110bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8001542:	e7e5      	b.n	8001510 <HAL_HCD_IRQHandler+0x328>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001544:	68a1      	ldr	r1, [r4, #8]
 8001546:	078a      	lsls	r2, r1, #30
 8001548:	d52d      	bpl.n	80015a6 <HAL_HCD_IRQHandler+0x3be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800154a:	68e1      	ldr	r1, [r4, #12]
    if(hhcd->hc[ch_num].state == HC_XFRC)
 800154c:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001550:	f021 0102 	bic.w	r1, r1, #2
 8001554:	60e1      	str	r1, [r4, #12]
    if(hhcd->hc[ch_num].state == HC_XFRC)
 8001556:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 800155a:	2901      	cmp	r1, #1
 800155c:	d102      	bne.n	8001564 <HAL_HCD_IRQHandler+0x37c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800155e:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 8001562:	e113      	b.n	800178c <HAL_HCD_IRQHandler+0x5a4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001564:	2905      	cmp	r1, #5
 8001566:	d0fa      	beq.n	800155e <HAL_HCD_IRQHandler+0x376>
    else if((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001568:	2906      	cmp	r1, #6
 800156a:	d001      	beq.n	8001570 <HAL_HCD_IRQHandler+0x388>
 800156c:	2908      	cmp	r1, #8
 800156e:	d114      	bne.n	800159a <HAL_HCD_IRQHandler+0x3b2>
      hhcd->hc[ch_num].ErrCnt++;
 8001570:	fb07 5006 	mla	r0, r7, r6, r5
 8001574:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001576:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001578:	2903      	cmp	r1, #3
      hhcd->hc[ch_num].ErrCnt++;
 800157a:	6581      	str	r1, [r0, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800157c:	d910      	bls.n	80015a0 <HAL_HCD_IRQHandler+0x3b8>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800157e:	2100      	movs	r1, #0
 8001580:	6581      	str	r1, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001582:	2104      	movs	r1, #4
 8001584:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001588:	f85b 100a 	ldr.w	r1, [fp, sl]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800158c:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001590:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001594:	f84b 100a 	str.w	r1, [fp, sl]
 8001598:	e0f8      	b.n	800178c <HAL_HCD_IRQHandler+0x5a4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800159a:	2903      	cmp	r1, #3
 800159c:	f040 80f6 	bne.w	800178c <HAL_HCD_IRQHandler+0x5a4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80015a0:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 80015a4:	e7f0      	b.n	8001588 <HAL_HCD_IRQHandler+0x3a0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80015a6:	68a1      	ldr	r1, [r4, #8]
 80015a8:	6828      	ldr	r0, [r5, #0]
 80015aa:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 80015ae:	d010      	beq.n	80015d2 <HAL_HCD_IRQHandler+0x3ea>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015b0:	68e3      	ldr	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80015b2:	fb07 5206 	mla	r2, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015b6:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	60e3      	str	r3, [r4, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80015be:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80015c0:	3301      	adds	r3, #1
 80015c2:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 80015c4:	2306      	movs	r3, #6
 80015c6:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015ca:	f001 fbf7 	bl	8002dbc <USB_HC_Halt>
     __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	e011      	b.n	80015f6 <HAL_HCD_IRQHandler+0x40e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80015d2:	68a3      	ldr	r3, [r4, #8]
 80015d4:	06db      	lsls	r3, r3, #27
 80015d6:	d5a3      	bpl.n	8001520 <HAL_HCD_IRQHandler+0x338>
    if(hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80015d8:	fb07 5206 	mla	r2, r7, r6, r5
 80015dc:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d10a      	bne.n	80015fa <HAL_HCD_IRQHandler+0x412>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80015e4:	6591      	str	r1, [r2, #88]	; 0x58
         __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015e6:	68e3      	ldr	r3, [r4, #12]
         (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015e8:	4631      	mov	r1, r6
         __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015ea:	f043 0302 	orr.w	r3, r3, #2
 80015ee:	60e3      	str	r3, [r4, #12]
         (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015f0:	f001 fbe4 	bl	8002dbc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80015f4:	2310      	movs	r3, #16
 80015f6:	60a3      	str	r3, [r4, #8]
 80015f8:	e792      	b.n	8001520 <HAL_HCD_IRQHandler+0x338>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL)||
 80015fa:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 80015fe:	d1f9      	bne.n	80015f4 <HAL_HCD_IRQHandler+0x40c>
       hhcd->hc[ch_num].ErrCnt = 0U;
 8001600:	6593      	str	r3, [r2, #88]	; 0x58
       if (hhcd->Init.dma_enable == 0U)
 8001602:	692b      	ldr	r3, [r5, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f5      	bne.n	80015f4 <HAL_HCD_IRQHandler+0x40c>
         hhcd->hc[ch_num].state = HC_NAK;
 8001608:	2303      	movs	r3, #3
 800160a:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 800160e:	e7ea      	b.n	80015e6 <HAL_HCD_IRQHandler+0x3fe>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001610:	f011 0c04 	ands.w	ip, r1, #4
 8001614:	d006      	beq.n	8001624 <HAL_HCD_IRQHandler+0x43c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001616:	2304      	movs	r3, #4
 8001618:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800161a:	68e3      	ldr	r3, [r4, #12]
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	60e3      	str	r3, [r4, #12]
 8001622:	e77d      	b.n	8001520 <HAL_HCD_IRQHandler+0x338>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001624:	68a1      	ldr	r1, [r4, #8]
 8001626:	f011 0120 	ands.w	r1, r1, #32
 800162a:	d014      	beq.n	8001656 <HAL_HCD_IRQHandler+0x46e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800162c:	2320      	movs	r3, #32
 800162e:	60a3      	str	r3, [r4, #8]
    if( hhcd->hc[ch_num].do_ping == 1U)
 8001630:	fb07 5306 	mla	r3, r7, r6, r5
 8001634:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001638:	2a01      	cmp	r2, #1
 800163a:	f47f af71 	bne.w	8001520 <HAL_HCD_IRQHandler+0x338>
      hhcd->hc[ch_num].do_ping = 0U;
 800163e:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001642:	4631      	mov	r1, r6
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001644:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001648:	68e3      	ldr	r3, [r4, #12]
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001650:	f001 fbb4 	bl	8002dbc <USB_HC_Halt>
 8001654:	e764      	b.n	8001520 <HAL_HCD_IRQHandler+0x338>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001656:	68a3      	ldr	r3, [r4, #8]
 8001658:	065a      	lsls	r2, r3, #25
 800165a:	d511      	bpl.n	8001680 <HAL_HCD_IRQHandler+0x498>
    hhcd->hc[ch_num].state = HC_NYET;
 800165c:	fb07 5306 	mla	r3, r7, r6, r5
 8001660:	2204      	movs	r2, #4
 8001662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 8001666:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt= 0U;
 8001668:	6599      	str	r1, [r3, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800166a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].do_ping = 1U;
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001670:	68e3      	ldr	r3, [r4, #12]
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001678:	f001 fba0 	bl	8002dbc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800167c:	2340      	movs	r3, #64	; 0x40
 800167e:	e7ba      	b.n	80015f6 <HAL_HCD_IRQHandler+0x40e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001680:	68a1      	ldr	r1, [r4, #8]
 8001682:	f411 7100 	ands.w	r1, r1, #512	; 0x200
 8001686:	d007      	beq.n	8001698 <HAL_HCD_IRQHandler+0x4b0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001688:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800168a:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800168c:	f043 0302 	orr.w	r3, r3, #2
 8001690:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001692:	e6e2      	b.n	800145a <HAL_HCD_IRQHandler+0x272>
 8001694:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001698:	68a3      	ldr	r3, [r4, #8]
 800169a:	07db      	lsls	r3, r3, #31
 800169c:	d50f      	bpl.n	80016be <HAL_HCD_IRQHandler+0x4d6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800169e:	68e2      	ldr	r2, [r4, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016a0:	fb07 5a06 	mla	sl, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016a4:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016a8:	f8ca 1058 	str.w	r1, [sl, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016ac:	4631      	mov	r1, r6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016ae:	60e2      	str	r2, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016b0:	f001 fb84 	bl	8002dbc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80016b4:	2201      	movs	r2, #1
 80016b6:	60a2      	str	r2, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80016b8:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 80016bc:	e730      	b.n	8001520 <HAL_HCD_IRQHandler+0x338>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80016be:	68a1      	ldr	r1, [r4, #8]
 80016c0:	0709      	lsls	r1, r1, #28
 80016c2:	d50e      	bpl.n	80016e2 <HAL_HCD_IRQHandler+0x4fa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80016c4:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016c6:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_STALL;
 80016c8:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80016cc:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016ce:	68e3      	ldr	r3, [r4, #12]
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016d6:	f001 fb71 	bl	8002dbc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80016da:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80016dc:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 80016e0:	e71e      	b.n	8001520 <HAL_HCD_IRQHandler+0x338>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80016e2:	68a1      	ldr	r1, [r4, #8]
 80016e4:	06ca      	lsls	r2, r1, #27
 80016e6:	d514      	bpl.n	8001712 <HAL_HCD_IRQHandler+0x52a>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80016e8:	fb07 5306 	mla	r3, r7, r6, r5
 80016ec:	2200      	movs	r2, #0
 80016ee:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 80016f0:	2203      	movs	r2, #3
 80016f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 80016f6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80016fa:	2a00      	cmp	r2, #0
 80016fc:	f47f af73 	bne.w	80015e6 <HAL_HCD_IRQHandler+0x3fe>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001700:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001704:	2a00      	cmp	r2, #0
 8001706:	f47f af6e 	bne.w	80015e6 <HAL_HCD_IRQHandler+0x3fe>
        hhcd->hc[ch_num].do_ping = 1U;
 800170a:	2201      	movs	r2, #1
 800170c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001710:	e769      	b.n	80015e6 <HAL_HCD_IRQHandler+0x3fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001712:	68a1      	ldr	r1, [r4, #8]
 8001714:	060b      	lsls	r3, r1, #24
 8001716:	d50c      	bpl.n	8001732 <HAL_HCD_IRQHandler+0x54a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001718:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800171a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_XACTERR;
 800171c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001726:	f001 fb49 	bl	8002dbc <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800172a:	2306      	movs	r3, #6
 800172c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8001730:	e74d      	b.n	80015ce <HAL_HCD_IRQHandler+0x3e6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001732:	68a1      	ldr	r1, [r4, #8]
 8001734:	0549      	lsls	r1, r1, #21
 8001736:	d50f      	bpl.n	8001758 <HAL_HCD_IRQHandler+0x570>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001738:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800173a:	4631      	mov	r1, r6
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800173c:	fb07 5606 	mla	r6, r7, r6, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001746:	f001 fb39 	bl	8002dbc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800174a:	2310      	movs	r3, #16
 800174c:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800174e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001752:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001754:	2308      	movs	r3, #8
 8001756:	e7c1      	b.n	80016dc <HAL_HCD_IRQHandler+0x4f4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001758:	68a1      	ldr	r1, [r4, #8]
 800175a:	078a      	lsls	r2, r1, #30
 800175c:	f57f aee0 	bpl.w	8001520 <HAL_HCD_IRQHandler+0x338>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001760:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001762:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001766:	f021 0102 	bic.w	r1, r1, #2
 800176a:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800176c:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001770:	2901      	cmp	r1, #1
 8001772:	d116      	bne.n	80017a2 <HAL_HCD_IRQHandler+0x5ba>
      if (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK)
 8001774:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001778:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK)
 800177c:	2b02      	cmp	r3, #2
 800177e:	d105      	bne.n	800178c <HAL_HCD_IRQHandler+0x5a4>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001780:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001784:	f083 0301 	eor.w	r3, r3, #1
 8001788:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800178c:	fb07 5306 	mla	r3, r7, r6, r5
 8001790:	4631      	mov	r1, r6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001792:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001796:	4628      	mov	r0, r5
 8001798:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800179c:	f00f fc8e 	bl	80110bc <HAL_HCD_HC_NotifyURBChange_Callback>
 80017a0:	e6be      	b.n	8001520 <HAL_HCD_IRQHandler+0x338>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80017a2:	2903      	cmp	r1, #3
 80017a4:	d102      	bne.n	80017ac <HAL_HCD_IRQHandler+0x5c4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80017a6:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 80017aa:	e7ef      	b.n	800178c <HAL_HCD_IRQHandler+0x5a4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80017ac:	2904      	cmp	r1, #4
 80017ae:	d0fa      	beq.n	80017a6 <HAL_HCD_IRQHandler+0x5be>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80017b0:	2905      	cmp	r1, #5
 80017b2:	f43f aed4 	beq.w	800155e <HAL_HCD_IRQHandler+0x376>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80017b6:	2906      	cmp	r1, #6
 80017b8:	f43f aeda 	beq.w	8001570 <HAL_HCD_IRQHandler+0x388>
 80017bc:	2908      	cmp	r1, #8
 80017be:	d1e5      	bne.n	800178c <HAL_HCD_IRQHandler+0x5a4>
 80017c0:	e6d6      	b.n	8001570 <HAL_HCD_IRQHandler+0x388>
 80017c2:	bf00      	nop

080017c4 <HAL_HCD_Start>:
{
 80017c4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80017c6:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 80017ca:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d00d      	beq.n	80017ec <HAL_HCD_Start+0x28>
 80017d0:	2501      	movs	r5, #1
 80017d2:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80017d6:	6800      	ldr	r0, [r0, #0]
 80017d8:	f001 f931 	bl	8002a3e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80017dc:	4629      	mov	r1, r5
 80017de:	6820      	ldr	r0, [r4, #0]
 80017e0:	f001 f9d6 	bl	8002b90 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 80017ea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80017ec:	2002      	movs	r0, #2
 80017ee:	e7fc      	b.n	80017ea <HAL_HCD_Start+0x26>

080017f0 <HAL_HCD_Stop>:
{
 80017f0:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80017f2:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 80017f6:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d009      	beq.n	8001810 <HAL_HCD_Stop+0x20>
 80017fc:	2301      	movs	r3, #1
 80017fe:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001802:	6800      	ldr	r0, [r0, #0]
 8001804:	f001 fbec 	bl	8002fe0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001808:	2000      	movs	r0, #0
 800180a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800180e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001810:	2002      	movs	r0, #2
 8001812:	e7fc      	b.n	800180e <HAL_HCD_Stop+0x1e>

08001814 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8001814:	6800      	ldr	r0, [r0, #0]
 8001816:	f001 b99d 	b.w	8002b54 <USB_ResetPort>

0800181a <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 800181a:	2328      	movs	r3, #40	; 0x28
 800181c:	fb03 0001 	mla	r0, r3, r1, r0
}
 8001820:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8001824:	4770      	bx	lr

08001826 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8001826:	2328      	movs	r3, #40	; 0x28
 8001828:	fb03 0001 	mla	r0, r3, r1, r0
}
 800182c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800182e:	4770      	bx	lr

08001830 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001830:	6800      	ldr	r0, [r0, #0]
 8001832:	f001 ba3e 	b.w	8002cb2 <USB_GetCurrentFrame>

08001836 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001836:	6800      	ldr	r0, [r0, #0]
 8001838:	f001 ba30 	b.w	8002c9c <USB_GetHostSpeed>

0800183c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800183c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	4604      	mov	r4, r0
 8001842:	b918      	cbnz	r0, 800184c <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001844:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001846:	b002      	add	sp, #8
 8001848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800184c:	6803      	ldr	r3, [r0, #0]
 800184e:	07d8      	lsls	r0, r3, #31
 8001850:	d410      	bmi.n	8001874 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	0799      	lsls	r1, r3, #30
 8001856:	d461      	bmi.n	800191c <HAL_RCC_OscConfig+0xe0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	0719      	lsls	r1, r3, #28
 800185c:	f100 80a8 	bmi.w	80019b0 <HAL_RCC_OscConfig+0x174>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	075a      	lsls	r2, r3, #29
 8001864:	f100 80c9 	bmi.w	80019fa <HAL_RCC_OscConfig+0x1be>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001868:	69a2      	ldr	r2, [r4, #24]
 800186a:	2a00      	cmp	r2, #0
 800186c:	f040 8132 	bne.w	8001ad4 <HAL_RCC_OscConfig+0x298>
  return HAL_OK;
 8001870:	2000      	movs	r0, #0
 8001872:	e7e8      	b.n	8001846 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001874:	4b95      	ldr	r3, [pc, #596]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	f002 020c 	and.w	r2, r2, #12
 800187c:	2a04      	cmp	r2, #4
 800187e:	d007      	beq.n	8001890 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	f002 020c 	and.w	r2, r2, #12
 8001886:	2a08      	cmp	r2, #8
 8001888:	d10a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x64>
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	0252      	lsls	r2, r2, #9
 800188e:	d507      	bpl.n	80018a0 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4b8e      	ldr	r3, [pc, #568]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	039b      	lsls	r3, r3, #14
 8001896:	d5dc      	bpl.n	8001852 <HAL_RCC_OscConfig+0x16>
 8001898:	6863      	ldr	r3, [r4, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1d9      	bne.n	8001852 <HAL_RCC_OscConfig+0x16>
 800189e:	e7d1      	b.n	8001844 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	6862      	ldr	r2, [r4, #4]
 80018a2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_OscConfig+0x90>
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018b0:	f7fe fe92 	bl	80005d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b4:	4e85      	ldr	r6, [pc, #532]	; (8001acc <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80018b6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b8:	6833      	ldr	r3, [r6, #0]
 80018ba:	039f      	lsls	r7, r3, #14
 80018bc:	d4c9      	bmi.n	8001852 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018be:	f7fe fe8b 	bl	80005d8 <HAL_GetTick>
 80018c2:	1b40      	subs	r0, r0, r5
 80018c4:	2864      	cmp	r0, #100	; 0x64
 80018c6:	d9f7      	bls.n	80018b8 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 80018c8:	2003      	movs	r0, #3
 80018ca:	e7bc      	b.n	8001846 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018cc:	4d7f      	ldr	r5, [pc, #508]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 80018ce:	682b      	ldr	r3, [r5, #0]
 80018d0:	b992      	cbnz	r2, 80018f8 <HAL_RCC_OscConfig+0xbc>
 80018d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d6:	602b      	str	r3, [r5, #0]
 80018d8:	682b      	ldr	r3, [r5, #0]
 80018da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018e0:	f7fe fe7a 	bl	80005d8 <HAL_GetTick>
 80018e4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	0398      	lsls	r0, r3, #14
 80018ea:	d5b2      	bpl.n	8001852 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ec:	f7fe fe74 	bl	80005d8 <HAL_GetTick>
 80018f0:	1b80      	subs	r0, r0, r6
 80018f2:	2864      	cmp	r0, #100	; 0x64
 80018f4:	d9f7      	bls.n	80018e6 <HAL_RCC_OscConfig+0xaa>
 80018f6:	e7e7      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80018fc:	d107      	bne.n	800190e <HAL_RCC_OscConfig+0xd2>
 80018fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001902:	602b      	str	r3, [r5, #0]
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190a:	602b      	str	r3, [r5, #0]
 800190c:	e7d0      	b.n	80018b0 <HAL_RCC_OscConfig+0x74>
 800190e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001912:	602b      	str	r3, [r5, #0]
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191a:	e7f6      	b.n	800190a <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800191c:	4b6b      	ldr	r3, [pc, #428]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	f012 0f0c 	tst.w	r2, #12
 8001924:	d007      	beq.n	8001936 <HAL_RCC_OscConfig+0xfa>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	f002 020c 	and.w	r2, r2, #12
 800192c:	2a08      	cmp	r2, #8
 800192e:	d112      	bne.n	8001956 <HAL_RCC_OscConfig+0x11a>
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	0251      	lsls	r1, r2, #9
 8001934:	d40f      	bmi.n	8001956 <HAL_RCC_OscConfig+0x11a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001936:	4b65      	ldr	r3, [pc, #404]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	0792      	lsls	r2, r2, #30
 800193c:	d503      	bpl.n	8001946 <HAL_RCC_OscConfig+0x10a>
 800193e:	68e2      	ldr	r2, [r4, #12]
 8001940:	2a01      	cmp	r2, #1
 8001942:	f47f af7f 	bne.w	8001844 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	6921      	ldr	r1, [r4, #16]
 800194a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800194e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001952:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001954:	e780      	b.n	8001858 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001956:	68e2      	ldr	r2, [r4, #12]
 8001958:	b1c2      	cbz	r2, 800198c <HAL_RCC_OscConfig+0x150>
        __HAL_RCC_HSI_ENABLE();
 800195a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800195c:	4d5b      	ldr	r5, [pc, #364]	; (8001acc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 800195e:	f042 0201 	orr.w	r2, r2, #1
 8001962:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001964:	f7fe fe38 	bl	80005d8 <HAL_GetTick>
 8001968:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196a:	682b      	ldr	r3, [r5, #0]
 800196c:	079f      	lsls	r7, r3, #30
 800196e:	d507      	bpl.n	8001980 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	6922      	ldr	r2, [r4, #16]
 8001974:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001978:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800197c:	602b      	str	r3, [r5, #0]
 800197e:	e76b      	b.n	8001858 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7fe fe2a 	bl	80005d8 <HAL_GetTick>
 8001984:	1b80      	subs	r0, r0, r6
 8001986:	2802      	cmp	r0, #2
 8001988:	d9ef      	bls.n	800196a <HAL_RCC_OscConfig+0x12e>
 800198a:	e79d      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 800198c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800198e:	4e4f      	ldr	r6, [pc, #316]	; (8001acc <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_DISABLE();
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001996:	f7fe fe1f 	bl	80005d8 <HAL_GetTick>
 800199a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800199c:	6833      	ldr	r3, [r6, #0]
 800199e:	0798      	lsls	r0, r3, #30
 80019a0:	f57f af5a 	bpl.w	8001858 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a4:	f7fe fe18 	bl	80005d8 <HAL_GetTick>
 80019a8:	1b40      	subs	r0, r0, r5
 80019aa:	2802      	cmp	r0, #2
 80019ac:	d9f6      	bls.n	800199c <HAL_RCC_OscConfig+0x160>
 80019ae:	e78b      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019b0:	6963      	ldr	r3, [r4, #20]
 80019b2:	4d46      	ldr	r5, [pc, #280]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 80019b4:	b183      	cbz	r3, 80019d8 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_LSI_ENABLE();
 80019b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80019be:	f7fe fe0b 	bl	80005d8 <HAL_GetTick>
 80019c2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019c4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019c6:	079b      	lsls	r3, r3, #30
 80019c8:	f53f af4a 	bmi.w	8001860 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019cc:	f7fe fe04 	bl	80005d8 <HAL_GetTick>
 80019d0:	1b80      	subs	r0, r0, r6
 80019d2:	2802      	cmp	r0, #2
 80019d4:	d9f6      	bls.n	80019c4 <HAL_RCC_OscConfig+0x188>
 80019d6:	e777      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 80019d8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80019e0:	f7fe fdfa 	bl	80005d8 <HAL_GetTick>
 80019e4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019e8:	079f      	lsls	r7, r3, #30
 80019ea:	f57f af39 	bpl.w	8001860 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ee:	f7fe fdf3 	bl	80005d8 <HAL_GetTick>
 80019f2:	1b80      	subs	r0, r0, r6
 80019f4:	2802      	cmp	r0, #2
 80019f6:	d9f6      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1aa>
 80019f8:	e766      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 80019fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019fe:	00d0      	lsls	r0, r2, #3
 8001a00:	d427      	bmi.n	8001a52 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001a04:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a16:	4d2e      	ldr	r5, [pc, #184]	; (8001ad0 <HAL_RCC_OscConfig+0x294>)
 8001a18:	682b      	ldr	r3, [r5, #0]
 8001a1a:	05d9      	lsls	r1, r3, #23
 8001a1c:	d51b      	bpl.n	8001a56 <HAL_RCC_OscConfig+0x21a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1e:	68a3      	ldr	r3, [r4, #8]
 8001a20:	4d2a      	ldr	r5, [pc, #168]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d127      	bne.n	8001a76 <HAL_RCC_OscConfig+0x23a>
 8001a26:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a32:	f7fe fdd1 	bl	80005d8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	4e25      	ldr	r6, [pc, #148]	; (8001acc <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001a38:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001a3c:	079b      	lsls	r3, r3, #30
 8001a3e:	d53f      	bpl.n	8001ac0 <HAL_RCC_OscConfig+0x284>
    if(pwrclkchanged == SET)
 8001a40:	2f00      	cmp	r7, #0
 8001a42:	f43f af11 	beq.w	8001868 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4a21      	ldr	r2, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x290>)
 8001a48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a50:	e70a      	b.n	8001868 <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 8001a52:	2700      	movs	r7, #0
 8001a54:	e7df      	b.n	8001a16 <HAL_RCC_OscConfig+0x1da>
      PWR->CR1 |= PWR_CR1_DBP;
 8001a56:	682b      	ldr	r3, [r5, #0]
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a5e:	f7fe fdbb 	bl	80005d8 <HAL_GetTick>
 8001a62:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	05da      	lsls	r2, r3, #23
 8001a68:	d4d9      	bmi.n	8001a1e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a6a:	f7fe fdb5 	bl	80005d8 <HAL_GetTick>
 8001a6e:	1b80      	subs	r0, r0, r6
 8001a70:	2864      	cmp	r0, #100	; 0x64
 8001a72:	d9f7      	bls.n	8001a64 <HAL_RCC_OscConfig+0x228>
 8001a74:	e728      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a76:	b9ab      	cbnz	r3, 8001aa4 <HAL_RCC_OscConfig+0x268>
 8001a78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7e:	f023 0301 	bic.w	r3, r3, #1
 8001a82:	672b      	str	r3, [r5, #112]	; 0x70
 8001a84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001a8c:	f7fe fda4 	bl	80005d8 <HAL_GetTick>
 8001a90:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a92:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a94:	0798      	lsls	r0, r3, #30
 8001a96:	d5d3      	bpl.n	8001a40 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7fe fd9e 	bl	80005d8 <HAL_GetTick>
 8001a9c:	1b80      	subs	r0, r0, r6
 8001a9e:	4540      	cmp	r0, r8
 8001aa0:	d9f7      	bls.n	8001a92 <HAL_RCC_OscConfig+0x256>
 8001aa2:	e711      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001aa8:	d103      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x276>
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	672b      	str	r3, [r5, #112]	; 0x70
 8001ab0:	e7b9      	b.n	8001a26 <HAL_RCC_OscConfig+0x1ea>
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	672b      	str	r3, [r5, #112]	; 0x70
 8001ab8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001aba:	f023 0304 	bic.w	r3, r3, #4
 8001abe:	e7b5      	b.n	8001a2c <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7fe fd8a 	bl	80005d8 <HAL_GetTick>
 8001ac4:	1b40      	subs	r0, r0, r5
 8001ac6:	4540      	cmp	r0, r8
 8001ac8:	d9b7      	bls.n	8001a3a <HAL_RCC_OscConfig+0x1fe>
 8001aca:	e6fd      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad4:	4d24      	ldr	r5, [pc, #144]	; (8001b68 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	68ab      	ldr	r3, [r5, #8]
 8001ad8:	f003 030c 	and.w	r3, r3, #12
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	f43f aeb1 	beq.w	8001844 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001ae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aea:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aec:	d12e      	bne.n	8001b4c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001aee:	f7fe fd73 	bl	80005d8 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af4:	682b      	ldr	r3, [r5, #0]
 8001af6:	0199      	lsls	r1, r3, #6
 8001af8:	d422      	bmi.n	8001b40 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	1e5a      	subs	r2, r3, #1
 8001b00:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b0c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001b1a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b22:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b24:	f7fe fd58 	bl	80005d8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b28:	4d0f      	ldr	r5, [pc, #60]	; (8001b68 <HAL_RCC_OscConfig+0x32c>)
        tickstart = HAL_GetTick();
 8001b2a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b2c:	682b      	ldr	r3, [r5, #0]
 8001b2e:	019a      	lsls	r2, r3, #6
 8001b30:	f53f ae9e 	bmi.w	8001870 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b34:	f7fe fd50 	bl	80005d8 <HAL_GetTick>
 8001b38:	1b00      	subs	r0, r0, r4
 8001b3a:	2802      	cmp	r0, #2
 8001b3c:	d9f6      	bls.n	8001b2c <HAL_RCC_OscConfig+0x2f0>
 8001b3e:	e6c3      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b40:	f7fe fd4a 	bl	80005d8 <HAL_GetTick>
 8001b44:	1b80      	subs	r0, r0, r6
 8001b46:	2802      	cmp	r0, #2
 8001b48:	d9d4      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2b8>
 8001b4a:	e6bd      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 8001b4c:	f7fe fd44 	bl	80005d8 <HAL_GetTick>
 8001b50:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b52:	682b      	ldr	r3, [r5, #0]
 8001b54:	019b      	lsls	r3, r3, #6
 8001b56:	f57f ae8b 	bpl.w	8001870 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7fe fd3d 	bl	80005d8 <HAL_GetTick>
 8001b5e:	1b00      	subs	r0, r0, r4
 8001b60:	2802      	cmp	r0, #2
 8001b62:	d9f6      	bls.n	8001b52 <HAL_RCC_OscConfig+0x316>
 8001b64:	e6b0      	b.n	80018c8 <HAL_RCC_OscConfig+0x8c>
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6c:	4913      	ldr	r1, [pc, #76]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001b6e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b70:	688b      	ldr	r3, [r1, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
 8001b76:	2b04      	cmp	r3, #4
 8001b78:	d01b      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x46>
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b80:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b84:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b88:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b90:	bf1a      	itte	ne
 8001b92:	480b      	ldrne	r0, [pc, #44]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x54>)
 8001b94:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b96:	480b      	ldreq	r0, [pc, #44]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b98:	fba1 0100 	umull	r0, r1, r1, r0
 8001b9c:	f7fe fb88 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x50>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ba8:	3301      	adds	r3, #1
 8001baa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001bac:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bb0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bb2:	4803      	ldr	r0, [pc, #12]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x54>)
 8001bb4:	e7fc      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001bb8:	e7fa      	b.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x44>
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	007a1200 	.word	0x007a1200
 8001bc4:	00f42400 	.word	0x00f42400

08001bc8 <HAL_RCC_ClockConfig>:
{
 8001bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bcc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001bce:	4604      	mov	r4, r0
 8001bd0:	b910      	cbnz	r0, 8001bd8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001bd2:	2001      	movs	r0, #1
}
 8001bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4a45      	ldr	r2, [pc, #276]	; (8001cf0 <HAL_RCC_ClockConfig+0x128>)
 8001bda:	6813      	ldr	r3, [r2, #0]
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	428b      	cmp	r3, r1
 8001be2:	d327      	bcc.n	8001c34 <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	6822      	ldr	r2, [r4, #0]
 8001be6:	0797      	lsls	r7, r2, #30
 8001be8:	d42f      	bmi.n	8001c4a <HAL_RCC_ClockConfig+0x82>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bea:	07d0      	lsls	r0, r2, #31
 8001bec:	d443      	bmi.n	8001c76 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bee:	4a40      	ldr	r2, [pc, #256]	; (8001cf0 <HAL_RCC_ClockConfig+0x128>)
 8001bf0:	6813      	ldr	r3, [r2, #0]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	42ab      	cmp	r3, r5
 8001bf8:	d866      	bhi.n	8001cc8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfa:	6822      	ldr	r2, [r4, #0]
 8001bfc:	0751      	lsls	r1, r2, #29
 8001bfe:	d46f      	bmi.n	8001ce0 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c00:	0713      	lsls	r3, r2, #28
 8001c02:	d507      	bpl.n	8001c14 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c04:	4a3b      	ldr	r2, [pc, #236]	; (8001cf4 <HAL_RCC_ClockConfig+0x12c>)
 8001c06:	6921      	ldr	r1, [r4, #16]
 8001c08:	6893      	ldr	r3, [r2, #8]
 8001c0a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c0e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c12:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c14:	f7ff ffaa 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <HAL_RCC_ClockConfig+0x12c>)
 8001c1a:	4a37      	ldr	r2, [pc, #220]	; (8001cf8 <HAL_RCC_ClockConfig+0x130>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	40d8      	lsrs	r0, r3
 8001c26:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_ClockConfig+0x134>)
 8001c28:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f00f f84c 	bl	8010cc8 <HAL_InitTick>
  return HAL_OK;
 8001c30:	2000      	movs	r0, #0
 8001c32:	e7cf      	b.n	8001bd4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c34:	6813      	ldr	r3, [r2, #0]
 8001c36:	f023 030f 	bic.w	r3, r3, #15
 8001c3a:	430b      	orrs	r3, r1
 8001c3c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	428b      	cmp	r3, r1
 8001c46:	d1c4      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xa>
 8001c48:	e7cc      	b.n	8001be4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4a:	f012 0f04 	tst.w	r2, #4
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <HAL_RCC_ClockConfig+0x12c>)
 8001c50:	d003      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c52:	6899      	ldr	r1, [r3, #8]
 8001c54:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8001c58:	6099      	str	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	0716      	lsls	r6, r2, #28
 8001c5c:	d503      	bpl.n	8001c66 <HAL_RCC_ClockConfig+0x9e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c5e:	6899      	ldr	r1, [r3, #8]
 8001c60:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8001c64:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c66:	4923      	ldr	r1, [pc, #140]	; (8001cf4 <HAL_RCC_ClockConfig+0x12c>)
 8001c68:	68a0      	ldr	r0, [r4, #8]
 8001c6a:	688b      	ldr	r3, [r1, #8]
 8001c6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c70:	4303      	orrs	r3, r0
 8001c72:	608b      	str	r3, [r1, #8]
 8001c74:	e7b9      	b.n	8001bea <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	6861      	ldr	r1, [r4, #4]
 8001c78:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <HAL_RCC_ClockConfig+0x12c>)
 8001c7a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7c:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0xf0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c80:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	d0a5      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c86:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c88:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8c:	4f19      	ldr	r7, [pc, #100]	; (8001cf4 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8e:	f022 0203 	bic.w	r2, r2, #3
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001c96:	f7fe fc9f 	bl	80005d8 <HAL_GetTick>
 8001c9a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	6862      	ldr	r2, [r4, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ca8:	d0a1      	beq.n	8001bee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001caa:	f7fe fc95 	bl	80005d8 <HAL_GetTick>
 8001cae:	1b80      	subs	r0, r0, r6
 8001cb0:	4540      	cmp	r0, r8
 8001cb2:	d9f3      	bls.n	8001c9c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	e78d      	b.n	8001bd4 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb8:	2902      	cmp	r1, #2
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cbc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001cc0:	e7e0      	b.n	8001c84 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	f012 0f02 	tst.w	r2, #2
 8001cc6:	e7dd      	b.n	8001c84 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc8:	6813      	ldr	r3, [r2, #0]
 8001cca:	f023 030f 	bic.w	r3, r3, #15
 8001cce:	432b      	orrs	r3, r5
 8001cd0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd2:	6813      	ldr	r3, [r2, #0]
 8001cd4:	f003 030f 	and.w	r3, r3, #15
 8001cd8:	42ab      	cmp	r3, r5
 8001cda:	f47f af7a 	bne.w	8001bd2 <HAL_RCC_ClockConfig+0xa>
 8001cde:	e78c      	b.n	8001bfa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <HAL_RCC_ClockConfig+0x12c>)
 8001ce2:	68e0      	ldr	r0, [r4, #12]
 8001ce4:	688b      	ldr	r3, [r1, #8]
 8001ce6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001cea:	4303      	orrs	r3, r0
 8001cec:	608b      	str	r3, [r1, #8]
 8001cee:	e787      	b.n	8001c00 <HAL_RCC_ClockConfig+0x38>
 8001cf0:	40023c00 	.word	0x40023c00
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	0801550d 	.word	0x0801550d
 8001cfc:	20000030 	.word	0x20000030

08001d00 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d00:	4b01      	ldr	r3, [pc, #4]	; (8001d08 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000030 	.word	0x20000030

08001d0c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
 8001d18:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d1a:	6810      	ldr	r0, [r2, #0]
}
 8001d1c:	40d8      	lsrs	r0, r3
 8001d1e:	4770      	bx	lr
 8001d20:	40023800 	.word	0x40023800
 8001d24:	0801551d 	.word	0x0801551d
 8001d28:	20000030 	.word	0x20000030

08001d2c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001d3a:	6810      	ldr	r0, [r2, #0]
}
 8001d3c:	40d8      	lsrs	r0, r3
 8001d3e:	4770      	bx	lr
 8001d40:	40023800 	.word	0x40023800
 8001d44:	0801551d 	.word	0x0801551d
 8001d48:	20000030 	.word	0x20000030

08001d4c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_GetClockConfig+0x34>)
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001d60:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001d68:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	08db      	lsrs	r3, r3, #3
 8001d6e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d72:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <HAL_RCC_GetClockConfig+0x38>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	600b      	str	r3, [r1, #0]
}
 8001d7e:	4770      	bx	lr
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d88:	6803      	ldr	r3, [r0, #0]
{
 8001d8a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d8e:	f013 0601 	ands.w	r6, r3, #1
{
 8001d92:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d94:	d00b      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d96:	4aab      	ldr	r2, [pc, #684]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d98:	6891      	ldr	r1, [r2, #8]
 8001d9a:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001d9e:	6091      	str	r1, [r2, #8]
 8001da0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001da2:	6891      	ldr	r1, [r2, #8]
 8001da4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001da6:	fab6 f686 	clz	r6, r6
 8001daa:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001dac:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dae:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001db2:	d012      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001db4:	49a3      	ldr	r1, [pc, #652]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001db6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001db8:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dbc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dc0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001dc4:	bf08      	it	eq
 8001dc6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dc8:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dcc:	bf16      	itet	ne
 8001dce:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001dd2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dd4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dd6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dda:	02d8      	lsls	r0, r3, #11
 8001ddc:	d510      	bpl.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dde:	4899      	ldr	r0, [pc, #612]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001de0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001de2:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001de6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001dea:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001dee:	ea42 0201 	orr.w	r2, r2, r1
 8001df2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001df6:	f000 8186 	beq.w	8002106 <HAL_RCCEx_PeriphCLKConfig+0x37e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001dfa:	2900      	cmp	r1, #0
 8001dfc:	bf08      	it	eq
 8001dfe:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001e00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001e04:	bf18      	it	ne
 8001e06:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e08:	0699      	lsls	r1, r3, #26
 8001e0a:	d531      	bpl.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e0c:	4b8d      	ldr	r3, [pc, #564]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e0e:	4f8e      	ldr	r7, [pc, #568]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2a:	f7fe fbd5 	bl	80005d8 <HAL_GetTick>
 8001e2e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	05da      	lsls	r2, r3, #23
 8001e34:	f140 8169 	bpl.w	800210a <HAL_RCCEx_PeriphCLKConfig+0x382>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e38:	4f82      	ldr	r7, [pc, #520]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e3c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e40:	f040 816e 	bne.w	8002120 <HAL_RCCEx_PeriphCLKConfig+0x398>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e46:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001e4a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001e4e:	4a7d      	ldr	r2, [pc, #500]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e50:	f040 818c 	bne.w	800216c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001e54:	6891      	ldr	r1, [r2, #8]
 8001e56:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001e5a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001e5e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001e62:	4301      	orrs	r1, r0
 8001e64:	6091      	str	r1, [r2, #8]
 8001e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	06d9      	lsls	r1, r3, #27
 8001e74:	d50c      	bpl.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e76:	4a73      	ldr	r2, [pc, #460]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e78:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001e7c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001e80:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001e84:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001e88:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e8a:	4301      	orrs	r1, r0
 8001e8c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e90:	045a      	lsls	r2, r3, #17
 8001e92:	d508      	bpl.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e94:	496b      	ldr	r1, [pc, #428]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e96:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001e98:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e9c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ea6:	041f      	lsls	r7, r3, #16
 8001ea8:	d508      	bpl.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001eaa:	4966      	ldr	r1, [pc, #408]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eac:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001eae:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001eb2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001eb6:	4302      	orrs	r2, r0
 8001eb8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ebc:	03d8      	lsls	r0, r3, #15
 8001ebe:	d508      	bpl.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ec0:	4960      	ldr	r1, [pc, #384]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ec2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001ec4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ec8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ecc:	4302      	orrs	r2, r0
 8001ece:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ed2:	0399      	lsls	r1, r3, #14
 8001ed4:	d508      	bpl.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ed6:	495b      	ldr	r1, [pc, #364]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ed8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001eda:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ede:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001ee2:	4302      	orrs	r2, r0
 8001ee4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee8:	065a      	lsls	r2, r3, #25
 8001eea:	d508      	bpl.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eec:	4955      	ldr	r1, [pc, #340]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001ef0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ef4:	f022 0203 	bic.w	r2, r2, #3
 8001ef8:	4302      	orrs	r2, r0
 8001efa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001efe:	061f      	lsls	r7, r3, #24
 8001f00:	d508      	bpl.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f02:	4950      	ldr	r1, [pc, #320]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f04:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001f06:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f0a:	f022 020c 	bic.w	r2, r2, #12
 8001f0e:	4302      	orrs	r2, r0
 8001f10:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f14:	05d8      	lsls	r0, r3, #23
 8001f16:	d508      	bpl.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f18:	494a      	ldr	r1, [pc, #296]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f1a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001f1c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f20:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001f24:	4302      	orrs	r2, r0
 8001f26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f2a:	0599      	lsls	r1, r3, #22
 8001f2c:	d508      	bpl.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f2e:	4945      	ldr	r1, [pc, #276]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f30:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001f32:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f36:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001f3a:	4302      	orrs	r2, r0
 8001f3c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f40:	055a      	lsls	r2, r3, #21
 8001f42:	d508      	bpl.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f44:	493f      	ldr	r1, [pc, #252]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f48:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f4c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f50:	4302      	orrs	r2, r0
 8001f52:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f56:	051f      	lsls	r7, r3, #20
 8001f58:	d508      	bpl.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f5a:	493a      	ldr	r1, [pc, #232]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f5e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f62:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f66:	4302      	orrs	r2, r0
 8001f68:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f6c:	04d8      	lsls	r0, r3, #19
 8001f6e:	d508      	bpl.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f70:	4934      	ldr	r1, [pc, #208]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f72:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001f74:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f78:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f7c:	4302      	orrs	r2, r0
 8001f7e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f82:	0499      	lsls	r1, r3, #18
 8001f84:	d508      	bpl.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f86:	492f      	ldr	r1, [pc, #188]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f88:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f8a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f8e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001f92:	4302      	orrs	r2, r0
 8001f94:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f98:	025a      	lsls	r2, r3, #9
 8001f9a:	d508      	bpl.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f9c:	4929      	ldr	r1, [pc, #164]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f9e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001fa0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fa4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001fa8:	4302      	orrs	r2, r0
 8001faa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fae:	029f      	lsls	r7, r3, #10
 8001fb0:	d50c      	bpl.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fb2:	4824      	ldr	r0, [pc, #144]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fb4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001fb6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001fba:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fbe:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001fc2:	bf08      	it	eq
 8001fc4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001fcc:	f013 0f08 	tst.w	r3, #8
 8001fd0:	bf18      	it	ne
 8001fd2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fd4:	0358      	lsls	r0, r3, #13
 8001fd6:	d508      	bpl.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fd8:	491a      	ldr	r1, [pc, #104]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fda:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001fdc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fe0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fe4:	4302      	orrs	r2, r0
 8001fe6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001fea:	0219      	lsls	r1, r3, #8
 8001fec:	d509      	bpl.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fee:	4915      	ldr	r1, [pc, #84]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ff0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001ff4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ff8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002002:	2e01      	cmp	r6, #1
 8002004:	f000 80b6 	beq.w	8002174 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800200c:	f000 80b2 	beq.w	8002174 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002010:	2d01      	cmp	r5, #1
 8002012:	d176      	bne.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x37a>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002014:	4d0b      	ldr	r5, [pc, #44]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002016:	682b      	ldr	r3, [r5, #0]
 8002018:	462e      	mov	r6, r5
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201e:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002020:	f7fe fada 	bl	80005d8 <HAL_GetTick>
 8002024:	4607      	mov	r7, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002026:	682b      	ldr	r3, [r5, #0]
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	f100 8127 	bmi.w	800227c <HAL_RCCEx_PeriphCLKConfig+0x4f4>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800202e:	6822      	ldr	r2, [r4, #0]
 8002030:	0315      	lsls	r5, r2, #12
 8002032:	d501      	bpl.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002034:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002036:	b14b      	cbz	r3, 800204c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002038:	02d0      	lsls	r0, r2, #11
 800203a:	d522      	bpl.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800203c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800203e:	bb03      	cbnz	r3, 8002082 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 8002040:	e004      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40007000 	.word	0x40007000
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800204c:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002050:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002054:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002058:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800205c:	430b      	orrs	r3, r1
 800205e:	6961      	ldr	r1, [r4, #20]
 8002060:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002064:	69a1      	ldr	r1, [r4, #24]
 8002066:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800206a:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800206e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8002072:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002074:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002078:	3901      	subs	r1, #1
 800207a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800207e:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002082:	0291      	lsls	r1, r2, #10
 8002084:	d515      	bpl.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8002086:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002088:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800208c:	d111      	bne.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800208e:	4982      	ldr	r1, [pc, #520]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002090:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002094:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002098:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800209c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80020a0:	4303      	orrs	r3, r0
 80020a2:	6960      	ldr	r0, [r4, #20]
 80020a4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80020a8:	6a20      	ldr	r0, [r4, #32]
 80020aa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80020ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80020b2:	0712      	lsls	r2, r2, #28
 80020b4:	d519      	bpl.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020b6:	4a78      	ldr	r2, [pc, #480]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80020b8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80020bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80020c0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80020c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6961      	ldr	r1, [r4, #20]
 80020cc:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80020d0:	69e1      	ldr	r1, [r4, #28]
 80020d2:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80020d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80020da:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80020de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80020e0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80020e4:	430b      	orrs	r3, r1
 80020e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80020ea:	4c6b      	ldr	r4, [pc, #428]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80020ec:	6823      	ldr	r3, [r4, #0]
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020f4:	f7fe fa70 	bl	80005d8 <HAL_GetTick>
 80020f8:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	f140 80c4 	bpl.w	800228a <HAL_RCCEx_PeriphCLKConfig+0x502>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002102:	2000      	movs	r0, #0
 8002104:	e009      	b.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x392>
      plli2sused = 1;
 8002106:	2601      	movs	r6, #1
 8002108:	e67a      	b.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7fe fa65 	bl	80005d8 <HAL_GetTick>
 800210e:	eba0 0008 	sub.w	r0, r0, r8
 8002112:	2864      	cmp	r0, #100	; 0x64
 8002114:	f67f ae8c 	bls.w	8001e30 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002118:	2003      	movs	r0, #3
}
 800211a:	b003      	add	sp, #12
 800211c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002120:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002122:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002126:	4293      	cmp	r3, r2
 8002128:	f43f ae8c 	beq.w	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800212c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800212e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002134:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002138:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800213a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800213c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002140:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002142:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002146:	07db      	lsls	r3, r3, #31
 8002148:	f57f ae7c 	bpl.w	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800214c:	f7fe fa44 	bl	80005d8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002154:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002158:	0798      	lsls	r0, r3, #30
 800215a:	f53f ae73 	bmi.w	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7fe fa3b 	bl	80005d8 <HAL_GetTick>
 8002162:	eba0 0008 	sub.w	r0, r0, r8
 8002166:	4548      	cmp	r0, r9
 8002168:	d9f5      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800216a:	e7d5      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x390>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800216c:	6891      	ldr	r1, [r2, #8]
 800216e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002172:	e677      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8002174:	4e48      	ldr	r6, [pc, #288]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002176:	6833      	ldr	r3, [r6, #0]
 8002178:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800217c:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800217e:	f7fe fa2b 	bl	80005d8 <HAL_GetTick>
 8002182:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002184:	6833      	ldr	r3, [r6, #0]
 8002186:	011a      	lsls	r2, r3, #4
 8002188:	d472      	bmi.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800218a:	6822      	ldr	r2, [r4, #0]
 800218c:	07d3      	lsls	r3, r2, #31
 800218e:	d512      	bpl.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002190:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002192:	b983      	cbnz	r3, 80021b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002194:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002198:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800219c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6861      	ldr	r1, [r4, #4]
 80021a8:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80021ac:	68a1      	ldr	r1, [r4, #8]
 80021ae:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80021b2:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021b6:	0317      	lsls	r7, r2, #12
 80021b8:	d503      	bpl.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80021ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80021bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c0:	d005      	beq.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x446>
 80021c2:	02d6      	lsls	r6, r2, #11
 80021c4:	d51e      	bpl.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x47c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80021c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021cc:	d11a      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021ce:	4932      	ldr	r1, [pc, #200]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80021d0:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021d4:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80021d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021dc:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80021e0:	4303      	orrs	r3, r0
 80021e2:	6860      	ldr	r0, [r4, #4]
 80021e4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80021e8:	68e0      	ldr	r0, [r4, #12]
 80021ea:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80021ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021f2:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80021f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021f8:	f020 001f 	bic.w	r0, r0, #31
 80021fc:	3b01      	subs	r3, #1
 80021fe:	4303      	orrs	r3, r0
 8002200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002204:	01d0      	lsls	r0, r2, #7
 8002206:	d511      	bpl.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002208:	4923      	ldr	r1, [pc, #140]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800220a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800220e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002212:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002216:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800221a:	4303      	orrs	r3, r0
 800221c:	6860      	ldr	r0, [r4, #4]
 800221e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002222:	6920      	ldr	r0, [r4, #16]
 8002224:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800222c:	0191      	lsls	r1, r2, #6
 800222e:	d50d      	bpl.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002230:	6923      	ldr	r3, [r4, #16]
 8002232:	6862      	ldr	r2, [r4, #4]
 8002234:	041b      	lsls	r3, r3, #16
 8002236:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800223a:	68e2      	ldr	r2, [r4, #12]
 800223c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002240:	68a2      	ldr	r2, [r4, #8]
 8002242:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002246:	4a14      	ldr	r2, [pc, #80]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002248:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800224c:	4e12      	ldr	r6, [pc, #72]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800224e:	6833      	ldr	r3, [r6, #0]
 8002250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002254:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002256:	f7fe f9bf 	bl	80005d8 <HAL_GetTick>
 800225a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800225c:	6833      	ldr	r3, [r6, #0]
 800225e:	011a      	lsls	r2, r3, #4
 8002260:	f53f aed6 	bmi.w	8002010 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002264:	f7fe f9b8 	bl	80005d8 <HAL_GetTick>
 8002268:	1bc0      	subs	r0, r0, r7
 800226a:	2864      	cmp	r0, #100	; 0x64
 800226c:	d9f6      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800226e:	e753      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002270:	f7fe f9b2 	bl	80005d8 <HAL_GetTick>
 8002274:	1bc0      	subs	r0, r0, r7
 8002276:	2864      	cmp	r0, #100	; 0x64
 8002278:	d984      	bls.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800227a:	e74d      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800227c:	f7fe f9ac 	bl	80005d8 <HAL_GetTick>
 8002280:	1bc0      	subs	r0, r0, r7
 8002282:	2864      	cmp	r0, #100	; 0x64
 8002284:	f67f aecf 	bls.w	8002026 <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8002288:	e746      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x390>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800228a:	f7fe f9a5 	bl	80005d8 <HAL_GetTick>
 800228e:	1b40      	subs	r0, r0, r5
 8002290:	2864      	cmp	r0, #100	; 0x64
 8002292:	f67f af32 	bls.w	80020fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002296:	e73f      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x390>
 8002298:	40023800 	.word	0x40023800

0800229c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800229c:	4770      	bx	lr

0800229e <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800229e:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 80022a0:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	f042 0201 	orr.w	r2, r2, #1
 80022a8:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
}
 80022b2:	4770      	bx	lr

080022b4 <HAL_TIM_OC_DelayElapsedCallback>:
 80022b4:	4770      	bx	lr

080022b6 <HAL_TIM_IC_CaptureCallback>:
 80022b6:	4770      	bx	lr

080022b8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80022b8:	4770      	bx	lr

080022ba <HAL_TIM_TriggerCallback>:
 80022ba:	4770      	bx	lr

080022bc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022bc:	6803      	ldr	r3, [r0, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	0791      	lsls	r1, r2, #30
{
 80022c2:	b510      	push	{r4, lr}
 80022c4:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022c6:	d50f      	bpl.n	80022e8 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	0792      	lsls	r2, r2, #30
 80022cc:	d50c      	bpl.n	80022e8 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022ce:	f06f 0202 	mvn.w	r2, #2
 80022d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022d4:	2201      	movs	r2, #1
 80022d6:	7702      	strb	r2, [r0, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	0799      	lsls	r1, r3, #30
 80022dc:	f000 8085 	beq.w	80023ea <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e0:	f7ff ffe9 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e4:	2300      	movs	r3, #0
 80022e6:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	0752      	lsls	r2, r2, #29
 80022ee:	d510      	bpl.n	8002312 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	0750      	lsls	r0, r2, #29
 80022f4:	d50d      	bpl.n	8002312 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022f6:	f06f 0204 	mvn.w	r2, #4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022fe:	2202      	movs	r2, #2
 8002300:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002308:	d075      	beq.n	80023f6 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800230a:	f7ff ffd4 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230e:	2300      	movs	r3, #0
 8002310:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	0711      	lsls	r1, r2, #28
 8002318:	d50f      	bpl.n	800233a <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	0712      	lsls	r2, r2, #28
 800231e:	d50c      	bpl.n	800233a <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002320:	f06f 0208 	mvn.w	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002324:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002328:	2204      	movs	r2, #4
 800232a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	079b      	lsls	r3, r3, #30
 8002330:	d067      	beq.n	8002402 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	f7ff ffc0 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	2300      	movs	r3, #0
 8002338:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	691a      	ldr	r2, [r3, #16]
 800233e:	06d0      	lsls	r0, r2, #27
 8002340:	d510      	bpl.n	8002364 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	06d1      	lsls	r1, r2, #27
 8002346:	d50d      	bpl.n	8002364 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002348:	f06f 0210 	mvn.w	r2, #16
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800234e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002350:	2208      	movs	r2, #8
 8002352:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	f413 7f40 	tst.w	r3, #768	; 0x300
 800235a:	d058      	beq.n	800240e <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 800235c:	f7ff ffab 	bl	80022b6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002360:	2300      	movs	r3, #0
 8002362:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	691a      	ldr	r2, [r3, #16]
 8002368:	07d2      	lsls	r2, r2, #31
 800236a:	d508      	bpl.n	800237e <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	07d0      	lsls	r0, r2, #31
 8002370:	d505      	bpl.n	800237e <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002372:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002376:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002378:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800237a:	f00e fc2d 	bl	8010bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	0611      	lsls	r1, r2, #24
 8002384:	d508      	bpl.n	8002398 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	0612      	lsls	r2, r2, #24
 800238a:	d505      	bpl.n	8002398 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800238c:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002390:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002392:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002394:	f000 f8c3 	bl	800251e <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002398:	6823      	ldr	r3, [r4, #0]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	05d0      	lsls	r0, r2, #23
 800239e:	d508      	bpl.n	80023b2 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	0611      	lsls	r1, r2, #24
 80023a4:	d505      	bpl.n	80023b2 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023ae:	f000 f8b6 	bl	800251e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	0652      	lsls	r2, r2, #25
 80023b8:	d508      	bpl.n	80023cc <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80023ba:	68da      	ldr	r2, [r3, #12]
 80023bc:	0650      	lsls	r0, r2, #25
 80023be:	d505      	bpl.n	80023cc <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023c4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023c8:	f7ff ff77 	bl	80022ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023cc:	6823      	ldr	r3, [r4, #0]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	0691      	lsls	r1, r2, #26
 80023d2:	d522      	bpl.n	800241a <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	0692      	lsls	r2, r2, #26
 80023d8:	d51f      	bpl.n	800241a <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023da:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 80023de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80023e6:	f000 b899 	b.w	800251c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	f7ff ff63 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ee:	4620      	mov	r0, r4
 80023f0:	f7ff ff62 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
 80023f4:	e776      	b.n	80022e4 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f6:	f7ff ff5d 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7ff ff5c 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002400:	e785      	b.n	800230e <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	f7ff ff57 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002406:	4620      	mov	r0, r4
 8002408:	f7ff ff56 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
 800240c:	e793      	b.n	8002336 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	f7ff ff51 	bl	80022b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002412:	4620      	mov	r0, r4
 8002414:	f7ff ff50 	bl	80022b8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002418:	e7a2      	b.n	8002360 <HAL_TIM_IRQHandler+0xa4>
}
 800241a:	bd10      	pop	{r4, pc}

0800241c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800241c:	4a30      	ldr	r2, [pc, #192]	; (80024e0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800241e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002420:	4290      	cmp	r0, r2
 8002422:	d012      	beq.n	800244a <TIM_Base_SetConfig+0x2e>
 8002424:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002428:	d00f      	beq.n	800244a <TIM_Base_SetConfig+0x2e>
 800242a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800242e:	4290      	cmp	r0, r2
 8002430:	d00b      	beq.n	800244a <TIM_Base_SetConfig+0x2e>
 8002432:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002436:	4290      	cmp	r0, r2
 8002438:	d007      	beq.n	800244a <TIM_Base_SetConfig+0x2e>
 800243a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800243e:	4290      	cmp	r0, r2
 8002440:	d003      	beq.n	800244a <TIM_Base_SetConfig+0x2e>
 8002442:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002446:	4290      	cmp	r0, r2
 8002448:	d119      	bne.n	800247e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800244a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800244c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002450:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002452:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <TIM_Base_SetConfig+0xc4>)
 8002454:	4290      	cmp	r0, r2
 8002456:	d029      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 8002458:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800245c:	d026      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 800245e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002462:	4290      	cmp	r0, r2
 8002464:	d022      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 8002466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800246a:	4290      	cmp	r0, r2
 800246c:	d01e      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 800246e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002472:	4290      	cmp	r0, r2
 8002474:	d01a      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 8002476:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800247a:	4290      	cmp	r0, r2
 800247c:	d016      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 800247e:	4a19      	ldr	r2, [pc, #100]	; (80024e4 <TIM_Base_SetConfig+0xc8>)
 8002480:	4290      	cmp	r0, r2
 8002482:	d013      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 8002484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002488:	4290      	cmp	r0, r2
 800248a:	d00f      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 800248c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002490:	4290      	cmp	r0, r2
 8002492:	d00b      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 8002494:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002498:	4290      	cmp	r0, r2
 800249a:	d007      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 800249c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a0:	4290      	cmp	r0, r2
 80024a2:	d003      	beq.n	80024ac <TIM_Base_SetConfig+0x90>
 80024a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a8:	4290      	cmp	r0, r2
 80024aa:	d103      	bne.n	80024b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024b0:	68ca      	ldr	r2, [r1, #12]
 80024b2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024b4:	694a      	ldr	r2, [r1, #20]
 80024b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024ba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80024bc:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024be:	688b      	ldr	r3, [r1, #8]
 80024c0:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80024c2:	680b      	ldr	r3, [r1, #0]
 80024c4:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <TIM_Base_SetConfig+0xc4>)
 80024c8:	4298      	cmp	r0, r3
 80024ca:	d003      	beq.n	80024d4 <TIM_Base_SetConfig+0xb8>
 80024cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024d0:	4298      	cmp	r0, r3
 80024d2:	d101      	bne.n	80024d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024d4:	690b      	ldr	r3, [r1, #16]
 80024d6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d8:	2301      	movs	r3, #1
 80024da:	6143      	str	r3, [r0, #20]
}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40014000 	.word	0x40014000

080024e8 <HAL_TIM_Base_Init>:
{ 
 80024e8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80024ea:	4604      	mov	r4, r0
 80024ec:	b1a0      	cbz	r0, 8002518 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80024ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024f6:	b91b      	cbnz	r3, 8002500 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80024f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80024fc:	f7ff fece 	bl	800229c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002500:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002502:	6820      	ldr	r0, [r4, #0]
 8002504:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002506:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800250a:	f7ff ff87 	bl	800241c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800250e:	2301      	movs	r3, #1
  return HAL_OK;
 8002510:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002512:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002516:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
 800251a:	e7fc      	b.n	8002516 <HAL_TIM_Base_Init+0x2e>

0800251c <HAL_TIMEx_CommutationCallback>:
 800251c:	4770      	bx	lr

0800251e <HAL_TIMEx_BreakCallback>:
 800251e:	4770      	bx	lr

08002520 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002524:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002528:	4604      	mov	r4, r0
 800252a:	460e      	mov	r6, r1
 800252c:	4615      	mov	r5, r2
 800252e:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002530:	6822      	ldr	r2, [r4, #0]
 8002532:	69d3      	ldr	r3, [r2, #28]
 8002534:	ea36 0303 	bics.w	r3, r6, r3
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	42ab      	cmp	r3, r5
 8002540:	d001      	beq.n	8002546 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002542:	2000      	movs	r0, #0
 8002544:	e017      	b.n	8002576 <UART_WaitOnFlagUntilTimeout+0x56>
    if(Timeout != HAL_MAX_DELAY)
 8002546:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800254a:	d0f2      	beq.n	8002532 <UART_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800254c:	f1b8 0f00 	cmp.w	r8, #0
 8002550:	d113      	bne.n	800257a <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002552:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002554:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800255c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	f022 0201 	bic.w	r2, r2, #1
 8002564:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002566:	2320      	movs	r3, #32
 8002568:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800256c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002570:	2300      	movs	r3, #0
 8002572:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
}
 8002576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800257a:	f7fe f82d 	bl	80005d8 <HAL_GetTick>
 800257e:	1bc0      	subs	r0, r0, r7
 8002580:	4540      	cmp	r0, r8
 8002582:	d3d5      	bcc.n	8002530 <UART_WaitOnFlagUntilTimeout+0x10>
 8002584:	e7e5      	b.n	8002552 <UART_WaitOnFlagUntilTimeout+0x32>
	...

08002588 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002588:	b538      	push	{r3, r4, r5, lr}
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800258a:	69c2      	ldr	r2, [r0, #28]
{
 800258c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800258e:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002590:	6881      	ldr	r1, [r0, #8]
 8002592:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002594:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002596:	4301      	orrs	r1, r0
 8002598:	6960      	ldr	r0, [r4, #20]
 800259a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800259c:	489e      	ldr	r0, [pc, #632]	; (8002818 <UART_SetConfig+0x290>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800259e:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025a0:	4028      	ands	r0, r5
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80025a2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025a4:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80025a8:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80025b0:	4301      	orrs	r1, r0
 80025b2:	6059      	str	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80025b4:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025b6:	6898      	ldr	r0, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80025b8:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80025ba:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
 80025be:	4301      	orrs	r1, r0
 80025c0:	6099      	str	r1, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80025c2:	4996      	ldr	r1, [pc, #600]	; (800281c <UART_SetConfig+0x294>)
 80025c4:	428b      	cmp	r3, r1
 80025c6:	d11d      	bne.n	8002604 <UART_SetConfig+0x7c>
 80025c8:	f501 3194 	add.w	r1, r1, #75776	; 0x12800
 80025cc:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 80025d0:	f001 0103 	and.w	r1, r1, #3
 80025d4:	3901      	subs	r1, #1
 80025d6:	2902      	cmp	r1, #2
 80025d8:	f200 80ff 	bhi.w	80027da <UART_SetConfig+0x252>
 80025dc:	4890      	ldr	r0, [pc, #576]	; (8002820 <UART_SetConfig+0x298>)

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80025e2:	5c41      	ldrb	r1, [r0, r1]
 80025e4:	f040 80ab 	bne.w	800273e <UART_SetConfig+0x1b6>
  {
    switch (clocksource)
 80025e8:	2908      	cmp	r1, #8
 80025ea:	f200 80a5 	bhi.w	8002738 <UART_SetConfig+0x1b0>
 80025ee:	e8df f011 	tbh	[pc, r1, lsl #1]
 80025f2:	00e2      	.short	0x00e2
 80025f4:	00fd00f7 	.word	0x00fd00f7
 80025f8:	010900a3 	.word	0x010900a3
 80025fc:	00a300a3 	.word	0x00a300a3
 8002600:	003200a3 	.word	0x003200a3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002604:	4987      	ldr	r1, [pc, #540]	; (8002824 <UART_SetConfig+0x29c>)
 8002606:	428b      	cmp	r3, r1
 8002608:	d107      	bne.n	800261a <UART_SetConfig+0x92>
 800260a:	f501 31fa 	add.w	r1, r1, #128000	; 0x1f400
 800260e:	4886      	ldr	r0, [pc, #536]	; (8002828 <UART_SetConfig+0x2a0>)
 8002610:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 8002614:	f001 010c 	and.w	r1, r1, #12
 8002618:	e7e1      	b.n	80025de <UART_SetConfig+0x56>
 800261a:	4984      	ldr	r1, [pc, #528]	; (800282c <UART_SetConfig+0x2a4>)
 800261c:	428b      	cmp	r3, r1
 800261e:	d11f      	bne.n	8002660 <UART_SetConfig+0xd8>
 8002620:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
 8002624:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 8002628:	f001 0130 	and.w	r1, r1, #48	; 0x30
 800262c:	2920      	cmp	r1, #32
 800262e:	f000 80da 	beq.w	80027e6 <UART_SetConfig+0x25e>
 8002632:	d80a      	bhi.n	800264a <UART_SetConfig+0xc2>
 8002634:	2900      	cmp	r1, #0
 8002636:	f000 80bb 	beq.w	80027b0 <UART_SetConfig+0x228>
 800263a:	2910      	cmp	r1, #16
 800263c:	f000 80df 	beq.w	80027fe <UART_SetConfig+0x276>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002640:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002644:	d078      	beq.n	8002738 <UART_SetConfig+0x1b0>
 8002646:	2001      	movs	r0, #1
        ret = HAL_ERROR;
      break;
    }
  }

  return ret;
 8002648:	e0c6      	b.n	80027d8 <UART_SetConfig+0x250>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800264a:	2930      	cmp	r1, #48	; 0x30
 800264c:	d1f8      	bne.n	8002640 <UART_SetConfig+0xb8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002652:	f040 80a8 	bne.w	80027a6 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002656:	6862      	ldr	r2, [r4, #4]
 8002658:	0853      	lsrs	r3, r2, #1
 800265a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800265e:	e0cb      	b.n	80027f8 <UART_SetConfig+0x270>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002660:	4973      	ldr	r1, [pc, #460]	; (8002830 <UART_SetConfig+0x2a8>)
 8002662:	428b      	cmp	r3, r1
 8002664:	d110      	bne.n	8002688 <UART_SetConfig+0x100>
 8002666:	f501 31f6 	add.w	r1, r1, #125952	; 0x1ec00
 800266a:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 800266e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
 8002672:	2980      	cmp	r1, #128	; 0x80
 8002674:	f000 80b7 	beq.w	80027e6 <UART_SetConfig+0x25e>
 8002678:	d804      	bhi.n	8002684 <UART_SetConfig+0xfc>
 800267a:	2900      	cmp	r1, #0
 800267c:	f000 8098 	beq.w	80027b0 <UART_SetConfig+0x228>
 8002680:	2940      	cmp	r1, #64	; 0x40
 8002682:	e7db      	b.n	800263c <UART_SetConfig+0xb4>
 8002684:	29c0      	cmp	r1, #192	; 0xc0
 8002686:	e7e1      	b.n	800264c <UART_SetConfig+0xc4>
 8002688:	496a      	ldr	r1, [pc, #424]	; (8002834 <UART_SetConfig+0x2ac>)
 800268a:	428b      	cmp	r3, r1
 800268c:	d113      	bne.n	80026b6 <UART_SetConfig+0x12e>
 800268e:	f501 31f4 	add.w	r1, r1, #124928	; 0x1e800
 8002692:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 8002696:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800269a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800269e:	f000 80a2 	beq.w	80027e6 <UART_SetConfig+0x25e>
 80026a2:	d805      	bhi.n	80026b0 <UART_SetConfig+0x128>
 80026a4:	2900      	cmp	r1, #0
 80026a6:	f000 8083 	beq.w	80027b0 <UART_SetConfig+0x228>
 80026aa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80026ae:	e7c5      	b.n	800263c <UART_SetConfig+0xb4>
 80026b0:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80026b4:	e7ca      	b.n	800264c <UART_SetConfig+0xc4>
 80026b6:	4960      	ldr	r1, [pc, #384]	; (8002838 <UART_SetConfig+0x2b0>)
 80026b8:	428b      	cmp	r3, r1
 80026ba:	d113      	bne.n	80026e4 <UART_SetConfig+0x15c>
 80026bc:	f501 3192 	add.w	r1, r1, #74752	; 0x12400
 80026c0:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 80026c4:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80026c8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80026cc:	f000 808b 	beq.w	80027e6 <UART_SetConfig+0x25e>
 80026d0:	d805      	bhi.n	80026de <UART_SetConfig+0x156>
 80026d2:	2900      	cmp	r1, #0
 80026d4:	f000 8081 	beq.w	80027da <UART_SetConfig+0x252>
 80026d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80026dc:	e7ae      	b.n	800263c <UART_SetConfig+0xb4>
 80026de:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80026e2:	e7b3      	b.n	800264c <UART_SetConfig+0xc4>
 80026e4:	4955      	ldr	r1, [pc, #340]	; (800283c <UART_SetConfig+0x2b4>)
 80026e6:	428b      	cmp	r3, r1
 80026e8:	d111      	bne.n	800270e <UART_SetConfig+0x186>
 80026ea:	f501 31e0 	add.w	r1, r1, #114688	; 0x1c000
 80026ee:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 80026f2:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 80026f6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80026fa:	d074      	beq.n	80027e6 <UART_SetConfig+0x25e>
 80026fc:	d804      	bhi.n	8002708 <UART_SetConfig+0x180>
 80026fe:	2900      	cmp	r1, #0
 8002700:	d056      	beq.n	80027b0 <UART_SetConfig+0x228>
 8002702:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002706:	e799      	b.n	800263c <UART_SetConfig+0xb4>
 8002708:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800270c:	e79e      	b.n	800264c <UART_SetConfig+0xc4>
 800270e:	494c      	ldr	r1, [pc, #304]	; (8002840 <UART_SetConfig+0x2b8>)
 8002710:	428b      	cmp	r3, r1
 8002712:	d195      	bne.n	8002640 <UART_SetConfig+0xb8>
 8002714:	f501 31de 	add.w	r1, r1, #113664	; 0x1bc00
 8002718:	f8d1 1090 	ldr.w	r1, [r1, #144]	; 0x90
 800271c:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 8002720:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002724:	d05f      	beq.n	80027e6 <UART_SetConfig+0x25e>
 8002726:	d804      	bhi.n	8002732 <UART_SetConfig+0x1aa>
 8002728:	2900      	cmp	r1, #0
 800272a:	d041      	beq.n	80027b0 <UART_SetConfig+0x228>
 800272c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002730:	e784      	b.n	800263c <UART_SetConfig+0xb4>
 8002732:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 8002736:	e789      	b.n	800264c <UART_SetConfig+0xc4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002738:	2001      	movs	r0, #1
 800273a:	2300      	movs	r3, #0
 800273c:	e045      	b.n	80027ca <UART_SetConfig+0x242>
    switch (clocksource)
 800273e:	2908      	cmp	r1, #8
 8002740:	d881      	bhi.n	8002646 <UART_SetConfig+0xbe>
 8002742:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <UART_SetConfig+0x1c0>)
 8002744:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8002748:	0800276d 	.word	0x0800276d
 800274c:	08002785 	.word	0x08002785
 8002750:	0800278b 	.word	0x0800278b
 8002754:	08002647 	.word	0x08002647
 8002758:	080027a1 	.word	0x080027a1
 800275c:	08002647 	.word	0x08002647
 8002760:	08002647 	.word	0x08002647
 8002764:	08002647 	.word	0x08002647
 8002768:	080027a7 	.word	0x080027a7
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800276c:	f7ff face 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002770:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002774:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8002778:	fbb0 f0f3 	udiv	r0, r0, r3
 800277c:	b280      	uxth	r0, r0
 800277e:	60d0      	str	r0, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002780:	2000      	movs	r0, #0
      break;
 8002782:	e029      	b.n	80027d8 <UART_SetConfig+0x250>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002784:	f7ff fad2 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 8002788:	e7f2      	b.n	8002770 <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800278a:	6861      	ldr	r1, [r4, #4]
 800278c:	084a      	lsrs	r2, r1, #1
 800278e:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
 8002792:	f502 5210 	add.w	r2, r2, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002796:	fbb2 f2f1 	udiv	r2, r2, r1
 800279a:	b292      	uxth	r2, r2
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	e7ef      	b.n	8002780 <UART_SetConfig+0x1f8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027a0:	f7ff f9e4 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 80027a4:	e7e4      	b.n	8002770 <UART_SetConfig+0x1e8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027a6:	6861      	ldr	r1, [r4, #4]
 80027a8:	084a      	lsrs	r2, r1, #1
 80027aa:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80027ae:	e7f2      	b.n	8002796 <UART_SetConfig+0x20e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027b0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80027b4:	d1da      	bne.n	800276c <UART_SetConfig+0x1e4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027b6:	f7ff faa9 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027ba:	6863      	ldr	r3, [r4, #4]
 80027bc:	085a      	lsrs	r2, r3, #1
 80027be:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 80027c2:	fbb0 f3f3 	udiv	r3, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027c6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80027c8:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 80027ca:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027ce:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80027d2:	6821      	ldr	r1, [r4, #0]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60cb      	str	r3, [r1, #12]

}
 80027d8:	bd38      	pop	{r3, r4, r5, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80027de:	d1d1      	bne.n	8002784 <UART_SetConfig+0x1fc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027e0:	f7ff faa4 	bl	8001d2c <HAL_RCC_GetPCLK2Freq>
 80027e4:	e7e9      	b.n	80027ba <UART_SetConfig+0x232>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80027ea:	d1ce      	bne.n	800278a <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80027ec:	6862      	ldr	r2, [r4, #4]
 80027ee:	0853      	lsrs	r3, r2, #1
 80027f0:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80027f4:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80027fc:	e7e3      	b.n	80027c6 <UART_SetConfig+0x23e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027fe:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002802:	d1cd      	bne.n	80027a0 <UART_SetConfig+0x218>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002804:	f7ff f9b2 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8002808:	6861      	ldr	r1, [r4, #4]
 800280a:	084a      	lsrs	r2, r1, #1
 800280c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002810:	fbb3 f3f1 	udiv	r3, r3, r1
 8002814:	e7d7      	b.n	80027c6 <UART_SetConfig+0x23e>
 8002816:	bf00      	nop
 8002818:	efff69f3 	.word	0xefff69f3
 800281c:	40011000 	.word	0x40011000
 8002820:	08012770 	.word	0x08012770
 8002824:	40004400 	.word	0x40004400
 8002828:	08012773 	.word	0x08012773
 800282c:	40004800 	.word	0x40004800
 8002830:	40004c00 	.word	0x40004c00
 8002834:	40005000 	.word	0x40005000
 8002838:	40011400 	.word	0x40011400
 800283c:	40007800 	.word	0x40007800
 8002840:	40007c00 	.word	0x40007c00

08002844 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002844:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002846:	07da      	lsls	r2, r3, #31
{
 8002848:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800284a:	d506      	bpl.n	800285a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800284c:	6801      	ldr	r1, [r0, #0]
 800284e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002850:	684a      	ldr	r2, [r1, #4]
 8002852:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002856:	4322      	orrs	r2, r4
 8002858:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800285a:	079c      	lsls	r4, r3, #30
 800285c:	d506      	bpl.n	800286c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800285e:	6801      	ldr	r1, [r0, #0]
 8002860:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002862:	684a      	ldr	r2, [r1, #4]
 8002864:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002868:	4322      	orrs	r2, r4
 800286a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800286c:	0759      	lsls	r1, r3, #29
 800286e:	d506      	bpl.n	800287e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002870:	6801      	ldr	r1, [r0, #0]
 8002872:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002874:	684a      	ldr	r2, [r1, #4]
 8002876:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800287a:	4322      	orrs	r2, r4
 800287c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800287e:	071a      	lsls	r2, r3, #28
 8002880:	d506      	bpl.n	8002890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002882:	6801      	ldr	r1, [r0, #0]
 8002884:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002886:	684a      	ldr	r2, [r1, #4]
 8002888:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800288c:	4322      	orrs	r2, r4
 800288e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002890:	06dc      	lsls	r4, r3, #27
 8002892:	d506      	bpl.n	80028a2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002894:	6801      	ldr	r1, [r0, #0]
 8002896:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002898:	688a      	ldr	r2, [r1, #8]
 800289a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800289e:	4322      	orrs	r2, r4
 80028a0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028a2:	0699      	lsls	r1, r3, #26
 80028a4:	d506      	bpl.n	80028b4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028a6:	6801      	ldr	r1, [r0, #0]
 80028a8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80028aa:	688a      	ldr	r2, [r1, #8]
 80028ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b0:	4322      	orrs	r2, r4
 80028b2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028b4:	065a      	lsls	r2, r3, #25
 80028b6:	d510      	bpl.n	80028da <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028b8:	6801      	ldr	r1, [r0, #0]
 80028ba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028bc:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028be:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80028c6:	ea42 0204 	orr.w	r2, r2, r4
 80028ca:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028cc:	d105      	bne.n	80028da <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028ce:	684a      	ldr	r2, [r1, #4]
 80028d0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80028d2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80028d6:	4322      	orrs	r2, r4
 80028d8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028da:	061b      	lsls	r3, r3, #24
 80028dc:	d506      	bpl.n	80028ec <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028de:	6802      	ldr	r2, [r0, #0]
 80028e0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80028e2:	6853      	ldr	r3, [r2, #4]
 80028e4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80028e8:	430b      	orrs	r3, r1
 80028ea:	6053      	str	r3, [r2, #4]
  }
}
 80028ec:	bd10      	pop	{r4, pc}

080028ee <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f0:	2500      	movs	r5, #0
{
 80028f2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80028f6:	f7fd fe6f 	bl	80005d8 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028fa:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 80028fc:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	0712      	lsls	r2, r2, #28
 8002902:	d409      	bmi.n	8002918 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002904:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002906:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002908:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800290c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002910:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002914:	b003      	add	sp, #12
 8002916:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002918:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800291c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002920:	4620      	mov	r0, r4
 8002922:	9200      	str	r2, [sp, #0]
 8002924:	462a      	mov	r2, r5
 8002926:	f7ff fdfb 	bl	8002520 <UART_WaitOnFlagUntilTimeout>
 800292a:	2800      	cmp	r0, #0
 800292c:	d0ea      	beq.n	8002904 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800292e:	2003      	movs	r0, #3
 8002930:	e7f0      	b.n	8002914 <UART_CheckIdleState+0x26>

08002932 <HAL_UART_Init>:
{
 8002932:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002934:	4604      	mov	r4, r0
 8002936:	b360      	cbz	r0, 8002992 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002938:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800293c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002940:	b91b      	cbnz	r3, 800294a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002942:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002946:	f00e f999 	bl	8010c7c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800294a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800294c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800294e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002950:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800295c:	f7ff fe14 	bl	8002588 <UART_SetConfig>
 8002960:	2801      	cmp	r0, #1
 8002962:	d016      	beq.n	8002992 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002966:	b113      	cbz	r3, 800296e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002968:	4620      	mov	r0, r4
 800296a:	f7ff ff6b 	bl	8002844 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800296e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002970:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002978:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002980:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
}
 8002988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800298c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800298e:	f7ff bfae 	b.w	80028ee <UART_CheckIdleState>
}
 8002992:	2001      	movs	r0, #1
 8002994:	bd10      	pop	{r4, pc}
	...

08002998 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002998:	4b0a      	ldr	r3, [pc, #40]	; (80029c4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800299a:	3b01      	subs	r3, #1
 800299c:	d00f      	beq.n	80029be <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800299e:	6902      	ldr	r2, [r0, #16]
 80029a0:	2a00      	cmp	r2, #0
 80029a2:	dafa      	bge.n	800299a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80029a4:	6903      	ldr	r3, [r0, #16]
 80029a6:	4a07      	ldr	r2, [pc, #28]	; (80029c4 <USB_CoreReset+0x2c>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80029ae:	3a01      	subs	r2, #1
 80029b0:	d005      	beq.n	80029be <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80029b2:	6903      	ldr	r3, [r0, #16]
 80029b4:	f013 0301 	ands.w	r3, r3, #1
 80029b8:	d1f9      	bne.n	80029ae <USB_CoreReset+0x16>

  return HAL_OK;
 80029ba:	4618      	mov	r0, r3
 80029bc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80029be:	2003      	movs	r0, #3
}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	00030d41 	.word	0x00030d41

080029c8 <USB_CoreInit>:
{
 80029c8:	b084      	sub	sp, #16
 80029ca:	b538      	push	{r3, r4, r5, lr}
 80029cc:	ad05      	add	r5, sp, #20
 80029ce:	4604      	mov	r4, r0
 80029d0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80029d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d127      	bne.n	8002a2a <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80029da:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80029dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80029e2:	68c3      	ldr	r3, [r0, #12]
 80029e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80029e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ec:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80029ee:	68c3      	ldr	r3, [r0, #12]
 80029f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80029f4:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 80029f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d103      	bne.n	8002a04 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80029fc:	68c3      	ldr	r3, [r0, #12]
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a02:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8002a04:	4620      	mov	r0, r4
 8002a06:	f7ff ffc7 	bl	8002998 <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 8002a0a:	9b08      	ldr	r3, [sp, #32]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d107      	bne.n	8002a20 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002a10:	68a3      	ldr	r3, [r4, #8]
 8002a12:	f043 0306 	orr.w	r3, r3, #6
 8002a16:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002a18:	68a3      	ldr	r3, [r4, #8]
 8002a1a:	f043 0320 	orr.w	r3, r3, #32
 8002a1e:	60a3      	str	r3, [r4, #8]
}
 8002a20:	2000      	movs	r0, #0
 8002a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a26:	b004      	add	sp, #16
 8002a28:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002a2a:	68c3      	ldr	r3, [r0, #12]
 8002a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a30:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8002a32:	f7ff ffb1 	bl	8002998 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002a36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a3c:	e7e5      	b.n	8002a0a <USB_CoreInit+0x42>

08002a3e <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002a3e:	6883      	ldr	r3, [r0, #8]
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6083      	str	r3, [r0, #8]
}
 8002a46:	2000      	movs	r0, #0
 8002a48:	4770      	bx	lr

08002a4a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002a4a:	6883      	ldr	r3, [r0, #8]
 8002a4c:	f023 0301 	bic.w	r3, r3, #1
 8002a50:	6083      	str	r3, [r0, #8]
}
 8002a52:	2000      	movs	r0, #0
 8002a54:	4770      	bx	lr

08002a56 <USB_SetCurrentMode>:
{
 8002a56:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002a58:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002a5a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002a5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002a60:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002a62:	d108      	bne.n	8002a76 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002a64:	68c3      	ldr	r3, [r0, #12]
 8002a66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002a6a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002a6c:	2032      	movs	r0, #50	; 0x32
 8002a6e:	f7fd fdb9 	bl	80005e4 <HAL_Delay>
  return HAL_OK;
 8002a72:	2000      	movs	r0, #0
}
 8002a74:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002a76:	b919      	cbnz	r1, 8002a80 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002a78:	68c3      	ldr	r3, [r0, #12]
 8002a7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a7e:	e7f4      	b.n	8002a6a <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002a80:	2001      	movs	r0, #1
 8002a82:	e7f7      	b.n	8002a74 <USB_SetCurrentMode+0x1e>

08002a84 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002a84:	0189      	lsls	r1, r1, #6
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <USB_FlushTxFifo+0x20>)
 8002a88:	f041 0120 	orr.w	r1, r1, #32
 8002a8c:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002a8e:	3a01      	subs	r2, #1
 8002a90:	d005      	beq.n	8002a9e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002a92:	6903      	ldr	r3, [r0, #16]
 8002a94:	f013 0320 	ands.w	r3, r3, #32
 8002a98:	d1f9      	bne.n	8002a8e <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002a9e:	2003      	movs	r0, #3
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	00030d41 	.word	0x00030d41

08002aa8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <USB_FlushRxFifo+0x1c>)
 8002aac:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	d005      	beq.n	8002abe <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002ab2:	6903      	ldr	r3, [r0, #16]
 8002ab4:	f013 0310 	ands.w	r3, r3, #16
 8002ab8:	d1f9      	bne.n	8002aae <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002aba:	4618      	mov	r0, r3
 8002abc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002abe:	2003      	movs	r0, #3
}
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	00030d41 	.word	0x00030d41

08002ac8 <USB_WritePacket>:
{
 8002ac8:	b510      	push	{r4, lr}
 8002aca:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8002ace:	b944      	cbnz	r4, 8002ae2 <USB_WritePacket+0x1a>
    count32b =  ((uint32_t)len + 3U) / 4U;
 8002ad0:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8002ad2:	3201      	adds	r2, #1
    count32b =  ((uint32_t)len + 3U) / 4U;
 8002ad4:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8002ad6:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002ada:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8002ade:	428b      	cmp	r3, r1
 8002ae0:	d101      	bne.n	8002ae6 <USB_WritePacket+0x1e>
}
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8002ae6:	f851 2b04 	ldr.w	r2, [r1], #4
 8002aea:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8002aec:	e7f7      	b.n	8002ade <USB_WritePacket+0x16>

08002aee <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002aee:	3203      	adds	r2, #3
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8002af0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8002af4:	0892      	lsrs	r2, r2, #2
 8002af6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (i = 0U; i < count32b; i++)
 8002afa:	4291      	cmp	r1, r2
 8002afc:	d101      	bne.n	8002b02 <USB_ReadPacket+0x14>
}
 8002afe:	4608      	mov	r0, r1
 8002b00:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8002b02:	6803      	ldr	r3, [r0, #0]
 8002b04:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8002b08:	e7f7      	b.n	8002afa <USB_ReadPacket+0xc>

08002b0a <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002b0a:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002b0c:	6980      	ldr	r0, [r0, #24]
}
 8002b0e:	4010      	ands	r0, r2
 8002b10:	4770      	bx	lr

08002b12 <USB_GetMode>:
  return ((USBx->GINTSTS ) & 0x1U);
 8002b12:	6940      	ldr	r0, [r0, #20]
}
 8002b14:	f000 0001 	and.w	r0, r0, #1
 8002b18:	4770      	bx	lr

08002b1a <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx , uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002b1a:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 8002b1e:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002b20:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 8002b24:	f023 0303 	bic.w	r3, r3, #3
{
 8002b28:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002b2a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002b2e:	f001 0303 	and.w	r3, r1, #3
 8002b32:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8002b36:	ea43 0304 	orr.w	r3, r3, r4
 8002b3a:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8002b3e:	d104      	bne.n	8002b4a <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 8002b40:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8002b44:	6053      	str	r3, [r2, #4]
  {
     /* ... */
  }

  return HAL_OK;
}
 8002b46:	2000      	movs	r0, #0
 8002b48:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8002b4a:	2902      	cmp	r1, #2
 8002b4c:	d1fb      	bne.n	8002b46 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 8002b4e:	f241 7370 	movw	r3, #6000	; 0x1770
 8002b52:	e7f7      	b.n	8002b44 <USB_InitFSLSPClkSel+0x2a>

08002b54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8002b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8002b56:	2500      	movs	r5, #0
{
 8002b58:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 8002b5a:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002b5c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002b60:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002b62:	9b01      	ldr	r3, [sp, #4]
 8002b64:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b68:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002b6a:	9b01      	ldr	r3, [sp, #4]
 8002b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b70:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay (100U);                                /* See Note #1 */
 8002b74:	2064      	movs	r0, #100	; 0x64
 8002b76:	f7fd fd35 	bl	80005e4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002b7a:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay (10U);
 8002b7c:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b82:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay (10U);
 8002b86:	f7fd fd2d 	bl	80005e4 <HAL_Delay>

  return HAL_OK;
}
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	b003      	add	sp, #12
 8002b8e:	bd30      	pop	{r4, r5, pc}

08002b90 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus (USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8002b90:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002b96:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002b9a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002b9c:	9b01      	ldr	r3, [sp, #4]
 8002b9e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ba2:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002ba4:	9b01      	ldr	r3, [sp, #4]
 8002ba6:	04da      	lsls	r2, r3, #19
 8002ba8:	d406      	bmi.n	8002bb8 <USB_DriveVbus+0x28>
 8002baa:	2901      	cmp	r1, #1
 8002bac:	d104      	bne.n	8002bb8 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8002bae:	9b01      	ldr	r3, [sp, #4]
 8002bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bb4:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002bb8:	9b01      	ldr	r3, [sp, #4]
 8002bba:	04db      	lsls	r3, r3, #19
 8002bbc:	d505      	bpl.n	8002bca <USB_DriveVbus+0x3a>
 8002bbe:	b921      	cbnz	r1, 8002bca <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8002bc0:	9b01      	ldr	r3, [sp, #4]
 8002bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bc6:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002bca:	2000      	movs	r0, #0
 8002bcc:	b002      	add	sp, #8
 8002bce:	4770      	bx	lr

08002bd0 <USB_HostInit>:
{
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	b538      	push	{r3, r4, r5, lr}
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	a805      	add	r0, sp, #20
 8002bd8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8002be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002be4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002be8:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((cfg.speed == USB_OTG_SPEED_FULL) && (USBx != USB_OTG_FS))
 8002bea:	9b07      	ldr	r3, [sp, #28]
 8002bec:	2b03      	cmp	r3, #3
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002bee:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
  if ((cfg.speed == USB_OTG_SPEED_FULL) && (USBx != USB_OTG_FS))
 8002bf2:	d13c      	bne.n	8002c6e <USB_HostInit+0x9e>
 8002bf4:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8002bf8:	d039      	beq.n	8002c6e <USB_HostInit+0x9e>
    USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002bfe:	2110      	movs	r1, #16
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002c00:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff ff3d 	bl	8002a84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff ff4c 	bl	8002aa8 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	9906      	ldr	r1, [sp, #24]
 8002c14:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8002c1c:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8002c1e:	4299      	cmp	r1, r3
 8002c20:	d128      	bne.n	8002c74 <USB_HostInit+0xa4>
  (void)USB_DriveVbus(USBx, 1U);
 8002c22:	2101      	movs	r1, #1
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff ffb3 	bl	8002b90 <USB_DriveVbus>
  HAL_Delay(200U);
 8002c2a:	20c8      	movs	r0, #200	; 0xc8
 8002c2c:	f7fd fcda 	bl	80005e4 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8002c30:	2300      	movs	r3, #0
  if(USBx == USB_OTG_FS)
 8002c32:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  USBx->GINTMSK = 0U;
 8002c36:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3c:	6163      	str	r3, [r4, #20]
  if(USBx == USB_OTG_FS)
 8002c3e:	d11e      	bne.n	8002c7e <USB_HostInit+0xae>
    USBx->GRXFSIZ  = 0x80U;
 8002c40:	2380      	movs	r3, #128	; 0x80
 8002c42:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002c44:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002c48:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <USB_HostInit+0xc0>)
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8002c4c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8002c50:	9b08      	ldr	r3, [sp, #32]
 8002c52:	b91b      	cbnz	r3, 8002c5c <USB_HostInit+0x8c>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002c54:	69a3      	ldr	r3, [r4, #24]
 8002c56:	f043 0310 	orr.w	r3, r3, #16
 8002c5a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8002c5c:	69a2      	ldr	r2, [r4, #24]
}
 8002c5e:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM |\
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <USB_HostInit+0xc4>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61a3      	str	r3, [r4, #24]
}
 8002c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c6a:	b004      	add	sp, #16
 8002c6c:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002c6e:	f023 0304 	bic.w	r3, r3, #4
 8002c72:	e7c4      	b.n	8002bfe <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002c74:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002c76:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8002c78:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002c7a:	3220      	adds	r2, #32
 8002c7c:	e7cf      	b.n	8002c1e <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x200U;
 8002c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c82:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t )(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8002c84:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002c88:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t )(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8002c8a:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <USB_HostInit+0xc8>)
 8002c8c:	e7de      	b.n	8002c4c <USB_HostInit+0x7c>
 8002c8e:	bf00      	nop
 8002c90:	004000e0 	.word	0x004000e0
 8002c94:	a3200008 	.word	0xa3200008
 8002c98:	00e00300 	.word	0x00e00300

08002c9c <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed (USB_OTG_GlobalTypeDef *USBx)
{
 8002c9c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002ca2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002ca6:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002ca8:	9801      	ldr	r0, [sp, #4]
}
 8002caa:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002cae:	b002      	add	sp, #8
 8002cb0:	4770      	bx	lr

08002cb2 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002cb2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002cb6:	6880      	ldr	r0, [r0, #8]
}
 8002cb8:	b280      	uxth	r0, r0
 8002cba:	4770      	bx	lr

08002cbc <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002cc0:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8002cc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
{
 8002cc8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8002ccc:	fa4f fc82 	sxtb.w	ip, r2
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002cd0:	f505 64a0 	add.w	r4, r5, #1280	; 0x500
 8002cd4:	60a7      	str	r7, [r4, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002cd6:	2e03      	cmp	r6, #3
 8002cd8:	d869      	bhi.n	8002dae <USB_HC_Init+0xf2>
 8002cda:	e8df f006 	tbb	[pc, r6]
 8002cde:	5e02      	.short	0x5e02
 8002ce0:	5702      	.short	0x5702
  {
  case EP_TYPE_CTRL:
  case EP_TYPE_BULK:
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002ce2:	f240 479d 	movw	r7, #1181	; 0x49d
                                USB_OTG_HCINTMSK_TXERRM |
                                USB_OTG_HCINTMSK_DTERRM |
                                USB_OTG_HCINTMSK_AHBERR |
                                USB_OTG_HCINTMSK_NAKM;

    if ((epnum & 0x80U) == 0x80U)
 8002ce6:	f1bc 0f00 	cmp.w	ip, #0
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002cea:	60e7      	str	r7, [r4, #12]
    if ((epnum & 0x80U) == 0x80U)
 8002cec:	da03      	bge.n	8002cf6 <USB_HC_Init+0x3a>
                                USB_OTG_HCINTMSK_AHBERR |
                                USB_OTG_HCINTMSK_FRMORM;

    if ((epnum & 0x80U) == 0x80U)
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002cee:	68e7      	ldr	r7, [r4, #12]
 8002cf0:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8002cf4:	e048      	b.n	8002d88 <USB_HC_Init+0xcc>
      if(USBx != USB_OTG_FS)
 8002cf6:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8002cfa:	d142      	bne.n	8002d82 <USB_HC_Init+0xc6>
  HAL_StatusTypeDef ret = HAL_OK;
 8002cfc:	2400      	movs	r4, #0
    ret = HAL_ERROR;
    break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002cfe:	f001 070f 	and.w	r7, r1, #15
 8002d02:	2101      	movs	r1, #1
 8002d04:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002d08:	059b      	lsls	r3, r3, #22
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002d0a:	40b9      	lsls	r1, r7
                            ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                            ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002d0c:	f8bd 7020 	ldrh.w	r7, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002d10:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                            ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002d14:	02d2      	lsls	r2, r2, #11
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002d16:	ea41 0108 	orr.w	r1, r1, r8
                            ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002d1a:	f3c7 070a 	ubfx	r7, r7, #0, #11
                            ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002d1e:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharEpDir = 0U;
 8002d22:	f1bc 0f00 	cmp.w	ip, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002d26:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002d2a:	ea43 0307 	orr.w	r3, r3, r7
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002d2e:	6981      	ldr	r1, [r0, #24]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002d30:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002d34:	ea43 0302 	orr.w	r3, r3, r2
 8002d38:	ea4f 4286 	mov.w	r2, r6, lsl #18
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002d3c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002d40:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002d44:	6181      	str	r1, [r0, #24]
    HCcharEpDir = 0U;
 8002d46:	bfb8      	it	lt
 8002d48:	f44f 4000 	movlt.w	r0, #32768	; 0x8000
    HCcharLowSpeed = 0U;
 8002d4c:	f89d 1018 	ldrb.w	r1, [sp, #24]
    HCcharEpDir = 0U;
 8002d50:	bfa8      	it	ge
 8002d52:	2000      	movge	r0, #0
                            (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002d54:	4313      	orrs	r3, r2
    HCcharLowSpeed = 0U;
 8002d56:	2902      	cmp	r1, #2
                            ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002d58:	ea43 0300 	orr.w	r3, r3, r0
    HCcharLowSpeed = 0U;
 8002d5c:	bf0c      	ite	eq
 8002d5e:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8002d62:	2100      	movne	r1, #0

  if (ep_type == EP_TYPE_INTR)
 8002d64:	2e03      	cmp	r6, #3
                            ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002d66:	ea43 0301 	orr.w	r3, r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002d6a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8002d6e:	d105      	bne.n	8002d7c <USB_HC_Init+0xc0>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002d70:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 8002d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d78:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002d82:	68e7      	ldr	r7, [r4, #12]
 8002d84:	f047 0760 	orr.w	r7, r7, #96	; 0x60
 8002d88:	60e7      	str	r7, [r4, #12]
 8002d8a:	e7b7      	b.n	8002cfc <USB_HC_Init+0x40>
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002d8c:	f240 679d 	movw	r7, #1693	; 0x69d
    if ((epnum & 0x80U) == 0x80U)
 8002d90:	f1bc 0f00 	cmp.w	ip, #0
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002d94:	60e7      	str	r7, [r4, #12]
    if ((epnum & 0x80U) == 0x80U)
 8002d96:	dab1      	bge.n	8002cfc <USB_HC_Init+0x40>
 8002d98:	e7a9      	b.n	8002cee <USB_HC_Init+0x32>
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002d9a:	f240 2725 	movw	r7, #549	; 0x225
    if ((epnum & 0x80U) == 0x80U)
 8002d9e:	f1bc 0f00 	cmp.w	ip, #0
    USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002da2:	60e7      	str	r7, [r4, #12]
    if ((epnum & 0x80U) == 0x80U)
 8002da4:	daaa      	bge.n	8002cfc <USB_HC_Init+0x40>
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002da6:	68e7      	ldr	r7, [r4, #12]
 8002da8:	f447 77c0 	orr.w	r7, r7, #384	; 0x180
 8002dac:	e7ec      	b.n	8002d88 <USB_HC_Init+0xcc>
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002dae:	2401      	movs	r4, #1
 8002db0:	e7a5      	b.n	8002cfe <USB_HC_Init+0x42>

08002db2 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002db2:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002db6:	6940      	ldr	r0, [r0, #20]
}
 8002db8:	b280      	uxth	r0, r0
 8002dba:	4770      	bx	lr

08002dbc <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx , uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002dbc:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002dc0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002dc4:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002dc8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002dcc:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002dd4:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002dd8:	d11e      	bne.n	8002e18 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002dda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002ddc:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002de0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002de4:	d137      	bne.n	8002e56 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002dea:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002dee:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002df2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002df6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002dfa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002dfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e02:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002e06:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	d002      	beq.n	8002e14 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002e0e:	6811      	ldr	r1, [r2, #0]
 8002e10:	2900      	cmp	r1, #0
 8002e12:	dbfa      	blt.n	8002e0a <USB_HC_Halt+0x4e>
       USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002e14:	2000      	movs	r0, #0
 8002e16:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002e18:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002e1c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002e20:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002e24:	d117      	bne.n	8002e56 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002e26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e2a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e2e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e36:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002e3a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002e3e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e42:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002e46:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	d0e2      	beq.n	8002e14 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002e4e:	6811      	ldr	r1, [r2, #0]
 8002e50:	2900      	cmp	r1, #0
 8002e52:	dbfa      	blt.n	8002e4a <USB_HC_Halt+0x8e>
 8002e54:	e7de      	b.n	8002e14 <USB_HC_Halt+0x58>
       USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e5a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002e5e:	e7d9      	b.n	8002e14 <USB_HC_Halt+0x58>

08002e60 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002e60:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002e64:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 8002e66:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002e68:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e6c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e78:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	80080000 	.word	0x80080000

08002e84 <USB_HC_StartXfer>:
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8002e84:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8002e88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e8c:	4605      	mov	r5, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002e8e:	784f      	ldrb	r7, [r1, #1]
  if((USBx != USB_OTG_FS) && (hc->speed == USB_OTG_SPEED_HIGH))
 8002e90:	d017      	beq.n	8002ec2 <USB_HC_StartXfer+0x3e>
 8002e92:	790c      	ldrb	r4, [r1, #4]
 8002e94:	b9ac      	cbnz	r4, 8002ec2 <USB_HC_StartXfer+0x3e>
    if((dma == 0U) && (hc->do_ping == 1U))
 8002e96:	b94a      	cbnz	r2, 8002eac <USB_HC_StartXfer+0x28>
 8002e98:	794b      	ldrb	r3, [r1, #5]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d111      	bne.n	8002ec2 <USB_HC_StartXfer+0x3e>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002e9e:	4639      	mov	r1, r7
 8002ea0:	f7ff ffde 	bl	8002e60 <USB_DoPing>
}
 8002ea4:	2000      	movs	r0, #0
 8002ea6:	b002      	add	sp, #8
 8002ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(dma == 1U)
 8002eac:	2a01      	cmp	r2, #1
 8002eae:	d108      	bne.n	8002ec2 <USB_HC_StartXfer+0x3e>
 8002eb0:	eb00 1347 	add.w	r3, r0, r7, lsl #5
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002eb4:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8002eb8:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8002ebc:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8002ec0:	714c      	strb	r4, [r1, #5]
  if (hc->xfer_len > 0U)
 8002ec2:	690c      	ldr	r4, [r1, #16]
 8002ec4:	2c00      	cmp	r4, #0
 8002ec6:	d064      	beq.n	8002f92 <USB_HC_StartXfer+0x10e>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002ec8:	890b      	ldrh	r3, [r1, #8]
 8002eca:	3c01      	subs	r4, #1
 8002ecc:	441c      	add	r4, r3
 8002ece:	fbb4 f4f3 	udiv	r4, r4, r3
 8002ed2:	b2a4      	uxth	r4, r4
    if (num_packets > max_hc_pkt_count)
 8002ed4:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8002ed8:	d903      	bls.n	8002ee2 <USB_HC_StartXfer+0x5e>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002eda:	021b      	lsls	r3, r3, #8
      num_packets = max_hc_pkt_count;
 8002edc:	f44f 7480 	mov.w	r4, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002ee0:	610b      	str	r3, [r1, #16]
  if (hc->ep_is_in != 0U)
 8002ee2:	f891 c003 	ldrb.w	ip, [r1, #3]
 8002ee6:	f1bc 0f00 	cmp.w	ip, #0
 8002eea:	d002      	beq.n	8002ef2 <USB_HC_StartXfer+0x6e>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002eec:	890b      	ldrh	r3, [r1, #8]
 8002eee:	4363      	muls	r3, r4
 8002ef0:	610b      	str	r3, [r1, #16]
                                (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002ef2:	7a88      	ldrb	r0, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002ef4:	eb05 1647 	add.w	r6, r5, r7, lsl #5
 8002ef8:	690b      	ldr	r3, [r1, #16]
                                (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002efa:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002efc:	f3c3 0812 	ubfx	r8, r3, #0, #19
                                (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002f00:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
                                (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002f04:	ea40 0008 	orr.w	r0, r0, r8
 8002f08:	ea40 44c4 	orr.w	r4, r0, r4, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002f0c:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
  if (dma != 0U)
 8002f10:	b112      	cbz	r2, 8002f18 <USB_HC_StartXfer+0x94>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002f12:	68c8      	ldr	r0, [r1, #12]
 8002f14:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002f18:	f8d5 0408 	ldr.w	r0, [r5, #1032]	; 0x408
 8002f1c:	f505 6480 	add.w	r4, r5, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002f20:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002f24:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002f26:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002f2a:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002f2c:	f8c6 e500 	str.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002f30:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8002f34:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 8002f38:	ea40 000e 	orr.w	r0, r0, lr
 8002f3c:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f40:	4826      	ldr	r0, [pc, #152]	; (8002fdc <USB_HC_StartXfer+0x158>)
 8002f42:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 8002f46:	f8c0 e000 	str.w	lr, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f4a:	f8d0 e000 	ldr.w	lr, [r0]
 8002f4e:	f02e 4e80 	bic.w	lr, lr, #1073741824	; 0x40000000
 8002f52:	f8c0 e000 	str.w	lr, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002f56:	f8d0 e000 	ldr.w	lr, [r0]
  if (hc->ep_is_in != 0U)
 8002f5a:	f1bc 0f00 	cmp.w	ip, #0
 8002f5e:	d01a      	beq.n	8002f96 <USB_HC_StartXfer+0x112>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002f60:	f44e 4e00 	orr.w	lr, lr, #32768	; 0x8000
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002f64:	f8c0 e000 	str.w	lr, [r0]
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002f68:	ea5c 0202 	orrs.w	r2, ip, r2
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f6c:	f8d0 e000 	ldr.w	lr, [r0]
 8002f70:	f04e 4e00 	orr.w	lr, lr, #2147483648	; 0x80000000
 8002f74:	f8c0 e000 	str.w	lr, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f78:	6800      	ldr	r0, [r0, #0]
 8002f7a:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
    if((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002f7e:	d191      	bne.n	8002ea4 <USB_HC_StartXfer+0x20>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d08f      	beq.n	8002ea4 <USB_HC_StartXfer+0x20>
      switch(hc->ep_type)
 8002f84:	79ca      	ldrb	r2, [r1, #7]
 8002f86:	2a03      	cmp	r2, #3
 8002f88:	d813      	bhi.n	8002fb2 <USB_HC_StartXfer+0x12e>
 8002f8a:	e8df f002 	tbb	[pc, r2]
 8002f8e:	1b07      	.short	0x1b07
 8002f90:	1b07      	.short	0x1b07
    num_packets = 1U;
 8002f92:	2401      	movs	r4, #1
 8002f94:	e7a5      	b.n	8002ee2 <USB_HC_StartXfer+0x5e>
     tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002f96:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 8002f9a:	e7e3      	b.n	8002f64 <USB_HC_StartXfer+0xe0>
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002f9c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002f9e:	1cda      	adds	r2, r3, #3
        if(len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002fa0:	b280      	uxth	r0, r0
 8002fa2:	f3c2 028f 	ubfx	r2, r2, #2, #16
 8002fa6:	4290      	cmp	r0, r2
 8002fa8:	d203      	bcs.n	8002fb2 <USB_HC_StartXfer+0x12e>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002faa:	69aa      	ldr	r2, [r5, #24]
 8002fac:	f042 0220 	orr.w	r2, r2, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002fb0:	61aa      	str	r2, [r5, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4628      	mov	r0, r5
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	463a      	mov	r2, r7
 8002fbc:	68c9      	ldr	r1, [r1, #12]
 8002fbe:	f7ff fd83 	bl	8002ac8 <USB_WritePacket>
 8002fc2:	e76f      	b.n	8002ea4 <USB_HC_StartXfer+0x20>
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002fc4:	6920      	ldr	r0, [r4, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002fc6:	1cda      	adds	r2, r3, #3
        if(len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002fc8:	b280      	uxth	r0, r0
 8002fca:	f3c2 028f 	ubfx	r2, r2, #2, #16
 8002fce:	4290      	cmp	r0, r2
 8002fd0:	d2ef      	bcs.n	8002fb2 <USB_HC_StartXfer+0x12e>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002fd2:	69aa      	ldr	r2, [r5, #24]
 8002fd4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fd8:	e7ea      	b.n	8002fb0 <USB_HC_StartXfer+0x12c>
 8002fda:	bf00      	nop
 8002fdc:	200000b4 	.word	0x200000b4

08002fe0 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fe0:	6883      	ldr	r3, [r0, #8]


  (void)USB_DisableGlobalInt(USBx);

    /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002fe2:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fe4:	f023 0301 	bic.w	r3, r3, #1
{
 8002fe8:	b510      	push	{r4, lr}
 8002fea:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fec:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002fee:	f7ff fd49 	bl	8002a84 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff fd58 	bl	8002aa8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002ff8:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002ffc:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);
 8003000:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
 8003002:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003004:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8003008:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800300c:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 8003010:	4281      	cmp	r1, r0
 8003012:	d1f6      	bne.n	8003002 <USB_StopHost+0x22>
  uint32_t count = 0U;
 8003014:	2100      	movs	r1, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003016:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800301c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8003020:	601a      	str	r2, [r3, #0]

    do
    {
      if (++count > 1000U)
 8003022:	3101      	adds	r1, #1
 8003024:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003028:	d802      	bhi.n	8003030 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	2a00      	cmp	r2, #0
 800302e:	dbf8      	blt.n	8003022 <USB_StopHost+0x42>
  for (i = 0U; i <= 15U; i++)
 8003030:	3320      	adds	r3, #32
 8003032:	4283      	cmp	r3, r0
 8003034:	d1ef      	bne.n	8003016 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTSTS = 0xFFFFFFFFU;
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 800303a:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800303c:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003040:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003042:	68a3      	ldr	r3, [r4, #8]
 8003044:	f043 0301 	orr.w	r3, r3, #1
 8003048:	60a3      	str	r3, [r4, #8]
}
 800304a:	bd10      	pop	{r4, pc}

0800304c <USBH_MSC_SOFProcess>:
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{

  return USBH_OK;
}
 800304c:	2000      	movs	r0, #0
 800304e:	4770      	bx	lr

08003050 <USBH_MSC_Process>:
{
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003052:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8003056:	4606      	mov	r6, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003058:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
 800305a:	7b22      	ldrb	r2, [r4, #12]
 800305c:	b11a      	cbz	r2, 8003066 <USBH_MSC_Process+0x16>
  USBH_StatusTypeDef error = USBH_BUSY ;
 800305e:	1e50      	subs	r0, r2, #1
 8003060:	bf18      	it	ne
 8003062:	2001      	movne	r0, #1
}
 8003064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(MSC_Handle->current_lun < MSC_Handle->max_lun)
 8003066:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800306a:	2701      	movs	r7, #1
 800306c:	6823      	ldr	r3, [r4, #0]
 800306e:	4299      	cmp	r1, r3
 8003070:	f080 815a 	bcs.w	8003328 <USBH_MSC_Process+0x2d8>
      MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8003074:	2534      	movs	r5, #52	; 0x34
 8003076:	fb05 4301 	mla	r3, r5, r1, r4
 800307a:	f883 7091 	strb.w	r7, [r3, #145]	; 0x91
      switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800307e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003082:	2b08      	cmp	r3, #8
 8003084:	d81c      	bhi.n	80030c0 <USBH_MSC_Process+0x70>
 8003086:	e8df f013 	tbh	[pc, r3, lsl #1]
 800308a:	0009      	.short	0x0009
 800308c:	0055001b 	.word	0x0055001b
 8003090:	002300a9 	.word	0x002300a9
 8003094:	001b00ef 	.word	0x001b00ef
 8003098:	014b001b 	.word	0x014b001b
        USBH_UsrLog ("LUN #%d: ", MSC_Handle->current_lun);
 800309c:	48aa      	ldr	r0, [pc, #680]	; (8003348 <USBH_MSC_Process+0x2f8>)
 800309e:	f00e fac9 	bl	8011634 <iprintf>
 80030a2:	200a      	movs	r0, #10
 80030a4:	f00e fade 	bl	8011664 <putchar>
        MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80030a8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80030ac:	2234      	movs	r2, #52	; 0x34
 80030ae:	fb02 4303 	mla	r3, r2, r3, r4
 80030b2:	2204      	movs	r2, #4
 80030b4:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        MSC_Handle->timer = phost->Timer;
 80030b8:	f8d6 33bc 	ldr.w	r3, [r6, #956]	; 0x3bc
 80030bc:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 80030c0:	2200      	movs	r2, #0
 80030c2:	2104      	movs	r1, #4
 80030c4:	f8d6 03cc 	ldr.w	r0, [r6, #972]	; 0x3cc
 80030c8:	f003 fa32 	bl	8006530 <osMessagePut>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80030cc:	2001      	movs	r0, #1
 80030ce:	e7c9      	b.n	8003064 <USBH_MSC_Process+0x14>
        scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80030d0:	fb05 4201 	mla	r2, r5, r1, r4
 80030d4:	b2c9      	uxtb	r1, r1
 80030d6:	329f      	adds	r2, #159	; 0x9f
 80030d8:	f000 fcda 	bl	8003a90 <USBH_MSC_SCSI_Inquiry>
        if (scsi_status == USBH_OK)
 80030dc:	2800      	cmp	r0, #0
 80030de:	f040 80bb 	bne.w	8003258 <USBH_MSC_Process+0x208>
          USBH_UsrLog ("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 80030e2:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 80030e6:	4899      	ldr	r0, [pc, #612]	; (800334c <USBH_MSC_Process+0x2fc>)
 80030e8:	fb05 4101 	mla	r1, r5, r1, r4
 80030ec:	31a2      	adds	r1, #162	; 0xa2
 80030ee:	f00e faa1 	bl	8011634 <iprintf>
 80030f2:	200a      	movs	r0, #10
 80030f4:	f00e fab6 	bl	8011664 <putchar>
          USBH_UsrLog ("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 80030f8:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 80030fc:	4894      	ldr	r0, [pc, #592]	; (8003350 <USBH_MSC_Process+0x300>)
 80030fe:	fb05 4101 	mla	r1, r5, r1, r4
 8003102:	31ab      	adds	r1, #171	; 0xab
 8003104:	f00e fa96 	bl	8011634 <iprintf>
 8003108:	200a      	movs	r0, #10
 800310a:	f00e faab 	bl	8011664 <putchar>
          USBH_UsrLog ("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800310e:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 8003112:	4890      	ldr	r0, [pc, #576]	; (8003354 <USBH_MSC_Process+0x304>)
 8003114:	fb05 4101 	mla	r1, r5, r1, r4
 8003118:	31bc      	adds	r1, #188	; 0xbc
 800311a:	f00e fa8b 	bl	8011634 <iprintf>
 800311e:	200a      	movs	r0, #10
 8003120:	f00e faa0 	bl	8011664 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8003124:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003128:	fb05 4403 	mla	r4, r5, r3, r4
 800312c:	2302      	movs	r3, #2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800312e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8003132:	e7c5      	b.n	80030c0 <USBH_MSC_Process+0x70>
        ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8003134:	b2c9      	uxtb	r1, r1
 8003136:	f000 fc53 	bl	80039e0 <USBH_MSC_SCSI_TestUnitReady>
        if (ready_status == USBH_OK)
 800313a:	b9f8      	cbnz	r0, 800317c <USBH_MSC_Process+0x12c>
          if(MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800313c:	2234      	movs	r2, #52	; 0x34
 800313e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003142:	fb02 4303 	mla	r3, r2, r3, r4
 8003146:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800314a:	b1a2      	cbz	r2, 8003176 <USBH_MSC_Process+0x126>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800314c:	2201      	movs	r2, #1
            USBH_UsrLog ("MSC Device ready");
 800314e:	4882      	ldr	r0, [pc, #520]	; (8003358 <USBH_MSC_Process+0x308>)
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8003150:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
            USBH_UsrLog ("MSC Device ready");
 8003154:	f00e fa6e 	bl	8011634 <iprintf>
 8003158:	200a      	movs	r0, #10
 800315a:	f00e fa83 	bl	8011664 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800315e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003162:	2234      	movs	r2, #52	; 0x34
 8003164:	fb02 4403 	mla	r4, r2, r3, r4
 8003168:	2303      	movs	r3, #3
 800316a:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800316e:	2300      	movs	r3, #0
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8003170:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 8003174:	e7a4      	b.n	80030c0 <USBH_MSC_Process+0x70>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8003176:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 800317a:	e7f0      	b.n	800315e <USBH_MSC_Process+0x10e>
        if (ready_status == USBH_FAIL)
 800317c:	2802      	cmp	r0, #2
 800317e:	d120      	bne.n	80031c2 <USBH_MSC_Process+0x172>
          if( MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8003180:	2234      	movs	r2, #52	; 0x34
 8003182:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003186:	fb02 4303 	mla	r3, r2, r3, r4
 800318a:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800318e:	2a02      	cmp	r2, #2
 8003190:	d013      	beq.n	80031ba <USBH_MSC_Process+0x16a>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8003192:	2201      	movs	r2, #1
            USBH_UsrLog ("MSC Device NOT ready");
 8003194:	4871      	ldr	r0, [pc, #452]	; (800335c <USBH_MSC_Process+0x30c>)
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8003196:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
            USBH_UsrLog ("MSC Device NOT ready");
 800319a:	f00e fa4b 	bl	8011634 <iprintf>
 800319e:	200a      	movs	r0, #10
 80031a0:	f00e fa60 	bl	8011664 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80031a4:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80031a8:	2234      	movs	r2, #52	; 0x34
 80031aa:	fb02 4403 	mla	r4, r2, r3, r4
 80031ae:	f240 1305 	movw	r3, #261	; 0x105
 80031b2:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80031b6:	2302      	movs	r3, #2
 80031b8:	e7da      	b.n	8003170 <USBH_MSC_Process+0x120>
            MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 80031c0:	e7f0      	b.n	80031a4 <USBH_MSC_Process+0x154>
          if (ready_status == USBH_UNRECOVERED_ERROR)
 80031c2:	2804      	cmp	r0, #4
 80031c4:	f47f af7c 	bne.w	80030c0 <USBH_MSC_Process+0x70>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80031c8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80031cc:	2234      	movs	r2, #52	; 0x34
 80031ce:	fb02 4403 	mla	r4, r2, r3, r4
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80031d2:	f240 2301 	movw	r3, #513	; 0x201
 80031d6:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 80031da:	e771      	b.n	80030c0 <USBH_MSC_Process+0x70>
        scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80031dc:	fb05 4201 	mla	r2, r5, r1, r4
 80031e0:	b2c9      	uxtb	r1, r1
 80031e2:	3294      	adds	r2, #148	; 0x94
 80031e4:	f000 fc1f 	bl	8003a26 <USBH_MSC_SCSI_ReadCapacity>
        if(scsi_status == USBH_OK)
 80031e8:	bbb0      	cbnz	r0, 8003258 <USBH_MSC_Process+0x208>
          if(MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 80031ea:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80031ee:	fb05 4303 	mla	r3, r5, r3, r4
 80031f2:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 80031f6:	2a01      	cmp	r2, #1
 80031f8:	d122      	bne.n	8003240 <USBH_MSC_Process+0x1f0>
            USBH_UsrLog ("MSC Device capacity : %lu Bytes", \
 80031fa:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
 80031fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8003202:	4857      	ldr	r0, [pc, #348]	; (8003360 <USBH_MSC_Process+0x310>)
 8003204:	4351      	muls	r1, r2
 8003206:	f00e fa15 	bl	8011634 <iprintf>
 800320a:	200a      	movs	r0, #10
 800320c:	f00e fa2a 	bl	8011664 <putchar>
            USBH_UsrLog ("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 8003210:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003214:	4853      	ldr	r0, [pc, #332]	; (8003364 <USBH_MSC_Process+0x314>)
 8003216:	fb05 4303 	mla	r3, r5, r3, r4
 800321a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800321e:	f00e fa09 	bl	8011634 <iprintf>
 8003222:	200a      	movs	r0, #10
 8003224:	f00e fa1e 	bl	8011664 <putchar>
            USBH_UsrLog ("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 8003228:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800322c:	484e      	ldr	r0, [pc, #312]	; (8003368 <USBH_MSC_Process+0x318>)
 800322e:	fb05 4503 	mla	r5, r5, r3, r4
 8003232:	f8b5 1098 	ldrh.w	r1, [r5, #152]	; 0x98
 8003236:	f00e f9fd 	bl	8011634 <iprintf>
 800323a:	200a      	movs	r0, #10
 800323c:	f00e fa12 	bl	8011664 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003240:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003244:	2101      	movs	r1, #1
 8003246:	2234      	movs	r2, #52	; 0x34
 8003248:	fb02 4203 	mla	r2, r2, r3, r4
          MSC_Handle->current_lun++;
 800324c:	440b      	add	r3, r1
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800324e:	f8a2 1090 	strh.w	r1, [r2, #144]	; 0x90
          MSC_Handle->current_lun++;
 8003252:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8003256:	e733      	b.n	80030c0 <USBH_MSC_Process+0x70>
        else if(scsi_status == USBH_FAIL)
 8003258:	2802      	cmp	r0, #2
 800325a:	d159      	bne.n	8003310 <USBH_MSC_Process+0x2c0>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800325c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003260:	fb05 4403 	mla	r4, r5, r3, r4
 8003264:	2305      	movs	r3, #5
 8003266:	e762      	b.n	800312e <USBH_MSC_Process+0xde>
        scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8003268:	fb05 4201 	mla	r2, r5, r1, r4
 800326c:	b2c9      	uxtb	r1, r1
 800326e:	329c      	adds	r2, #156	; 0x9c
 8003270:	f000 fc74 	bl	8003b5c <USBH_MSC_SCSI_RequestSense>
        if( scsi_status == USBH_OK)
 8003274:	2800      	cmp	r0, #0
 8003276:	d13d      	bne.n	80032f4 <USBH_MSC_Process+0x2a4>
          if((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8003278:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800327c:	fb05 4503 	mla	r5, r5, r3, r4
 8003280:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
 8003284:	f001 02fb 	and.w	r2, r1, #251	; 0xfb
 8003288:	2a02      	cmp	r2, #2
 800328a:	d10b      	bne.n	80032a4 <USBH_MSC_Process+0x254>
            if((phost->Timer - MSC_Handle->timer) < 10000U)
 800328c:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8003290:	f8d6 33bc 	ldr.w	r3, [r6, #956]	; 0x3bc
 8003294:	1a1b      	subs	r3, r3, r0
 8003296:	f242 700f 	movw	r0, #9999	; 0x270f
 800329a:	4283      	cmp	r3, r0
 800329c:	d802      	bhi.n	80032a4 <USBH_MSC_Process+0x254>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800329e:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
              break;
 80032a2:	e70d      	b.n	80030c0 <USBH_MSC_Process+0x70>
          USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 80032a4:	4831      	ldr	r0, [pc, #196]	; (800336c <USBH_MSC_Process+0x31c>)
          USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 80032a6:	2534      	movs	r5, #52	; 0x34
          USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 80032a8:	f00e f9c4 	bl	8011634 <iprintf>
 80032ac:	200a      	movs	r0, #10
 80032ae:	f00e f9d9 	bl	8011664 <putchar>
          USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 80032b2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80032b6:	482e      	ldr	r0, [pc, #184]	; (8003370 <USBH_MSC_Process+0x320>)
 80032b8:	fb05 4303 	mla	r3, r5, r3, r4
 80032bc:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
 80032c0:	f00e f9b8 	bl	8011634 <iprintf>
 80032c4:	200a      	movs	r0, #10
 80032c6:	f00e f9cd 	bl	8011664 <putchar>
          USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 80032ca:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80032ce:	4829      	ldr	r0, [pc, #164]	; (8003374 <USBH_MSC_Process+0x324>)
 80032d0:	fb05 4303 	mla	r3, r5, r3, r4
 80032d4:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
 80032d8:	f00e f9ac 	bl	8011634 <iprintf>
 80032dc:	200a      	movs	r0, #10
 80032de:	f00e f9c1 	bl	8011664 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80032e2:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80032e6:	2201      	movs	r2, #1
 80032e8:	fb05 4503 	mla	r5, r5, r3, r4
          MSC_Handle->current_lun++;
 80032ec:	4413      	add	r3, r2
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80032ee:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
          MSC_Handle->current_lun++;
 80032f2:	e7ae      	b.n	8003252 <USBH_MSC_Process+0x202>
        if(scsi_status == USBH_FAIL)
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d10b      	bne.n	8003310 <USBH_MSC_Process+0x2c0>
          USBH_UsrLog ("MSC Device NOT ready");
 80032f8:	4818      	ldr	r0, [pc, #96]	; (800335c <USBH_MSC_Process+0x30c>)
 80032fa:	f00e f99b 	bl	8011634 <iprintf>
 80032fe:	200a      	movs	r0, #10
 8003300:	f00e f9b0 	bl	8011664 <putchar>
          MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8003304:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8003308:	fb05 4403 	mla	r4, r5, r3, r4
 800330c:	2308      	movs	r3, #8
 800330e:	e70e      	b.n	800312e <USBH_MSC_Process+0xde>
          if(scsi_status == USBH_UNRECOVERED_ERROR)
 8003310:	2804      	cmp	r0, #4
 8003312:	f47f aed5 	bne.w	80030c0 <USBH_MSC_Process+0x70>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8003316:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800331a:	fb05 4403 	mla	r4, r5, r3, r4
 800331e:	e758      	b.n	80031d2 <USBH_MSC_Process+0x182>
        MSC_Handle->current_lun++;
 8003320:	3101      	adds	r1, #1
 8003322:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
        break;
 8003326:	e6cb      	b.n	80030c0 <USBH_MSC_Process+0x70>
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8003328:	2104      	movs	r1, #4
      MSC_Handle->current_lun = 0U;
 800332a:	f8a4 20f8 	strh.w	r2, [r4, #248]	; 0xf8
    MSC_Handle->state = MSC_IDLE;
 800332e:	7327      	strb	r7, [r4, #12]
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8003330:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
 8003334:	f003 f8fc 	bl	8006530 <osMessagePut>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003338:	4630      	mov	r0, r6
 800333a:	f8d6 33c8 	ldr.w	r3, [r6, #968]	; 0x3c8
 800333e:	2102      	movs	r1, #2
 8003340:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY ;
 8003342:	4638      	mov	r0, r7
 8003344:	e68e      	b.n	8003064 <USBH_MSC_Process+0x14>
 8003346:	bf00      	nop
 8003348:	08012780 	.word	0x08012780
 800334c:	0801278a 	.word	0x0801278a
 8003350:	0801279f 	.word	0x0801279f
 8003354:	080127b4 	.word	0x080127b4
 8003358:	080127c9 	.word	0x080127c9
 800335c:	080127da 	.word	0x080127da
 8003360:	080127ef 	.word	0x080127ef
 8003364:	0801280f 	.word	0x0801280f
 8003368:	08012822 	.word	0x08012822
 800336c:	08012835 	.word	0x08012835
 8003370:	08012845 	.word	0x08012845
 8003374:	08012860 	.word	0x08012860

08003378 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003378:	f8d0 2378 	ldr.w	r2, [r0, #888]	; 0x378
{
 800337c:	4603      	mov	r3, r0
 800337e:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003380:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
 8003382:	7ba2      	ldrb	r2, [r4, #14]
 8003384:	2a02      	cmp	r2, #2
 8003386:	d002      	beq.n	800338e <USBH_MSC_ClassRequest+0x16>
 8003388:	2a03      	cmp	r2, #3
 800338a:	d02a      	beq.n	80033e2 <USBH_MSC_ClassRequest+0x6a>
 800338c:	bb7a      	cbnz	r2, 80033ee <USBH_MSC_ClassRequest+0x76>
    status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, (uint8_t *)(void *)&MSC_Handle->max_lun);
 800338e:	4621      	mov	r1, r4
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fa0a 	bl	80037aa <USBH_MSC_BOT_REQ_GetMaxLUN>
    if(status == USBH_NOT_SUPPORTED)
 8003396:	2803      	cmp	r0, #3
 8003398:	d118      	bne.n	80033cc <USBH_MSC_ClassRequest+0x54>
      MSC_Handle->max_lun = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	6023      	str	r3, [r4, #0]
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 800339e:	6821      	ldr	r1, [r4, #0]
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80033a0:	2502      	movs	r5, #2
      USBH_UsrLog ("Number of supported LUN: %lu", (int32_t)(MSC_Handle->max_lun));
 80033a2:	4814      	ldr	r0, [pc, #80]	; (80033f4 <USBH_MSC_ClassRequest+0x7c>)
      MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN)? MAX_SUPPORTED_LUN : (uint8_t )(MSC_Handle->max_lun) + 1U;
 80033a4:	2902      	cmp	r1, #2
 80033a6:	bf94      	ite	ls
 80033a8:	3101      	addls	r1, #1
 80033aa:	2102      	movhi	r1, #2
 80033ac:	6021      	str	r1, [r4, #0]
      USBH_UsrLog ("Number of supported LUN: %lu", (int32_t)(MSC_Handle->max_lun));
 80033ae:	f00e f941 	bl	8011634 <iprintf>
 80033b2:	200a      	movs	r0, #10
 80033b4:	f00e f956 	bl	8011664 <putchar>
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 80033b8:	2300      	movs	r3, #0
 80033ba:	6822      	ldr	r2, [r4, #0]
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80033bc:	2034      	movs	r0, #52	; 0x34
        MSC_Handle->unit[i].state_changed = 0U;
 80033be:	461e      	mov	r6, r3
      for(i = 0U; i < MSC_Handle->max_lun; i++)
 80033c0:	1c59      	adds	r1, r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d804      	bhi.n	80033d2 <USBH_MSC_ClassRequest+0x5a>
 80033c8:	2000      	movs	r0, #0
 80033ca:	e001      	b.n	80033d0 <USBH_MSC_ClassRequest+0x58>
    if(status == USBH_OK)
 80033cc:	2800      	cmp	r0, #0
 80033ce:	d0e6      	beq.n	800339e <USBH_MSC_ClassRequest+0x26>
}
 80033d0:	bd70      	pop	{r4, r5, r6, pc}
        MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 80033d2:	fb00 4303 	mla	r3, r0, r3, r4
 80033d6:	f883 5092 	strb.w	r5, [r3, #146]	; 0x92
        MSC_Handle->unit[i].state_changed = 0U;
 80033da:	f883 60c1 	strb.w	r6, [r3, #193]	; 0xc1
 80033de:	460b      	mov	r3, r1
 80033e0:	e7ee      	b.n	80033c0 <USBH_MSC_ClassRequest+0x48>
    if(USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80033e2:	2100      	movs	r1, #0
 80033e4:	f001 fa39 	bl	800485a <USBH_ClrFeature>
 80033e8:	b908      	cbnz	r0, 80033ee <USBH_MSC_ClassRequest+0x76>
      MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80033ea:	7be3      	ldrb	r3, [r4, #15]
 80033ec:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 80033ee:	2001      	movs	r0, #1
 80033f0:	e7ee      	b.n	80033d0 <USBH_MSC_ClassRequest+0x58>
 80033f2:	bf00      	nop
 80033f4:	08012884 	.word	0x08012884

080033f8 <USBH_MSC_InterfaceDeInit>:
{
 80033f8:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80033fa:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80033fe:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003400:	69dd      	ldr	r5, [r3, #28]
  if ( MSC_Handle->OutPipe)
 8003402:	7969      	ldrb	r1, [r5, #5]
 8003404:	b139      	cbz	r1, 8003416 <USBH_MSC_InterfaceDeInit+0x1e>
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8003406:	f001 faa2 	bl	800494e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->OutPipe);
 800340a:	7969      	ldrb	r1, [r5, #5]
 800340c:	4620      	mov	r0, r4
 800340e:	f001 faba 	bl	8004986 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8003412:	2300      	movs	r3, #0
 8003414:	716b      	strb	r3, [r5, #5]
  if ( MSC_Handle->InPipe)
 8003416:	7929      	ldrb	r1, [r5, #4]
 8003418:	b141      	cbz	r1, 800342c <USBH_MSC_InterfaceDeInit+0x34>
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800341a:	4620      	mov	r0, r4
 800341c:	f001 fa97 	bl	800494e <USBH_ClosePipe>
    USBH_FreePipe  (phost, MSC_Handle->InPipe);
 8003420:	7929      	ldrb	r1, [r5, #4]
 8003422:	4620      	mov	r0, r4
 8003424:	f001 faaf 	bl	8004986 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8003428:	2300      	movs	r3, #0
 800342a:	712b      	strb	r3, [r5, #4]
  if(phost->pActiveClass->pData)
 800342c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8003430:	69d8      	ldr	r0, [r3, #28]
 8003432:	b128      	cbz	r0, 8003440 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free (phost->pActiveClass->pData);
 8003434:	f00e f828 	bl	8011488 <free>
    phost->pActiveClass->pData = 0;
 8003438:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800343c:	2200      	movs	r2, #0
 800343e:	61da      	str	r2, [r3, #28]
}
 8003440:	2000      	movs	r0, #0
 8003442:	bd38      	pop	{r3, r4, r5, pc}

08003444 <USBH_MSC_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8003444:	f8d0 1378 	ldr.w	r1, [r0, #888]	; 0x378
 8003448:	2350      	movs	r3, #80	; 0x50
 800344a:	2206      	movs	r2, #6
{
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800344e:	7909      	ldrb	r1, [r1, #4]
{
 8003450:	b085      	sub	sp, #20
 8003452:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8003454:	f000 fd0e 	bl	8003e74 <USBH_FindInterface>
  if(interface == 0xFFU) /* Not Valid Interface */
 8003458:	28ff      	cmp	r0, #255	; 0xff
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800345a:	4601      	mov	r1, r0
  if(interface == 0xFFU) /* Not Valid Interface */
 800345c:	d10e      	bne.n	800347c <USBH_MSC_InterfaceInit+0x38>
    USBH_DbgLog ("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800345e:	483d      	ldr	r0, [pc, #244]	; (8003554 <USBH_MSC_InterfaceInit+0x110>)
 8003460:	f00e f8e8 	bl	8011634 <iprintf>
 8003464:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003468:	483b      	ldr	r0, [pc, #236]	; (8003558 <USBH_MSC_InterfaceInit+0x114>)
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	f00e f8e2 	bl	8011634 <iprintf>
 8003470:	200a      	movs	r0, #10
 8003472:	f00e f8f7 	bl	8011664 <putchar>
    status = USBH_FAIL;
 8003476:	2002      	movs	r0, #2
}
 8003478:	b005      	add	sp, #20
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_SelectInterface (phost, interface);
 800347c:	4628      	mov	r0, r5
    USBH_OpenPipe  (phost,
 800347e:	2702      	movs	r7, #2
    USBH_SelectInterface (phost, interface);
 8003480:	f000 fcb4 	bl	8003dec <USBH_SelectInterface>
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8003484:	f8d5 6378 	ldr.w	r6, [r5, #888]	; 0x378
 8003488:	f44f 7080 	mov.w	r0, #256	; 0x100
 800348c:	f00d fff4 	bl	8011478 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003490:	231a      	movs	r3, #26
    phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc (sizeof(MSC_HandleTypeDef));
 8003492:	61f0      	str	r0, [r6, #28]
 8003494:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003496:	f895 2320 	ldrb.w	r2, [r5, #800]	; 0x320
 800349a:	fb03 5102 	mla	r1, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800349e:	fb03 5302 	mla	r3, r3, r2, r5
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80034a2:	f991 634a 	ldrsb.w	r6, [r1, #842]	; 0x34a
 80034a6:	f891 034a 	ldrb.w	r0, [r1, #842]	; 0x34a
 80034aa:	2e00      	cmp	r6, #0
 80034ac:	f8b1 134c 	ldrh.w	r1, [r1, #844]	; 0x34c
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80034b0:	f8b3 2354 	ldrh.w	r2, [r3, #852]	; 0x354
    MSC_Handle->current_lun = 0U;
 80034b4:	f04f 0600 	mov.w	r6, #0
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80034b8:	bfb4      	ite	lt
 80034ba:	8161      	strhlt	r1, [r4, #10]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].wMaxPacketSize;
 80034bc:	8121      	strhge	r1, [r4, #8]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80034be:	f893 1352 	ldrb.w	r1, [r3, #850]	; 0x352
 80034c2:	f993 3352 	ldrsb.w	r3, [r3, #850]	; 0x352
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80034c6:	bfac      	ite	ge
 80034c8:	71a0      	strbge	r0, [r4, #6]
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[0].bEndpointAddress);
 80034ca:	71e0      	strblt	r0, [r4, #7]
    if(phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80034cc:	2b00      	cmp	r3, #0
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80034ce:	4628      	mov	r0, r5
    MSC_Handle->current_lun = 0U;
 80034d0:	f8c4 60f8 	str.w	r6, [r4, #248]	; 0xf8
      MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80034d4:	bfb4      	ite	lt
 80034d6:	71e1      	strblt	r1, [r4, #7]
      MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].bEndpointAddress);
 80034d8:	71a1      	strbge	r1, [r4, #6]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80034da:	79a1      	ldrb	r1, [r4, #6]
      MSC_Handle->InEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80034dc:	bfb4      	ite	lt
 80034de:	8162      	strhlt	r2, [r4, #10]
      MSC_Handle->OutEpSize  = phost->device.CfgDesc.Itf_Desc[phost->device.current_interface].Ep_Desc[1].wMaxPacketSize;
 80034e0:	8122      	strhge	r2, [r4, #8]
    MSC_Handle->state = MSC_INIT;
 80034e2:	81a6      	strh	r6, [r4, #12]
    MSC_Handle->req_state = MSC_REQ_IDLE;
 80034e4:	73a6      	strb	r6, [r4, #14]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80034e6:	f001 fa37 	bl	8004958 <USBH_AllocPipe>
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80034ea:	79e1      	ldrb	r1, [r4, #7]
    MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80034ec:	7160      	strb	r0, [r4, #5]
    MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80034ee:	4628      	mov	r0, r5
 80034f0:	f001 fa32 	bl	8004958 <USBH_AllocPipe>
 80034f4:	7120      	strb	r0, [r4, #4]
    USBH_MSC_BOT_Init(phost);
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 f960 	bl	80037bc <USBH_MSC_BOT_Init>
    USBH_memset(MSC_Handle->unit, 0, sizeof(MSC_Handle->unit));
 80034fc:	2268      	movs	r2, #104	; 0x68
 80034fe:	4631      	mov	r1, r6
 8003500:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8003504:	f00d ffe4 	bl	80114d0 <memset>
    USBH_OpenPipe  (phost,
 8003508:	8923      	ldrh	r3, [r4, #8]
 800350a:	79a2      	ldrb	r2, [r4, #6]
 800350c:	4628      	mov	r0, r5
 800350e:	9302      	str	r3, [sp, #8]
 8003510:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 8003514:	7961      	ldrb	r1, [r4, #5]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	9701      	str	r7, [sp, #4]
 800351a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800351e:	f001 fa07 	bl	8004930 <USBH_OpenPipe>
    USBH_OpenPipe  (phost,
 8003522:	8963      	ldrh	r3, [r4, #10]
 8003524:	79e2      	ldrb	r2, [r4, #7]
 8003526:	4628      	mov	r0, r5
 8003528:	7921      	ldrb	r1, [r4, #4]
 800352a:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800352e:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003538:	f001 f9fa 	bl	8004930 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, MSC_Handle->InPipe, 0U);
 800353c:	4632      	mov	r2, r6
 800353e:	7921      	ldrb	r1, [r4, #4]
 8003540:	4628      	mov	r0, r5
 8003542:	f00d fe7c 	bl	801123e <USBH_LL_SetToggle>
    USBH_LL_SetToggle (phost, MSC_Handle->OutPipe, 0U);
 8003546:	4632      	mov	r2, r6
 8003548:	7961      	ldrb	r1, [r4, #5]
 800354a:	4628      	mov	r0, r5
 800354c:	f00d fe77 	bl	801123e <USBH_LL_SetToggle>
    status = USBH_OK;
 8003550:	4630      	mov	r0, r6
 8003552:	e791      	b.n	8003478 <USBH_MSC_InterfaceInit+0x34>
 8003554:	080128a1 	.word	0x080128a1
 8003558:	080128aa 	.word	0x080128aa

0800355c <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800355c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8003560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003562:	69dc      	ldr	r4, [r3, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8003564:	2734      	movs	r7, #52	; 0x34
{
 8003566:	4606      	mov	r6, r0
  switch (MSC_Handle->unit[lun].state)
 8003568:	fb07 4501 	mla	r5, r7, r1, r4
 800356c:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
 8003570:	2b06      	cmp	r3, #6
 8003572:	d007      	beq.n	8003584 <USBH_MSC_RdWrProcess+0x28>
 8003574:	2b07      	cmp	r3, #7
 8003576:	d016      	beq.n	80035a6 <USBH_MSC_RdWrProcess+0x4a>
 8003578:	2b05      	cmp	r3, #5
 800357a:	d027      	beq.n	80035cc <USBH_MSC_RdWrProcess+0x70>
 800357c:	2401      	movs	r4, #1
  default:
    break;

  }
  return error;
}
 800357e:	4620      	mov	r0, r4
 8003580:	b003      	add	sp, #12
 8003582:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scsi_status = USBH_MSC_SCSI_Read(phost,lun, 0U, NULL, 0U);
 8003584:	2300      	movs	r3, #0
 8003586:	461a      	mov	r2, r3
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	f000 fb6e 	bl	8003c6a <USBH_MSC_SCSI_Read>
    if(scsi_status == USBH_OK)
 800358e:	4604      	mov	r4, r0
 8003590:	b978      	cbnz	r0, 80035b2 <USBH_MSC_RdWrProcess+0x56>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8003592:	2301      	movs	r3, #1
 8003594:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
    osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0U);
 8003598:	2200      	movs	r2, #0
 800359a:	2104      	movs	r1, #4
 800359c:	f8d6 03cc 	ldr.w	r0, [r6, #972]	; 0x3cc
 80035a0:	f002 ffc6 	bl	8006530 <osMessagePut>
    break;
 80035a4:	e7eb      	b.n	800357e <USBH_MSC_RdWrProcess+0x22>
    scsi_status = USBH_MSC_SCSI_Write(phost,lun, 0U, NULL, 0U);
 80035a6:	2300      	movs	r3, #0
 80035a8:	461a      	mov	r2, r3
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f000 fb1e 	bl	8003bec <USBH_MSC_SCSI_Write>
 80035b0:	e7ed      	b.n	800358e <USBH_MSC_RdWrProcess+0x32>
    else if( scsi_status == USBH_FAIL)
 80035b2:	2802      	cmp	r0, #2
 80035b4:	d104      	bne.n	80035c0 <USBH_MSC_RdWrProcess+0x64>
      MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80035b6:	2305      	movs	r3, #5
 80035b8:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
  USBH_StatusTypeDef error = USBH_BUSY ;
 80035bc:	2401      	movs	r4, #1
 80035be:	e7eb      	b.n	8003598 <USBH_MSC_RdWrProcess+0x3c>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 80035c0:	2804      	cmp	r0, #4
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 80035c2:	d1fb      	bne.n	80035bc <USBH_MSC_RdWrProcess+0x60>
        MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80035c4:	2308      	movs	r3, #8
 80035c6:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
 80035ca:	e021      	b.n	8003610 <USBH_MSC_RdWrProcess+0xb4>
    scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80035cc:	fb07 4201 	mla	r2, r7, r1, r4
 80035d0:	329c      	adds	r2, #156	; 0x9c
 80035d2:	f000 fac3 	bl	8003b5c <USBH_MSC_SCSI_RequestSense>
    if(scsi_status == USBH_OK)
 80035d6:	b9e8      	cbnz	r0, 8003614 <USBH_MSC_RdWrProcess+0xb8>
      USBH_UsrLog ("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
 80035d8:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
 80035dc:	4813      	ldr	r0, [pc, #76]	; (800362c <USBH_MSC_RdWrProcess+0xd0>)
 80035de:	f00e f829 	bl	8011634 <iprintf>
 80035e2:	200a      	movs	r0, #10
 80035e4:	f00e f83e 	bl	8011664 <putchar>
      USBH_UsrLog ("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
 80035e8:	f895 109d 	ldrb.w	r1, [r5, #157]	; 0x9d
 80035ec:	4810      	ldr	r0, [pc, #64]	; (8003630 <USBH_MSC_RdWrProcess+0xd4>)
 80035ee:	f00e f821 	bl	8011634 <iprintf>
 80035f2:	200a      	movs	r0, #10
 80035f4:	f00e f836 	bl	8011664 <putchar>
      USBH_UsrLog ("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
 80035f8:	f895 109e 	ldrb.w	r1, [r5, #158]	; 0x9e
 80035fc:	480d      	ldr	r0, [pc, #52]	; (8003634 <USBH_MSC_RdWrProcess+0xd8>)
 80035fe:	f00e f819 	bl	8011634 <iprintf>
 8003602:	200a      	movs	r0, #10
 8003604:	f00e f82e 	bl	8011664 <putchar>
      MSC_Handle->unit[lun].state = MSC_IDLE;
 8003608:	f240 2301 	movw	r3, #513	; 0x201
 800360c:	f8a5 3090 	strh.w	r3, [r5, #144]	; 0x90
        error = USBH_FAIL;
 8003610:	2402      	movs	r4, #2
 8003612:	e7c1      	b.n	8003598 <USBH_MSC_RdWrProcess+0x3c>
    if(scsi_status == USBH_FAIL)
 8003614:	2802      	cmp	r0, #2
 8003616:	d106      	bne.n	8003626 <USBH_MSC_RdWrProcess+0xca>
      USBH_UsrLog ("MSC Device NOT ready");
 8003618:	4807      	ldr	r0, [pc, #28]	; (8003638 <USBH_MSC_RdWrProcess+0xdc>)
 800361a:	f00e f80b 	bl	8011634 <iprintf>
 800361e:	200a      	movs	r0, #10
 8003620:	f00e f820 	bl	8011664 <putchar>
 8003624:	e7ca      	b.n	80035bc <USBH_MSC_RdWrProcess+0x60>
      if(scsi_status == USBH_UNRECOVERED_ERROR)
 8003626:	2804      	cmp	r0, #4
 8003628:	e7cb      	b.n	80035c2 <USBH_MSC_RdWrProcess+0x66>
 800362a:	bf00      	nop
 800362c:	08012835 	.word	0x08012835
 8003630:	08012845 	.word	0x08012845
 8003634:	08012860 	.word	0x08012860
 8003638:	080127da 	.word	0x080127da

0800363c <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady (USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800363c:	7803      	ldrb	r3, [r0, #0]
 800363e:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003640:	bf01      	itttt	eq
 8003642:	f8d0 3378 	ldreq.w	r3, [r0, #888]	; 0x378
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8003646:	2234      	moveq	r2, #52	; 0x34
 8003648:	69db      	ldreq	r3, [r3, #28]
 800364a:	fb02 3101 	mlaeq	r1, r2, r1, r3
 800364e:	bf03      	ittte	eq
 8003650:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8003654:	fab0 f080 	clzeq	r0, r0
 8003658:	0940      	lsreq	r0, r0, #5
 800365a:	2000      	movne	r0, #0
  }

  return res;
}
 800365c:	4770      	bx	lr

0800365e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800365e:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if(phost->gState == HOST_CLASS)
 8003660:	7803      	ldrb	r3, [r0, #0]
 8003662:	2b0b      	cmp	r3, #11
 8003664:	d111      	bne.n	800368a <USBH_MSC_GetLUNInfo+0x2c>
  {
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8003666:	2334      	movs	r3, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003668:	f8d0 0378 	ldr.w	r0, [r0, #888]	; 0x378
    USBH_memcpy(info,&MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800366c:	2490      	movs	r4, #144	; 0x90
 800366e:	fb13 4101 	smlabb	r1, r3, r1, r4
 8003672:	69c3      	ldr	r3, [r0, #28]
 8003674:	4419      	add	r1, r3
 8003676:	f101 0334 	add.w	r3, r1, #52	; 0x34
 800367a:	f851 0b04 	ldr.w	r0, [r1], #4
 800367e:	4299      	cmp	r1, r3
 8003680:	f842 0b04 	str.w	r0, [r2], #4
 8003684:	d1f9      	bne.n	800367a <USBH_MSC_GetLUNInfo+0x1c>
    return USBH_OK;
 8003686:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
 8003688:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
 800368a:	2002      	movs	r0, #2
 800368c:	e7fc      	b.n	8003688 <USBH_MSC_GetLUNInfo+0x2a>

0800368e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 800368e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8003692:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 8003696:	4604      	mov	r4, r0
 8003698:	460e      	mov	r6, r1
 800369a:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if ((phost->device.is_connected == 0U) ||
 800369e:	b3bd      	cbz	r5, 8003710 <USBH_MSC_Read+0x82>
      (phost->gState != HOST_CLASS) ||
 80036a0:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 80036a2:	2d0b      	cmp	r5, #11
 80036a4:	d134      	bne.n	8003710 <USBH_MSC_Read+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80036a6:	f8d0 5378 	ldr.w	r5, [r0, #888]	; 0x378
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80036aa:	2734      	movs	r7, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80036ac:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80036ae:	fb07 5701 	mla	r7, r7, r1, r5
      (phost->gState != HOST_CLASS) ||
 80036b2:	f897 c090 	ldrb.w	ip, [r7, #144]	; 0x90
 80036b6:	f1bc 0f01 	cmp.w	ip, #1
 80036ba:	d129      	bne.n	8003710 <USBH_MSC_Read+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
 80036bc:	f04f 0c06 	mov.w	ip, #6
 80036c0:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80036c4:	f887 c090 	strb.w	ip, [r7, #144]	; 0x90

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80036c8:	f242 7710 	movw	r7, #10000	; 0x2710
  MSC_Handle->rw_lun = lun;
 80036cc:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80036d0:	f8cd 8000 	str.w	r8, [sp]
 80036d4:	f000 fac9 	bl	8003c6a <USBH_MSC_SCSI_Read>
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80036d8:	fb07 f708 	mul.w	r7, r7, r8
  timeout = phost->Timer;
 80036dc:	f8d4 93bc 	ldr.w	r9, [r4, #956]	; 0x3bc
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80036e0:	4631      	mov	r1, r6
 80036e2:	4620      	mov	r0, r4
 80036e4:	f7ff ff3a 	bl	800355c <USBH_MSC_RdWrProcess>
 80036e8:	2801      	cmp	r0, #1
 80036ea:	d005      	beq.n	80036f8 <USBH_MSC_Read+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80036ec:	2301      	movs	r3, #1

  return USBH_OK;
 80036ee:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 80036f0:	732b      	strb	r3, [r5, #12]
}
 80036f2:	b003      	add	sp, #12
 80036f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80036f8:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80036fc:	eba3 0309 	sub.w	r3, r3, r9
 8003700:	42bb      	cmp	r3, r7
 8003702:	d803      	bhi.n	800370c <USBH_MSC_Read+0x7e>
 8003704:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1e9      	bne.n	80036e0 <USBH_MSC_Read+0x52>
      MSC_Handle->state = MSC_IDLE;
 800370c:	2301      	movs	r3, #1
 800370e:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8003710:	2002      	movs	r0, #2
 8003712:	e7ee      	b.n	80036f2 <USBH_MSC_Read+0x64>

08003714 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8003714:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8003718:	f890 531e 	ldrb.w	r5, [r0, #798]	; 0x31e
{
 800371c:	4604      	mov	r4, r0
 800371e:	460e      	mov	r6, r1
 8003720:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if ((phost->device.is_connected == 0U) ||
 8003724:	b3bd      	cbz	r5, 8003796 <USBH_MSC_Write+0x82>
      (phost->gState != HOST_CLASS) ||
 8003726:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8003728:	2d0b      	cmp	r5, #11
 800372a:	d134      	bne.n	8003796 <USBH_MSC_Write+0x82>
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800372c:	f8d0 5378 	ldr.w	r5, [r0, #888]	; 0x378
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003730:	2734      	movs	r7, #52	; 0x34
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003732:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8003734:	fb07 5701 	mla	r7, r7, r1, r5
      (phost->gState != HOST_CLASS) ||
 8003738:	f897 c090 	ldrb.w	ip, [r7, #144]	; 0x90
 800373c:	f1bc 0f01 	cmp.w	ip, #1
 8003740:	d129      	bne.n	8003796 <USBH_MSC_Write+0x82>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
 8003742:	f04f 0c07 	mov.w	ip, #7
 8003746:	f885 c00c 	strb.w	ip, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800374a:	f887 c090 	strb.w	ip, [r7, #144]	; 0x90
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 800374e:	f242 7710 	movw	r7, #10000	; 0x2710
  MSC_Handle->rw_lun = lun;
 8003752:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa
  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8003756:	f8cd 8000 	str.w	r8, [sp]
 800375a:	f000 fa47 	bl	8003bec <USBH_MSC_SCSI_Write>
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 800375e:	fb07 f708 	mul.w	r7, r7, r8
  timeout = phost->Timer;
 8003762:	f8d4 93bc 	ldr.w	r9, [r4, #956]	; 0x3bc
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8003766:	4631      	mov	r1, r6
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff fef7 	bl	800355c <USBH_MSC_RdWrProcess>
 800376e:	2801      	cmp	r0, #1
 8003770:	d005      	beq.n	800377e <USBH_MSC_Write+0x6a>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8003772:	2301      	movs	r3, #1
  return USBH_OK;
 8003774:	2000      	movs	r0, #0
  MSC_Handle->state = MSC_IDLE;
 8003776:	732b      	strb	r3, [r5, #12]
}
 8003778:	b003      	add	sp, #12
 800377a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(((phost->Timer - timeout) >  (10000U * length)) || (phost->device.is_connected == 0U))
 800377e:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8003782:	eba3 0309 	sub.w	r3, r3, r9
 8003786:	42bb      	cmp	r3, r7
 8003788:	d803      	bhi.n	8003792 <USBH_MSC_Write+0x7e>
 800378a:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e9      	bne.n	8003766 <USBH_MSC_Write+0x52>
      MSC_Handle->state = MSC_IDLE;
 8003792:	2301      	movs	r3, #1
 8003794:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8003796:	2002      	movs	r0, #2
 8003798:	e7ee      	b.n	8003778 <USBH_MSC_Write+0x64>

0800379a <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 800379a:	f64f 7121 	movw	r1, #65313	; 0xff21
 800379e:	2200      	movs	r2, #0
 80037a0:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, 0U, 0U);
 80037a4:	4611      	mov	r1, r2
 80037a6:	f000 be1f 	b.w	80043e8 <USBH_CtlReq>

080037aa <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                                 | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 80037aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037ae:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 80037b2:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 80037b6:	2201      	movs	r2, #1
 80037b8:	f000 be16 	b.w	80043e8 <USBH_CtlReq>

080037bc <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80037bc:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
 80037c0:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80037c2:	4905      	ldr	r1, [pc, #20]	; (80037d8 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80037c4:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80037c6:	4a05      	ldr	r2, [pc, #20]	; (80037dc <USBH_MSC_BOT_Init+0x20>)
 80037c8:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80037d2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 80037d6:	4770      	bx	lr
 80037d8:	43425355 	.word	0x43425355
 80037dc:	20304050 	.word	0x20304050

080037e0 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80037e0:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80037e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80037e6:	69dc      	ldr	r4, [r3, #28]
{
 80037e8:	4606      	mov	r6, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 80037ea:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 80037ee:	1e6b      	subs	r3, r5, #1
 80037f0:	2b0a      	cmp	r3, #10
 80037f2:	d83f      	bhi.n	8003874 <USBH_MSC_BOT_Process+0x94>
 80037f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80037f8:	001b000b 	.word	0x001b000b
 80037fc:	004a0040 	.word	0x004a0040
 8003800:	00730067 	.word	0x00730067
 8003804:	00a10099 	.word	0x00a10099
 8003808:	00d000c5 	.word	0x00d000c5
 800380c:	00e9      	.short	0x00e9
  {
  case BOT_SEND_CBW:
    MSC_Handle->hbot.cbw.field.LUN = lun;
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800380e:	2302      	movs	r3, #2
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8003810:	2201      	movs	r2, #1
    MSC_Handle->hbot.cbw.field.LUN = lun;
 8003812:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 8003816:	f104 0154 	add.w	r1, r4, #84	; 0x54
    MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800381a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    USBH_BulkSendData (phost, MSC_Handle->hbot.cbw.data,
 800381e:	7963      	ldrb	r3, [r4, #5]
 8003820:	9200      	str	r2, [sp, #0]
 8003822:	221f      	movs	r2, #31
 8003824:	f001 f85d 	bl	80048e2 <USBH_BulkSendData>

  default:
    break;
  }
  return status;
}
 8003828:	4628      	mov	r0, r5
 800382a:	b003      	add	sp, #12
 800382c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800382e:	7961      	ldrb	r1, [r4, #5]
 8003830:	f00d fcf4 	bl	801121c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003834:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8003836:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 8003838:	d111      	bne.n	800385e <USBH_MSC_BOT_Process+0x7e>
      if ( MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800383a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d037      	beq.n	80038b0 <USBH_MSC_BOT_Process+0xd0>
        if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8003840:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8003844:	2b00      	cmp	r3, #0
          MSC_Handle->hbot.state = BOT_DATA_IN;
 8003846:	bfb4      	ite	lt
 8003848:	2303      	movlt	r3, #3
          MSC_Handle->hbot.state = BOT_DATA_OUT;
 800384a:	2305      	movge	r3, #5
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800384c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      osMessagePut (phost->os_event, USBH_URB_EVENT, 0U);
 8003850:	2200      	movs	r2, #0
 8003852:	2102      	movs	r1, #2
 8003854:	f8d6 03cc 	ldr.w	r0, [r6, #972]	; 0x3cc
 8003858:	f002 fe6a 	bl	8006530 <osMessagePut>
 800385c:	e7e4      	b.n	8003828 <USBH_MSC_BOT_Process+0x48>
    else if(URB_Status == USBH_URB_NOTREADY)
 800385e:	2802      	cmp	r0, #2
 8003860:	d15d      	bne.n	800391e <USBH_MSC_BOT_Process+0x13e>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003862:	2701      	movs	r7, #1
 8003864:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
        osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 8003868:	2200      	movs	r2, #0
 800386a:	2102      	movs	r1, #2
 800386c:	f8d6 03cc 	ldr.w	r0, [r6, #972]	; 0x3cc
 8003870:	f002 fe5e 	bl	8006530 <osMessagePut>
  switch (MSC_Handle->hbot.state)
 8003874:	2501      	movs	r5, #1
 8003876:	e7d7      	b.n	8003828 <USBH_MSC_BOT_Process+0x48>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 8003878:	7923      	ldrb	r3, [r4, #4]
 800387a:	8962      	ldrh	r2, [r4, #10]
 800387c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8003880:	f001 f846 	bl	8004910 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8003884:	2304      	movs	r3, #4
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8003886:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800388a:	e7f3      	b.n	8003874 <USBH_MSC_BOT_Process+0x94>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800388c:	7921      	ldrb	r1, [r4, #4]
 800388e:	f00d fcc5 	bl	801121c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003892:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8003894:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 8003896:	d112      	bne.n	80038be <USBH_MSC_BOT_Process+0xde>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8003898:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800389a:	8962      	ldrh	r2, [r4, #10]
 800389c:	4293      	cmp	r3, r2
 800389e:	d937      	bls.n	8003910 <USBH_MSC_BOT_Process+0x130>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80038a0:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80038a4:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80038a6:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80038a8:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 80038aa:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80038ae:	b90b      	cbnz	r3, 80038b4 <USBH_MSC_BOT_Process+0xd4>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80038b0:	2307      	movs	r3, #7
 80038b2:	e7cb      	b.n	800384c <USBH_MSC_BOT_Process+0x6c>
        USBH_BulkReceiveData (phost, MSC_Handle->hbot.pbuf,
 80038b4:	7923      	ldrb	r3, [r4, #4]
 80038b6:	4630      	mov	r0, r6
 80038b8:	f001 f82a 	bl	8004910 <USBH_BulkReceiveData>
 80038bc:	e7b4      	b.n	8003828 <USBH_MSC_BOT_Process+0x48>
    else if(URB_Status == USBH_URB_STALL)
 80038be:	2805      	cmp	r0, #5
    else if(URB_Status == USBH_URB_STALL)
 80038c0:	d1d8      	bne.n	8003874 <USBH_MSC_BOT_Process+0x94>
      MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80038c2:	2309      	movs	r3, #9
 80038c4:	e02e      	b.n	8003924 <USBH_MSC_BOT_Process+0x144>
    USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 80038c6:	2501      	movs	r5, #1
 80038c8:	7963      	ldrb	r3, [r4, #5]
 80038ca:	8922      	ldrh	r2, [r4, #8]
 80038cc:	9500      	str	r5, [sp, #0]
 80038ce:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80038d2:	f001 f806 	bl	80048e2 <USBH_BulkSendData>
    MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 80038d6:	2306      	movs	r3, #6
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80038d8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80038dc:	e7a4      	b.n	8003828 <USBH_MSC_BOT_Process+0x48>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80038de:	7961      	ldrb	r1, [r4, #5]
 80038e0:	f00d fc9c 	bl	801121c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80038e4:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80038e6:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 80038e8:	d115      	bne.n	8003916 <USBH_MSC_BOT_Process+0x136>
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80038ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038ec:	8922      	ldrh	r2, [r4, #8]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d90e      	bls.n	8003910 <USBH_MSC_BOT_Process+0x130>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80038f2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80038f6:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80038f8:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80038fa:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80038fc:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0d5      	beq.n	80038b0 <USBH_MSC_BOT_Process+0xd0>
        USBH_BulkSendData (phost, MSC_Handle->hbot.pbuf,
 8003904:	7963      	ldrb	r3, [r4, #5]
 8003906:	9000      	str	r0, [sp, #0]
 8003908:	4630      	mov	r0, r6
 800390a:	f000 ffea 	bl	80048e2 <USBH_BulkSendData>
 800390e:	e79f      	b.n	8003850 <USBH_MSC_BOT_Process+0x70>
        MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	65e3      	str	r3, [r4, #92]	; 0x5c
      if(MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8003914:	e7cc      	b.n	80038b0 <USBH_MSC_BOT_Process+0xd0>
    else if(URB_Status == USBH_URB_NOTREADY)
 8003916:	2802      	cmp	r0, #2
 8003918:	d101      	bne.n	800391e <USBH_MSC_BOT_Process+0x13e>
      MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800391a:	2305      	movs	r3, #5
 800391c:	e002      	b.n	8003924 <USBH_MSC_BOT_Process+0x144>
    else if(URB_Status == USBH_URB_STALL)
 800391e:	2d05      	cmp	r5, #5
 8003920:	d1a8      	bne.n	8003874 <USBH_MSC_BOT_Process+0x94>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8003922:	230a      	movs	r3, #10
 8003924:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8003928:	e79e      	b.n	8003868 <USBH_MSC_BOT_Process+0x88>
    USBH_BulkReceiveData (phost, MSC_Handle->hbot.csw.data,
 800392a:	7923      	ldrb	r3, [r4, #4]
 800392c:	220d      	movs	r2, #13
 800392e:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8003932:	f000 ffed 	bl	8004910 <USBH_BulkReceiveData>
    MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8003936:	2308      	movs	r3, #8
 8003938:	e7a5      	b.n	8003886 <USBH_MSC_BOT_Process+0xa6>
    URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800393a:	7921      	ldrb	r1, [r4, #4]
 800393c:	f00d fc6e 	bl	801121c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8003940:	2801      	cmp	r0, #1
 8003942:	d11c      	bne.n	800397e <USBH_MSC_BOT_Process+0x19e>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003944:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8003948:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
{
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

    /*Checking if the transfer length is different than 13*/
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800394c:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800394e:	f8d6 3378 	ldr.w	r3, [r6, #888]	; 0x378
 8003952:	69dc      	ldr	r4, [r3, #28]
    if(USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8003954:	7921      	ldrb	r1, [r4, #4]
 8003956:	f00d fc1d 	bl	8011194 <USBH_LL_GetLastXferSize>
 800395a:	280d      	cmp	r0, #13
 800395c:	d10d      	bne.n	800397a <USBH_MSC_BOT_Process+0x19a>
    }
    else
    { /* CSW length is Correct */

      /* Check validity of the CSW Signature and CSWStatus */
      if(MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800395e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003960:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <USBH_MSC_BOT_Process+0x1fc>)
 8003962:	429a      	cmp	r2, r3
 8003964:	d109      	bne.n	800397a <USBH_MSC_BOT_Process+0x19a>
      {/* Check Condition 1. dCSWSignature is equal to 53425355h */

        if(MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8003966:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800396a:	429a      	cmp	r2, r3
 800396c:	d105      	bne.n	800397a <USBH_MSC_BOT_Process+0x19a>
        {
          /* Check Condition 3. dCSWTag matches the dCBWTag from the
          corresponding CBW */

          if(MSC_Handle->hbot.csw.field.Status == 0U)
 800396e:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
        status = USBH_FAIL;
 8003972:	2d00      	cmp	r5, #0
 8003974:	bf18      	it	ne
 8003976:	2502      	movne	r5, #2
 8003978:	e76a      	b.n	8003850 <USBH_MSC_BOT_Process+0x70>
 800397a:	2502      	movs	r5, #2
 800397c:	e768      	b.n	8003850 <USBH_MSC_BOT_Process+0x70>
    else if(URB_Status == USBH_URB_STALL)
 800397e:	2805      	cmp	r0, #5
 8003980:	e79e      	b.n	80038c0 <USBH_MSC_BOT_Process+0xe0>
    status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8003982:	79e1      	ldrb	r1, [r4, #7]
 8003984:	f000 ff69 	bl	800485a <USBH_ClrFeature>
    if (error == USBH_OK)
 8003988:	b908      	cbnz	r0, 800398e <USBH_MSC_BOT_Process+0x1ae>
      MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800398a:	2307      	movs	r3, #7
 800398c:	e77b      	b.n	8003886 <USBH_MSC_BOT_Process+0xa6>
    else if (error == USBH_UNRECOVERED_ERROR)
 800398e:	2804      	cmp	r0, #4
      if (error == USBH_UNRECOVERED_ERROR)
 8003990:	f47f af70 	bne.w	8003874 <USBH_MSC_BOT_Process+0x94>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8003994:	230b      	movs	r3, #11
 8003996:	e776      	b.n	8003886 <USBH_MSC_BOT_Process+0xa6>
    status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8003998:	79a1      	ldrb	r1, [r4, #6]
 800399a:	f000 ff5e 	bl	800485a <USBH_ClrFeature>
    if (error == USBH_OK)
 800399e:	4605      	mov	r5, r0
 80039a0:	b988      	cbnz	r0, 80039c6 <USBH_MSC_BOT_Process+0x1e6>
      toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80039a2:	7961      	ldrb	r1, [r4, #5]
 80039a4:	4630      	mov	r0, r6
 80039a6:	f00d fc59 	bl	801125c <USBH_LL_GetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80039aa:	f1c0 0001 	rsb	r0, r0, #1
 80039ae:	7961      	ldrb	r1, [r4, #5]
 80039b0:	b2c2      	uxtb	r2, r0
 80039b2:	4630      	mov	r0, r6
 80039b4:	f00d fc43 	bl	801123e <USBH_LL_SetToggle>
      USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80039b8:	462a      	mov	r2, r5
 80039ba:	7921      	ldrb	r1, [r4, #4]
 80039bc:	4630      	mov	r0, r6
 80039be:	f00d fc3e 	bl	801123e <USBH_LL_SetToggle>
      MSC_Handle->hbot.state = BOT_ERROR_IN;
 80039c2:	2309      	movs	r3, #9
 80039c4:	e75f      	b.n	8003886 <USBH_MSC_BOT_Process+0xa6>
      if (error == USBH_UNRECOVERED_ERROR)
 80039c6:	2804      	cmp	r0, #4
 80039c8:	e7e2      	b.n	8003990 <USBH_MSC_BOT_Process+0x1b0>
    status = USBH_MSC_BOT_REQ_Reset(phost);
 80039ca:	f7ff fee6 	bl	800379a <USBH_MSC_BOT_REQ_Reset>
    if ( status == USBH_OK)
 80039ce:	4605      	mov	r5, r0
 80039d0:	2800      	cmp	r0, #0
 80039d2:	f47f af29 	bne.w	8003828 <USBH_MSC_BOT_Process+0x48>
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e77e      	b.n	80038d8 <USBH_MSC_BOT_Process+0xf8>
 80039da:	bf00      	nop
 80039dc:	53425355 	.word	0x53425355

080039e0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady (USBH_HandleTypeDef *phost,
                                                uint8_t lun)
{
 80039e0:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80039e2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 80039e6:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 80039e8:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 80039ec:	2d01      	cmp	r5, #1
 80039ee:	d004      	beq.n	80039fa <USBH_MSC_SCSI_TestUnitReady+0x1a>
 80039f0:	2d02      	cmp	r5, #2
 80039f2:	d014      	beq.n	8003a1e <USBH_MSC_SCSI_TestUnitReady+0x3e>
 80039f4:	2502      	movs	r5, #2
  default:
    break;
  }

  return error;
}
 80039f6:	4628      	mov	r0, r5
 80039f8:	bd38      	pop	{r3, r4, r5, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80039fa:	2100      	movs	r1, #0
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80039fc:	2210      	movs	r2, #16
 80039fe:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8003a02:	65e1      	str	r1, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8003a04:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003a08:	f00d fd62 	bl	80114d0 <memset>
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003a0c:	230a      	movs	r3, #10
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003a0e:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003a12:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003a16:	2302      	movs	r3, #2
 8003a18:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    break;
 8003a1c:	e7eb      	b.n	80039f6 <USBH_MSC_SCSI_TestUnitReady+0x16>
}
 8003a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8003a22:	f7ff bedd 	b.w	80037e0 <USBH_MSC_BOT_Process>

08003a26 <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a26:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8003a2a:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a2c:	69dc      	ldr	r4, [r3, #28]
{
 8003a2e:	4616      	mov	r6, r2

  switch(MSC_Handle->hbot.cmd_state)
 8003a30:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003a34:	2d01      	cmp	r5, #1
 8003a36:	d004      	beq.n	8003a42 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8003a38:	2d02      	cmp	r5, #2
 8003a3a:	d01b      	beq.n	8003a74 <USBH_MSC_SCSI_ReadCapacity+0x4e>
 8003a3c:	2501      	movs	r5, #1
  default:
    break;
  }

  return error;
}
 8003a3e:	4628      	mov	r0, r5
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8003a42:	2308      	movs	r3, #8
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003a44:	2210      	movs	r2, #16
 8003a46:	2100      	movs	r1, #0
 8003a48:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8003a4c:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003a54:	f00d fd3c 	bl	80114d0 <memset>
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003a58:	f242 530a 	movw	r3, #9482	; 0x250a
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003a5c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003a60:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003a64:	2302      	movs	r3, #2
 8003a66:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8003a6a:	f104 0310 	add.w	r3, r4, #16
 8003a6e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8003a72:	e7e4      	b.n	8003a3e <USBH_MSC_SCSI_ReadCapacity+0x18>
    error = USBH_MSC_BOT_Process(phost, lun);
 8003a74:	f7ff feb4 	bl	80037e0 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8003a78:	4605      	mov	r5, r0
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1df      	bne.n	8003a3e <USBH_MSC_SCSI_ReadCapacity+0x18>
      capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) |\
 8003a7e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003a82:	6813      	ldr	r3, [r2, #0]
 8003a84:	ba1b      	rev	r3, r3
 8003a86:	6033      	str	r3, [r6, #0]
      capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8003a88:	88d3      	ldrh	r3, [r2, #6]
 8003a8a:	ba5b      	rev16	r3, r3
 8003a8c:	80b3      	strh	r3, [r6, #4]
 8003a8e:	e7d6      	b.n	8003a3e <USBH_MSC_SCSI_ReadCapacity+0x18>

08003a90 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry (USBH_HandleTypeDef *phost, uint8_t lun,
                                          SCSI_StdInquiryDataTypeDef *inquiry)
{
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a94:	f8d0 2378 	ldr.w	r2, [r0, #888]	; 0x378
{
 8003a98:	460b      	mov	r3, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a9a:	69d4      	ldr	r4, [r2, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8003a9c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8003aa0:	2d01      	cmp	r5, #1
 8003aa2:	d004      	beq.n	8003aae <USBH_MSC_SCSI_Inquiry+0x1e>
 8003aa4:	2d02      	cmp	r5, #2
 8003aa6:	d023      	beq.n	8003af0 <USBH_MSC_SCSI_Inquiry+0x60>
 8003aa8:	2502      	movs	r5, #2
  default:
    break;
  }

  return error;
}
 8003aaa:	4628      	mov	r0, r5
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8003aae:	015b      	lsls	r3, r3, #5
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8003ab0:	2224      	movs	r2, #36	; 0x24
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003ab2:	f241 210a 	movw	r1, #4618	; 0x120a
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003ab6:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8003aba:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8003abe:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8003ac2:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003ac4:	2280      	movs	r2, #128	; 0x80
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8003ac6:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003aca:	2302      	movs	r3, #2
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003acc:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8003ad0:	2200      	movs	r2, #0
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003ad2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8003ad6:	f104 0310 	add.w	r3, r4, #16
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8003ada:	f8c4 2069 	str.w	r2, [r4, #105]	; 0x69
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003ade:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8003ae2:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8003ae6:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8003aea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    break;
 8003aee:	e7dc      	b.n	8003aaa <USBH_MSC_SCSI_Inquiry+0x1a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8003af0:	f7ff fe76 	bl	80037e0 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8003af4:	4605      	mov	r5, r0
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d1d7      	bne.n	8003aaa <USBH_MSC_SCSI_Inquiry+0x1a>
      USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8003afa:	4601      	mov	r1, r0
 8003afc:	2222      	movs	r2, #34	; 0x22
 8003afe:	4630      	mov	r0, r6
 8003b00:	f00d fce6 	bl	80114d0 <memset>
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8003b04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8003b08:	f106 010c 	add.w	r1, r6, #12
      inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	f003 031f 	and.w	r3, r3, #31
 8003b12:	7073      	strb	r3, [r6, #1]
      inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8003b14:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	7033      	strb	r3, [r6, #0]
      if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8003b1e:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003b22:	785b      	ldrb	r3, [r3, #1]
 8003b24:	09db      	lsrs	r3, r3, #7
 8003b26:	70b3      	strb	r3, [r6, #2]
      USBH_memcpy (inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8003b28:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003b2c:	f852 3f08 	ldr.w	r3, [r2, #8]!
 8003b30:	f8c6 3003 	str.w	r3, [r6, #3]
 8003b34:	6853      	ldr	r3, [r2, #4]
 8003b36:	f8c6 3007 	str.w	r3, [r6, #7]
      USBH_memcpy (inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8003b3a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003b3e:	f103 0210 	add.w	r2, r3, #16
 8003b42:	3320      	adds	r3, #32
 8003b44:	f852 0b04 	ldr.w	r0, [r2], #4
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	f841 0b04 	str.w	r0, [r1], #4
 8003b4e:	d1f9      	bne.n	8003b44 <USBH_MSC_SCSI_Inquiry+0xb4>
      USBH_memcpy (inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8003b50:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	f8c6 301d 	str.w	r3, [r6, #29]
 8003b5a:	e7a6      	b.n	8003aaa <USBH_MSC_SCSI_Inquiry+0x1a>

08003b5c <USBH_MSC_SCSI_RequestSense>:
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense (USBH_HandleTypeDef *phost,
                                               uint8_t lun,
                                               SCSI_SenseTypeDef *sense_data)
{
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003b5c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8003b60:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003b62:	69dc      	ldr	r4, [r3, #28]
{
 8003b64:	460e      	mov	r6, r1
 8003b66:	4615      	mov	r5, r2

  switch(MSC_Handle->hbot.cmd_state)
 8003b68:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d004      	beq.n	8003b7a <USBH_MSC_SCSI_RequestSense+0x1e>
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d027      	beq.n	8003bc4 <USBH_MSC_SCSI_RequestSense+0x68>
 8003b74:	2302      	movs	r3, #2
  default:
    break;
  }

  return error;
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	bd70      	pop	{r4, r5, r6, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8003b7a:	220e      	movs	r2, #14
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003b7c:	f240 310a 	movw	r1, #778	; 0x30a
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8003b80:	0176      	lsls	r6, r6, #5
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003b82:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8003b86:	65e2      	str	r2, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003b88:	2280      	movs	r2, #128	; 0x80
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003b8a:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8003b8e:	f44f 6160 	mov.w	r1, #3584	; 0xe00
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003b92:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003b96:	2200      	movs	r2, #0
    MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8003b98:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003b9c:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 8003ba0:	f8c4 206b 	str.w	r2, [r4, #107]	; 0x6b
 8003ba4:	f8c4 206f 	str.w	r2, [r4, #111]	; 0x6f
    MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8003ba8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8003bac:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003bb0:	2202      	movs	r2, #2
    MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8003bb2:	f8a4 1066 	strh.w	r1, [r4, #102]	; 0x66
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003bb6:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
    MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8003bba:	f104 0210 	add.w	r2, r4, #16
 8003bbe:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    break;
 8003bc2:	e7d8      	b.n	8003b76 <USBH_MSC_SCSI_RequestSense+0x1a>
    error = USBH_MSC_BOT_Process(phost, lun);
 8003bc4:	f7ff fe0c 	bl	80037e0 <USBH_MSC_BOT_Process>
    if(error == USBH_OK)
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2800      	cmp	r0, #0
 8003bcc:	d1d3      	bne.n	8003b76 <USBH_MSC_SCSI_RequestSense+0x1a>
      sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8003bce:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003bd2:	7892      	ldrb	r2, [r2, #2]
 8003bd4:	f002 020f 	and.w	r2, r2, #15
 8003bd8:	702a      	strb	r2, [r5, #0]
      sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8003bda:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003bde:	7b12      	ldrb	r2, [r2, #12]
 8003be0:	706a      	strb	r2, [r5, #1]
      sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8003be2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8003be6:	7b52      	ldrb	r2, [r2, #13]
 8003be8:	70aa      	strb	r2, [r5, #2]
 8003bea:	e7c4      	b.n	8003b76 <USBH_MSC_SCSI_RequestSense+0x1a>

08003bec <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8003bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf0:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003bf2:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8003bf6:	4615      	mov	r5, r2
 8003bf8:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle =  (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003bfa:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8003bfc:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
 8003c00:	2e01      	cmp	r6, #1
 8003c02:	d005      	beq.n	8003c10 <USBH_MSC_SCSI_Write+0x24>
 8003c04:	2e02      	cmp	r6, #2
 8003c06:	d02c      	beq.n	8003c62 <USBH_MSC_SCSI_Write+0x76>
 8003c08:	2602      	movs	r6, #2
  default:
    break;
  }

  return error;
}
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8003c10:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8003c14:	2100      	movs	r1, #0
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003c16:	2210      	movs	r2, #16
 8003c18:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8003c1c:	437b      	muls	r3, r7
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8003c1e:	ba7f      	rev16	r7, r7
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8003c20:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8003c24:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003c26:	f00d fc53 	bl	80114d0 <memset>
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003c2a:	f642 230a 	movw	r3, #10762	; 0x2a0a
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 8003c2e:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003c32:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8003c36:	f3c5 6307 	ubfx	r3, r5, #24, #8
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8003c3a:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8003c3e:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8003c42:	f3c5 4307 	ubfx	r3, r5, #16, #8
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003c46:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8003c4a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8003c4e:	f3c5 2307 	ubfx	r3, r5, #8, #8
    MSC_Handle->hbot.pbuf = pbuf;
 8003c52:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8003c56:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    break;
 8003c60:	e7d3      	b.n	8003c0a <USBH_MSC_SCSI_Write+0x1e>
}
 8003c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8003c66:	f7ff bdbb 	b.w	80037e0 <USBH_MSC_BOT_Process>

08003c6a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                     uint8_t lun,
                                     uint32_t address,
                                     uint8_t *pbuf,
                                     uint32_t length)
{
 8003c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6e:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003c70:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8003c74:	4615      	mov	r5, r2
 8003c76:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8003c78:	69dc      	ldr	r4, [r3, #28]

  switch(MSC_Handle->hbot.cmd_state)
 8003c7a:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
 8003c7e:	2e01      	cmp	r6, #1
 8003c80:	d005      	beq.n	8003c8e <USBH_MSC_SCSI_Read+0x24>
 8003c82:	2e02      	cmp	r6, #2
 8003c84:	d02d      	beq.n	8003ce2 <USBH_MSC_SCSI_Read+0x78>
 8003c86:	2602      	movs	r6, #2
  default:
    break;
  }

  return error;
}
 8003c88:	4630      	mov	r0, r6
 8003c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8003c8e:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003c92:	2210      	movs	r2, #16
 8003c94:	2100      	movs	r1, #0
 8003c96:	f104 0063 	add.w	r0, r4, #99	; 0x63
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8003c9a:	437b      	muls	r3, r7
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8003c9c:	ba7f      	rev16	r7, r7
    MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8003c9e:	65e3      	str	r3, [r4, #92]	; 0x5c
    MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8003ca6:	f00d fc13 	bl	80114d0 <memset>
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003caa:	f642 030a 	movw	r3, #10250	; 0x280a
    MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t*)(void *)&address)[0]);
 8003cae:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
    MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8003cb2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8003cb6:	f3c5 6307 	ubfx	r3, r5, #24, #8
    MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8003cba:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
    MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t*)(void *)&address)[3]);
 8003cbe:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8003cc2:	f3c5 4307 	ubfx	r3, r5, #16, #8
    MSC_Handle->hbot.state = BOT_SEND_CBW;
 8003cc6:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
    MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t*)(void *)&address)[2]);
 8003cca:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8003cce:	f3c5 2307 	ubfx	r3, r5, #8, #8
    MSC_Handle->hbot.pbuf = pbuf;
 8003cd2:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
    MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t*)(void *)&address)[1]);
 8003cd6:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
    MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
    break;
 8003ce0:	e7d2      	b.n	8003c88 <USBH_MSC_SCSI_Read+0x1e>
}
 8003ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    error = USBH_MSC_BOT_Process(phost, lun);
 8003ce6:	f7ff bd7b 	b.w	80037e0 <USBH_MSC_BOT_Process>

08003cea <DeInitStateMachine>:
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003cea:	f500 7360 	add.w	r3, r0, #896	; 0x380
 8003cee:	f500 726f 	add.w	r2, r0, #956	; 0x3bc
  {
    phost->Pipes[i] = 0U;
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f843 1b04 	str.w	r1, [r3], #4
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d1fb      	bne.n	8003cf4 <DeInitStateMachine+0xa>
 8003cfc:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 8003d00:	f500 7147 	add.w	r1, r0, #796	; 0x31c
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f802 3b01 	strb.w	r3, [r2], #1
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8003d0a:	428a      	cmp	r2, r1
 8003d0c:	d1fb      	bne.n	8003d06 <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 8003d0e:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8003d10:	2201      	movs	r2, #1
  phost->EnumState = ENUM_IDLE;
 8003d12:	7043      	strb	r3, [r0, #1]
  phost->Timer = 0U;
 8003d14:	f8c0 33bc 	str.w	r3, [r0, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003d18:	2340      	movs	r3, #64	; 0x40
  phost->RequestState = CMD_SEND;
 8003d1a:	7082      	strb	r2, [r0, #2]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003d1c:	7183      	strb	r3, [r0, #6]
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->Control.state = CTRL_SETUP;
 8003d22:	8302      	strh	r2, [r0, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003d24:	f8a0 331c 	strh.w	r3, [r0, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;

  return USBH_OK;
}
 8003d28:	2000      	movs	r0, #0
 8003d2a:	4770      	bx	lr

08003d2c <USBH_Init>:
{
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	460d      	mov	r5, r1
 8003d30:	b088      	sub	sp, #32
  if(phost == NULL)
 8003d32:	4604      	mov	r4, r0
 8003d34:	b958      	cbnz	r0, 8003d4e <USBH_Init+0x22>
    USBH_ErrLog("Invalid Host handle");
 8003d36:	4819      	ldr	r0, [pc, #100]	; (8003d9c <USBH_Init+0x70>)
 8003d38:	f00d fc7c 	bl	8011634 <iprintf>
 8003d3c:	4818      	ldr	r0, [pc, #96]	; (8003da0 <USBH_Init+0x74>)
 8003d3e:	f00d fc79 	bl	8011634 <iprintf>
 8003d42:	200a      	movs	r0, #10
 8003d44:	f00d fc8e 	bl	8011664 <putchar>
    return USBH_FAIL;
 8003d48:	2002      	movs	r0, #2
}
 8003d4a:	b008      	add	sp, #32
 8003d4c:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
 8003d4e:	2300      	movs	r3, #0
  phost->id = id;
 8003d50:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->ClassNumber = 0U;
 8003d54:	e9c0 33de 	strd	r3, r3, [r0, #888]	; 0x378
  DeInitStateMachine(phost);
 8003d58:	f7ff ffc7 	bl	8003cea <DeInitStateMachine>
  if(pUsrFunc != NULL)
 8003d5c:	b10d      	cbz	r5, 8003d62 <USBH_Init+0x36>
    phost->pUser = pUsrFunc;
 8003d5e:	f8c4 53c8 	str.w	r5, [r4, #968]	; 0x3c8
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8003d62:	4d10      	ldr	r5, [pc, #64]	; (8003da4 <USBH_Init+0x78>)
 8003d64:	ab01      	add	r3, sp, #4
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8003d66:	ae03      	add	r6, sp, #12
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8003d68:	e895 0003 	ldmia.w	r5, {r0, r1}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8003d6c:	3508      	adds	r5, #8
  osMessageQDef(USBH_Queue, 10, uint16_t);
 8003d6e:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f002 fbd5 	bl	8006524 <osMessageCreate>
 8003d7a:	f8c4 03cc 	str.w	r0, [r4, #972]	; 0x3cc
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8003d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003d82:	682b      	ldr	r3, [r5, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8003d84:	4621      	mov	r1, r4
 8003d86:	a803      	add	r0, sp, #12
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0, USBH_PROCESS_STACK_SIZE);
 8003d88:	6033      	str	r3, [r6, #0]
  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8003d8a:	f002 fb11 	bl	80063b0 <osThreadCreate>
 8003d8e:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  USBH_LL_Init(phost);
 8003d92:	4620      	mov	r0, r4
 8003d94:	f00d f99e 	bl	80110d4 <USBH_LL_Init>
  return USBH_OK;
 8003d98:	2000      	movs	r0, #0
 8003d9a:	e7d6      	b.n	8003d4a <USBH_Init+0x1e>
 8003d9c:	080128e2 	.word	0x080128e2
 8003da0:	080128ea 	.word	0x080128ea
 8003da4:	08012718 	.word	0x08012718

08003da8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8003da8:	b508      	push	{r3, lr}
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8003daa:	b1a1      	cbz	r1, 8003dd6 <USBH_RegisterClass+0x2e>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003dac:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003db0:	b933      	cbnz	r3, 8003dc0 <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8003db2:	2201      	movs	r2, #1
 8003db4:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 8003db8:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
      status = USBH_OK;
 8003dbc:	4618      	mov	r0, r3
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 8003dbe:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
 8003dc0:	4807      	ldr	r0, [pc, #28]	; (8003de0 <USBH_RegisterClass+0x38>)
 8003dc2:	f00d fc37 	bl	8011634 <iprintf>
 8003dc6:	4807      	ldr	r0, [pc, #28]	; (8003de4 <USBH_RegisterClass+0x3c>)
    USBH_ErrLog("Invalid Class handle");
 8003dc8:	f00d fc34 	bl	8011634 <iprintf>
 8003dcc:	200a      	movs	r0, #10
 8003dce:	f00d fc49 	bl	8011664 <putchar>
    status = USBH_FAIL;
 8003dd2:	2002      	movs	r0, #2
 8003dd4:	e7f3      	b.n	8003dbe <USBH_RegisterClass+0x16>
    USBH_ErrLog("Invalid Class handle");
 8003dd6:	4802      	ldr	r0, [pc, #8]	; (8003de0 <USBH_RegisterClass+0x38>)
 8003dd8:	f00d fc2c 	bl	8011634 <iprintf>
 8003ddc:	4802      	ldr	r0, [pc, #8]	; (8003de8 <USBH_RegisterClass+0x40>)
 8003dde:	e7f3      	b.n	8003dc8 <USBH_RegisterClass+0x20>
 8003de0:	080128e2 	.word	0x080128e2
 8003de4:	080128fe 	.word	0x080128fe
 8003de8:	08012917 	.word	0x08012917

08003dec <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8003dec:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003dee:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
{
 8003df2:	4605      	mov	r5, r0
 8003df4:	460c      	mov	r4, r1
  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8003df6:	428b      	cmp	r3, r1
 8003df8:	d924      	bls.n	8003e44 <USBH_SelectInterface+0x58>
  {
    phost->device.current_interface = interface;
 8003dfa:	f880 1320 	strb.w	r1, [r0, #800]	; 0x320
    USBH_UsrLog ("Switching to Interface (#%d)", interface);
 8003dfe:	4817      	ldr	r0, [pc, #92]	; (8003e5c <USBH_SelectInterface+0x70>)
 8003e00:	f00d fc18 	bl	8011634 <iprintf>
 8003e04:	200a      	movs	r0, #10
 8003e06:	f00d fc2d 	bl	8011664 <putchar>
    USBH_UsrLog ("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass );
 8003e0a:	211a      	movs	r1, #26
 8003e0c:	4814      	ldr	r0, [pc, #80]	; (8003e60 <USBH_SelectInterface+0x74>)
 8003e0e:	fb01 5404 	mla	r4, r1, r4, r5
 8003e12:	f894 1343 	ldrb.w	r1, [r4, #835]	; 0x343
 8003e16:	f00d fc0d 	bl	8011634 <iprintf>
 8003e1a:	200a      	movs	r0, #10
 8003e1c:	f00d fc22 	bl	8011664 <putchar>
    USBH_UsrLog ("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass );
 8003e20:	f894 1344 	ldrb.w	r1, [r4, #836]	; 0x344
 8003e24:	480f      	ldr	r0, [pc, #60]	; (8003e64 <USBH_SelectInterface+0x78>)
 8003e26:	f00d fc05 	bl	8011634 <iprintf>
 8003e2a:	200a      	movs	r0, #10
 8003e2c:	f00d fc1a 	bl	8011664 <putchar>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
 8003e30:	f894 1345 	ldrb.w	r1, [r4, #837]	; 0x345
 8003e34:	480c      	ldr	r0, [pc, #48]	; (8003e68 <USBH_SelectInterface+0x7c>)
 8003e36:	f00d fbfd 	bl	8011634 <iprintf>
 8003e3a:	200a      	movs	r0, #10
 8003e3c:	f00d fc12 	bl	8011664 <putchar>
  USBH_StatusTypeDef   status = USBH_OK;
 8003e40:	2000      	movs	r0, #0
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
  }
  return status;
}
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog ("Cannot Select This Interface.");
 8003e44:	4809      	ldr	r0, [pc, #36]	; (8003e6c <USBH_SelectInterface+0x80>)
 8003e46:	f00d fbf5 	bl	8011634 <iprintf>
 8003e4a:	4809      	ldr	r0, [pc, #36]	; (8003e70 <USBH_SelectInterface+0x84>)
 8003e4c:	f00d fbf2 	bl	8011634 <iprintf>
 8003e50:	200a      	movs	r0, #10
 8003e52:	f00d fc07 	bl	8011664 <putchar>
    status = USBH_FAIL;
 8003e56:	2002      	movs	r0, #2
 8003e58:	e7f3      	b.n	8003e42 <USBH_SelectInterface+0x56>
 8003e5a:	bf00      	nop
 8003e5c:	0801292c 	.word	0x0801292c
 8003e60:	08012949 	.word	0x08012949
 8003e64:	08012958 	.word	0x08012958
 8003e68:	08012967 	.word	0x08012967
 8003e6c:	080128e2 	.word	0x080128e2
 8003e70:	08012976 	.word	0x08012976

08003e74 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8003e74:	b570      	push	{r4, r5, r6, lr}
 8003e76:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8003e78:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8003e7c:	b2e5      	uxtb	r5, r4
 8003e7e:	428e      	cmp	r6, r1
 8003e80:	d001      	beq.n	8003e86 <USBH_FindInterface+0x12>
 8003e82:	29ff      	cmp	r1, #255	; 0xff
 8003e84:	d10b      	bne.n	8003e9e <USBH_FindInterface+0x2a>
 8003e86:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8003e8a:	4296      	cmp	r6, r2
 8003e8c:	d001      	beq.n	8003e92 <USBH_FindInterface+0x1e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8003e8e:	2aff      	cmp	r2, #255	; 0xff
 8003e90:	d105      	bne.n	8003e9e <USBH_FindInterface+0x2a>
 8003e92:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8003e96:	429e      	cmp	r6, r3
 8003e98:	d004      	beq.n	8003ea4 <USBH_FindInterface+0x30>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8003e9a:	2bff      	cmp	r3, #255	; 0xff
 8003e9c:	d002      	beq.n	8003ea4 <USBH_FindInterface+0x30>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003e9e:	301a      	adds	r0, #26
 8003ea0:	b114      	cbz	r4, 8003ea8 <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8003ea2:	25ff      	movs	r5, #255	; 0xff
}
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	bd70      	pop	{r4, r5, r6, pc}
 8003ea8:	2401      	movs	r4, #1
 8003eaa:	e7e5      	b.n	8003e78 <USBH_FindInterface+0x4>

08003eac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8003eac:	b510      	push	{r4, lr}
 8003eae:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003eb0:	f00d f93c 	bl	801112c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f00d f9b4 	bl	8011224 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	bd10      	pop	{r4, pc}

08003ec0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003ec0:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003ec2:	2302      	movs	r3, #2
{
 8003ec4:	b088      	sub	sp, #32
 8003ec6:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003ec8:	f88d 301f 	strb.w	r3, [sp, #31]
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 8003ecc:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8003ed0:	b933      	cbnz	r3, 8003ee0 <USBH_Process+0x20>
 8003ed2:	7802      	ldrb	r2, [r0, #0]
 8003ed4:	b122      	cbz	r2, 8003ee0 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8003ed6:	7802      	ldrb	r2, [r0, #0]
 8003ed8:	2a03      	cmp	r2, #3
 8003eda:	d001      	beq.n	8003ee0 <USBH_Process+0x20>
      phost->gState = HOST_DEV_DISCONNECTED;
 8003edc:	2203      	movs	r2, #3
 8003ede:	7002      	strb	r2, [r0, #0]
  switch (phost->gState)
 8003ee0:	7822      	ldrb	r2, [r4, #0]
 8003ee2:	2a0b      	cmp	r2, #11
 8003ee4:	f200 8085 	bhi.w	8003ff2 <USBH_Process+0x132>
 8003ee8:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003eec:	001b000c 	.word	0x001b000c
 8003ef0:	01ef0020 	.word	0x01ef0020
 8003ef4:	00560083 	.word	0x00560083
 8003ef8:	014701d0 	.word	0x014701d0
 8003efc:	01630152 	.word	0x01630152
 8003f00:	01e60177 	.word	0x01e60177
    if (phost->device.is_connected)
 8003f04:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d072      	beq.n	8003ff2 <USBH_Process+0x132>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003f0c:	2501      	movs	r5, #1
      USBH_Delay(200U);
 8003f0e:	20c8      	movs	r0, #200	; 0xc8
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8003f10:	7025      	strb	r5, [r4, #0]
      USBH_Delay(200U);
 8003f12:	f00d f9b1 	bl	8011278 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8003f16:	4620      	mov	r0, r4
 8003f18:	f00d f92e 	bl	8011178 <USBH_LL_ResetPort>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0U);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2101      	movs	r1, #1
 8003f20:	e0ce      	b.n	80040c0 <USBH_Process+0x200>
    if (phost->device.PortEnabled == 1U)
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d165      	bne.n	8003ff2 <USBH_Process+0x132>
      phost->gState = HOST_DEV_ATTACHED;
 8003f26:	2302      	movs	r3, #2
        phost->gState  = HOST_INPUT;
 8003f28:	7023      	strb	r3, [r4, #0]
 8003f2a:	e062      	b.n	8003ff2 <USBH_Process+0x132>
    USBH_UsrLog("USB Device Attached");
 8003f2c:	48c0      	ldr	r0, [pc, #768]	; (8004230 <USBH_Process+0x370>)
    USBH_OpenPipe (phost,
 8003f2e:	2500      	movs	r5, #0
    USBH_UsrLog("USB Device Attached");
 8003f30:	f00d fb80 	bl	8011634 <iprintf>
 8003f34:	200a      	movs	r0, #10
 8003f36:	f00d fb95 	bl	8011664 <putchar>
    USBH_Delay(100U);
 8003f3a:	2064      	movs	r0, #100	; 0x64
 8003f3c:	f00d f99c 	bl	8011278 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003f40:	4620      	mov	r0, r4
 8003f42:	f00d f90f 	bl	8011164 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 8003f46:	2305      	movs	r3, #5
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8003f48:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003f4c:	2100      	movs	r1, #0
    phost->gState = HOST_ENUMERATION;
 8003f4e:	7023      	strb	r3, [r4, #0]
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003f50:	4620      	mov	r0, r4
 8003f52:	f000 fd01 	bl	8004958 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003f56:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8003f58:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f000 fcfc 	bl	8004958 <USBH_AllocPipe>
    USBH_OpenPipe (phost,
 8003f60:	79a3      	ldrb	r3, [r4, #6]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8003f62:	4601      	mov	r1, r0
 8003f64:	7120      	strb	r0, [r4, #4]
    USBH_OpenPipe (phost,
 8003f66:	9302      	str	r3, [sp, #8]
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003f6e:	4620      	mov	r0, r4
 8003f70:	9501      	str	r5, [sp, #4]
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003f78:	f000 fcda 	bl	8004930 <USBH_OpenPipe>
    USBH_OpenPipe (phost,
 8003f7c:	79a3      	ldrb	r3, [r4, #6]
 8003f7e:	462a      	mov	r2, r5
 8003f80:	7961      	ldrb	r1, [r4, #5]
 8003f82:	4620      	mov	r0, r4
 8003f84:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8003f88:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003f92:	f000 fccd 	bl	8004930 <USBH_OpenPipe>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8003f96:	e7c1      	b.n	8003f1c <USBH_Process+0x5c>
  switch (phost->EnumState)
 8003f98:	7863      	ldrb	r3, [r4, #1]
 8003f9a:	2b07      	cmp	r3, #7
 8003f9c:	d829      	bhi.n	8003ff2 <USBH_Process+0x132>
 8003f9e:	e8df f003 	tbb	[pc, r3]
 8003fa2:	2b04      	.short	0x2b04
 8003fa4:	6c635b44 	.word	0x6c635b44
 8003fa8:	b294      	.short	0xb294
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8003faa:	2108      	movs	r1, #8
 8003fac:	4620      	mov	r0, r4
 8003fae:	f000 fb31 	bl	8004614 <USBH_Get_DevDesc>
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	b9e8      	cbnz	r0, 8003ff2 <USBH_Process+0x132>
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003fb6:	f894 3329 	ldrb.w	r3, [r4, #809]	; 0x329
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003fba:	2201      	movs	r2, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003fbc:	71a3      	strb	r3, [r4, #6]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003fbe:	7062      	strb	r2, [r4, #1]
      USBH_OpenPipe (phost,
 8003fc0:	2280      	movs	r2, #128	; 0x80
 8003fc2:	7921      	ldrb	r1, [r4, #4]
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8003fca:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003fd4:	f000 fcac 	bl	8004930 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 8003fd8:	79a3      	ldrb	r3, [r4, #6]
 8003fda:	462a      	mov	r2, r5
 8003fdc:	7961      	ldrb	r1, [r4, #5]
 8003fde:	4620      	mov	r0, r4
 8003fe0:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8003fe4:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003fee:	f000 fc9f 	bl	8004930 <USBH_OpenPipe>
}
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	b008      	add	sp, #32
 8003ff6:	bd70      	pop	{r4, r5, r6, pc}
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8003ff8:	2112      	movs	r1, #18
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f000 fb0a 	bl	8004614 <USBH_Get_DevDesc>
 8004000:	2800      	cmp	r0, #0
 8004002:	d1f6      	bne.n	8003ff2 <USBH_Process+0x132>
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
 8004004:	f8b4 132c 	ldrh.w	r1, [r4, #812]	; 0x32c
 8004008:	488a      	ldr	r0, [pc, #552]	; (8004234 <USBH_Process+0x374>)
 800400a:	f00d fb13 	bl	8011634 <iprintf>
 800400e:	200a      	movs	r0, #10
 8004010:	f00d fb28 	bl	8011664 <putchar>
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );
 8004014:	f8b4 132a 	ldrh.w	r1, [r4, #810]	; 0x32a
 8004018:	4887      	ldr	r0, [pc, #540]	; (8004238 <USBH_Process+0x378>)
 800401a:	f00d fb0b 	bl	8011634 <iprintf>
 800401e:	200a      	movs	r0, #10
 8004020:	f00d fb20 	bl	8011664 <putchar>
      phost->EnumState = ENUM_SET_ADDR;
 8004024:	2302      	movs	r3, #2
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8004026:	7063      	strb	r3, [r4, #1]
  return Status;
 8004028:	e7e3      	b.n	8003ff2 <USBH_Process+0x132>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800402a:	2101      	movs	r1, #1
 800402c:	4620      	mov	r0, r4
 800402e:	f000 fbed 	bl	800480c <USBH_SetAddress>
 8004032:	4605      	mov	r5, r0
 8004034:	2800      	cmp	r0, #0
 8004036:	d1dc      	bne.n	8003ff2 <USBH_Process+0x132>
      USBH_Delay(2U);
 8004038:	2002      	movs	r0, #2
 800403a:	f00d f91d 	bl	8011278 <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800403e:	2101      	movs	r1, #1
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8004040:	487e      	ldr	r0, [pc, #504]	; (800423c <USBH_Process+0x37c>)
      phost->device.address = USBH_DEVICE_ADDRESS;
 8004042:	f884 131c 	strb.w	r1, [r4, #796]	; 0x31c
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 8004046:	f00d faf5 	bl	8011634 <iprintf>
 800404a:	200a      	movs	r0, #10
 800404c:	f00d fb0a 	bl	8011664 <putchar>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8004050:	2303      	movs	r3, #3
 8004052:	7063      	strb	r3, [r4, #1]
      USBH_OpenPipe (phost,
 8004054:	79a3      	ldrb	r3, [r4, #6]
 8004056:	e7b3      	b.n	8003fc0 <USBH_Process+0x100>
    if ( USBH_Get_CfgDesc(phost,
 8004058:	2109      	movs	r1, #9
 800405a:	4620      	mov	r0, r4
 800405c:	f000 fb22 	bl	80046a4 <USBH_Get_CfgDesc>
 8004060:	2800      	cmp	r0, #0
 8004062:	d1c6      	bne.n	8003ff2 <USBH_Process+0x132>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8004064:	2304      	movs	r3, #4
 8004066:	e7de      	b.n	8004026 <USBH_Process+0x166>
    if (USBH_Get_CfgDesc(phost,
 8004068:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 800406c:	4620      	mov	r0, r4
 800406e:	f000 fb19 	bl	80046a4 <USBH_Get_CfgDesc>
 8004072:	2800      	cmp	r0, #0
 8004074:	d1bd      	bne.n	8003ff2 <USBH_Process+0x132>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8004076:	2305      	movs	r3, #5
 8004078:	e7d5      	b.n	8004026 <USBH_Process+0x166>
    if (phost->device.DevDesc.iManufacturer != 0U)
 800407a:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 800407e:	b199      	cbz	r1, 80040a8 <USBH_Process+0x1e8>
                               phost->device.Data,
 8004080:	f504 768e 	add.w	r6, r4, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8004084:	23ff      	movs	r3, #255	; 0xff
 8004086:	4620      	mov	r0, r4
 8004088:	4632      	mov	r2, r6
 800408a:	f000 fb98 	bl	80047be <USBH_Get_StringDesc>
 800408e:	2800      	cmp	r0, #0
 8004090:	d1af      	bne.n	8003ff2 <USBH_Process+0x132>
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
 8004092:	4631      	mov	r1, r6
 8004094:	486a      	ldr	r0, [pc, #424]	; (8004240 <USBH_Process+0x380>)
 8004096:	f00d facd 	bl	8011634 <iprintf>
 800409a:	200a      	movs	r0, #10
 800409c:	f00d fae2 	bl	8011664 <putchar>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80040a0:	2306      	movs	r3, #6
 80040a2:	7063      	strb	r3, [r4, #1]
        osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80040a4:	2200      	movs	r2, #0
 80040a6:	e00a      	b.n	80040be <USBH_Process+0x1fe>
     USBH_UsrLog("Manufacturer : N/A");
 80040a8:	4866      	ldr	r0, [pc, #408]	; (8004244 <USBH_Process+0x384>)
 80040aa:	9105      	str	r1, [sp, #20]
 80040ac:	f00d fac2 	bl	8011634 <iprintf>
 80040b0:	200a      	movs	r0, #10
 80040b2:	f00d fad7 	bl	8011664 <putchar>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80040b6:	2306      	movs	r3, #6
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80040b8:	9905      	ldr	r1, [sp, #20]
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80040ba:	7063      	strb	r3, [r4, #1]
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 80040bc:	460a      	mov	r2, r1
 80040be:	2105      	movs	r1, #5
 80040c0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 80040c4:	f002 fa34 	bl	8006530 <osMessagePut>
  return Status;
 80040c8:	e793      	b.n	8003ff2 <USBH_Process+0x132>
    if (phost->device.DevDesc.iProduct != 0U)
 80040ca:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 80040ce:	b189      	cbz	r1, 80040f4 <USBH_Process+0x234>
                               phost->device.Data,
 80040d0:	f504 758e 	add.w	r5, r4, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80040d4:	23ff      	movs	r3, #255	; 0xff
 80040d6:	4620      	mov	r0, r4
 80040d8:	462a      	mov	r2, r5
 80040da:	f000 fb70 	bl	80047be <USBH_Get_StringDesc>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d187      	bne.n	8003ff2 <USBH_Process+0x132>
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
 80040e2:	4629      	mov	r1, r5
 80040e4:	4858      	ldr	r0, [pc, #352]	; (8004248 <USBH_Process+0x388>)
 80040e6:	f00d faa5 	bl	8011634 <iprintf>
 80040ea:	200a      	movs	r0, #10
 80040ec:	f00d faba 	bl	8011664 <putchar>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80040f0:	2307      	movs	r3, #7
 80040f2:	e798      	b.n	8004026 <USBH_Process+0x166>
      USBH_UsrLog("Product : N/A");
 80040f4:	4855      	ldr	r0, [pc, #340]	; (800424c <USBH_Process+0x38c>)
 80040f6:	9105      	str	r1, [sp, #20]
 80040f8:	f00d fa9c 	bl	8011634 <iprintf>
 80040fc:	200a      	movs	r0, #10
 80040fe:	f00d fab1 	bl	8011664 <putchar>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004102:	2307      	movs	r3, #7
 8004104:	e7d8      	b.n	80040b8 <USBH_Process+0x1f8>
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8004106:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800410a:	b329      	cbz	r1, 8004158 <USBH_Process+0x298>
                               phost->device.Data,
 800410c:	f504 758e 	add.w	r5, r4, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8004110:	23ff      	movs	r3, #255	; 0xff
 8004112:	4620      	mov	r0, r4
 8004114:	462a      	mov	r2, r5
 8004116:	f000 fb52 	bl	80047be <USBH_Get_StringDesc>
 800411a:	2800      	cmp	r0, #0
 800411c:	f47f af69 	bne.w	8003ff2 <USBH_Process+0x132>
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
 8004120:	4629      	mov	r1, r5
 8004122:	484b      	ldr	r0, [pc, #300]	; (8004250 <USBH_Process+0x390>)
 8004124:	f00d fa86 	bl	8011634 <iprintf>
 8004128:	200a      	movs	r0, #10
 800412a:	f00d fa9b 	bl	8011664 <putchar>
      USBH_UsrLog ("Enumeration done.");
 800412e:	4849      	ldr	r0, [pc, #292]	; (8004254 <USBH_Process+0x394>)
 8004130:	f00d fa80 	bl	8011634 <iprintf>
 8004134:	200a      	movs	r0, #10
 8004136:	f00d fa95 	bl	8011664 <putchar>
      phost->device.current_interface = 0U;
 800413a:	2300      	movs	r3, #0
 800413c:	f884 3320 	strb.w	r3, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8004140:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
 8004144:	2b01      	cmp	r3, #1
 8004146:	d116      	bne.n	8004176 <USBH_Process+0x2b6>
        USBH_UsrLog ("This device has only 1 configuration.");
 8004148:	4843      	ldr	r0, [pc, #268]	; (8004258 <USBH_Process+0x398>)
 800414a:	f00d fa73 	bl	8011634 <iprintf>
 800414e:	200a      	movs	r0, #10
 8004150:	f00d fa88 	bl	8011664 <putchar>
        phost->gState  = HOST_SET_CONFIGURATION;
 8004154:	2308      	movs	r3, #8
 8004156:	e6e7      	b.n	8003f28 <USBH_Process+0x68>
      USBH_UsrLog("Serial Number : N/A");
 8004158:	4840      	ldr	r0, [pc, #256]	; (800425c <USBH_Process+0x39c>)
 800415a:	9105      	str	r1, [sp, #20]
 800415c:	f00d fa6a 	bl	8011634 <iprintf>
 8004160:	200a      	movs	r0, #10
 8004162:	f00d fa7f 	bl	8011664 <putchar>
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8004166:	9905      	ldr	r1, [sp, #20]
 8004168:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800416c:	460a      	mov	r2, r1
 800416e:	2105      	movs	r1, #5
 8004170:	f002 f9de 	bl	8006530 <osMessagePut>
  return Status;
 8004174:	e7db      	b.n	800412e <USBH_Process+0x26e>
        phost->gState  = HOST_INPUT;
 8004176:	2307      	movs	r3, #7
 8004178:	e6d6      	b.n	8003f28 <USBH_Process+0x68>
      if(phost->pUser != NULL)
 800417a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800417e:	2b00      	cmp	r3, #0
 8004180:	f43f af37 	beq.w	8003ff2 <USBH_Process+0x132>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004184:	2101      	movs	r1, #1
 8004186:	4620      	mov	r0, r4
 8004188:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800418a:	2308      	movs	r3, #8
 800418c:	7023      	strb	r3, [r4, #0]
 800418e:	e789      	b.n	80040a4 <USBH_Process+0x1e4>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004190:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 8004194:	4620      	mov	r0, r4
 8004196:	f000 fb46 	bl	8004826 <USBH_SetCfg>
 800419a:	2800      	cmp	r0, #0
 800419c:	f47f aebe 	bne.w	8003f1c <USBH_Process+0x5c>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80041a0:	2309      	movs	r3, #9
      USBH_UsrLog ("Default configuration set.");
 80041a2:	482f      	ldr	r0, [pc, #188]	; (8004260 <USBH_Process+0x3a0>)
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80041a4:	7023      	strb	r3, [r4, #0]
      USBH_UsrLog ("Default configuration set.");
 80041a6:	f00d fa45 	bl	8011634 <iprintf>
 80041aa:	200a      	movs	r0, #10
 80041ac:	f00d fa5a 	bl	8011664 <putchar>
    osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0U);
 80041b0:	e6b4      	b.n	8003f1c <USBH_Process+0x5c>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80041b2:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80041b6:	069b      	lsls	r3, r3, #26
 80041b8:	d50c      	bpl.n	80041d4 <USBH_Process+0x314>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80041ba:	2101      	movs	r1, #1
 80041bc:	4620      	mov	r0, r4
 80041be:	f000 fb3f 	bl	8004840 <USBH_SetFeature>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	f47f aeaa 	bne.w	8003f1c <USBH_Process+0x5c>
        USBH_UsrLog ("Device remote wakeup enabled");
 80041c8:	4826      	ldr	r0, [pc, #152]	; (8004264 <USBH_Process+0x3a4>)
 80041ca:	f00d fa33 	bl	8011634 <iprintf>
 80041ce:	200a      	movs	r0, #10
 80041d0:	f00d fa48 	bl	8011664 <putchar>
      phost->gState  = HOST_CHECK_CLASS;
 80041d4:	230a      	movs	r3, #10
 80041d6:	7023      	strb	r3, [r4, #0]
 80041d8:	e6a0      	b.n	8003f1c <USBH_Process+0x5c>
    if(phost->ClassNumber == 0U)
 80041da:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80041de:	b91b      	cbnz	r3, 80041e8 <USBH_Process+0x328>
      USBH_UsrLog ("No Class has been registered.");
 80041e0:	4821      	ldr	r0, [pc, #132]	; (8004268 <USBH_Process+0x3a8>)
        USBH_UsrLog ("No registered class for this device.");
 80041e2:	f00d fa27 	bl	8011634 <iprintf>
 80041e6:	e049      	b.n	800427c <USBH_Process+0x3bc>
      phost->pActiveClass = NULL;
 80041e8:	2300      	movs	r3, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80041ea:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
      phost->pActiveClass = NULL;
 80041ee:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80041f2:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 80041f6:	7919      	ldrb	r1, [r3, #4]
          phost->pActiveClass = phost->pClass[idx];
 80041f8:	4291      	cmp	r1, r2
 80041fa:	bf18      	it	ne
 80041fc:	2300      	movne	r3, #0
 80041fe:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
      if(phost->pActiveClass != NULL)
 8004202:	2b00      	cmp	r3, #0
 8004204:	d03e      	beq.n	8004284 <USBH_Process+0x3c4>
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4620      	mov	r0, r4
 800420a:	4798      	blx	r3
 800420c:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8004210:	bb70      	cbnz	r0, 8004270 <USBH_Process+0x3b0>
          phost->gState  = HOST_CLASS_REQUEST;
 8004212:	2206      	movs	r2, #6
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 8004214:	4815      	ldr	r0, [pc, #84]	; (800426c <USBH_Process+0x3ac>)
          phost->gState  = HOST_CLASS_REQUEST;
 8004216:	7022      	strb	r2, [r4, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);
 8004218:	6819      	ldr	r1, [r3, #0]
 800421a:	f00d fa0b 	bl	8011634 <iprintf>
 800421e:	200a      	movs	r0, #10
 8004220:	f00d fa20 	bl	8011664 <putchar>
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004224:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8004228:	2103      	movs	r1, #3
 800422a:	4620      	mov	r0, r4
 800422c:	4798      	blx	r3
 800422e:	e739      	b.n	80040a4 <USBH_Process+0x1e4>
 8004230:	08012994 	.word	0x08012994
 8004234:	080129a8 	.word	0x080129a8
 8004238:	080129b1 	.word	0x080129b1
 800423c:	080129ba 	.word	0x080129ba
 8004240:	080129d2 	.word	0x080129d2
 8004244:	080129e4 	.word	0x080129e4
 8004248:	080127a7 	.word	0x080127a7
 800424c:	080129f7 	.word	0x080129f7
 8004250:	08012a05 	.word	0x08012a05
 8004254:	08012a2c 	.word	0x08012a2c
 8004258:	08012a3e 	.word	0x08012a3e
 800425c:	08012a18 	.word	0x08012a18
 8004260:	08012a64 	.word	0x08012a64
 8004264:	08012a7f 	.word	0x08012a7f
 8004268:	08012a9c 	.word	0x08012a9c
 800426c:	08012aba 	.word	0x08012aba
          phost->gState  = HOST_ABORT_STATE;
 8004270:	220d      	movs	r2, #13
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
 8004272:	481d      	ldr	r0, [pc, #116]	; (80042e8 <USBH_Process+0x428>)
          phost->gState  = HOST_ABORT_STATE;
 8004274:	7022      	strb	r2, [r4, #0]
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
 8004276:	6819      	ldr	r1, [r3, #0]
 8004278:	f00d f9dc 	bl	8011634 <iprintf>
        USBH_UsrLog ("No registered class for this device.");
 800427c:	200a      	movs	r0, #10
 800427e:	f00d f9f1 	bl	8011664 <putchar>
    osMessagePut ( phost->os_event, USBH_STATE_CHANGED_EVENT, 0);
 8004282:	e70f      	b.n	80040a4 <USBH_Process+0x1e4>
        phost->gState  = HOST_ABORT_STATE;
 8004284:	230d      	movs	r3, #13
        USBH_UsrLog ("No registered class for this device.");
 8004286:	4819      	ldr	r0, [pc, #100]	; (80042ec <USBH_Process+0x42c>)
        phost->gState  = HOST_ABORT_STATE;
 8004288:	7023      	strb	r3, [r4, #0]
        USBH_UsrLog ("No registered class for this device.");
 800428a:	e7aa      	b.n	80041e2 <USBH_Process+0x322>
    if(phost->pActiveClass != NULL)
 800428c:	f8d4 5378 	ldr.w	r5, [r4, #888]	; 0x378
 8004290:	b15d      	cbz	r5, 80042aa <USBH_Process+0x3ea>
      status = phost->pActiveClass->Requests(phost);
 8004292:	692b      	ldr	r3, [r5, #16]
 8004294:	4620      	mov	r0, r4
 8004296:	4798      	blx	r3
 8004298:	f88d 001f 	strb.w	r0, [sp, #31]
      if(status == USBH_OK)
 800429c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f47f aea6 	bne.w	8003ff2 <USBH_Process+0x132>
        phost->gState  = HOST_CLASS;
 80042a6:	230b      	movs	r3, #11
 80042a8:	e63e      	b.n	8003f28 <USBH_Process+0x68>
      phost->gState  = HOST_ABORT_STATE;
 80042aa:	230d      	movs	r3, #13
      USBH_ErrLog ("Invalid Class Driver.");
 80042ac:	4810      	ldr	r0, [pc, #64]	; (80042f0 <USBH_Process+0x430>)
      phost->gState  = HOST_ABORT_STATE;
 80042ae:	7023      	strb	r3, [r4, #0]
      USBH_ErrLog ("Invalid Class Driver.");
 80042b0:	f00d f9c0 	bl	8011634 <iprintf>
 80042b4:	480f      	ldr	r0, [pc, #60]	; (80042f4 <USBH_Process+0x434>)
 80042b6:	e794      	b.n	80041e2 <USBH_Process+0x322>
    if(phost->pActiveClass != NULL)
 80042b8:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f43f ae98 	beq.w	8003ff2 <USBH_Process+0x132>
      phost->pActiveClass->BgndProcess(phost);
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	4620      	mov	r0, r4
 80042c6:	4798      	blx	r3
 80042c8:	e693      	b.n	8003ff2 <USBH_Process+0x132>
    DeInitStateMachine(phost);
 80042ca:	4620      	mov	r0, r4
 80042cc:	f7ff fd0d 	bl	8003cea <DeInitStateMachine>
    if(phost->pActiveClass != NULL)
 80042d0:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f43f ae8c 	beq.w	8003ff2 <USBH_Process+0x132>
      phost->pActiveClass->DeInit(phost);
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4620      	mov	r0, r4
 80042de:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
 80042e6:	e684      	b.n	8003ff2 <USBH_Process+0x132>
 80042e8:	08012acc 	.word	0x08012acc
 80042ec:	08012aec 	.word	0x08012aec
 80042f0:	080128e2 	.word	0x080128e2
 80042f4:	08012b11 	.word	0x08012b11

080042f8 <USBH_Process_OS>:
  * @brief  USB Host Thread task
  * @param  pvParameters not used
  * @retval None
  */
static void USBH_Process_OS(void const * argument)
{
 80042f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042fa:	4604      	mov	r4, r0
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever );
 80042fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004300:	f8d4 13cc 	ldr.w	r1, [r4, #972]	; 0x3cc
 8004304:	a801      	add	r0, sp, #4
 8004306:	f002 f93b 	bl	8006580 <osMessageGet>

    if( event.status == osEventMessage )
 800430a:	9b01      	ldr	r3, [sp, #4]
 800430c:	2b10      	cmp	r3, #16
 800430e:	d1f5      	bne.n	80042fc <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8004310:	4620      	mov	r0, r4
 8004312:	f7ff fdd5 	bl	8003ec0 <USBH_Process>
 8004316:	e7f1      	b.n	80042fc <USBH_Process_OS+0x4>

08004318 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8004318:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 800431c:	4770      	bx	lr

0800431e <USBH_LL_IncTimer>:
  phost->Timer ++;
 800431e:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8004322:	3201      	adds	r2, #1
 8004324:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8004328:	7802      	ldrb	r2, [r0, #0]
 800432a:	2a0b      	cmp	r2, #11
 800432c:	d104      	bne.n	8004338 <USBH_LL_IncTimer+0x1a>
 800432e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004332:	b10b      	cbz	r3, 8004338 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	4718      	bx	r3
}
 8004338:	4770      	bx	lr

0800433a <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800433a:	2301      	movs	r3, #1
 800433c:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 8004340:	4770      	bx	lr

08004342 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8004342:	2300      	movs	r3, #0
 8004344:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 8004348:	4770      	bx	lr

0800434a <USBH_LL_Connect>:
{
 800434a:	b510      	push	{r4, lr}
  if(phost->gState == HOST_IDLE )
 800434c:	7803      	ldrb	r3, [r0, #0]
{
 800434e:	4604      	mov	r4, r0
  if(phost->gState == HOST_IDLE )
 8004350:	b97b      	cbnz	r3, 8004372 <USBH_LL_Connect+0x28>
    phost->device.is_connected = 1U;
 8004352:	2301      	movs	r3, #1
 8004354:	f880 331e 	strb.w	r3, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8004358:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 800435c:	b10b      	cbz	r3, 8004362 <USBH_LL_Connect+0x18>
      phost->pUser(phost, HOST_USER_CONNECTION);
 800435e:	2104      	movs	r1, #4
 8004360:	4798      	blx	r3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	2101      	movs	r1, #1
 8004366:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800436a:	f002 f8e1 	bl	8006530 <osMessagePut>
}
 800436e:	2000      	movs	r0, #0
 8004370:	bd10      	pop	{r4, pc}
    if (phost->device.PortEnabled == 1U)
 8004372:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
 8004376:	2b01      	cmp	r3, #1
 8004378:	d1f3      	bne.n	8004362 <USBH_LL_Connect+0x18>
      phost->gState = HOST_DEV_ATTACHED;
 800437a:	2302      	movs	r3, #2
 800437c:	7003      	strb	r3, [r0, #0]
 800437e:	e7f0      	b.n	8004362 <USBH_LL_Connect+0x18>

08004380 <USBH_LL_Disconnect>:
{
 8004380:	b510      	push	{r4, lr}
 8004382:	4604      	mov	r4, r0
  USBH_LL_Stop(phost);
 8004384:	f00c fee0 	bl	8011148 <USBH_LL_Stop>
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004388:	7921      	ldrb	r1, [r4, #4]
 800438a:	4620      	mov	r0, r4
 800438c:	f000 fafb 	bl	8004986 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8004390:	7961      	ldrb	r1, [r4, #5]
 8004392:	4620      	mov	r0, r4
 8004394:	f000 faf7 	bl	8004986 <USBH_FreePipe>
  phost->device.is_connected = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 800439e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80043a2:	b113      	cbz	r3, 80043aa <USBH_LL_Disconnect+0x2a>
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80043a4:	2105      	movs	r1, #5
 80043a6:	4620      	mov	r0, r4
 80043a8:	4798      	blx	r3
  USBH_UsrLog("USB Device disconnected");
 80043aa:	4809      	ldr	r0, [pc, #36]	; (80043d0 <USBH_LL_Disconnect+0x50>)
 80043ac:	f00d f942 	bl	8011634 <iprintf>
 80043b0:	200a      	movs	r0, #10
 80043b2:	f00d f957 	bl	8011664 <putchar>
  USBH_LL_Start(phost);
 80043b6:	4620      	mov	r0, r4
 80043b8:	f00c feb8 	bl	801112c <USBH_LL_Start>
  phost->gState = HOST_DEV_DISCONNECTED;
 80043bc:	2303      	movs	r3, #3
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 80043be:	2200      	movs	r2, #0
 80043c0:	2101      	movs	r1, #1
 80043c2:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
  phost->gState = HOST_DEV_DISCONNECTED;
 80043c6:	7023      	strb	r3, [r4, #0]
  osMessagePut ( phost->os_event, USBH_PORT_EVENT, 0);
 80043c8:	f002 f8b2 	bl	8006530 <osMessagePut>
}
 80043cc:	2000      	movs	r0, #0
 80043ce:	bd10      	pop	{r4, pc}
 80043d0:	08012b27 	.word	0x08012b27

080043d4 <USBH_LL_NotifyURBChange>:
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2102      	movs	r1, #2
 80043d8:	f8d0 03cc 	ldr.w	r0, [r0, #972]	; 0x3cc
{
 80043dc:	b508      	push	{r3, lr}
  osMessagePut ( phost->os_event, USBH_URB_EVENT, 0U);
 80043de:	f002 f8a7 	bl	8006530 <osMessagePut>
  return USBH_OK;
}
 80043e2:	2000      	movs	r0, #0
 80043e4:	bd08      	pop	{r3, pc}
	...

080043e8 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 80043e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80043ea:	7885      	ldrb	r5, [r0, #2]
{
 80043ec:	4604      	mov	r4, r0
  switch (phost->RequestState)
 80043ee:	2d01      	cmp	r5, #1
 80043f0:	d003      	beq.n	80043fa <USBH_CtlReq+0x12>
 80043f2:	2d02      	cmp	r5, #2
 80043f4:	d00f      	beq.n	8004416 <USBH_CtlReq+0x2e>
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 80043f6:	2501      	movs	r5, #1
  return status;
 80043f8:	e00a      	b.n	8004410 <USBH_CtlReq+0x28>
    phost->RequestState = CMD_WAIT;
 80043fa:	2302      	movs	r3, #2
    phost->Control.buff = buff;
 80043fc:	6081      	str	r1, [r0, #8]
    phost->Control.length = length;
 80043fe:	8182      	strh	r2, [r0, #12]
    phost->Control.state = CTRL_SETUP;
 8004400:	7605      	strb	r5, [r0, #24]
    phost->RequestState = CMD_WAIT;
 8004402:	7083      	strb	r3, [r0, #2]
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
        }
      }
#if (USBH_USE_OS == 1U)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8004404:	2200      	movs	r2, #0
 8004406:	2103      	movs	r1, #3
 8004408:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
 800440c:	f002 f890 	bl	8006530 <osMessagePut>
}
 8004410:	4628      	mov	r0, r5
 8004412:	b002      	add	sp, #8
 8004414:	bd70      	pop	{r4, r5, r6, pc}
  switch (phost->Control.state)
 8004416:	7e06      	ldrb	r6, [r0, #24]
 8004418:	1e73      	subs	r3, r6, #1
 800441a:	2b0a      	cmp	r3, #10
 800441c:	d8eb      	bhi.n	80043f6 <USBH_CtlReq+0xe>
 800441e:	e8df f003 	tbb	[pc, r3]
 8004422:	0f06      	.short	0x0f06
 8004424:	56493429 	.word	0x56493429
 8004428:	b3a78d83 	.word	0xb3a78d83
 800442c:	bd          	.byte	0xbd
 800442d:	00          	.byte	0x00
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800442e:	7942      	ldrb	r2, [r0, #5]
 8004430:	f100 0110 	add.w	r1, r0, #16
 8004434:	f000 fa1e 	bl	8004874 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8004438:	2302      	movs	r3, #2
 800443a:	7623      	strb	r3, [r4, #24]

    if  (URB_Status == USBH_URB_DONE)
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
#if (USBH_USE_OS == 1U)
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800443c:	4635      	mov	r5, r6
 800443e:	e7e7      	b.n	8004410 <USBH_CtlReq+0x28>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004440:	7941      	ldrb	r1, [r0, #5]
 8004442:	f00c feeb 	bl	801121c <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8004446:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004448:	4605      	mov	r5, r0
    if(URB_Status == USBH_URB_DONE)
 800444a:	d10e      	bne.n	800446a <USBH_CtlReq+0x82>
      if (phost->Control.setup.b.wLength.w != 0U)
 800444c:	8ae2      	ldrh	r2, [r4, #22]
 800444e:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004452:	b12a      	cbz	r2, 8004460 <USBH_CtlReq+0x78>
        if (direction == USB_D2H)
 8004454:	2b00      	cmp	r3, #0
          phost->Control.state = CTRL_DATA_IN;
 8004456:	bfb4      	ite	lt
 8004458:	2303      	movlt	r3, #3
          phost->Control.state = CTRL_DATA_OUT;
 800445a:	2305      	movge	r3, #5
          phost->Control.state = CTRL_STATUS_IN;
 800445c:	7623      	strb	r3, [r4, #24]
 800445e:	e7d1      	b.n	8004404 <USBH_CtlReq+0x1c>
        if (direction == USB_D2H)
 8004460:	2b00      	cmp	r3, #0
          phost->Control.state = CTRL_STATUS_OUT;
 8004462:	bfb4      	ite	lt
 8004464:	2309      	movlt	r3, #9
          phost->Control.state = CTRL_STATUS_IN;
 8004466:	2307      	movge	r3, #7
 8004468:	e7f8      	b.n	800445c <USBH_CtlReq+0x74>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800446a:	2804      	cmp	r0, #4
 800446c:	d07a      	beq.n	8004564 <USBH_CtlReq+0x17c>
 800446e:	2802      	cmp	r0, #2
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8004470:	d1c1      	bne.n	80043f6 <USBH_CtlReq+0xe>
 8004472:	e077      	b.n	8004564 <USBH_CtlReq+0x17c>
    phost->Control.timer = (uint16_t)phost->Timer;
 8004474:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
    USBH_CtlReceiveData(phost,
 8004478:	8982      	ldrh	r2, [r0, #12]
    phost->Control.timer = (uint16_t)phost->Timer;
 800447a:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 800447c:	6881      	ldr	r1, [r0, #8]
 800447e:	7903      	ldrb	r3, [r0, #4]
 8004480:	f000 fa1f 	bl	80048c2 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8004484:	2304      	movs	r3, #4
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004486:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 8004488:	e7b5      	b.n	80043f6 <USBH_CtlReq+0xe>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800448a:	7901      	ldrb	r1, [r0, #4]
 800448c:	f00c fec6 	bl	801121c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004490:	2801      	cmp	r0, #1
 8004492:	d101      	bne.n	8004498 <USBH_CtlReq+0xb0>
      phost->Control.state = CTRL_STATUS_OUT;
 8004494:	2309      	movs	r3, #9
 8004496:	e031      	b.n	80044fc <USBH_CtlReq+0x114>
    if  (URB_Status == USBH_URB_STALL)
 8004498:	2805      	cmp	r0, #5
 800449a:	d17d      	bne.n	8004598 <USBH_CtlReq+0x1b0>
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800449c:	2200      	movs	r2, #0
 800449e:	2103      	movs	r1, #3
 80044a0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      status = USBH_NOT_SUPPORTED;
 80044a4:	2503      	movs	r5, #3
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80044a6:	f002 f843 	bl	8006530 <osMessagePut>
      phost->RequestState = CMD_SEND;
 80044aa:	2301      	movs	r3, #1
 80044ac:	70a3      	strb	r3, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	7623      	strb	r3, [r4, #24]
      status = USBH_NOT_SUPPORTED;
 80044b2:	e7ad      	b.n	8004410 <USBH_CtlReq+0x28>
    USBH_CtlSendData (phost,
 80044b4:	2501      	movs	r5, #1
 80044b6:	9500      	str	r5, [sp, #0]
 80044b8:	7943      	ldrb	r3, [r0, #5]
 80044ba:	8982      	ldrh	r2, [r0, #12]
 80044bc:	6881      	ldr	r1, [r0, #8]
 80044be:	f000 f9e9 	bl	8004894 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80044c2:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80044c6:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 80044c8:	2306      	movs	r3, #6
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80044ca:	7623      	strb	r3, [r4, #24]
      if (status == USBH_FAIL)
 80044cc:	e7a0      	b.n	8004410 <USBH_CtlReq+0x28>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80044ce:	7941      	ldrb	r1, [r0, #5]
 80044d0:	f00c fea4 	bl	801121c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 80044d4:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80044d6:	4606      	mov	r6, r0
    if  (URB_Status == USBH_URB_DONE)
 80044d8:	d108      	bne.n	80044ec <USBH_CtlReq+0x104>
      phost->Control.state = CTRL_STATUS_IN;
 80044da:	2307      	movs	r3, #7
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80044dc:	2200      	movs	r2, #0
 80044de:	2103      	movs	r1, #3
 80044e0:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_STATUS_IN;
 80044e4:	7623      	strb	r3, [r4, #24]
      osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80044e6:	f002 f823 	bl	8006530 <osMessagePut>
 80044ea:	e7a7      	b.n	800443c <USBH_CtlReq+0x54>
    else if  (URB_Status == USBH_URB_STALL)
 80044ec:	2805      	cmp	r0, #5
 80044ee:	d102      	bne.n	80044f6 <USBH_CtlReq+0x10e>
      phost->Control.state = CTRL_STALLED;
 80044f0:	230c      	movs	r3, #12
 80044f2:	7623      	strb	r3, [r4, #24]
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80044f4:	e7d2      	b.n	800449c <USBH_CtlReq+0xb4>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80044f6:	2802      	cmp	r0, #2
 80044f8:	d108      	bne.n	800450c <USBH_CtlReq+0x124>
      phost->Control.state = CTRL_DATA_OUT;
 80044fa:	2305      	movs	r3, #5
      {
        phost->Control.state = CTRL_ERROR;

#if (USBH_USE_OS == 1U)
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 80044fc:	2200      	movs	r2, #0
 80044fe:	2103      	movs	r1, #3
 8004500:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 8004504:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8004506:	f002 f813 	bl	8006530 <osMessagePut>
      if (status == USBH_FAIL)
 800450a:	e774      	b.n	80043f6 <USBH_CtlReq+0xe>
      if (URB_Status == USBH_URB_ERROR)
 800450c:	2804      	cmp	r0, #4
 800450e:	f47f af72 	bne.w	80043f6 <USBH_CtlReq+0xe>
        phost->Control.state = CTRL_ERROR;
 8004512:	230b      	movs	r3, #11
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8004514:	2200      	movs	r2, #0
 8004516:	2103      	movs	r1, #3
 8004518:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
        phost->Control.state = CTRL_ERROR;
 800451c:	7623      	strb	r3, [r4, #24]
        osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 800451e:	f002 f807 	bl	8006530 <osMessagePut>
        phost->RequestState = CMD_SEND;
 8004522:	2301      	movs	r3, #1
 8004524:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8004526:	e773      	b.n	8004410 <USBH_CtlReq+0x28>
    USBH_CtlReceiveData (phost,
 8004528:	2200      	movs	r2, #0
 800452a:	7903      	ldrb	r3, [r0, #4]
 800452c:	4611      	mov	r1, r2
 800452e:	f000 f9c8 	bl	80048c2 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8004532:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004536:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004538:	2308      	movs	r3, #8
 800453a:	e7a4      	b.n	8004486 <USBH_CtlReq+0x9e>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800453c:	7901      	ldrb	r1, [r0, #4]
 800453e:	f00c fe6d 	bl	801121c <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8004542:	2801      	cmp	r0, #1
 8004544:	d10c      	bne.n	8004560 <USBH_CtlReq+0x178>
      phost->Control.state = CTRL_COMPLETE;
 8004546:	230d      	movs	r3, #13
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8004548:	2200      	movs	r2, #0
 800454a:	2103      	movs	r1, #3
 800454c:	f8d4 03cc 	ldr.w	r0, [r4, #972]	; 0x3cc
      phost->Control.state = CTRL_COMPLETE;
 8004550:	7623      	strb	r3, [r4, #24]
      phost->Control.state =CTRL_IDLE;
 8004552:	2500      	movs	r5, #0
    osMessagePut ( phost->os_event, USBH_CONTROL_EVENT, 0);
 8004554:	f001 ffec 	bl	8006530 <osMessagePut>
      phost->RequestState = CMD_SEND;
 8004558:	2301      	movs	r3, #1
      phost->Control.state =CTRL_IDLE;
 800455a:	7625      	strb	r5, [r4, #24]
      phost->RequestState = CMD_SEND;
 800455c:	70a3      	strb	r3, [r4, #2]
      status = USBH_OK;
 800455e:	e757      	b.n	8004410 <USBH_CtlReq+0x28>
    else if (URB_Status == USBH_URB_ERROR)
 8004560:	2804      	cmp	r0, #4
 8004562:	d101      	bne.n	8004568 <USBH_CtlReq+0x180>
        phost->Control.state = CTRL_ERROR;
 8004564:	230b      	movs	r3, #11
 8004566:	e7c9      	b.n	80044fc <USBH_CtlReq+0x114>
      if(URB_Status == USBH_URB_STALL)
 8004568:	2805      	cmp	r0, #5
 800456a:	f47f af44 	bne.w	80043f6 <USBH_CtlReq+0xe>
 800456e:	e795      	b.n	800449c <USBH_CtlReq+0xb4>
    USBH_CtlSendData (phost,
 8004570:	2200      	movs	r2, #0
 8004572:	2501      	movs	r5, #1
 8004574:	4611      	mov	r1, r2
 8004576:	9500      	str	r5, [sp, #0]
 8004578:	7943      	ldrb	r3, [r0, #5]
 800457a:	f000 f98b 	bl	8004894 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 800457e:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004582:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004584:	230a      	movs	r3, #10
 8004586:	e7a0      	b.n	80044ca <USBH_CtlReq+0xe2>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8004588:	7941      	ldrb	r1, [r0, #5]
 800458a:	f00c fe47 	bl	801121c <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 800458e:	2801      	cmp	r0, #1
 8004590:	d0d9      	beq.n	8004546 <USBH_CtlReq+0x15e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004592:	2802      	cmp	r0, #2
 8004594:	f43f af7e 	beq.w	8004494 <USBH_CtlReq+0xac>
      if (URB_Status == USBH_URB_ERROR)
 8004598:	2804      	cmp	r0, #4
 800459a:	e769      	b.n	8004470 <USBH_CtlReq+0x88>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800459c:	7e43      	ldrb	r3, [r0, #25]
 800459e:	3301      	adds	r3, #1
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	7643      	strb	r3, [r0, #25]
 80045a6:	d805      	bhi.n	80045b4 <USBH_CtlReq+0x1cc>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80045a8:	2501      	movs	r5, #1
      USBH_LL_Stop(phost);
 80045aa:	f00c fdcd 	bl	8011148 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 80045ae:	7625      	strb	r5, [r4, #24]
      phost->RequestState = CMD_SEND;
 80045b0:	70a5      	strb	r5, [r4, #2]
      if (status == USBH_FAIL)
 80045b2:	e72d      	b.n	8004410 <USBH_CtlReq+0x28>
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80045b4:	2106      	movs	r1, #6
 80045b6:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 80045ba:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80045bc:	2300      	movs	r3, #0
      USBH_ErrLog("Control error");
 80045be:	4805      	ldr	r0, [pc, #20]	; (80045d4 <USBH_CtlReq+0x1ec>)
      phost->Control.errorcount = 0U;
 80045c0:	7663      	strb	r3, [r4, #25]
      USBH_ErrLog("Control error");
 80045c2:	f00d f837 	bl	8011634 <iprintf>
 80045c6:	4804      	ldr	r0, [pc, #16]	; (80045d8 <USBH_CtlReq+0x1f0>)
 80045c8:	f00d f834 	bl	8011634 <iprintf>
 80045cc:	200a      	movs	r0, #10
 80045ce:	f00d f849 	bl	8011664 <putchar>
      if (status == USBH_FAIL)
 80045d2:	e7a6      	b.n	8004522 <USBH_CtlReq+0x13a>
 80045d4:	080128e2 	.word	0x080128e2
 80045d8:	08012b3f 	.word	0x08012b3f

080045dc <USBH_GetDescriptor>:
{
 80045dc:	b430      	push	{r4, r5}
 80045de:	460c      	mov	r4, r1
 80045e0:	4619      	mov	r1, r3
  if(phost->RequestState == CMD_SEND)
 80045e2:	7883      	ldrb	r3, [r0, #2]
{
 80045e4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if(phost->RequestState == CMD_SEND)
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d10f      	bne.n	800460c <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80045ec:	f064 047f 	orn	r4, r4, #127	; 0x7f
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80045f0:	2306      	movs	r3, #6
    phost->Control.setup.b.wValue.w = value_idx;
 80045f2:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80045f4:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80045f6:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80045fa:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 80045fc:	f240 4309 	movw	r3, #1033	; 0x409
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004600:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
 8004604:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
 8004606:	bf18      	it	ne
 8004608:	2300      	movne	r3, #0
 800460a:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800460c:	462a      	mov	r2, r5
}
 800460e:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8004610:	f7ff beea 	b.w	80043e8 <USBH_CtlReq>

08004614 <USBH_Get_DevDesc>:
{
 8004614:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if((status = USBH_GetDescriptor(phost,
 8004616:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800461a:	460d      	mov	r5, r1
 800461c:	9100      	str	r1, [sp, #0]
 800461e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004622:	2100      	movs	r1, #0
{
 8004624:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8004626:	f7ff ffd9 	bl	80045dc <USBH_GetDescriptor>
 800462a:	bbc8      	cbnz	r0, 80046a0 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800462c:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8U)
 8004630:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8004632:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8004636:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800463a:	f884 3323 	strb.w	r3, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800463e:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8004642:	f8a4 3324 	strh.w	r3, [r4, #804]	; 0x324
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8004646:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 800464a:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800464e:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8004652:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8004656:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800465a:	f884 3328 	strb.w	r3, [r4, #808]	; 0x328
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800465e:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8004662:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8004666:	d91b      	bls.n	80046a0 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16 (buf +  8);
 8004668:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 800466c:	f8a4 332a 	strh.w	r3, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8004670:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8004674:	f8a4 332c 	strh.w	r3, [r4, #812]	; 0x32c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8004678:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 800467c:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8004680:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8004684:	f884 3330 	strb.w	r3, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8004688:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800468c:	f884 3331 	strb.w	r3, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8004690:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8004694:	f884 3332 	strb.w	r3, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8004698:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800469c:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 80046a0:	b003      	add	sp, #12
 80046a2:	bd30      	pop	{r4, r5, pc}

080046a4 <USBH_Get_CfgDesc>:
{
 80046a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  pData = phost->device.CfgDesc_Raw;
 80046a8:	f100 041c 	add.w	r4, r0, #28
{
 80046ac:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 80046ae:	9100      	str	r1, [sp, #0]
 80046b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046b4:	4623      	mov	r3, r4
 80046b6:	2100      	movs	r1, #0
{
 80046b8:	4605      	mov	r5, r0
  if((status = USBH_GetDescriptor(phost,
 80046ba:	f7ff ff8f 	bl	80045dc <USBH_GetDescriptor>
 80046be:	bb40      	cbnz	r0, 8004712 <USBH_Get_CfgDesc+0x6e>
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80046c0:	7f2b      	ldrb	r3, [r5, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80046c2:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80046c4:	f8b5 c01e 	ldrh.w	ip, [r5, #30]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80046c8:	f885 3334 	strb.w	r3, [r5, #820]	; 0x334
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80046cc:	7f6b      	ldrb	r3, [r5, #29]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80046ce:	f8a5 c336 	strh.w	ip, [r5, #822]	; 0x336
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80046d2:	f885 3335 	strb.w	r3, [r5, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80046d6:	f895 3020 	ldrb.w	r3, [r5, #32]
 80046da:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80046de:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80046e2:	f885 3339 	strb.w	r3, [r5, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 80046e6:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80046ea:	f885 333a 	strb.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 80046ee:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 80046f2:	f885 333b 	strb.w	r3, [r5, #827]	; 0x33b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 80046f6:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80046fa:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80046fe:	d908      	bls.n	8004712 <USBH_Get_CfgDesc+0x6e>
 8004700:	462b      	mov	r3, r5
 8004702:	4607      	mov	r7, r0
    ptr = USB_LEN_CFG_DESC;
 8004704:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004706:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800470a:	2f02      	cmp	r7, #2
 800470c:	d001      	beq.n	8004712 <USBH_Get_CfgDesc+0x6e>
 800470e:	4594      	cmp	ip, r2
 8004710:	d802      	bhi.n	8004718 <USBH_Get_CfgDesc+0x74>
}
 8004712:	b003      	add	sp, #12
 8004714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004718:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800471a:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800471c:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800471e:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004720:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004722:	2904      	cmp	r1, #4
 8004724:	d1f1      	bne.n	800470a <USBH_Get_CfgDesc+0x66>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8004726:	7821      	ldrb	r1, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004728:	fb0e f807 	mul.w	r8, lr, r7
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800472c:	f883 133e 	strb.w	r1, [r3, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8004730:	7861      	ldrb	r1, [r4, #1]
 8004732:	f883 133f 	strb.w	r1, [r3, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8004736:	78a1      	ldrb	r1, [r4, #2]
 8004738:	f883 1340 	strb.w	r1, [r3, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800473c:	78e1      	ldrb	r1, [r4, #3]
 800473e:	f883 1341 	strb.w	r1, [r3, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8004742:	7921      	ldrb	r1, [r4, #4]
 8004744:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8004748:	7961      	ldrb	r1, [r4, #5]
 800474a:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800474e:	79a1      	ldrb	r1, [r4, #6]
 8004750:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8004754:	79e1      	ldrb	r1, [r4, #7]
 8004756:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800475a:	7a21      	ldrb	r1, [r4, #8]
 800475c:	f883 1346 	strb.w	r1, [r3, #838]	; 0x346
        ep_ix = 0U;
 8004760:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004762:	f893 6342 	ldrb.w	r6, [r3, #834]	; 0x342
 8004766:	428e      	cmp	r6, r1
 8004768:	d901      	bls.n	800476e <USBH_Get_CfgDesc+0xca>
 800476a:	4594      	cmp	ip, r2
 800476c:	d802      	bhi.n	8004774 <USBH_Get_CfgDesc+0xd0>
        if_ix++;
 800476e:	3701      	adds	r7, #1
 8004770:	331a      	adds	r3, #26
 8004772:	e7ca      	b.n	800470a <USBH_Get_CfgDesc+0x66>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004774:	7826      	ldrb	r6, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004776:	4434      	add	r4, r6
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004778:	4432      	add	r2, r6
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800477a:	7866      	ldrb	r6, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800477c:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800477e:	2e05      	cmp	r6, #5
 8004780:	d1ef      	bne.n	8004762 <USBH_Get_CfgDesc+0xbe>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004782:	1c4e      	adds	r6, r1, #1
 8004784:	f894 9000 	ldrb.w	r9, [r4]
 8004788:	eb08 01c6 	add.w	r1, r8, r6, lsl #3
 800478c:	4429      	add	r1, r5
 800478e:	f881 9340 	strb.w	r9, [r1, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004792:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004796:	f881 9341 	strb.w	r9, [r1, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800479a:	f894 9002 	ldrb.w	r9, [r4, #2]
 800479e:	f881 9342 	strb.w	r9, [r1, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80047a2:	f894 9003 	ldrb.w	r9, [r4, #3]
 80047a6:	f881 9343 	strb.w	r9, [r1, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80047aa:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 80047ae:	f8a1 9344 	strh.w	r9, [r1, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80047b2:	f894 9006 	ldrb.w	r9, [r4, #6]
 80047b6:	f881 9346 	strb.w	r9, [r1, #838]	; 0x346
            ep_ix++;
 80047ba:	b2f1      	uxtb	r1, r6
 80047bc:	e7d1      	b.n	8004762 <USBH_Get_CfgDesc+0xbe>

080047be <USBH_Get_StringDesc>:
{
 80047be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                  phost->device.Data,
 80047c0:	f500 768e 	add.w	r6, r0, #284	; 0x11c
{
 80047c4:	4615      	mov	r5, r2
 80047c6:	461f      	mov	r7, r3
  if((status = USBH_GetDescriptor(phost,
 80047c8:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	2100      	movs	r1, #0
 80047d0:	4633      	mov	r3, r6
{
 80047d2:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80047d4:	f7ff ff02 	bl	80045dc <USBH_GetDescriptor>
 80047d8:	b978      	cbnz	r0, 80047fa <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80047da:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d10b      	bne.n	80047fa <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80047e2:	f894 411c 	ldrb.w	r4, [r4, #284]	; 0x11c
 80047e6:	1ea1      	subs	r1, r4, #2
    for (idx = 0U; idx < strlength; idx += 2U)
 80047e8:	4604      	mov	r4, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80047ea:	42b9      	cmp	r1, r7
 80047ec:	bf28      	it	cs
 80047ee:	4639      	movcs	r1, r7
 80047f0:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
 80047f2:	42a1      	cmp	r1, r4
 80047f4:	d803      	bhi.n	80047fe <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 80047f6:	2300      	movs	r3, #0
 80047f8:	702b      	strb	r3, [r5, #0]
}
 80047fa:	b003      	add	sp, #12
 80047fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 80047fe:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
 8004800:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
 8004802:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 8004804:	b2a4      	uxth	r4, r4
      *pdest =  psrc[idx];
 8004806:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800480a:	e7f2      	b.n	80047f2 <USBH_Get_StringDesc+0x34>

0800480c <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 800480c:	7883      	ldrb	r3, [r0, #2]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d105      	bne.n	800481e <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004812:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004816:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004818:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 800481e:	2200      	movs	r2, #0
 8004820:	4611      	mov	r1, r2
 8004822:	f7ff bde1 	b.w	80043e8 <USBH_CtlReq>

08004826 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8004826:	7883      	ldrb	r3, [r0, #2]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800482c:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004830:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004832:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U , 0U);
 8004838:	2200      	movs	r2, #0
 800483a:	4611      	mov	r1, r2
 800483c:	f7ff bdd4 	b.w	80043e8 <USBH_CtlReq>

08004840 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8004840:	7883      	ldrb	r3, [r0, #2]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d105      	bne.n	8004852 <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004846:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
 800484a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800484c:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, 0U, 0U);
 8004852:	2200      	movs	r2, #0
 8004854:	4611      	mov	r1, r2
 8004856:	f7ff bdc7 	b.w	80043e8 <USBH_CtlReq>

0800485a <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 800485a:	7883      	ldrb	r3, [r0, #2]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004860:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
 8004864:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004866:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U , 0U);
 800486c:	2200      	movs	r2, #0
 800486e:	4611      	mov	r1, r2
 8004870:	f7ff bdba 	b.w	80043e8 <USBH_CtlReq>

08004874 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8004874:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004876:	2400      	movs	r4, #0
{
 8004878:	460b      	mov	r3, r1
 800487a:	4611      	mov	r1, r2
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800487c:	2208      	movs	r2, #8
 800487e:	e9cd 4300 	strd	r4, r3, [sp]
 8004882:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8004886:	4623      	mov	r3, r4
 8004888:	4622      	mov	r2, r4
 800488a:	f00c fcad 	bl	80111e8 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 800488e:	4620      	mov	r0, r4
 8004890:	b004      	add	sp, #16
 8004892:	bd10      	pop	{r4, pc}

08004894 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004894:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004896:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800489a:	b085      	sub	sp, #20
 800489c:	460c      	mov	r4, r1
 800489e:	4619      	mov	r1, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 80048a0:	2d00      	cmp	r5, #0
{
 80048a2:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80048a6:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 80048a8:	bf18      	it	ne
 80048aa:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80048ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048b0:	2301      	movs	r3, #1
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	461a      	mov	r2, r3
 80048b8:	f00c fc96 	bl	80111e8 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80048bc:	2000      	movs	r0, #0
 80048be:	b005      	add	sp, #20
 80048c0:	bd30      	pop	{r4, r5, pc}

080048c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80048c2:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80048c4:	2400      	movs	r4, #0
{
 80048c6:	b085      	sub	sp, #20
 80048c8:	460d      	mov	r5, r1
 80048ca:	4619      	mov	r1, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80048cc:	4623      	mov	r3, r4
 80048ce:	9501      	str	r5, [sp, #4]
 80048d0:	e9cd 2402 	strd	r2, r4, [sp, #8]
 80048d4:	2201      	movs	r2, #1
 80048d6:	9200      	str	r2, [sp, #0]
 80048d8:	f00c fc86 	bl	80111e8 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 80048dc:	4620      	mov	r0, r4
 80048de:	b005      	add	sp, #20
 80048e0:	bd30      	pop	{r4, r5, pc}

080048e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80048e2:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 80048e4:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 80048e8:	b085      	sub	sp, #20
 80048ea:	460c      	mov	r4, r1
 80048ec:	4619      	mov	r1, r3
  if(phost->device.speed != USBH_SPEED_HIGH)
 80048ee:	2d00      	cmp	r5, #0
{
 80048f0:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80048f4:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 80048f6:	bf18      	it	ne
 80048f8:	2300      	movne	r3, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80048fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048fe:	2301      	movs	r3, #1
 8004900:	2200      	movs	r2, #0
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2302      	movs	r3, #2
 8004906:	f00c fc6f 	bl	80111e8 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800490a:	2000      	movs	r0, #0
 800490c:	b005      	add	sp, #20
 800490e:	bd30      	pop	{r4, r5, pc}

08004910 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004910:	b530      	push	{r4, r5, lr}
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004912:	2400      	movs	r4, #0
{
 8004914:	b085      	sub	sp, #20
 8004916:	460d      	mov	r5, r1
 8004918:	4619      	mov	r1, r3
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800491a:	2302      	movs	r3, #2
 800491c:	9501      	str	r5, [sp, #4]
 800491e:	e9cd 2402 	strd	r2, r4, [sp, #8]
 8004922:	2201      	movs	r2, #1
 8004924:	9200      	str	r2, [sp, #0]
 8004926:	f00c fc5f 	bl	80111e8 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 800492a:	4620      	mov	r0, r4
 800492c:	b005      	add	sp, #20
 800492e:	bd30      	pop	{r4, r5, pc}

08004930 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004930:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  USBH_LL_OpenPipe(phost,
 8004932:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004936:	9402      	str	r4, [sp, #8]
 8004938:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800493c:	9401      	str	r4, [sp, #4]
 800493e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004942:	9400      	str	r4, [sp, #0]
 8004944:	f00c fc2a 	bl	801119c <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8004948:	2000      	movs	r0, #0
 800494a:	b004      	add	sp, #16
 800494c:	bd10      	pop	{r4, pc}

0800494e <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800494e:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004950:	f00c fc3c 	bl	80111cc <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8004954:	2000      	movs	r0, #0
 8004956:	bd08      	pop	{r3, pc}

08004958 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004958:	b530      	push	{r4, r5, lr}
 800495a:	2300      	movs	r3, #0
 800495c:	f500 7460 	add.w	r4, r0, #896	; 0x380
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004960:	f854 5b04 	ldr.w	r5, [r4], #4
 8004964:	b2da      	uxtb	r2, r3
 8004966:	042d      	lsls	r5, r5, #16
 8004968:	d407      	bmi.n	800497a <USBH_AllocPipe+0x22>
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800496a:	33e0      	adds	r3, #224	; 0xe0
 800496c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
	{
	   return (uint16_t)idx;
 8004970:	b292      	uxth	r2, r2
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8004972:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
 8004976:	b2d0      	uxtb	r0, r2
 8004978:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < 11U ; idx++)
 800497a:	3301      	adds	r3, #1
 800497c:	2b0b      	cmp	r3, #11
 800497e:	d1ef      	bne.n	8004960 <USBH_AllocPipe+0x8>
	}
  }
  return 0xFFFFU;
 8004980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004984:	e7f7      	b.n	8004976 <USBH_AllocPipe+0x1e>

08004986 <USBH_FreePipe>:
   if(idx < 11U)
 8004986:	290a      	cmp	r1, #10
	 phost->Pipes[idx] &= 0x7FFFU;
 8004988:	bf98      	it	ls
 800498a:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
}
 800498e:	f04f 0000 	mov.w	r0, #0
	 phost->Pipes[idx] &= 0x7FFFU;
 8004992:	bf9e      	ittt	ls
 8004994:	f8d1 3380 	ldrls.w	r3, [r1, #896]	; 0x380
 8004998:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800499c:	f8c1 3380 	strls.w	r3, [r1, #896]	; 0x380
}
 80049a0:	4770      	bx	lr
	...

080049a4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80049a4:	4b03      	ldr	r3, [pc, #12]	; (80049b4 <disk_status+0x10>)
 80049a6:	181a      	adds	r2, r3, r0
 80049a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80049ac:	6843      	ldr	r3, [r0, #4]
 80049ae:	7a10      	ldrb	r0, [r2, #8]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	4718      	bx	r3
 80049b4:	200000e0 	.word	0x200000e0

080049b8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80049b8:	4b06      	ldr	r3, [pc, #24]	; (80049d4 <disk_initialize+0x1c>)
 80049ba:	5c1a      	ldrb	r2, [r3, r0]
 80049bc:	b942      	cbnz	r2, 80049d0 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 80049be:	2201      	movs	r2, #1
 80049c0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80049c2:	181a      	adds	r2, r3, r0
 80049c4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80049c8:	7a10      	ldrb	r0, [r2, #8]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4718      	bx	r3
  }
  return stat;
}
 80049d0:	2000      	movs	r0, #0
 80049d2:	4770      	bx	lr
 80049d4:	200000e0 	.word	0x200000e0

080049d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80049d8:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80049da:	4c05      	ldr	r4, [pc, #20]	; (80049f0 <disk_read+0x18>)
 80049dc:	1825      	adds	r5, r4, r0
 80049de:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80049e2:	6840      	ldr	r0, [r0, #4]
 80049e4:	6884      	ldr	r4, [r0, #8]
 80049e6:	7a28      	ldrb	r0, [r5, #8]
 80049e8:	46a4      	mov	ip, r4
  return res;
}
 80049ea:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80049ec:	4760      	bx	ip
 80049ee:	bf00      	nop
 80049f0:	200000e0 	.word	0x200000e0

080049f4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80049f4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80049f6:	4c05      	ldr	r4, [pc, #20]	; (8004a0c <disk_write+0x18>)
 80049f8:	1825      	adds	r5, r4, r0
 80049fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80049fe:	6840      	ldr	r0, [r0, #4]
 8004a00:	68c4      	ldr	r4, [r0, #12]
 8004a02:	7a28      	ldrb	r0, [r5, #8]
 8004a04:	46a4      	mov	ip, r4
  return res;
}
 8004a06:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a08:	4760      	bx	ip
 8004a0a:	bf00      	nop
 8004a0c:	200000e0 	.word	0x200000e0

08004a10 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <disk_ioctl+0x18>)
{
 8004a12:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004a14:	181c      	adds	r4, r3, r0
 8004a16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a1a:	6843      	ldr	r3, [r0, #4]
 8004a1c:	7a20      	ldrb	r0, [r4, #8]
 8004a1e:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8004a20:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004a24:	4718      	bx	r3
 8004a26:	bf00      	nop
 8004a28:	200000e0 	.word	0x200000e0

08004a2c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8004a2c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8004a2e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8004a30:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 8004a32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 8004a36:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8004a3a:	4770      	bx	lr

08004a3c <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8004a3c:	0a0b      	lsrs	r3, r1, #8
 8004a3e:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004a40:	7043      	strb	r3, [r0, #1]
 8004a42:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004a44:	0e09      	lsrs	r1, r1, #24
 8004a46:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8004a48:	70c1      	strb	r1, [r0, #3]
}
 8004a4a:	4770      	bx	lr

08004a4c <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8004a4c:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8004a4e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8004a52:	4290      	cmp	r0, r2
 8004a54:	d1fb      	bne.n	8004a4e <mem_set+0x2>
}
 8004a56:	4770      	bx	lr

08004a58 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 8004a58:	4a1b      	ldr	r2, [pc, #108]	; (8004ac8 <chk_lock+0x70>)
 8004a5a:	6813      	ldr	r3, [r2, #0]
{
 8004a5c:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8004a5e:	b163      	cbz	r3, 8004a7a <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a60:	6804      	ldr	r4, [r0, #0]
 8004a62:	429c      	cmp	r4, r3
 8004a64:	d107      	bne.n	8004a76 <chk_lock+0x1e>
 8004a66:	6854      	ldr	r4, [r2, #4]
 8004a68:	6883      	ldr	r3, [r0, #8]
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	d103      	bne.n	8004a76 <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 8004a6e:	6894      	ldr	r4, [r2, #8]
 8004a70:	6943      	ldr	r3, [r0, #20]
 8004a72:	429c      	cmp	r4, r3
 8004a74:	d020      	beq.n	8004ab8 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a76:	2400      	movs	r4, #0
 8004a78:	e000      	b.n	8004a7c <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 8004a7a:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8004a7c:	6913      	ldr	r3, [r2, #16]
 8004a7e:	b1cb      	cbz	r3, 8004ab4 <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004a80:	6805      	ldr	r5, [r0, #0]
 8004a82:	42ab      	cmp	r3, r5
 8004a84:	d107      	bne.n	8004a96 <chk_lock+0x3e>
 8004a86:	6955      	ldr	r5, [r2, #20]
 8004a88:	6883      	ldr	r3, [r0, #8]
 8004a8a:	429d      	cmp	r5, r3
 8004a8c:	d103      	bne.n	8004a96 <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 8004a8e:	6995      	ldr	r5, [r2, #24]
 8004a90:	6943      	ldr	r3, [r0, #20]
 8004a92:	429d      	cmp	r5, r3
 8004a94:	d015      	beq.n	8004ac2 <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004a96:	b96c      	cbnz	r4, 8004ab4 <chk_lock+0x5c>
 8004a98:	2902      	cmp	r1, #2
 8004a9a:	bf0c      	ite	eq
 8004a9c:	2000      	moveq	r0, #0
 8004a9e:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 8004aa0:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004aa2:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004aa6:	8993      	ldrh	r3, [r2, #12]
 8004aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aac:	bf14      	ite	ne
 8004aae:	2000      	movne	r0, #0
 8004ab0:	2010      	moveq	r0, #16
 8004ab2:	e7f5      	b.n	8004aa0 <chk_lock+0x48>
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	e7f3      	b.n	8004aa0 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ab8:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004aba:	2900      	cmp	r1, #0
 8004abc:	d0f1      	beq.n	8004aa2 <chk_lock+0x4a>
 8004abe:	2010      	movs	r0, #16
 8004ac0:	e7ee      	b.n	8004aa0 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e7f9      	b.n	8004aba <chk_lock+0x62>
 8004ac6:	bf00      	nop
 8004ac8:	200000bc 	.word	0x200000bc

08004acc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8004acc:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <inc_lock+0x80>)
{
 8004ace:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8004ad0:	6813      	ldr	r3, [r2, #0]
 8004ad2:	6806      	ldr	r6, [r0, #0]
 8004ad4:	429e      	cmp	r6, r3
 8004ad6:	d107      	bne.n	8004ae8 <inc_lock+0x1c>
 8004ad8:	6855      	ldr	r5, [r2, #4]
 8004ada:	6884      	ldr	r4, [r0, #8]
 8004adc:	42a5      	cmp	r5, r4
 8004ade:	d103      	bne.n	8004ae8 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8004ae0:	6945      	ldr	r5, [r0, #20]
 8004ae2:	6894      	ldr	r4, [r2, #8]
 8004ae4:	42a5      	cmp	r5, r4
 8004ae6:	d01b      	beq.n	8004b20 <inc_lock+0x54>
		if (Files[i].fs == dp->obj.fs &&
 8004ae8:	6914      	ldr	r4, [r2, #16]
 8004aea:	42b4      	cmp	r4, r6
 8004aec:	d107      	bne.n	8004afe <inc_lock+0x32>
 8004aee:	6957      	ldr	r7, [r2, #20]
 8004af0:	6885      	ldr	r5, [r0, #8]
 8004af2:	42af      	cmp	r7, r5
 8004af4:	d103      	bne.n	8004afe <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 8004af6:	6997      	ldr	r7, [r2, #24]
 8004af8:	6945      	ldr	r5, [r0, #20]
 8004afa:	42af      	cmp	r7, r5
 8004afc:	d019      	beq.n	8004b32 <inc_lock+0x66>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004afe:	b10b      	cbz	r3, 8004b04 <inc_lock+0x38>
 8004b00:	b9ac      	cbnz	r4, 8004b2e <inc_lock+0x62>
 8004b02:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8004b04:	011d      	lsls	r5, r3, #4
 8004b06:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8004b0a:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8004b0c:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8004b0e:	6940      	ldr	r0, [r0, #20]
		Files[i].clu = dp->obj.sclust;
 8004b10:	6065      	str	r5, [r4, #4]
		Files[i].ofs = dp->dptr;
 8004b12:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 8004b14:	2000      	movs	r0, #0
 8004b16:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004b18:	b169      	cbz	r1, 8004b36 <inc_lock+0x6a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b1e:	e00f      	b.n	8004b40 <inc_lock+0x74>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b20:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004b22:	b141      	cbz	r1, 8004b36 <inc_lock+0x6a>
 8004b24:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8004b28:	8989      	ldrh	r1, [r1, #12]
 8004b2a:	2900      	cmp	r1, #0
 8004b2c:	d0f5      	beq.n	8004b1a <inc_lock+0x4e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004b2e:	2000      	movs	r0, #0
 8004b30:	e00a      	b.n	8004b48 <inc_lock+0x7c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b32:	2301      	movs	r3, #1
 8004b34:	e7f5      	b.n	8004b22 <inc_lock+0x56>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004b36:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8004b3a:	8989      	ldrh	r1, [r1, #12]
 8004b3c:	3101      	adds	r1, #1
 8004b3e:	b289      	uxth	r1, r1
 8004b40:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8004b44:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004b46:	8191      	strh	r1, [r2, #12]
}
 8004b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	200000bc 	.word	0x200000bc

08004b50 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004b50:	3801      	subs	r0, #1
 8004b52:	2801      	cmp	r0, #1
 8004b54:	d815      	bhi.n	8004b82 <dec_lock+0x32>
		n = Files[i].ctr;
 8004b56:	4a0c      	ldr	r2, [pc, #48]	; (8004b88 <dec_lock+0x38>)
 8004b58:	0101      	lsls	r1, r0, #4
 8004b5a:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 8004b5e:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b64:	d104      	bne.n	8004b70 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 8004b66:	2300      	movs	r3, #0
 8004b68:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	5050      	str	r0, [r2, r1]
 8004b6e:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0fa      	beq.n	8004b6a <dec_lock+0x1a>
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8004b78:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f5      	beq.n	8004b6a <dec_lock+0x1a>
		res = FR_OK;
 8004b7e:	2000      	movs	r0, #0
 8004b80:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004b82:	2002      	movs	r0, #2
	}
	return res;
}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	200000bc 	.word	0x200000bc

08004b8c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004b8c:	69c3      	ldr	r3, [r0, #28]
	clst -= 2;
 8004b8e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004b90:	3b02      	subs	r3, #2
 8004b92:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8004b94:	bf83      	ittte	hi
 8004b96:	8943      	ldrhhi	r3, [r0, #10]
 8004b98:	6b00      	ldrhi	r0, [r0, #48]	; 0x30
 8004b9a:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004b9e:	2000      	movls	r0, #0
}
 8004ba0:	4770      	bx	lr

08004ba2 <clmt_clust>:
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004ba2:	6802      	ldr	r2, [r0, #0]
 8004ba4:	0a49      	lsrs	r1, r1, #9
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004ba6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004ba8:	8952      	ldrh	r2, [r2, #10]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004baa:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004bac:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004bb0:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004bb2:	b130      	cbz	r0, 8004bc2 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8004bb4:	4281      	cmp	r1, r0
 8004bb6:	d302      	bcc.n	8004bbe <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8004bb8:	1a09      	subs	r1, r1, r0
 8004bba:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004bbc:	e7f8      	b.n	8004bb0 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8004bbe:	6858      	ldr	r0, [r3, #4]
 8004bc0:	4408      	add	r0, r1
}
 8004bc2:	4770      	bx	lr

08004bc4 <sum_sfn>:
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
	BYTE sum = 0;
	UINT n = 11;
 8004bc4:	f100 010b 	add.w	r1, r0, #11
	BYTE sum = 0;
 8004bc8:	2200      	movs	r2, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004bca:	01d3      	lsls	r3, r2, #7
 8004bcc:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8004bd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bd4:	fa52 f383 	uxtab	r3, r2, r3
	} while (--n);
 8004bd8:	4288      	cmp	r0, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004bda:	b2da      	uxtb	r2, r3
	} while (--n);
 8004bdc:	d1f5      	bne.n	8004bca <sum_sfn+0x6>
	return sum;
}
 8004bde:	4610      	mov	r0, r2
 8004be0:	4770      	bx	lr

08004be2 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004be2:	6802      	ldr	r2, [r0, #0]
{
 8004be4:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8004be6:	b152      	cbz	r2, 8004bfe <get_ldnumber+0x1c>
 8004be8:	4611      	mov	r1, r2
 8004bea:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004bec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bf0:	2c1f      	cmp	r4, #31
 8004bf2:	d90c      	bls.n	8004c0e <get_ldnumber+0x2c>
 8004bf4:	2c3a      	cmp	r4, #58	; 0x3a
 8004bf6:	d1f8      	bne.n	8004bea <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8004bf8:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004bfa:	428b      	cmp	r3, r1
 8004bfc:	d002      	beq.n	8004c04 <get_ldnumber+0x22>
	int vol = -1;
 8004bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c02:	e005      	b.n	8004c10 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004c04:	7812      	ldrb	r2, [r2, #0]
 8004c06:	2a30      	cmp	r2, #48	; 0x30
 8004c08:	d1f9      	bne.n	8004bfe <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004c0e:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8004c10:	bd10      	pop	{r4, pc}

08004c12 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004c12:	3801      	subs	r0, #1
 8004c14:	440a      	add	r2, r1
			*d++ = *s++;
 8004c16:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8004c1a:	4291      	cmp	r1, r2
			*d++ = *s++;
 8004c1c:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8004c20:	d1f9      	bne.n	8004c16 <mem_cpy.part.0+0x4>
}
 8004c22:	4770      	bx	lr

08004c24 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 8004c24:	2803      	cmp	r0, #3
	rv = rv << 8 | ptr[0];
 8004c26:	7eca      	ldrb	r2, [r1, #27]
 8004c28:	7e8b      	ldrb	r3, [r1, #26]
 8004c2a:	bf08      	it	eq
 8004c2c:	7d48      	ldrbeq	r0, [r1, #21]
	cl = ld_word(dir + DIR_FstClusLO);
 8004c2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8004c32:	bf02      	ittt	eq
 8004c34:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004c36:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8004c3a:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	4770      	bx	lr

08004c42 <st_clust.isra.0>:
	*ptr++ = (BYTE)val; val >>= 8;
 8004c42:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004c46:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8004c48:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8004c4a:	7803      	ldrb	r3, [r0, #0]
 8004c4c:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004c4e:	bf01      	itttt	eq
 8004c50:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8004c52:	750a      	strbeq	r2, [r1, #20]
 8004c54:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8004c56:	754a      	strbeq	r2, [r1, #21]
}
 8004c58:	4770      	bx	lr

08004c5a <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 8004c5e:	6b46      	ldr	r6, [r0, #52]	; 0x34
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004c60:	f100 0838 	add.w	r8, r0, #56	; 0x38
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8004c64:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004c66:	2301      	movs	r3, #1
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4641      	mov	r1, r8
 8004c6c:	7840      	ldrb	r0, [r0, #1]
 8004c6e:	f7ff fec1 	bl	80049f4 <disk_write>
 8004c72:	4605      	mov	r5, r0
 8004c74:	b9a8      	cbnz	r0, 8004ca2 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004c76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c78:	6a22      	ldr	r2, [r4, #32]
 8004c7a:	1af3      	subs	r3, r6, r3
			fs->wflag = 0;
 8004c7c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d202      	bcs.n	8004c88 <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c82:	78a7      	ldrb	r7, [r4, #2]
 8004c84:	2f01      	cmp	r7, #1
 8004c86:	d802      	bhi.n	8004c8e <sync_window.part.0+0x34>
}
 8004c88:	4628      	mov	r0, r5
 8004c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 8004c8e:	6a23      	ldr	r3, [r4, #32]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004c90:	4641      	mov	r1, r8
 8004c92:	7860      	ldrb	r0, [r4, #1]
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004c94:	3f01      	subs	r7, #1
					wsect += fs->fsize;
 8004c96:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4632      	mov	r2, r6
 8004c9c:	f7ff feaa 	bl	80049f4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004ca0:	e7f0      	b.n	8004c84 <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 8004ca2:	2501      	movs	r5, #1
 8004ca4:	e7f0      	b.n	8004c88 <sync_window.part.0+0x2e>

08004ca6 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004ca6:	78c3      	ldrb	r3, [r0, #3]
 8004ca8:	b10b      	cbz	r3, 8004cae <sync_window+0x8>
 8004caa:	f7ff bfd6 	b.w	8004c5a <sync_window.part.0>
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	4770      	bx	lr

08004cb2 <move_window>:
{
 8004cb2:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004cb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
{
 8004cb6:	4605      	mov	r5, r0
 8004cb8:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8004cba:	428b      	cmp	r3, r1
 8004cbc:	d010      	beq.n	8004ce0 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8004cbe:	f7ff fff2 	bl	8004ca6 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004cc2:	b960      	cbnz	r0, 8004cde <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004cc4:	4622      	mov	r2, r4
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8004ccc:	7868      	ldrb	r0, [r5, #1]
 8004cce:	f7ff fe83 	bl	80049d8 <disk_read>
				res = FR_DISK_ERR;
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	bf1c      	itt	ne
 8004cd6:	f04f 34ff 	movne.w	r4, #4294967295	; 0xffffffff
 8004cda:	2001      	movne	r0, #1
			fs->winsect = sector;
 8004cdc:	636c      	str	r4, [r5, #52]	; 0x34
}
 8004cde:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	e7fc      	b.n	8004cde <move_window+0x2c>

08004ce4 <check_fs>:
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004ce4:	2300      	movs	r3, #0
{
 8004ce6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004ce8:	70c3      	strb	r3, [r0, #3]
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
 8004cee:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004cf0:	6343      	str	r3, [r0, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004cf2:	f7ff ffde 	bl	8004cb2 <move_window>
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	bb30      	cbnz	r0, 8004d48 <check_fs+0x64>
	rv = rv << 8 | ptr[0];
 8004cfa:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8004cfe:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
 8004d02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004d06:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d11e      	bne.n	8004d4c <check_fs+0x68>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004d0e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8004d12:	2be9      	cmp	r3, #233	; 0xe9
 8004d14:	d005      	beq.n	8004d22 <check_fs+0x3e>
 8004d16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d18:	4a0e      	ldr	r2, [pc, #56]	; (8004d54 <check_fs+0x70>)
 8004d1a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d116      	bne.n	8004d50 <check_fs+0x6c>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004d22:	f104 006e 	add.w	r0, r4, #110	; 0x6e
 8004d26:	f7ff fe81 	bl	8004a2c <ld_dword>
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <check_fs+0x74>)
 8004d2c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004d30:	4298      	cmp	r0, r3
 8004d32:	d007      	beq.n	8004d44 <check_fs+0x60>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004d34:	f104 008a 	add.w	r0, r4, #138	; 0x8a
 8004d38:	f7ff fe78 	bl	8004a2c <ld_dword>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004d3c:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <check_fs+0x78>)
 8004d3e:	4298      	cmp	r0, r3
 8004d40:	bf18      	it	ne
 8004d42:	2102      	movne	r1, #2
}
 8004d44:	4608      	mov	r0, r1
 8004d46:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004d48:	2104      	movs	r1, #4
 8004d4a:	e7fb      	b.n	8004d44 <check_fs+0x60>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004d4c:	2103      	movs	r1, #3
 8004d4e:	e7f9      	b.n	8004d44 <check_fs+0x60>
	return 2;
 8004d50:	2102      	movs	r1, #2
 8004d52:	e7f7      	b.n	8004d44 <check_fs+0x60>
 8004d54:	009000eb 	.word	0x009000eb
 8004d58:	00544146 	.word	0x00544146
 8004d5c:	33544146 	.word	0x33544146

08004d60 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d60:	2901      	cmp	r1, #1
{
 8004d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d66:	4606      	mov	r6, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004d6c:	d974      	bls.n	8004e58 <put_fat+0xf8>
 8004d6e:	69c3      	ldr	r3, [r0, #28]
 8004d70:	428b      	cmp	r3, r1
 8004d72:	d971      	bls.n	8004e58 <put_fat+0xf8>
		switch (fs->fs_type) {
 8004d74:	7803      	ldrb	r3, [r0, #0]
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d040      	beq.n	8004dfc <put_fat+0x9c>
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d051      	beq.n	8004e22 <put_fat+0xc2>
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d16a      	bne.n	8004e58 <put_fat+0xf8>
			bc = (UINT)clst; bc += bc / 2;
 8004d82:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004d86:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004d88:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8004d8c:	f7ff ff91 	bl	8004cb2 <move_window>
 8004d90:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8004d92:	bb40      	cbnz	r0, 8004de6 <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004d94:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 8004d98:	f106 0938 	add.w	r9, r6, #56	; 0x38
 8004d9c:	f108 0a01 	add.w	sl, r8, #1
 8004da0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004da4:	bf08      	it	eq
 8004da6:	b2fb      	uxtbeq	r3, r7
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004da8:	4630      	mov	r0, r6
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004daa:	bf1f      	itttt	ne
 8004dac:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8004db0:	f003 020f 	andne.w	r2, r3, #15
 8004db4:	013b      	lslne	r3, r7, #4
 8004db6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8004dba:	bf18      	it	ne
 8004dbc:	4313      	orrne	r3, r2
 8004dbe:	f809 3008 	strb.w	r3, [r9, r8]
			fs->wflag = 1;
 8004dc2:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004dc4:	6ab1      	ldr	r1, [r6, #40]	; 0x28
			fs->wflag = 1;
 8004dc6:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004dc8:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8004dcc:	f7ff ff71 	bl	8004cb2 <move_window>
			if (res != FR_OK) break;
 8004dd0:	4605      	mov	r5, r0
 8004dd2:	b940      	cbnz	r0, 8004de6 <put_fat+0x86>
			p = fs->win + bc % SS(fs);
 8004dd4:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004dd8:	b144      	cbz	r4, 8004dec <put_fat+0x8c>
 8004dda:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8004dde:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	70f3      	strb	r3, [r6, #3]
}
 8004de6:	4628      	mov	r0, r5
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004dec:	f819 300a 	ldrb.w	r3, [r9, sl]
 8004df0:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8004df4:	f023 030f 	bic.w	r3, r3, #15
 8004df8:	431f      	orrs	r7, r3
 8004dfa:	e7f0      	b.n	8004dde <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004dfc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004dfe:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004e02:	f7ff ff56 	bl	8004cb2 <move_window>
			if (res != FR_OK) break;
 8004e06:	4605      	mov	r5, r0
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d1ec      	bne.n	8004de6 <put_fat+0x86>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004e0c:	0064      	lsls	r4, r4, #1
 8004e0e:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8004e12:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8004e16:	551f      	strb	r7, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004e18:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004e1a:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8004e1e:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 8004e20:	e7df      	b.n	8004de2 <put_fat+0x82>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004e22:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004e24:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004e28:	f7ff ff43 	bl	8004cb2 <move_window>
			if (res != FR_OK) break;
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d1d9      	bne.n	8004de6 <put_fat+0x86>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004e32:	00a4      	lsls	r4, r4, #2
 8004e34:	f106 0338 	add.w	r3, r6, #56	; 0x38
 8004e38:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8004e3c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004e40:	441c      	add	r4, r3
 8004e42:	4620      	mov	r0, r4
 8004e44:	f7ff fdf2 	bl	8004a2c <ld_dword>
 8004e48:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004e4c:	ea47 0100 	orr.w	r1, r7, r0
 8004e50:	4620      	mov	r0, r4
 8004e52:	f7ff fdf3 	bl	8004a3c <st_dword>
 8004e56:	e7c4      	b.n	8004de2 <put_fat+0x82>
		switch (fs->fs_type) {
 8004e58:	2502      	movs	r5, #2
 8004e5a:	e7c4      	b.n	8004de6 <put_fat+0x86>

08004e5c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e5c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8004e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e60:	4605      	mov	r5, r0
 8004e62:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004e64:	d952      	bls.n	8004f0c <get_fat.isra.0+0xb0>
 8004e66:	69c3      	ldr	r3, [r0, #28]
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	d24f      	bcs.n	8004f0c <get_fat.isra.0+0xb0>
		switch (fs->fs_type) {
 8004e6c:	7803      	ldrb	r3, [r0, #0]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d029      	beq.n	8004ec6 <get_fat.isra.0+0x6a>
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d038      	beq.n	8004ee8 <get_fat.isra.0+0x8c>
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d148      	bne.n	8004f0c <get_fat.isra.0+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8004e7a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e7e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004e80:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8004e84:	f7ff ff15 	bl	8004cb2 <move_window>
 8004e88:	b110      	cbz	r0, 8004e90 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8004e90:	1c77      	adds	r7, r6, #1
 8004e92:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e96:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8004e98:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8004e9a:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004e9c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8004ea0:	f896 6038 	ldrb.w	r6, [r6, #56]	; 0x38
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ea4:	f7ff ff05 	bl	8004cb2 <move_window>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d1ee      	bne.n	8004e8a <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004eac:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004eb0:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8004eb2:	443d      	add	r5, r7
 8004eb4:	f895 0038 	ldrb.w	r0, [r5, #56]	; 0x38
 8004eb8:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004ebc:	bf4c      	ite	mi
 8004ebe:	0900      	lsrmi	r0, r0, #4
 8004ec0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8004ec4:	e7e3      	b.n	8004e8e <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ec6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004ec8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8004ecc:	f7ff fef1 	bl	8004cb2 <move_window>
 8004ed0:	2800      	cmp	r0, #0
 8004ed2:	d1da      	bne.n	8004e8a <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004ed4:	0064      	lsls	r4, r4, #1
 8004ed6:	3538      	adds	r5, #56	; 0x38
 8004ed8:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8004edc:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8004ede:	5d28      	ldrb	r0, [r5, r4]
 8004ee0:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004ee2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 8004ee6:	e7d2      	b.n	8004e8e <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ee8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8004eea:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8004eee:	f7ff fee0 	bl	8004cb2 <move_window>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d1c9      	bne.n	8004e8a <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004ef6:	00a4      	lsls	r4, r4, #2
 8004ef8:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8004efc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8004f00:	4420      	add	r0, r4
 8004f02:	f7ff fd93 	bl	8004a2c <ld_dword>
 8004f06:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8004f0a:	e7c0      	b.n	8004e8e <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8004f0c:	2001      	movs	r0, #1
	return val;
 8004f0e:	e7be      	b.n	8004e8e <get_fat.isra.0+0x32>

08004f10 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	4606      	mov	r6, r0
 8004f18:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f1a:	d301      	bcc.n	8004f20 <dir_sdi+0x10>
		return FR_INT_ERR;
 8004f1c:	2002      	movs	r0, #2
}
 8004f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004f20:	06ca      	lsls	r2, r1, #27
 8004f22:	d1fb      	bne.n	8004f1c <dir_sdi+0xc>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004f24:	6882      	ldr	r2, [r0, #8]
	FATFS *fs = dp->obj.fs;
 8004f26:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8004f28:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004f2a:	b9ca      	cbnz	r2, 8004f60 <dir_sdi+0x50>
 8004f2c:	782b      	ldrb	r3, [r5, #0]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d901      	bls.n	8004f36 <dir_sdi+0x26>
		clst = fs->dirbase;
 8004f32:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004f34:	b99b      	cbnz	r3, 8004f5e <dir_sdi+0x4e>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004f36:	892b      	ldrh	r3, [r5, #8]
 8004f38:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8004f3c:	d9ee      	bls.n	8004f1c <dir_sdi+0xc>
		dp->sect = fs->dirbase;
 8004f3e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004f40:	61f3      	str	r3, [r6, #28]
	if (!dp->sect) return FR_INT_ERR;
 8004f42:	69f3      	ldr	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8004f44:	61b2      	str	r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d0e8      	beq.n	8004f1c <dir_sdi+0xc>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f4a:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f4e:	3538      	adds	r5, #56	; 0x38
 8004f50:	f3c4 0408 	ubfx	r4, r4, #0, #9
	return FR_OK;
 8004f54:	2000      	movs	r0, #0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f56:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f58:	442c      	add	r4, r5
 8004f5a:	6234      	str	r4, [r6, #32]
	return FR_OK;
 8004f5c:	e7df      	b.n	8004f1e <dir_sdi+0xe>
 8004f5e:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004f60:	896f      	ldrh	r7, [r5, #10]
 8004f62:	027f      	lsls	r7, r7, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f64:	42bc      	cmp	r4, r7
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004f66:	4611      	mov	r1, r2
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f68:	d204      	bcs.n	8004f74 <dir_sdi+0x64>
		dp->sect = clust2sect(fs, clst);
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f7ff fe0e 	bl	8004b8c <clust2sect>
 8004f70:	61f0      	str	r0, [r6, #28]
 8004f72:	e7e6      	b.n	8004f42 <dir_sdi+0x32>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004f74:	6830      	ldr	r0, [r6, #0]
 8004f76:	f7ff ff71 	bl	8004e5c <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f7a:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004f7c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f7e:	d006      	beq.n	8004f8e <dir_sdi+0x7e>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004f80:	2801      	cmp	r0, #1
 8004f82:	d9cb      	bls.n	8004f1c <dir_sdi+0xc>
 8004f84:	69eb      	ldr	r3, [r5, #28]
 8004f86:	4283      	cmp	r3, r0
 8004f88:	d9c8      	bls.n	8004f1c <dir_sdi+0xc>
			ofs -= csz;
 8004f8a:	1be4      	subs	r4, r4, r7
 8004f8c:	e7ea      	b.n	8004f64 <dir_sdi+0x54>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004f8e:	2001      	movs	r0, #1
 8004f90:	e7c5      	b.n	8004f1e <dir_sdi+0xe>

08004f92 <create_chain>:
{
 8004f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f96:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8004f98:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8004f9a:	460f      	mov	r7, r1
 8004f9c:	b971      	cbnz	r1, 8004fbc <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004f9e:	696e      	ldr	r6, [r5, #20]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004fa0:	b1ee      	cbz	r6, 8004fde <create_chain+0x4c>
 8004fa2:	69eb      	ldr	r3, [r5, #28]
 8004fa4:	42b3      	cmp	r3, r6
 8004fa6:	bf98      	it	ls
 8004fa8:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 8004faa:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8004fac:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004fae:	69eb      	ldr	r3, [r5, #28]
 8004fb0:	42a3      	cmp	r3, r4
 8004fb2:	d817      	bhi.n	8004fe4 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 8004fb4:	2e01      	cmp	r6, #1
 8004fb6:	d814      	bhi.n	8004fe2 <create_chain+0x50>
 8004fb8:	2400      	movs	r4, #0
 8004fba:	e006      	b.n	8004fca <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f7ff ff4d 	bl	8004e5c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004fc2:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004fc4:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004fc6:	d803      	bhi.n	8004fd0 <create_chain+0x3e>
 8004fc8:	2401      	movs	r4, #1
}
 8004fca:	4620      	mov	r0, r4
 8004fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	d030      	beq.n	8005036 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004fd4:	69eb      	ldr	r3, [r5, #28]
 8004fd6:	4283      	cmp	r3, r0
 8004fd8:	d8f7      	bhi.n	8004fca <create_chain+0x38>
 8004fda:	463e      	mov	r6, r7
 8004fdc:	e7e5      	b.n	8004faa <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004fde:	2601      	movs	r6, #1
 8004fe0:	e7e3      	b.n	8004faa <create_chain+0x18>
				ncl = 2;
 8004fe2:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004fe4:	4621      	mov	r1, r4
 8004fe6:	f8d8 0000 	ldr.w	r0, [r8]
 8004fea:	f7ff ff37 	bl	8004e5c <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8004fee:	b130      	cbz	r0, 8004ffe <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004ff0:	2801      	cmp	r0, #1
 8004ff2:	d0e9      	beq.n	8004fc8 <create_chain+0x36>
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d01e      	beq.n	8005036 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8004ff8:	42b4      	cmp	r4, r6
 8004ffa:	d1d7      	bne.n	8004fac <create_chain+0x1a>
 8004ffc:	e7dc      	b.n	8004fb8 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004ffe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005002:	4621      	mov	r1, r4
 8005004:	4628      	mov	r0, r5
 8005006:	f7ff feab 	bl	8004d60 <put_fat>
		if (res == FR_OK && clst != 0) {
 800500a:	b990      	cbnz	r0, 8005032 <create_chain+0xa0>
 800500c:	b957      	cbnz	r7, 8005024 <create_chain+0x92>
		fs->last_clst = ncl;
 800500e:	616c      	str	r4, [r5, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005010:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8005014:	3a02      	subs	r2, #2
 8005016:	4293      	cmp	r3, r2
 8005018:	d910      	bls.n	800503c <create_chain+0xaa>
		fs->fsi_flag |= 1;
 800501a:	792b      	ldrb	r3, [r5, #4]
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	712b      	strb	r3, [r5, #4]
 8005022:	e7d2      	b.n	8004fca <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005024:	4622      	mov	r2, r4
 8005026:	4639      	mov	r1, r7
 8005028:	4628      	mov	r0, r5
 800502a:	f7ff fe99 	bl	8004d60 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800502e:	2800      	cmp	r0, #0
 8005030:	d0ed      	beq.n	800500e <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005032:	2801      	cmp	r0, #1
 8005034:	d1c8      	bne.n	8004fc8 <create_chain+0x36>
 8005036:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800503a:	e7c6      	b.n	8004fca <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800503c:	3b01      	subs	r3, #1
 800503e:	61ab      	str	r3, [r5, #24]
 8005040:	e7eb      	b.n	800501a <create_chain+0x88>

08005042 <remove_chain>:
{
 8005042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005044:	460c      	mov	r4, r1
 8005046:	4606      	mov	r6, r0
 8005048:	4611      	mov	r1, r2
	FATFS *fs = obj->fs;
 800504a:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800504c:	2c01      	cmp	r4, #1
 800504e:	d92c      	bls.n	80050aa <remove_chain+0x68>
 8005050:	69eb      	ldr	r3, [r5, #28]
 8005052:	42a3      	cmp	r3, r4
 8005054:	d929      	bls.n	80050aa <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005056:	b12a      	cbz	r2, 8005064 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800505c:	4628      	mov	r0, r5
 800505e:	f7ff fe7f 	bl	8004d60 <put_fat>
		if (res != FR_OK) return res;
 8005062:	b940      	cbnz	r0, 8005076 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005064:	4621      	mov	r1, r4
 8005066:	6830      	ldr	r0, [r6, #0]
 8005068:	9401      	str	r4, [sp, #4]
 800506a:	f7ff fef7 	bl	8004e5c <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 800506e:	9901      	ldr	r1, [sp, #4]
 8005070:	4604      	mov	r4, r0
 8005072:	b910      	cbnz	r0, 800507a <remove_chain+0x38>
	return FR_OK;
 8005074:	2000      	movs	r0, #0
}
 8005076:	b002      	add	sp, #8
 8005078:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800507a:	2801      	cmp	r0, #1
 800507c:	d015      	beq.n	80050aa <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d015      	beq.n	80050ae <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005082:	2200      	movs	r2, #0
 8005084:	4628      	mov	r0, r5
 8005086:	f7ff fe6b 	bl	8004d60 <put_fat>
			if (res != FR_OK) return res;
 800508a:	2800      	cmp	r0, #0
 800508c:	d1f3      	bne.n	8005076 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800508e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
 8005092:	1e91      	subs	r1, r2, #2
 8005094:	428b      	cmp	r3, r1
 8005096:	d205      	bcs.n	80050a4 <remove_chain+0x62>
			fs->free_clst++;
 8005098:	3301      	adds	r3, #1
 800509a:	61ab      	str	r3, [r5, #24]
			fs->fsi_flag |= 1;
 800509c:	792b      	ldrb	r3, [r5, #4]
 800509e:	f043 0301 	orr.w	r3, r3, #1
 80050a2:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80050a4:	42a2      	cmp	r2, r4
 80050a6:	d8dd      	bhi.n	8005064 <remove_chain+0x22>
 80050a8:	e7e4      	b.n	8005074 <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80050aa:	2002      	movs	r0, #2
 80050ac:	e7e3      	b.n	8005076 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80050ae:	2001      	movs	r0, #1
 80050b0:	e7e1      	b.n	8005076 <remove_chain+0x34>

080050b2 <unlock_fs>:
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80050b2:	b140      	cbz	r0, 80050c6 <unlock_fs+0x14>
 80050b4:	f1a1 030b 	sub.w	r3, r1, #11
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d904      	bls.n	80050c6 <unlock_fs+0x14>
 80050bc:	290f      	cmp	r1, #15
 80050be:	d002      	beq.n	80050c6 <unlock_fs+0x14>
		ff_rel_grant(fs->sobj);
 80050c0:	6900      	ldr	r0, [r0, #16]
 80050c2:	f001 b967 	b.w	8006394 <ff_rel_grant>
}
 80050c6:	4770      	bx	lr

080050c8 <sync_fs>:
{
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	4604      	mov	r4, r0
	res = sync_window(fs);
 80050cc:	f7ff fdeb 	bl	8004ca6 <sync_window>
 80050d0:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d142      	bne.n	800515c <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80050d6:	7823      	ldrb	r3, [r4, #0]
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d137      	bne.n	800514c <sync_fs+0x84>
 80050dc:	7927      	ldrb	r7, [r4, #4]
 80050de:	2f01      	cmp	r7, #1
 80050e0:	d134      	bne.n	800514c <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 80050e2:	f104 0638 	add.w	r6, r4, #56	; 0x38
 80050e6:	4601      	mov	r1, r0
 80050e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ec:	4630      	mov	r0, r6
 80050ee:	f7ff fcad 	bl	8004a4c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80050f2:	2355      	movs	r3, #85	; 0x55
	*ptr++ = (BYTE)val;
 80050f4:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80050f6:	2172      	movs	r1, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 80050f8:	f884 3236 	strb.w	r3, [r4, #566]	; 0x236
	*ptr++ = (BYTE)val;
 80050fc:	23aa      	movs	r3, #170	; 0xaa
	*ptr++ = (BYTE)val;
 80050fe:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005102:	f504 7008 	add.w	r0, r4, #544	; 0x220
	*ptr++ = (BYTE)val;
 8005106:	f884 3237 	strb.w	r3, [r4, #567]	; 0x237
	*ptr++ = (BYTE)val; val >>= 8;
 800510a:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 800510c:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val; val >>= 8;
 8005110:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	*ptr++ = (BYTE)val; val >>= 8;
 8005114:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	*ptr++ = (BYTE)val; val >>= 8;
 8005118:	2361      	movs	r3, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800511a:	f884 121c 	strb.w	r1, [r4, #540]	; 0x21c
	*ptr++ = (BYTE)val; val >>= 8;
 800511e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	*ptr++ = (BYTE)val;
 8005122:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8005126:	f884 121d 	strb.w	r1, [r4, #541]	; 0x21d
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800512a:	69a1      	ldr	r1, [r4, #24]
 800512c:	f7ff fc86 	bl	8004a3c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005130:	6961      	ldr	r1, [r4, #20]
 8005132:	f504 7009 	add.w	r0, r4, #548	; 0x224
 8005136:	f7ff fc81 	bl	8004a3c <st_dword>
			fs->winsect = fs->volbase + 1;
 800513a:	6a62      	ldr	r2, [r4, #36]	; 0x24
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800513c:	463b      	mov	r3, r7
 800513e:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 8005140:	3201      	adds	r2, #1
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005142:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8005144:	6362      	str	r2, [r4, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005146:	f7ff fc55 	bl	80049f4 <disk_write>
			fs->fsi_flag = 0;
 800514a:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800514c:	2200      	movs	r2, #0
 800514e:	7860      	ldrb	r0, [r4, #1]
 8005150:	4611      	mov	r1, r2
 8005152:	f7ff fc5d 	bl	8004a10 <disk_ioctl>
	res = sync_window(fs);
 8005156:	3800      	subs	r0, #0
 8005158:	bf18      	it	ne
 800515a:	2001      	movne	r0, #1
}
 800515c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800515e <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800515e:	6943      	ldr	r3, [r0, #20]
{
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005164:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005168:	69c3      	ldr	r3, [r0, #28]
{
 800516a:	4605      	mov	r5, r0
 800516c:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800516e:	b193      	cbz	r3, 8005196 <dir_next+0x38>
 8005170:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8005174:	d20f      	bcs.n	8005196 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005176:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 800517a:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800517c:	f1b9 0f00 	cmp.w	r9, #0
 8005180:	d14d      	bne.n	800521e <dir_next+0xc0>
		dp->sect++;				/* Next sector */
 8005182:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8005184:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8005186:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8005188:	b939      	cbnz	r1, 800519a <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800518a:	8923      	ldrh	r3, [r4, #8]
 800518c:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8005190:	d845      	bhi.n	800521e <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8005192:	2300      	movs	r3, #0
 8005194:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005196:	2004      	movs	r0, #4
 8005198:	e00b      	b.n	80051b2 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800519a:	8967      	ldrh	r7, [r4, #10]
 800519c:	3f01      	subs	r7, #1
 800519e:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 80051a2:	d13c      	bne.n	800521e <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80051a4:	4620      	mov	r0, r4
 80051a6:	f7ff fe59 	bl	8004e5c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80051aa:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80051ac:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80051ae:	d802      	bhi.n	80051b6 <dir_next+0x58>
 80051b0:	2002      	movs	r0, #2
}
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80051b6:	1c42      	adds	r2, r0, #1
 80051b8:	d101      	bne.n	80051be <dir_next+0x60>
 80051ba:	2001      	movs	r0, #1
 80051bc:	e7f9      	b.n	80051b2 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80051be:	69e3      	ldr	r3, [r4, #28]
 80051c0:	4283      	cmp	r3, r0
 80051c2:	d826      	bhi.n	8005212 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 80051c4:	f1ba 0f00 	cmp.w	sl, #0
 80051c8:	d0e3      	beq.n	8005192 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80051ca:	69a9      	ldr	r1, [r5, #24]
 80051cc:	4628      	mov	r0, r5
 80051ce:	f7ff fee0 	bl	8004f92 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80051d2:	4606      	mov	r6, r0
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d035      	beq.n	8005244 <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80051d8:	2801      	cmp	r0, #1
 80051da:	d0e9      	beq.n	80051b0 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	d0ec      	beq.n	80051ba <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80051e0:	4620      	mov	r0, r4
 80051e2:	f7ff fd60 	bl	8004ca6 <sync_window>
 80051e6:	4601      	mov	r1, r0
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d1e6      	bne.n	80051ba <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80051ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
						fs->wflag = 1;
 80051f4:	f04f 0a01 	mov.w	sl, #1
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80051f8:	f7ff fc28 	bl	8004a4c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80051fc:	4631      	mov	r1, r6
 80051fe:	4620      	mov	r0, r4
 8005200:	f7ff fcc4 	bl	8004b8c <clust2sect>
 8005204:	6360      	str	r0, [r4, #52]	; 0x34
 8005206:	8963      	ldrh	r3, [r4, #10]
 8005208:	429f      	cmp	r7, r3
 800520a:	d30f      	bcc.n	800522c <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 800520c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800520e:	1bdf      	subs	r7, r3, r7
 8005210:	6367      	str	r7, [r4, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8005212:	4631      	mov	r1, r6
 8005214:	4620      	mov	r0, r4
				dp->clust = clst;		/* Initialize data for new cluster */
 8005216:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8005218:	f7ff fcb8 	bl	8004b8c <clust2sect>
 800521c:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800521e:	3438      	adds	r4, #56	; 0x38
	return FR_OK;
 8005220:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8005222:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005226:	444c      	add	r4, r9
 8005228:	622c      	str	r4, [r5, #32]
	return FR_OK;
 800522a:	e7c2      	b.n	80051b2 <dir_next+0x54>
						fs->wflag = 1;
 800522c:	4620      	mov	r0, r4
 800522e:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005232:	f7ff fd12 	bl	8004c5a <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005236:	2800      	cmp	r0, #0
 8005238:	d1bf      	bne.n	80051ba <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800523a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800523c:	3701      	adds	r7, #1
 800523e:	3301      	adds	r3, #1
 8005240:	6363      	str	r3, [r4, #52]	; 0x34
 8005242:	e7e0      	b.n	8005206 <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005244:	2007      	movs	r0, #7
 8005246:	e7b4      	b.n	80051b2 <dir_next+0x54>

08005248 <dir_find>:
{
 8005248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800524c:	2100      	movs	r1, #0
{
 800524e:	b085      	sub	sp, #20
 8005250:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8005252:	f8d0 a000 	ldr.w	sl, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005256:	f7ff fe5b 	bl	8004f10 <dir_sdi>
	if (res != FR_OK) return res;
 800525a:	4607      	mov	r7, r0
 800525c:	2800      	cmp	r0, #0
 800525e:	f040 809b 	bne.w	8005398 <dir_find+0x150>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005262:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8005266:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800526a:	46c8      	mov	r8, r9
 800526c:	6323      	str	r3, [r4, #48]	; 0x30
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800526e:	9300      	str	r3, [sp, #0]
		res = move_window(fs, dp->sect);
 8005270:	69e1      	ldr	r1, [r4, #28]
 8005272:	4650      	mov	r0, sl
 8005274:	f7ff fd1d 	bl	8004cb2 <move_window>
		if (res != FR_OK) break;
 8005278:	4607      	mov	r7, r0
 800527a:	2800      	cmp	r0, #0
 800527c:	f040 808c 	bne.w	8005398 <dir_find+0x150>
		c = dp->dir[DIR_Name];
 8005280:	6a25      	ldr	r5, [r4, #32]
 8005282:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005284:	2e00      	cmp	r6, #0
 8005286:	f000 808b 	beq.w	80053a0 <dir_find+0x158>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800528a:	7aea      	ldrb	r2, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800528c:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800528e:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8005292:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005294:	d003      	beq.n	800529e <dir_find+0x56>
 8005296:	0710      	lsls	r0, r2, #28
 8005298:	d504      	bpl.n	80052a4 <dir_find+0x5c>
 800529a:	2b0f      	cmp	r3, #15
 800529c:	d004      	beq.n	80052a8 <dir_find+0x60>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800529e:	9b00      	ldr	r3, [sp, #0]
 80052a0:	6323      	str	r3, [r4, #48]	; 0x30
 80052a2:	e053      	b.n	800534c <dir_find+0x104>
			if (a == AM_LFN) {			/* An LFN entry is found */
 80052a4:	2b0f      	cmp	r3, #15
 80052a6:	d159      	bne.n	800535c <dir_find+0x114>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80052a8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80052ac:	0659      	lsls	r1, r3, #25
 80052ae:	d443      	bmi.n	8005338 <dir_find+0xf0>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80052b0:	0672      	lsls	r2, r6, #25
 80052b2:	d549      	bpl.n	8005348 <dir_find+0x100>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80052b4:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80052b6:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 80052ba:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80052be:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80052c0:	7b6b      	ldrb	r3, [r5, #13]
 80052c2:	454b      	cmp	r3, r9
 80052c4:	d142      	bne.n	800534c <dir_find+0x104>
	rv = rv << 8 | ptr[0];
 80052c6:	7eea      	ldrb	r2, [r5, #27]
 80052c8:	7eab      	ldrb	r3, [r5, #26]
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80052ca:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80052ce:	d13d      	bne.n	800534c <dir_find+0x104>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80052d0:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052d2:	2201      	movs	r2, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80052d4:	f8da b00c 	ldr.w	fp, [sl, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80052d8:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 80052dc:	1e7b      	subs	r3, r7, #1
 80052de:	270d      	movs	r7, #13
 80052e0:	435f      	muls	r7, r3
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80052e2:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <dir_find+0x15c>)
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80052e4:	f813 1b01 	ldrb.w	r1, [r3], #1
 80052e8:	1868      	adds	r0, r5, r1
	rv = rv << 8 | ptr[0];
 80052ea:	f815 8001 	ldrb.w	r8, [r5, r1]
 80052ee:	7840      	ldrb	r0, [r0, #1]
 80052f0:	ea48 2800 	orr.w	r8, r8, r0, lsl #8
		if (wc) {
 80052f4:	b36a      	cbz	r2, 8005352 <dir_find+0x10a>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80052f6:	2f1f      	cmp	r7, #31
 80052f8:	9303      	str	r3, [sp, #12]
 80052fa:	d827      	bhi.n	800534c <dir_find+0x104>
 80052fc:	4640      	mov	r0, r8
 80052fe:	f000 ffeb 	bl	80062d8 <ff_wtoupper>
 8005302:	1c79      	adds	r1, r7, #1
 8005304:	9002      	str	r0, [sp, #8]
 8005306:	f83b 0017 	ldrh.w	r0, [fp, r7, lsl #1]
 800530a:	9101      	str	r1, [sp, #4]
 800530c:	f000 ffe4 	bl	80062d8 <ff_wtoupper>
 8005310:	9a02      	ldr	r2, [sp, #8]
 8005312:	4282      	cmp	r2, r0
 8005314:	d11a      	bne.n	800534c <dir_find+0x104>
 8005316:	9901      	ldr	r1, [sp, #4]
	rv = rv << 8 | ptr[0];
 8005318:	4642      	mov	r2, r8
 800531a:	9b03      	ldr	r3, [sp, #12]
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800531c:	460f      	mov	r7, r1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800531e:	4922      	ldr	r1, [pc, #136]	; (80053a8 <dir_find+0x160>)
 8005320:	4299      	cmp	r1, r3
 8005322:	d1df      	bne.n	80052e4 <dir_find+0x9c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005324:	782b      	ldrb	r3, [r5, #0]
 8005326:	065b      	lsls	r3, r3, #25
 8005328:	d503      	bpl.n	8005332 <dir_find+0xea>
 800532a:	b112      	cbz	r2, 8005332 <dir_find+0xea>
 800532c:	f83b 3017 	ldrh.w	r3, [fp, r7, lsl #1]
 8005330:	b963      	cbnz	r3, 800534c <dir_find+0x104>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005332:	3e01      	subs	r6, #1
 8005334:	fa5f f886 	uxtb.w	r8, r6
		res = dir_next(dp, 0);	/* Next entry */
 8005338:	2100      	movs	r1, #0
 800533a:	4620      	mov	r0, r4
 800533c:	f7ff ff0f 	bl	800515e <dir_next>
	} while (res == FR_OK);
 8005340:	4607      	mov	r7, r0
 8005342:	2800      	cmp	r0, #0
 8005344:	d094      	beq.n	8005270 <dir_find+0x28>
 8005346:	e027      	b.n	8005398 <dir_find+0x150>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005348:	45b0      	cmp	r8, r6
 800534a:	d0b9      	beq.n	80052c0 <dir_find+0x78>
 800534c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8005350:	e7f2      	b.n	8005338 <dir_find+0xf0>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005352:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005356:	4588      	cmp	r8, r1
 8005358:	d0e1      	beq.n	800531e <dir_find+0xd6>
 800535a:	e7f7      	b.n	800534c <dir_find+0x104>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800535c:	f1b8 0f00 	cmp.w	r8, #0
 8005360:	d104      	bne.n	800536c <dir_find+0x124>
 8005362:	4628      	mov	r0, r5
 8005364:	f7ff fc2e 	bl	8004bc4 <sum_sfn>
 8005368:	4548      	cmp	r0, r9
 800536a:	d015      	beq.n	8005398 <dir_find+0x150>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800536c:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 8005370:	f017 0701 	ands.w	r7, r7, #1
 8005374:	d193      	bne.n	800529e <dir_find+0x56>
 8005376:	f104 0224 	add.w	r2, r4, #36	; 0x24
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800537a:	f105 010b 	add.w	r1, r5, #11
		r = *d++ - *s++;
 800537e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005382:	f812 0b01 	ldrb.w	r0, [r2], #1
	} while (--cnt && r == 0);
 8005386:	428d      	cmp	r5, r1
		r = *d++ - *s++;
 8005388:	eba3 0300 	sub.w	r3, r3, r0
	} while (--cnt && r == 0);
 800538c:	d002      	beq.n	8005394 <dir_find+0x14c>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f5      	beq.n	800537e <dir_find+0x136>
 8005392:	e784      	b.n	800529e <dir_find+0x56>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005394:	2b00      	cmp	r3, #0
 8005396:	d182      	bne.n	800529e <dir_find+0x56>
}
 8005398:	4638      	mov	r0, r7
 800539a:	b005      	add	sp, #20
 800539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053a0:	2704      	movs	r7, #4
 80053a2:	e7f9      	b.n	8005398 <dir_find+0x150>
 80053a4:	08012bdd 	.word	0x08012bdd
 80053a8:	08012bea 	.word	0x08012bea

080053ac <dir_register>:
{
 80053ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80053b0:	f890 502f 	ldrb.w	r5, [r0, #47]	; 0x2f
{
 80053b4:	b089      	sub	sp, #36	; 0x24
 80053b6:	4604      	mov	r4, r0
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80053b8:	f015 05a0 	ands.w	r5, r5, #160	; 0xa0
 80053bc:	f040 808d 	bne.w	80054da <dir_register+0x12e>
	FATFS *fs = dp->obj.fs;
 80053c0:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80053c2:	68f2      	ldr	r2, [r6, #12]
 80053c4:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d165      	bne.n	8005498 <dir_register+0xec>
	mem_cpy(sn, dp->fn, 12);
 80053cc:	f104 0724 	add.w	r7, r4, #36	; 0x24
	if (cnt) {
 80053d0:	220c      	movs	r2, #12
 80053d2:	a805      	add	r0, sp, #20
 80053d4:	4639      	mov	r1, r7
 80053d6:	f7ff fc1c 	bl	8004c12 <mem_cpy.part.0>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80053da:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80053de:	07db      	lsls	r3, r3, #31
 80053e0:	f140 8084 	bpl.w	80054ec <dir_register+0x140>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80053e4:	2340      	movs	r3, #64	; 0x40
		for (n = 1; n < 100; n++) {
 80053e6:	f04f 0a01 	mov.w	sl, #1
				if (sr & 0x10000) sr ^= 0x11021;
 80053ea:	f8df 8234 	ldr.w	r8, [pc, #564]	; 8005620 <dir_register+0x274>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80053ee:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80053f2:	220b      	movs	r2, #11
 80053f4:	a905      	add	r1, sp, #20
 80053f6:	4638      	mov	r0, r7
 80053f8:	f8d6 900c 	ldr.w	r9, [r6, #12]
	if (cnt) {
 80053fc:	f7ff fc09 	bl	8004c12 <mem_cpy.part.0>
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005400:	f1ba 0f05 	cmp.w	sl, #5
 8005404:	d958      	bls.n	80054b8 <dir_register+0x10c>
 8005406:	f1a9 0102 	sub.w	r1, r9, #2
 800540a:	4653      	mov	r3, sl
		while (*lfn) {	/* Create a CRC */
 800540c:	f831 2f02 	ldrh.w	r2, [r1, #2]!
 8005410:	2a00      	cmp	r2, #0
 8005412:	d143      	bne.n	800549c <dir_register+0xf0>
 8005414:	f10d 0013 	add.w	r0, sp, #19
 8005418:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 800541a:	f003 0c0f 	and.w	ip, r3, #15
		ns[i--] = c;
 800541e:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
 8005420:	f10c 0130 	add.w	r1, ip, #48	; 0x30
		if (c > '9') c += 7;
 8005424:	2939      	cmp	r1, #57	; 0x39
 8005426:	bf88      	it	hi
 8005428:	f10c 0137 	addhi.w	r1, ip, #55	; 0x37
	} while (seq);
 800542c:	2b0f      	cmp	r3, #15
		ns[i--] = c;
 800542e:	f800 1901 	strb.w	r1, [r0], #-1
		seq /= 16;
 8005432:	ea4f 1113 	mov.w	r1, r3, lsr #4
	} while (seq);
 8005436:	d841      	bhi.n	80054bc <dir_register+0x110>
	ns[i] = '~';
 8005438:	ab08      	add	r3, sp, #32
 800543a:	217e      	movs	r1, #126	; 0x7e
 800543c:	4413      	add	r3, r2
 800543e:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005442:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8005446:	2300      	movs	r3, #0
 8005448:	4608      	mov	r0, r1
 800544a:	429a      	cmp	r2, r3
 800544c:	d006      	beq.n	800545c <dir_register+0xb0>
 800544e:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 8005452:	f103 0e01 	add.w	lr, r3, #1
 8005456:	f1bc 0f20 	cmp.w	ip, #32
 800545a:	d131      	bne.n	80054c0 <dir_register+0x114>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800545c:	2a07      	cmp	r2, #7
 800545e:	f103 0301 	add.w	r3, r3, #1
 8005462:	bf97      	itett	ls
 8005464:	a808      	addls	r0, sp, #32
 8005466:	2020      	movhi	r0, #32
 8005468:	1880      	addls	r0, r0, r2
 800546a:	3201      	addls	r2, #1
 800546c:	bf98      	it	ls
 800546e:	f810 0c14 	ldrbls.w	r0, [r0, #-20]
	} while (j < 8);
 8005472:	2b07      	cmp	r3, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005474:	54c8      	strb	r0, [r1, r3]
	} while (j < 8);
 8005476:	d9f1      	bls.n	800545c <dir_register+0xb0>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005478:	4620      	mov	r0, r4
 800547a:	f7ff fee5 	bl	8005248 <dir_find>
 800547e:	4681      	mov	r9, r0
			if (res != FR_OK) break;
 8005480:	bb70      	cbnz	r0, 80054e0 <dir_register+0x134>
		for (n = 1; n < 100; n++) {
 8005482:	f10a 0a01 	add.w	sl, sl, #1
 8005486:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 800548a:	d1b2      	bne.n	80053f2 <dir_register+0x46>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800548c:	f04f 0907 	mov.w	r9, #7
}
 8005490:	4648      	mov	r0, r9
 8005492:	b009      	add	sp, #36	; 0x24
 8005494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005498:	3501      	adds	r5, #1
 800549a:	e793      	b.n	80053c4 <dir_register+0x18>
 800549c:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 800549e:	f002 0c01 	and.w	ip, r2, #1
				wc >>= 1;
 80054a2:	0852      	lsrs	r2, r2, #1
				sr = (sr << 1) + (wc & 1);
 80054a4:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80054a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80054ac:	bf18      	it	ne
 80054ae:	ea83 0308 	eorne.w	r3, r3, r8
			for (i = 0; i < 16; i++) {
 80054b2:	3801      	subs	r0, #1
 80054b4:	d1f3      	bne.n	800549e <dir_register+0xf2>
 80054b6:	e7a9      	b.n	800540c <dir_register+0x60>
 80054b8:	4653      	mov	r3, sl
 80054ba:	e7ab      	b.n	8005414 <dir_register+0x68>
		seq /= 16;
 80054bc:	460b      	mov	r3, r1
 80054be:	e7ac      	b.n	800541a <dir_register+0x6e>
 80054c0:	4673      	mov	r3, lr
 80054c2:	e7c2      	b.n	800544a <dir_register+0x9e>
				n = 0;					/* Not a blank entry. Restart to search */
 80054c4:	4680      	mov	r8, r0
			res = dir_next(dp, 1);
 80054c6:	2101      	movs	r1, #1
 80054c8:	4620      	mov	r0, r4
 80054ca:	f7ff fe48 	bl	800515e <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80054ce:	4681      	mov	r9, r0
 80054d0:	b308      	cbz	r0, 8005516 <dir_register+0x16a>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80054d2:	f1b9 0f04 	cmp.w	r9, #4
 80054d6:	d0d9      	beq.n	800548c <dir_register+0xe0>
 80054d8:	e7da      	b.n	8005490 <dir_register+0xe4>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80054da:	f04f 0906 	mov.w	r9, #6
 80054de:	e7d7      	b.n	8005490 <dir_register+0xe4>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80054e0:	2804      	cmp	r0, #4
 80054e2:	d1d5      	bne.n	8005490 <dir_register+0xe4>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80054e4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80054e8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80054ec:	f89d 301f 	ldrb.w	r3, [sp, #31]
	res = dir_sdi(dp, 0);
 80054f0:	2100      	movs	r1, #0
 80054f2:	4620      	mov	r0, r4
	FATFS *fs = dp->obj.fs;
 80054f4:	f8d4 a000 	ldr.w	sl, [r4]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80054f8:	079b      	lsls	r3, r3, #30
 80054fa:	bf45      	ittet	mi
 80054fc:	350c      	addmi	r5, #12
 80054fe:	230d      	movmi	r3, #13
 8005500:	2501      	movpl	r5, #1
 8005502:	fbb5 f5f3 	udivmi	r5, r5, r3
 8005506:	bf48      	it	mi
 8005508:	3501      	addmi	r5, #1
	res = dir_sdi(dp, 0);
 800550a:	f7ff fd01 	bl	8004f10 <dir_sdi>
	if (res == FR_OK) {
 800550e:	4681      	mov	r9, r0
 8005510:	2800      	cmp	r0, #0
 8005512:	d1de      	bne.n	80054d2 <dir_register+0x126>
		n = 0;
 8005514:	4680      	mov	r8, r0
			res = move_window(fs, dp->sect);
 8005516:	69e1      	ldr	r1, [r4, #28]
 8005518:	4650      	mov	r0, sl
 800551a:	f7ff fbca 	bl	8004cb2 <move_window>
			if (res != FR_OK) break;
 800551e:	4681      	mov	r9, r0
 8005520:	2800      	cmp	r0, #0
 8005522:	d1d6      	bne.n	80054d2 <dir_register+0x126>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005524:	6a23      	ldr	r3, [r4, #32]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2be5      	cmp	r3, #229	; 0xe5
 800552a:	d001      	beq.n	8005530 <dir_register+0x184>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1c9      	bne.n	80054c4 <dir_register+0x118>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005530:	f108 0801 	add.w	r8, r8, #1
 8005534:	4545      	cmp	r5, r8
 8005536:	d1c6      	bne.n	80054c6 <dir_register+0x11a>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005538:	3d01      	subs	r5, #1
 800553a:	d055      	beq.n	80055e8 <dir_register+0x23c>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800553c:	6961      	ldr	r1, [r4, #20]
 800553e:	4620      	mov	r0, r4
 8005540:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8005544:	f7ff fce4 	bl	8004f10 <dir_sdi>
		if (res == FR_OK) {
 8005548:	4681      	mov	r9, r0
 800554a:	2800      	cmp	r0, #0
 800554c:	d1a0      	bne.n	8005490 <dir_register+0xe4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800554e:	f64f 78ff 	movw	r8, #65535	; 0xffff
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005552:	4638      	mov	r0, r7
 8005554:	f7ff fb36 	bl	8004bc4 <sum_sfn>
 8005558:	9001      	str	r0, [sp, #4]
				res = move_window(fs, dp->sect);
 800555a:	69e1      	ldr	r1, [r4, #28]
 800555c:	4630      	mov	r0, r6
 800555e:	f7ff fba8 	bl	8004cb2 <move_window>
 8005562:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 8005564:	2800      	cmp	r0, #0
 8005566:	d193      	bne.n	8005490 <dir_register+0xe4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005568:	6a23      	ldr	r3, [r4, #32]
 800556a:	b2e9      	uxtb	r1, r5
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800556c:	9a01      	ldr	r2, [sp, #4]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800556e:	f04f 0c0d 	mov.w	ip, #13
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005572:	f8d6 e00c 	ldr.w	lr, [r6, #12]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005576:	735a      	strb	r2, [r3, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005578:	f04f 020f 	mov.w	r2, #15
 800557c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8005624 <dir_register+0x278>
 8005580:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005582:	1e4a      	subs	r2, r1, #1
	dir[LDIR_Type] = 0;
 8005584:	7318      	strb	r0, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005586:	fb0c f202 	mul.w	r2, ip, r2
	s = wc = 0;
 800558a:	4684      	mov	ip, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800558c:	7698      	strb	r0, [r3, #26]
	*ptr++ = (BYTE)val;
 800558e:	76d8      	strb	r0, [r3, #27]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005590:	4540      	cmp	r0, r8
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005592:	f81a 9b01 	ldrb.w	r9, [sl], #1
	} while (++s < 13);
 8005596:	f10c 0c01 	add.w	ip, ip, #1
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800559a:	bf18      	it	ne
 800559c:	f83e 0012 	ldrhne.w	r0, [lr, r2, lsl #1]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80055a0:	eb03 0b09 	add.w	fp, r3, r9
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80055a4:	bf18      	it	ne
 80055a6:	3201      	addne	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 80055a8:	f803 0009 	strb.w	r0, [r3, r9]
 80055ac:	ea4f 2910 	mov.w	r9, r0, lsr #8
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80055b0:	2800      	cmp	r0, #0
 80055b2:	bf08      	it	eq
 80055b4:	4640      	moveq	r0, r8
	} while (++s < 13);
 80055b6:	f1bc 0f0d 	cmp.w	ip, #13
	*ptr++ = (BYTE)val;
 80055ba:	f88b 9001 	strb.w	r9, [fp, #1]
	} while (++s < 13);
 80055be:	d1e7      	bne.n	8005590 <dir_register+0x1e4>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80055c0:	4540      	cmp	r0, r8
 80055c2:	d002      	beq.n	80055ca <dir_register+0x21e>
 80055c4:	f83e 2012 	ldrh.w	r2, [lr, r2, lsl #1]
 80055c8:	b90a      	cbnz	r2, 80055ce <dir_register+0x222>
 80055ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80055ce:	7019      	strb	r1, [r3, #0]
				fs->wflag = 1;
 80055d0:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 80055d2:	2100      	movs	r1, #0
 80055d4:	4620      	mov	r0, r4
				fs->wflag = 1;
 80055d6:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80055d8:	f7ff fdc1 	bl	800515e <dir_next>
			} while (res == FR_OK && --nent);
 80055dc:	4681      	mov	r9, r0
 80055de:	2800      	cmp	r0, #0
 80055e0:	f47f af56 	bne.w	8005490 <dir_register+0xe4>
 80055e4:	3d01      	subs	r5, #1
 80055e6:	d1b8      	bne.n	800555a <dir_register+0x1ae>
		res = move_window(fs, dp->sect);
 80055e8:	69e1      	ldr	r1, [r4, #28]
 80055ea:	4630      	mov	r0, r6
 80055ec:	f7ff fb61 	bl	8004cb2 <move_window>
		if (res == FR_OK) {
 80055f0:	4681      	mov	r9, r0
 80055f2:	2800      	cmp	r0, #0
 80055f4:	f47f af4c 	bne.w	8005490 <dir_register+0xe4>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80055f8:	4601      	mov	r1, r0
 80055fa:	2220      	movs	r2, #32
 80055fc:	6a20      	ldr	r0, [r4, #32]
 80055fe:	f7ff fa25 	bl	8004a4c <mem_set>
	if (cnt) {
 8005602:	220b      	movs	r2, #11
 8005604:	4639      	mov	r1, r7
 8005606:	6a20      	ldr	r0, [r4, #32]
 8005608:	f7ff fb03 	bl	8004c12 <mem_cpy.part.0>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800560c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005610:	6a22      	ldr	r2, [r4, #32]
 8005612:	f003 0318 	and.w	r3, r3, #24
 8005616:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 8005618:	2301      	movs	r3, #1
 800561a:	70f3      	strb	r3, [r6, #3]
 800561c:	e738      	b.n	8005490 <dir_register+0xe4>
 800561e:	bf00      	nop
 8005620:	00011021 	.word	0x00011021
 8005624:	08012bdd 	.word	0x08012bdd

08005628 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	460e      	mov	r6, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800562c:	4605      	mov	r5, r0
 800562e:	b920      	cbnz	r0, 800563a <validate+0x12>
		*fs = 0;
 8005630:	2300      	movs	r3, #0
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8005632:	2409      	movs	r4, #9
		*fs = 0;
 8005634:	6033      	str	r3, [r6, #0]
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8005636:	4620      	mov	r0, r4
 8005638:	bd70      	pop	{r4, r5, r6, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 800563a:	6803      	ldr	r3, [r0, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0f7      	beq.n	8005630 <validate+0x8>
 8005640:	781a      	ldrb	r2, [r3, #0]
 8005642:	2a00      	cmp	r2, #0
 8005644:	d0f4      	beq.n	8005630 <validate+0x8>
 8005646:	88d9      	ldrh	r1, [r3, #6]
 8005648:	8882      	ldrh	r2, [r0, #4]
 800564a:	4291      	cmp	r1, r2
 800564c:	d1f0      	bne.n	8005630 <validate+0x8>
 800564e:	7858      	ldrb	r0, [r3, #1]
 8005650:	f7ff f9a8 	bl	80049a4 <disk_status>
 8005654:	f010 0401 	ands.w	r4, r0, #1
 8005658:	d1ea      	bne.n	8005630 <validate+0x8>
		*fs = obj->fs;			/* Owner file sytem object */
 800565a:	682b      	ldr	r3, [r5, #0]
 800565c:	6033      	str	r3, [r6, #0]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800565e:	b123      	cbz	r3, 800566a <validate+0x42>
 8005660:	6918      	ldr	r0, [r3, #16]
 8005662:	f000 fe8e 	bl	8006382 <ff_req_grant>
 8005666:	2800      	cmp	r0, #0
 8005668:	d1e5      	bne.n	8005636 <validate+0xe>
		ENTER_FF(obj->fs);		/* Lock file system */
 800566a:	240f      	movs	r4, #15
 800566c:	e7e3      	b.n	8005636 <validate+0xe>
	...

08005670 <find_volume>:
	*rfs = 0;
 8005670:	2300      	movs	r3, #0
{
 8005672:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8005676:	600b      	str	r3, [r1, #0]
{
 8005678:	b085      	sub	sp, #20
 800567a:	460d      	mov	r5, r1
 800567c:	4617      	mov	r7, r2
	vol = get_ldnumber(path);
 800567e:	f7ff fab0 	bl	8004be2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005682:	1e06      	subs	r6, r0, #0
 8005684:	f2c0 8151 	blt.w	800592a <find_volume+0x2ba>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005688:	4bad      	ldr	r3, [pc, #692]	; (8005940 <find_volume+0x2d0>)
 800568a:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800568e:	2c00      	cmp	r4, #0
 8005690:	f000 814d 	beq.w	800592e <find_volume+0x2be>
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8005694:	6920      	ldr	r0, [r4, #16]
 8005696:	f000 fe74 	bl	8006382 <ff_req_grant>
 800569a:	2800      	cmp	r0, #0
 800569c:	f000 8149 	beq.w	8005932 <find_volume+0x2c2>
	*rfs = fs;							/* Return pointer to the file system object */
 80056a0:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80056a2:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80056a6:	7823      	ldrb	r3, [r4, #0]
 80056a8:	b17b      	cbz	r3, 80056ca <find_volume+0x5a>
		stat = disk_status(fs->drv);
 80056aa:	7860      	ldrb	r0, [r4, #1]
 80056ac:	f7ff f97a 	bl	80049a4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80056b0:	07c2      	lsls	r2, r0, #31
 80056b2:	d40a      	bmi.n	80056ca <find_volume+0x5a>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80056b4:	2f00      	cmp	r7, #0
 80056b6:	f000 813e 	beq.w	8005936 <find_volume+0x2c6>
 80056ba:	f010 0504 	ands.w	r5, r0, #4
 80056be:	d000      	beq.n	80056c2 <find_volume+0x52>
				return FR_WRITE_PROTECTED;
 80056c0:	250a      	movs	r5, #10
}
 80056c2:	4628      	mov	r0, r5
 80056c4:	b005      	add	sp, #20
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80056ca:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80056cc:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80056ce:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80056d0:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80056d2:	f7ff f971 	bl	80049b8 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80056d6:	f010 0501 	ands.w	r5, r0, #1
 80056da:	f040 812e 	bne.w	800593a <find_volume+0x2ca>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80056de:	b10f      	cbz	r7, 80056e4 <find_volume+0x74>
 80056e0:	0743      	lsls	r3, r0, #29
 80056e2:	d4ed      	bmi.n	80056c0 <find_volume+0x50>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80056e4:	2100      	movs	r1, #0
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff fafc 	bl	8004ce4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80056ec:	2802      	cmp	r0, #2
 80056ee:	f040 8101 	bne.w	80058f4 <find_volume+0x284>
 80056f2:	466e      	mov	r6, sp
 80056f4:	f504 71ff 	add.w	r1, r4, #510	; 0x1fe
 80056f8:	f204 283e 	addw	r8, r4, #574	; 0x23e
 80056fc:	4637      	mov	r7, r6
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80056fe:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8005702:	b110      	cbz	r0, 800570a <find_volume+0x9a>
 8005704:	4608      	mov	r0, r1
 8005706:	f7ff f991 	bl	8004a2c <ld_dword>
 800570a:	3110      	adds	r1, #16
 800570c:	f847 0b04 	str.w	r0, [r7], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005710:	4588      	cmp	r8, r1
 8005712:	d1f4      	bne.n	80056fe <find_volume+0x8e>
 8005714:	2700      	movs	r7, #0
			bsect = br[i];
 8005716:	f856 8b04 	ldr.w	r8, [r6], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800571a:	f1b8 0f00 	cmp.w	r8, #0
 800571e:	f000 80e0 	beq.w	80058e2 <find_volume+0x272>
 8005722:	4641      	mov	r1, r8
 8005724:	4620      	mov	r0, r4
 8005726:	f7ff fadd 	bl	8004ce4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800572a:	2801      	cmp	r0, #1
 800572c:	f200 80da 	bhi.w	80058e4 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 8005730:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8005734:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005738:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800573c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005740:	f040 80dc 	bne.w	80058fc <find_volume+0x28c>
	rv = rv << 8 | ptr[0];
 8005744:	f894 004f 	ldrb.w	r0, [r4, #79]	; 0x4f
 8005748:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800574c:	ea56 2600 	orrs.w	r6, r6, r0, lsl #8
 8005750:	d104      	bne.n	800575c <find_volume+0xec>
 8005752:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005756:	f7ff f969 	bl	8004a2c <ld_dword>
 800575a:	4606      	mov	r6, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800575c:	f894 9048 	ldrb.w	r9, [r4, #72]	; 0x48
		fs->fsize = fasize;
 8005760:	6226      	str	r6, [r4, #32]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005762:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005766:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800576a:	2b01      	cmp	r3, #1
 800576c:	f200 80c6 	bhi.w	80058fc <find_volume+0x28c>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005770:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 8005774:	8167      	strh	r7, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005776:	2f00      	cmp	r7, #0
 8005778:	f000 80c0 	beq.w	80058fc <find_volume+0x28c>
 800577c:	1e7b      	subs	r3, r7, #1
 800577e:	423b      	tst	r3, r7
 8005780:	f040 80bc 	bne.w	80058fc <find_volume+0x28c>
	rv = rv << 8 | ptr[0];
 8005784:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8005788:	f894 a049 	ldrb.w	sl, [r4, #73]	; 0x49
 800578c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005790:	f01a 0f0f 	tst.w	sl, #15
	rv = rv << 8 | ptr[0];
 8005794:	fa0f fb8a 	sxth.w	fp, sl
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005798:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800579c:	f040 80ae 	bne.w	80058fc <find_volume+0x28c>
	rv = rv << 8 | ptr[0];
 80057a0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80057a4:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80057a8:	ea50 2003 	orrs.w	r0, r0, r3, lsl #8
 80057ac:	d103      	bne.n	80057b6 <find_volume+0x146>
 80057ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057b2:	f7ff f93b 	bl	8004a2c <ld_dword>
	rv = rv << 8 | ptr[0];
 80057b6:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80057ba:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80057be:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 80057c2:	f000 809b 	beq.w	80058fc <find_volume+0x28c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80057c6:	fb06 fc09 	mul.w	ip, r6, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80057ca:	eb01 131a 	add.w	r3, r1, sl, lsr #4
 80057ce:	eb03 0e0c 	add.w	lr, r3, ip
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80057d2:	4570      	cmp	r0, lr
 80057d4:	f0c0 8092 	bcc.w	80058fc <find_volume+0x28c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80057d8:	eba0 000e 	sub.w	r0, r0, lr
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80057dc:	42b8      	cmp	r0, r7
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80057de:	fbb0 f3f7 	udiv	r3, r0, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80057e2:	f0c0 808b 	bcc.w	80058fc <find_volume+0x28c>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80057e6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f200 808b 	bhi.w	8005906 <find_volume+0x296>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80057f0:	f640 77f5 	movw	r7, #4085	; 0xff5
 80057f4:	42bb      	cmp	r3, r7
 80057f6:	bf8c      	ite	hi
 80057f8:	2702      	movhi	r7, #2
 80057fa:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80057fc:	f103 0902 	add.w	r9, r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005800:	4441      	add	r1, r8
		fs->database = bsect + sysect;					/* Data start sector */
 8005802:	eb0e 0308 	add.w	r3, lr, r8
		if (fmt == FS_FAT32) {
 8005806:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005808:	f8c4 901c 	str.w	r9, [r4, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800580c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005810:	62a1      	str	r1, [r4, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005812:	6323      	str	r3, [r4, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8005814:	d179      	bne.n	800590a <find_volume+0x29a>
	rv = rv << 8 | ptr[0];
 8005816:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 800581a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 800581e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005822:	ea4b 0b03 	orr.w	fp, fp, r3
 8005826:	fa0f f38b 	sxth.w	r3, fp
 800582a:	2b00      	cmp	r3, #0
 800582c:	d166      	bne.n	80058fc <find_volume+0x28c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800582e:	f104 0064 	add.w	r0, r4, #100	; 0x64
 8005832:	f7ff f8fb 	bl	8004a2c <ld_dword>
 8005836:	62e0      	str	r0, [r4, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005838:	ea4f 0389 	mov.w	r3, r9, lsl #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800583c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005840:	ebb6 2f53 	cmp.w	r6, r3, lsr #9
 8005844:	d35a      	bcc.n	80058fc <find_volume+0x28c>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800584a:	2f03      	cmp	r7, #3
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800584c:	e9c4 3305 	strd	r3, r3, [r4, #20]
		fs->fsi_flag = 0x80;
 8005850:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005854:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005856:	d130      	bne.n	80058ba <find_volume+0x24a>
	rv = rv << 8 | ptr[0];
 8005858:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 800585c:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8005860:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005864:	2b01      	cmp	r3, #1
 8005866:	d128      	bne.n	80058ba <find_volume+0x24a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005868:	f108 0101 	add.w	r1, r8, #1
 800586c:	4620      	mov	r0, r4
 800586e:	f7ff fa20 	bl	8004cb2 <move_window>
 8005872:	bb10      	cbnz	r0, 80058ba <find_volume+0x24a>
	rv = rv << 8 | ptr[0];
 8005874:	f894 2237 	ldrb.w	r2, [r4, #567]	; 0x237
 8005878:	f894 3236 	ldrb.w	r3, [r4, #566]	; 0x236
			fs->fsi_flag = 0;
 800587c:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 800587e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005882:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8005886:	4293      	cmp	r3, r2
 8005888:	d117      	bne.n	80058ba <find_volume+0x24a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800588a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 800588e:	f7ff f8cd 	bl	8004a2c <ld_dword>
 8005892:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <find_volume+0x2d4>)
 8005894:	4298      	cmp	r0, r3
 8005896:	d110      	bne.n	80058ba <find_volume+0x24a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005898:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800589c:	f7ff f8c6 	bl	8004a2c <ld_dword>
 80058a0:	4b29      	ldr	r3, [pc, #164]	; (8005948 <find_volume+0x2d8>)
 80058a2:	4298      	cmp	r0, r3
 80058a4:	d109      	bne.n	80058ba <find_volume+0x24a>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80058a6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 80058aa:	f7ff f8bf 	bl	8004a2c <ld_dword>
 80058ae:	61a0      	str	r0, [r4, #24]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80058b0:	f504 7009 	add.w	r0, r4, #548	; 0x224
 80058b4:	f7ff f8ba 	bl	8004a2c <ld_dword>
 80058b8:	6160      	str	r0, [r4, #20]
	fs->id = ++Fsid;		/* File system mount ID */
 80058ba:	4a24      	ldr	r2, [pc, #144]	; (800594c <find_volume+0x2dc>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80058bc:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80058be:	8813      	ldrh	r3, [r2, #0]
 80058c0:	3301      	adds	r3, #1
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	8013      	strh	r3, [r2, #0]
 80058c6:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80058c8:	4b21      	ldr	r3, [pc, #132]	; (8005950 <find_volume+0x2e0>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4294      	cmp	r4, r2
 80058ce:	bf04      	itt	eq
 80058d0:	2200      	moveq	r2, #0
 80058d2:	601a      	streq	r2, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	4294      	cmp	r4, r2
 80058d8:	f47f aef3 	bne.w	80056c2 <find_volume+0x52>
 80058dc:	2200      	movs	r2, #0
 80058de:	611a      	str	r2, [r3, #16]
 80058e0:	e6ef      	b.n	80056c2 <find_volume+0x52>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80058e2:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80058e4:	3701      	adds	r7, #1
 80058e6:	2f04      	cmp	r7, #4
 80058e8:	f47f af15 	bne.w	8005716 <find_volume+0xa6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80058ec:	2804      	cmp	r0, #4
 80058ee:	d105      	bne.n	80058fc <find_volume+0x28c>
 80058f0:	2501      	movs	r5, #1
 80058f2:	e6e6      	b.n	80056c2 <find_volume+0x52>
 80058f4:	2804      	cmp	r0, #4
 80058f6:	d0fb      	beq.n	80058f0 <find_volume+0x280>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80058f8:	2801      	cmp	r0, #1
 80058fa:	d901      	bls.n	8005900 <find_volume+0x290>
 80058fc:	250d      	movs	r5, #13
 80058fe:	e6e0      	b.n	80056c2 <find_volume+0x52>
	bsect = 0;
 8005900:	f04f 0800 	mov.w	r8, #0
 8005904:	e714      	b.n	8005730 <find_volume+0xc0>
		fmt = FS_FAT32;
 8005906:	2703      	movs	r7, #3
 8005908:	e778      	b.n	80057fc <find_volume+0x18c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800590a:	f1ba 0f00 	cmp.w	sl, #0
 800590e:	d0f5      	beq.n	80058fc <find_volume+0x28c>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005910:	2f02      	cmp	r7, #2
 8005912:	ea4f 0349 	mov.w	r3, r9, lsl #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005916:	4461      	add	r1, ip
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005918:	bf1c      	itt	ne
 800591a:	444b      	addne	r3, r9
 800591c:	f009 0201 	andne.w	r2, r9, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005920:	62e1      	str	r1, [r4, #44]	; 0x2c
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005922:	bf18      	it	ne
 8005924:	eb02 0353 	addne.w	r3, r2, r3, lsr #1
 8005928:	e788      	b.n	800583c <find_volume+0x1cc>
	if (vol < 0) return FR_INVALID_DRIVE;
 800592a:	250b      	movs	r5, #11
 800592c:	e6c9      	b.n	80056c2 <find_volume+0x52>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800592e:	250c      	movs	r5, #12
 8005930:	e6c7      	b.n	80056c2 <find_volume+0x52>
	ENTER_FF(fs);						/* Lock the volume */
 8005932:	250f      	movs	r5, #15
 8005934:	e6c5      	b.n	80056c2 <find_volume+0x52>
			return FR_OK;				/* The file system object is valid */
 8005936:	463d      	mov	r5, r7
 8005938:	e6c3      	b.n	80056c2 <find_volume+0x52>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800593a:	2503      	movs	r5, #3
 800593c:	e6c1      	b.n	80056c2 <find_volume+0x52>
 800593e:	bf00      	nop
 8005940:	200000b8 	.word	0x200000b8
 8005944:	41615252 	.word	0x41615252
 8005948:	61417272 	.word	0x61417272
 800594c:	200000dc 	.word	0x200000dc
 8005950:	200000bc 	.word	0x200000bc

08005954 <follow_path>:
{
 8005954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	4606      	mov	r6, r0
	FATFS *fs = obj->fs;
 800595a:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800595e:	4689      	mov	r9, r1
 8005960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005964:	2b2f      	cmp	r3, #47	; 0x2f
 8005966:	d0fa      	beq.n	800595e <follow_path+0xa>
 8005968:	2b5c      	cmp	r3, #92	; 0x5c
 800596a:	d0f8      	beq.n	800595e <follow_path+0xa>
		obj->sclust = 0;					/* Start from root directory */
 800596c:	2100      	movs	r1, #0
 800596e:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005970:	f899 3000 	ldrb.w	r3, [r9]
 8005974:	2b1f      	cmp	r3, #31
 8005976:	f200 80bb 	bhi.w	8005af0 <follow_path+0x19c>
		dp->fn[NSFLAG] = NS_NONAME;
 800597a:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800597c:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 800597e:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 8005982:	b003      	add	sp, #12
 8005984:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8005988:	f7ff bac2 	b.w	8004f10 <dir_sdi>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800598c:	3401      	adds	r4, #1
 800598e:	e0c2      	b.n	8005b16 <follow_path+0x1c2>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005990:	2c21      	cmp	r4, #33	; 0x21
 8005992:	9300      	str	r3, [sp, #0]
 8005994:	d00c      	beq.n	80059b0 <follow_path+0x5c>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005996:	2101      	movs	r1, #1
 8005998:	f000 fc80 	bl	800629c <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800599c:	b140      	cbz	r0, 80059b0 <follow_path+0x5c>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800599e:	287f      	cmp	r0, #127	; 0x7f
 80059a0:	9b00      	ldr	r3, [sp, #0]
 80059a2:	d807      	bhi.n	80059b4 <follow_path+0x60>
 80059a4:	497f      	ldr	r1, [pc, #508]	; (8005ba4 <follow_path+0x250>)
	while (*str && *str != chr) str++;
 80059a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059aa:	b11a      	cbz	r2, 80059b4 <follow_path+0x60>
 80059ac:	4290      	cmp	r0, r2
 80059ae:	d1fa      	bne.n	80059a6 <follow_path+0x52>
				cf |= NS_LOSS | NS_LFN; break;
 80059b0:	2006      	movs	r0, #6
 80059b2:	e04e      	b.n	8005a52 <follow_path+0xfe>
		w = p[si++];					/* Get a character */
 80059b4:	4627      	mov	r7, r4
		lfn[di++] = w;					/* Store the Unicode character */
 80059b6:	f828 0f02 	strh.w	r0, [r8, #2]!
		w = p[si++];					/* Get a character */
 80059ba:	e0a2      	b.n	8005b02 <follow_path+0x1ae>
		w = lfn[di - 1];
 80059bc:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
		if (w != ' ' && w != '.') break;
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d002      	beq.n	80059ca <follow_path+0x76>
 80059c4:	2b2e      	cmp	r3, #46	; 0x2e
 80059c6:	f040 80b6 	bne.w	8005b36 <follow_path+0x1e2>
		di--;
 80059ca:	3f01      	subs	r7, #1
 80059cc:	e0b0      	b.n	8005b30 <follow_path+0x1dc>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80059ce:	3101      	adds	r1, #1
 80059d0:	e0be      	b.n	8005b50 <follow_path+0x1fc>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80059d2:	4543      	cmp	r3, r8
 80059d4:	d205      	bcs.n	80059e2 <follow_path+0x8e>
 80059d6:	42ba      	cmp	r2, r7
 80059d8:	d14a      	bne.n	8005a70 <follow_path+0x11c>
			if (ni == 11) {				/* Long extension */
 80059da:	f1b8 0f0b 	cmp.w	r8, #11
 80059de:	d140      	bne.n	8005a62 <follow_path+0x10e>
 80059e0:	e002      	b.n	80059e8 <follow_path+0x94>
 80059e2:	f1b8 0f0b 	cmp.w	r8, #11
 80059e6:	d137      	bne.n	8005a58 <follow_path+0x104>
				cf |= NS_LOSS | NS_LFN; break;
 80059e8:	f044 0403 	orr.w	r4, r4, #3
 80059ec:	f04f 080b 	mov.w	r8, #11
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80059f0:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 80059f4:	2be5      	cmp	r3, #229	; 0xe5
 80059f6:	bf04      	itt	eq
 80059f8:	2305      	moveq	r3, #5
 80059fa:	f886 3024 	strbeq.w	r3, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80059fe:	f1b8 0f08 	cmp.w	r8, #8
 8005a02:	bf04      	itt	eq
 8005a04:	00ad      	lsleq	r5, r5, #2
 8005a06:	b2ed      	uxtbeq	r5, r5
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005a08:	f005 030c 	and.w	r3, r5, #12
 8005a0c:	2b0c      	cmp	r3, #12
 8005a0e:	d003      	beq.n	8005a18 <follow_path+0xc4>
 8005a10:	f005 0203 	and.w	r2, r5, #3
 8005a14:	2a03      	cmp	r2, #3
 8005a16:	d101      	bne.n	8005a1c <follow_path+0xc8>
 8005a18:	f044 0402 	orr.w	r4, r4, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005a1c:	07a1      	lsls	r1, r4, #30
 8005a1e:	d409      	bmi.n	8005a34 <follow_path+0xe0>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005a20:	f005 0503 	and.w	r5, r5, #3
 8005a24:	2d01      	cmp	r5, #1
 8005a26:	bf08      	it	eq
 8005a28:	f044 0410 	orreq.w	r4, r4, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	bf08      	it	eq
 8005a30:	f044 0408 	orreq.w	r4, r4, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 8005a34:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005a36:	f886 402f 	strb.w	r4, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8005a3a:	f7ff fc05 	bl	8005248 <dir_find>
			ns = dp->fn[NSFLAG];
 8005a3e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d044      	beq.n	8005ad0 <follow_path+0x17c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005a46:	2804      	cmp	r0, #4
 8005a48:	d103      	bne.n	8005a52 <follow_path+0xfe>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005a4a:	f013 0f04 	tst.w	r3, #4
 8005a4e:	bf08      	it	eq
 8005a50:	2005      	moveq	r0, #5
}
 8005a52:	b003      	add	sp, #12
 8005a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005a58:	42ba      	cmp	r2, r7
 8005a5a:	d002      	beq.n	8005a62 <follow_path+0x10e>
 8005a5c:	f044 0403 	orr.w	r4, r4, #3
			if (si > di) break;			/* No extension */
 8005a60:	d8c6      	bhi.n	80059f0 <follow_path+0x9c>
			b <<= 2; continue;
 8005a62:	00ad      	lsls	r5, r5, #2
 8005a64:	463a      	mov	r2, r7
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005a66:	f04f 080b 	mov.w	r8, #11
 8005a6a:	2308      	movs	r3, #8
			b <<= 2; continue;
 8005a6c:	b2ed      	uxtb	r5, r5
 8005a6e:	e094      	b.n	8005b9a <follow_path+0x246>
		if (w >= 0x80) {				/* Non ASCII character */
 8005a70:	287f      	cmp	r0, #127	; 0x7f
 8005a72:	d90e      	bls.n	8005a92 <follow_path+0x13e>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005a74:	2100      	movs	r1, #0
 8005a76:	f044 0402 	orr.w	r4, r4, #2
 8005a7a:	e9cd 2300 	strd	r2, r3, [sp]
 8005a7e:	f000 fc0d 	bl	800629c <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a86:	b158      	cbz	r0, 8005aa0 <follow_path+0x14c>
 8005a88:	4947      	ldr	r1, [pc, #284]	; (8005ba8 <follow_path+0x254>)
 8005a8a:	4408      	add	r0, r1
 8005a8c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005a90:	b130      	cbz	r0, 8005aa0 <follow_path+0x14c>
	while (*str && *str != chr) str++;
 8005a92:	f8df c118 	ldr.w	ip, [pc, #280]	; 8005bac <follow_path+0x258>
 8005a96:	f81c 1b01 	ldrb.w	r1, [ip], #1
 8005a9a:	b149      	cbz	r1, 8005ab0 <follow_path+0x15c>
 8005a9c:	4281      	cmp	r1, r0
 8005a9e:	d1fa      	bne.n	8005a96 <follow_path+0x142>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005aa0:	f044 0403 	orr.w	r4, r4, #3
 8005aa4:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 8005aa6:	18f1      	adds	r1, r6, r3
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8005aae:	e074      	b.n	8005b9a <follow_path+0x246>
				if (IsUpper(w)) {		/* ASCII large capital */
 8005ab0:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8005ab4:	2919      	cmp	r1, #25
 8005ab6:	d802      	bhi.n	8005abe <follow_path+0x16a>
					b |= 2;
 8005ab8:	f045 0502 	orr.w	r5, r5, #2
 8005abc:	e7f3      	b.n	8005aa6 <follow_path+0x152>
					if (IsLower(w)) {	/* ASCII small capital */
 8005abe:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8005ac2:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8005ac4:	bf9e      	ittt	ls
 8005ac6:	3820      	subls	r0, #32
 8005ac8:	f045 0501 	orrls.w	r5, r5, #1
 8005acc:	b280      	uxthls	r0, r0
 8005ace:	e7ea      	b.n	8005aa6 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ad0:	075a      	lsls	r2, r3, #29
 8005ad2:	d4be      	bmi.n	8005a52 <follow_path+0xfe>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005ad4:	79b3      	ldrb	r3, [r6, #6]
 8005ad6:	06db      	lsls	r3, r3, #27
 8005ad8:	d561      	bpl.n	8005b9e <follow_path+0x24a>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005ada:	6973      	ldr	r3, [r6, #20]
 8005adc:	f10b 0138 	add.w	r1, fp, #56	; 0x38
 8005ae0:	f89b 0000 	ldrb.w	r0, [fp]
 8005ae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae8:	4419      	add	r1, r3
 8005aea:	f7ff f89b 	bl	8004c24 <ld_clust.isra.0>
 8005aee:	60b0      	str	r0, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005af0:	6833      	ldr	r3, [r6, #0]
 8005af2:	2700      	movs	r7, #0
 8005af4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8005af8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8005afc:	f1aa 0502 	sub.w	r5, sl, #2
 8005b00:	46a8      	mov	r8, r5
		w = p[si++];					/* Get a character */
 8005b02:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8005b06:	1c7c      	adds	r4, r7, #1
		if (w < ' ') break;				/* Break if end of the path name */
 8005b08:	281f      	cmp	r0, #31
 8005b0a:	d90c      	bls.n	8005b26 <follow_path+0x1d2>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005b0c:	282f      	cmp	r0, #47	; 0x2f
 8005b0e:	d002      	beq.n	8005b16 <follow_path+0x1c2>
 8005b10:	285c      	cmp	r0, #92	; 0x5c
 8005b12:	f47f af3d 	bne.w	8005990 <follow_path+0x3c>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005b16:	f819 3004 	ldrb.w	r3, [r9, r4]
 8005b1a:	2b2f      	cmp	r3, #47	; 0x2f
 8005b1c:	f43f af36 	beq.w	800598c <follow_path+0x38>
 8005b20:	2b5c      	cmp	r3, #92	; 0x5c
 8005b22:	f43f af33 	beq.w	800598c <follow_path+0x38>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005b26:	2820      	cmp	r0, #32
	*path = &p[si];						/* Return pointer to the next segment */
 8005b28:	44a1      	add	r9, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005b2a:	bf34      	ite	cc
 8005b2c:	2404      	movcc	r4, #4
 8005b2e:	2400      	movcs	r4, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b30:	2f00      	cmp	r7, #0
 8005b32:	f47f af43 	bne.w	80059bc <follow_path+0x68>
	lfn[di] = 0;						/* LFN is created */
 8005b36:	2300      	movs	r3, #0
 8005b38:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005b3c:	2f00      	cmp	r7, #0
 8005b3e:	f43f af37 	beq.w	80059b0 <follow_path+0x5c>
	mem_set(dp->fn, ' ', 11);
 8005b42:	2120      	movs	r1, #32
 8005b44:	220b      	movs	r2, #11
 8005b46:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8005b4a:	f7fe ff7f 	bl	8004a4c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005b4e:	4619      	mov	r1, r3
 8005b50:	f83a 3011 	ldrh.w	r3, [sl, r1, lsl #1]
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	f43f af3a 	beq.w	80059ce <follow_path+0x7a>
 8005b5a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b5c:	f43f af37 	beq.w	80059ce <follow_path+0x7a>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005b60:	b109      	cbz	r1, 8005b66 <follow_path+0x212>
 8005b62:	f044 0403 	orr.w	r4, r4, #3
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005b66:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
 8005b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8005b6c:	d001      	beq.n	8005b72 <follow_path+0x21e>
 8005b6e:	3f01      	subs	r7, #1
 8005b70:	d1f9      	bne.n	8005b66 <follow_path+0x212>
		dp->fn[i++] = (BYTE)w;
 8005b72:	2300      	movs	r3, #0
 8005b74:	f04f 0808 	mov.w	r8, #8
 8005b78:	461d      	mov	r5, r3
		w = lfn[si++];					/* Get an LFN character */
 8005b7a:	f83a 0011 	ldrh.w	r0, [sl, r1, lsl #1]
 8005b7e:	1c4a      	adds	r2, r1, #1
		if (!w) break;					/* Break on end of the LFN */
 8005b80:	2800      	cmp	r0, #0
 8005b82:	f43f af35 	beq.w	80059f0 <follow_path+0x9c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005b86:	2820      	cmp	r0, #32
 8005b88:	d005      	beq.n	8005b96 <follow_path+0x242>
 8005b8a:	282e      	cmp	r0, #46	; 0x2e
 8005b8c:	f47f af21 	bne.w	80059d2 <follow_path+0x7e>
 8005b90:	42ba      	cmp	r2, r7
 8005b92:	f43f af22 	beq.w	80059da <follow_path+0x86>
			cf |= NS_LOSS | NS_LFN; continue;
 8005b96:	f044 0403 	orr.w	r4, r4, #3
		dp->fn[i++] = (BYTE)w;
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	e7ed      	b.n	8005b7a <follow_path+0x226>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005b9e:	2005      	movs	r0, #5
	return res;
 8005ba0:	e757      	b.n	8005a52 <follow_path+0xfe>
 8005ba2:	bf00      	nop
 8005ba4:	08012b4d 	.word	0x08012b4d
 8005ba8:	08012b5d 	.word	0x08012b5d
 8005bac:	08012b56 	.word	0x08012b56

08005bb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	4617      	mov	r7, r2
 8005bb6:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005bba:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 8005bbc:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8005bbe:	f7ff f810 	bl	8004be2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005bc2:	1e05      	subs	r5, r0, #0
 8005bc4:	db35      	blt.n	8005c32 <f_mount+0x82>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005bc6:	4e1d      	ldr	r6, [pc, #116]	; (8005c3c <f_mount+0x8c>)
 8005bc8:	f856 4025 	ldr.w	r4, [r6, r5, lsl #2]

	if (cfs) {
 8005bcc:	b1a4      	cbz	r4, 8005bf8 <f_mount+0x48>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005bce:	4b1c      	ldr	r3, [pc, #112]	; (8005c40 <f_mount+0x90>)
#if _FS_LOCK != 0
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8005bd0:	6920      	ldr	r0, [r4, #16]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4294      	cmp	r4, r2
 8005bd6:	bf04      	itt	eq
 8005bd8:	2200      	moveq	r2, #0
 8005bda:	601a      	streq	r2, [r3, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	4294      	cmp	r4, r2
 8005be0:	bf04      	itt	eq
 8005be2:	2200      	moveq	r2, #0
 8005be4:	611a      	streq	r2, [r3, #16]
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8005be6:	f000 fbc7 	bl	8006378 <ff_del_syncobj>
 8005bea:	b918      	cbnz	r0, 8005bf4 <f_mount+0x44>
 8005bec:	2402      	movs	r4, #2

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8005bee:	4620      	mov	r0, r4
 8005bf0:	b005      	add	sp, #20
 8005bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		cfs->fs_type = 0;				/* Clear old fs object */
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	7023      	strb	r3, [r4, #0]
	if (fs) {
 8005bf8:	9901      	ldr	r1, [sp, #4]
 8005bfa:	b989      	cbnz	r1, 8005c20 <f_mount+0x70>
	FatFs[vol] = fs;					/* Register new fs object */
 8005bfc:	9c01      	ldr	r4, [sp, #4]
 8005bfe:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005c02:	2c00      	cmp	r4, #0
 8005c04:	d0f3      	beq.n	8005bee <f_mount+0x3e>
 8005c06:	2f01      	cmp	r7, #1
 8005c08:	d115      	bne.n	8005c36 <f_mount+0x86>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005c0a:	a901      	add	r1, sp, #4
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4668      	mov	r0, sp
 8005c10:	f7ff fd2e 	bl	8005670 <find_volume>
 8005c14:	4604      	mov	r4, r0
	LEAVE_FF(fs, res);
 8005c16:	4601      	mov	r1, r0
 8005c18:	9801      	ldr	r0, [sp, #4]
 8005c1a:	f7ff fa4a 	bl	80050b2 <unlock_fs>
 8005c1e:	e7e6      	b.n	8005bee <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8005c20:	2300      	movs	r3, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8005c22:	b2e8      	uxtb	r0, r5
		fs->fs_type = 0;				/* Clear new fs object */
 8005c24:	f801 3b10 	strb.w	r3, [r1], #16
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8005c28:	f000 fb98 	bl	800635c <ff_cre_syncobj>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d1e5      	bne.n	8005bfc <f_mount+0x4c>
 8005c30:	e7dc      	b.n	8005bec <f_mount+0x3c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c32:	240b      	movs	r4, #11
 8005c34:	e7db      	b.n	8005bee <f_mount+0x3e>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005c36:	2400      	movs	r4, #0
 8005c38:	e7d9      	b.n	8005bee <f_mount+0x3e>
 8005c3a:	bf00      	nop
 8005c3c:	200000b8 	.word	0x200000b8
 8005c40:	200000bc 	.word	0x200000bc

08005c44 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c48:	b0a2      	sub	sp, #136	; 0x88
 8005c4a:	4617      	mov	r7, r2
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005c4c:	4604      	mov	r4, r0
{
 8005c4e:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 8005c50:	2800      	cmp	r0, #0
 8005c52:	f000 80f8 	beq.w	8005e46 <f_open+0x202>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005c56:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8005c5a:	a903      	add	r1, sp, #12
 8005c5c:	a801      	add	r0, sp, #4
 8005c5e:	462a      	mov	r2, r5
 8005c60:	f7ff fd06 	bl	8005670 <find_volume>
	if (res == FR_OK) {
 8005c64:	4606      	mov	r6, r0
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d15e      	bne.n	8005d28 <f_open+0xe4>
		dj.obj.fs = fs;
 8005c6a:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
 8005c6c:	aa11      	add	r2, sp, #68	; 0x44
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c6e:	9901      	ldr	r1, [sp, #4]
 8005c70:	a804      	add	r0, sp, #16
		INIT_NAMBUF(fs);
 8005c72:	60da      	str	r2, [r3, #12]
		dj.obj.fs = fs;
 8005c74:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c76:	f7ff fe6d 	bl	8005954 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005c7a:	b958      	cbnz	r0, 8005c94 <f_open+0x50>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c7c:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db5c      	blt.n	8005d3e <f_open+0xfa>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c84:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8005c88:	a804      	add	r0, sp, #16
 8005c8a:	bf14      	ite	ne
 8005c8c:	2101      	movne	r1, #1
 8005c8e:	2100      	moveq	r1, #0
 8005c90:	f7fe fee2 	bl	8004a58 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005c94:	f017 0f1c 	tst.w	r7, #28
 8005c98:	d071      	beq.n	8005d7e <f_open+0x13a>
			if (res != FR_OK) {					/* No file, create new */
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d051      	beq.n	8005d42 <f_open+0xfe>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005c9e:	2804      	cmp	r0, #4
 8005ca0:	d142      	bne.n	8005d28 <f_open+0xe4>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ca2:	4b6a      	ldr	r3, [pc, #424]	; (8005e4c <f_open+0x208>)
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	b11a      	cbz	r2, 8005cb0 <f_open+0x6c>
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 80c5 	bne.w	8005e3a <f_open+0x1f6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005cb0:	a804      	add	r0, sp, #16
 8005cb2:	f7ff fb7b 	bl	80053ac <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d136      	bne.n	8005d28 <f_open+0xe4>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005cba:	f045 0508 	orr.w	r5, r5, #8
				dw = GET_FATTIME();
 8005cbe:	f00a fce7 	bl	8010690 <get_fattime>
 8005cc2:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005cc4:	9000      	str	r0, [sp, #0]
 8005cc6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005cc8:	300e      	adds	r0, #14
 8005cca:	f7fe feb7 	bl	8004a3c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005cce:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005cd0:	9900      	ldr	r1, [sp, #0]
 8005cd2:	3016      	adds	r0, #22
 8005cd4:	f7fe feb2 	bl	8004a3c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005cda:	2220      	movs	r2, #32
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005cdc:	f8dd 800c 	ldr.w	r8, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005ce0:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005ce2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ce4:	f898 0000 	ldrb.w	r0, [r8]
 8005ce8:	f7fe ff9c 	bl	8004c24 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005cec:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005cee:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	f7fe ffa6 	bl	8004c42 <st_clust.isra.0>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005cf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8005cf8:	2200      	movs	r2, #0
					fs->wflag = 1;
 8005cfa:	2101      	movs	r1, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8005cfc:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cfe:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d00:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8005d02:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8005d04:	9b03      	ldr	r3, [sp, #12]
 8005d06:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005d08:	b327      	cbz	r7, 8005d54 <f_open+0x110>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8005d0e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
						res = remove_chain(&dj.obj, cl, 0);
 8005d12:	f7ff f996 	bl	8005042 <remove_chain>
						if (res == FR_OK) {
 8005d16:	b938      	cbnz	r0, 8005d28 <f_open+0xe4>
							res = move_window(fs, dw);
 8005d18:	4641      	mov	r1, r8
 8005d1a:	9803      	ldr	r0, [sp, #12]
 8005d1c:	f7fe ffc9 	bl	8004cb2 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005d20:	3f01      	subs	r7, #1
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	615f      	str	r7, [r3, #20]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8005d26:	b1a8      	cbz	r0, 8005d54 <f_open+0x110>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4606      	mov	r6, r0
 8005d2c:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
 8005d2e:	4631      	mov	r1, r6
 8005d30:	9803      	ldr	r0, [sp, #12]
 8005d32:	f7ff f9be 	bl	80050b2 <unlock_fs>
}
 8005d36:	4630      	mov	r0, r6
 8005d38:	b022      	add	sp, #136	; 0x88
 8005d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 8005d3e:	2006      	movs	r0, #6
 8005d40:	e7a8      	b.n	8005c94 <f_open+0x50>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005d42:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005d46:	f013 0f11 	tst.w	r3, #17
 8005d4a:	d122      	bne.n	8005d92 <f_open+0x14e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005d4c:	077b      	lsls	r3, r7, #29
 8005d4e:	d476      	bmi.n	8005e3e <f_open+0x1fa>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005d50:	073f      	lsls	r7, r7, #28
 8005d52:	d4b4      	bmi.n	8005cbe <f_open+0x7a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005d54:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005d56:	9b03      	ldr	r3, [sp, #12]
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d58:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				mode |= FA_MODIFIED;
 8005d5c:	bf48      	it	mi
 8005d5e:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005d62:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d64:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8005d68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d6a:	bf14      	ite	ne
 8005d6c:	2101      	movne	r1, #1
 8005d6e:	2100      	moveq	r1, #0
			fp->dir_ptr = dj.dir;
 8005d70:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005d72:	f7fe feab 	bl	8004acc <inc_lock>
 8005d76:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005d78:	b968      	cbnz	r0, 8005d96 <f_open+0x152>
 8005d7a:	2002      	movs	r0, #2
 8005d7c:	e7d4      	b.n	8005d28 <f_open+0xe4>
			if (res == FR_OK) {					/* Following succeeded */
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d1d2      	bne.n	8005d28 <f_open+0xe4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005d82:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8005d86:	06d8      	lsls	r0, r3, #27
 8005d88:	d45b      	bmi.n	8005e42 <f_open+0x1fe>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005d8a:	07ba      	lsls	r2, r7, #30
 8005d8c:	d5e2      	bpl.n	8005d54 <f_open+0x110>
 8005d8e:	07df      	lsls	r7, r3, #31
 8005d90:	d5e0      	bpl.n	8005d54 <f_open+0x110>
					res = FR_DENIED;
 8005d92:	2007      	movs	r0, #7
 8005d94:	e7c8      	b.n	8005d28 <f_open+0xe4>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005d96:	9f03      	ldr	r7, [sp, #12]
 8005d98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d9a:	7838      	ldrb	r0, [r7, #0]
 8005d9c:	f7fe ff42 	bl	8004c24 <ld_clust.isra.0>
 8005da0:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005da2:	f101 001c 	add.w	r0, r1, #28
 8005da6:	f7fe fe41 	bl	8004a2c <ld_dword>
			fp->obj.id = fs->id;
 8005daa:	88fb      	ldrh	r3, [r7, #6]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005dac:	2100      	movs	r1, #0
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005dae:	6027      	str	r7, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005db0:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8005db4:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005db8:	60e0      	str	r0, [r4, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005dba:	62e1      	str	r1, [r4, #44]	; 0x2c
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005dbc:	4638      	mov	r0, r7
			fp->obj.id = fs->id;
 8005dbe:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8005dc0:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8005dc2:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005dc4:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005dc6:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005dc8:	f7fe fe40 	bl	8004a4c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005dcc:	06aa      	lsls	r2, r5, #26
 8005dce:	d5ae      	bpl.n	8005d2e <f_open+0xea>
 8005dd0:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005dd4:	f1b8 0f00 	cmp.w	r8, #0
 8005dd8:	d0a9      	beq.n	8005d2e <f_open+0xea>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005dda:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005ddc:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005dde:	895d      	ldrh	r5, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005de0:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005de4:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005de6:	4545      	cmp	r5, r8
 8005de8:	d319      	bcc.n	8005e1e <f_open+0x1da>
 8005dea:	2000      	movs	r0, #0
				fp->clust = clst;
 8005dec:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d19a      	bne.n	8005d28 <f_open+0xe4>
 8005df2:	f3c8 0308 	ubfx	r3, r8, #0, #9
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d099      	beq.n	8005d2e <f_open+0xea>
 8005dfa:	9d03      	ldr	r5, [sp, #12]
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f7fe fec5 	bl	8004b8c <clust2sect>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d0b9      	beq.n	8005d7a <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005e06:	eb00 2258 	add.w	r2, r0, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	4639      	mov	r1, r7
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005e0e:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e10:	7868      	ldrb	r0, [r5, #1]
 8005e12:	f7fe fde1 	bl	80049d8 <disk_read>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	d089      	beq.n	8005d2e <f_open+0xea>
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	e784      	b.n	8005d28 <f_open+0xe4>
					clst = get_fat(&fp->obj, clst);
 8005e1e:	6820      	ldr	r0, [r4, #0]
 8005e20:	eba8 0805 	sub.w	r8, r8, r5
 8005e24:	f7ff f81a 	bl	8004e5c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8005e28:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8005e2a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8005e2c:	d903      	bls.n	8005e36 <f_open+0x1f2>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	d1d9      	bne.n	8005de6 <f_open+0x1a2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005e32:	2001      	movs	r0, #1
 8005e34:	e7da      	b.n	8005dec <f_open+0x1a8>
					if (clst <= 1) res = FR_INT_ERR;
 8005e36:	2002      	movs	r0, #2
 8005e38:	e7d8      	b.n	8005dec <f_open+0x1a8>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005e3a:	2012      	movs	r0, #18
 8005e3c:	e774      	b.n	8005d28 <f_open+0xe4>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005e3e:	2008      	movs	r0, #8
 8005e40:	e772      	b.n	8005d28 <f_open+0xe4>
					res = FR_NO_FILE;
 8005e42:	2004      	movs	r0, #4
 8005e44:	e770      	b.n	8005d28 <f_open+0xe4>
	if (!fp) return FR_INVALID_OBJECT;
 8005e46:	2609      	movs	r6, #9
 8005e48:	e775      	b.n	8005d36 <f_open+0xf2>
 8005e4a:	bf00      	nop
 8005e4c:	200000bc 	.word	0x200000bc

08005e50 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	4699      	mov	r9, r3
 8005e56:	b085      	sub	sp, #20
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8005e58:	2300      	movs	r3, #0
{
 8005e5a:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005e5c:	a903      	add	r1, sp, #12
{
 8005e5e:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 8005e60:	f8c9 3000 	str.w	r3, [r9]
{
 8005e64:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005e66:	f7ff fbdf 	bl	8005628 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005e6a:	4605      	mov	r5, r0
 8005e6c:	b908      	cbnz	r0, 8005e72 <f_read+0x22>
 8005e6e:	7d65      	ldrb	r5, [r4, #21]
 8005e70:	b125      	cbz	r5, 8005e7c <f_read+0x2c>
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005e72:	4629      	mov	r1, r5
 8005e74:	9803      	ldr	r0, [sp, #12]
 8005e76:	f7ff f91c 	bl	80050b2 <unlock_fs>
 8005e7a:	e008      	b.n	8005e8e <f_read+0x3e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005e7c:	7d25      	ldrb	r5, [r4, #20]
 8005e7e:	f015 0501 	ands.w	r5, r5, #1
 8005e82:	d108      	bne.n	8005e96 <f_read+0x46>
 8005e84:	2507      	movs	r5, #7
 8005e86:	2107      	movs	r1, #7
 8005e88:	9803      	ldr	r0, [sp, #12]
 8005e8a:	f7ff f912 	bl	80050b2 <unlock_fs>
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8005e8e:	4628      	mov	r0, r5
 8005e90:	b005      	add	sp, #20
 8005e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	remain = fp->obj.objsize - fp->fptr;
 8005e96:	68e2      	ldr	r2, [r4, #12]
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005e98:	f104 0b30 	add.w	fp, r4, #48	; 0x30
	remain = fp->obj.objsize - fp->fptr;
 8005e9c:	69a3      	ldr	r3, [r4, #24]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	4296      	cmp	r6, r2
 8005ea2:	bf28      	it	cs
 8005ea4:	4616      	movcs	r6, r2
	for ( ;  btr;								/* Repeat until all data read */
 8005ea6:	b92e      	cbnz	r6, 8005eb4 <f_read+0x64>
	LEAVE_FF(fs, FR_OK);
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	9803      	ldr	r0, [sp, #12]
 8005eac:	4635      	mov	r5, r6
 8005eae:	f7ff f900 	bl	80050b2 <unlock_fs>
 8005eb2:	e7ec      	b.n	8005e8e <f_read+0x3e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005eb4:	69a1      	ldr	r1, [r4, #24]
 8005eb6:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d17e      	bne.n	8005fbc <f_read+0x16c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005ebe:	9b03      	ldr	r3, [sp, #12]
 8005ec0:	895b      	ldrh	r3, [r3, #10]
 8005ec2:	3b01      	subs	r3, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8005ec4:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8005ec8:	9301      	str	r3, [sp, #4]
 8005eca:	d117      	bne.n	8005efc <f_read+0xac>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005ecc:	b929      	cbnz	r1, 8005eda <f_read+0x8a>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005ece:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005ed0:	2801      	cmp	r0, #1
 8005ed2:	d80d      	bhi.n	8005ef0 <f_read+0xa0>
 8005ed4:	2502      	movs	r5, #2
 8005ed6:	7565      	strb	r5, [r4, #21]
 8005ed8:	e7cb      	b.n	8005e72 <f_read+0x22>
					if (fp->cltbl) {
 8005eda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005edc:	b11b      	cbz	r3, 8005ee6 <f_read+0x96>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7fe fe5f 	bl	8004ba2 <clmt_clust>
 8005ee4:	e7f4      	b.n	8005ed0 <f_read+0x80>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005ee6:	69e1      	ldr	r1, [r4, #28]
 8005ee8:	6820      	ldr	r0, [r4, #0]
 8005eea:	f7fe ffb7 	bl	8004e5c <get_fat.isra.0>
 8005eee:	e7ef      	b.n	8005ed0 <f_read+0x80>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d102      	bne.n	8005efa <f_read+0xaa>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	7561      	strb	r1, [r4, #21]
 8005ef8:	e7bc      	b.n	8005e74 <f_read+0x24>
				fp->clust = clst;				/* Update current cluster */
 8005efa:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005efc:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8005f00:	69e1      	ldr	r1, [r4, #28]
 8005f02:	4650      	mov	r0, sl
 8005f04:	f7fe fe42 	bl	8004b8c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005f08:	b920      	cbnz	r0, 8005f14 <f_read+0xc4>
 8005f0a:	2502      	movs	r5, #2
 8005f0c:	4650      	mov	r0, sl
 8005f0e:	4629      	mov	r1, r5
 8005f10:	7565      	strb	r5, [r4, #21]
 8005f12:	e7b0      	b.n	8005e76 <f_read+0x26>
			sect += csect;
 8005f14:	9b01      	ldr	r3, [sp, #4]
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005f16:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8005f1a:	eb03 0700 	add.w	r7, r3, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005f1e:	d330      	bcc.n	8005f82 <f_read+0x132>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005f20:	9901      	ldr	r1, [sp, #4]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005f22:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005f24:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 8005f28:	eb01 2156 	add.w	r1, r1, r6, lsr #9
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f2c:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005f30:	4291      	cmp	r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f32:	4641      	mov	r1, r8
					cc = fs->csize - csect;
 8005f34:	bf84      	itt	hi
 8005f36:	9b01      	ldrhi	r3, [sp, #4]
 8005f38:	1ad3      	subhi	r3, r2, r3
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f3a:	463a      	mov	r2, r7
 8005f3c:	9301      	str	r3, [sp, #4]
 8005f3e:	f7fe fd4b 	bl	80049d8 <disk_read>
 8005f42:	9b01      	ldr	r3, [sp, #4]
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d1d5      	bne.n	8005ef4 <f_read+0xa4>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005f48:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8005f4c:	2a00      	cmp	r2, #0
 8005f4e:	da0c      	bge.n	8005f6a <f_read+0x11a>
 8005f50:	6a20      	ldr	r0, [r4, #32]
 8005f52:	1bc0      	subs	r0, r0, r7
 8005f54:	4298      	cmp	r0, r3
 8005f56:	d208      	bcs.n	8005f6a <f_read+0x11a>
 8005f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	eb08 2040 	add.w	r0, r8, r0, lsl #9
 8005f62:	9301      	str	r3, [sp, #4]
	if (cnt) {
 8005f64:	f7fe fe55 	bl	8004c12 <mem_cpy.part.0>
 8005f68:	9b01      	ldr	r3, [sp, #4]
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005f6a:	025f      	lsls	r7, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005f6c:	69a3      	ldr	r3, [r4, #24]
 8005f6e:	44b8      	add	r8, r7
 8005f70:	1bf6      	subs	r6, r6, r7
 8005f72:	443b      	add	r3, r7
 8005f74:	61a3      	str	r3, [r4, #24]
 8005f76:	f8d9 3000 	ldr.w	r3, [r9]
 8005f7a:	443b      	add	r3, r7
 8005f7c:	f8c9 3000 	str.w	r3, [r9]
 8005f80:	e791      	b.n	8005ea6 <f_read+0x56>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005f82:	6a22      	ldr	r2, [r4, #32]
 8005f84:	42ba      	cmp	r2, r7
 8005f86:	d018      	beq.n	8005fba <f_read+0x16a>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005f88:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	da0b      	bge.n	8005fa8 <f_read+0x158>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005f90:	2301      	movs	r3, #1
 8005f92:	4659      	mov	r1, fp
 8005f94:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8005f98:	f7fe fd2c 	bl	80049f4 <disk_write>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d1a9      	bne.n	8005ef4 <f_read+0xa4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005fa0:	7d23      	ldrb	r3, [r4, #20]
 8005fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fa6:	7523      	strb	r3, [r4, #20]
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005fa8:	9803      	ldr	r0, [sp, #12]
 8005faa:	2301      	movs	r3, #1
 8005fac:	463a      	mov	r2, r7
 8005fae:	4659      	mov	r1, fp
 8005fb0:	7840      	ldrb	r0, [r0, #1]
 8005fb2:	f7fe fd11 	bl	80049d8 <disk_read>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d19c      	bne.n	8005ef4 <f_read+0xa4>
			fp->sect = sect;
 8005fba:	6227      	str	r7, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005fbc:	69a1      	ldr	r1, [r4, #24]
 8005fbe:	4640      	mov	r0, r8
 8005fc0:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005fc4:	f5c1 7700 	rsb	r7, r1, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005fc8:	4459      	add	r1, fp
 8005fca:	42b7      	cmp	r7, r6
 8005fcc:	bf28      	it	cs
 8005fce:	4637      	movcs	r7, r6
	if (cnt) {
 8005fd0:	463a      	mov	r2, r7
 8005fd2:	f7fe fe1e 	bl	8004c12 <mem_cpy.part.0>
}
 8005fd6:	e7c9      	b.n	8005f6c <f_read+0x11c>

08005fd8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	4699      	mov	r9, r3
 8005fde:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8005fe0:	2300      	movs	r3, #0
{
 8005fe2:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005fe4:	a903      	add	r1, sp, #12
{
 8005fe6:	4604      	mov	r4, r0
	*bw = 0;	/* Clear write byte counter */
 8005fe8:	f8c9 3000 	str.w	r3, [r9]
{
 8005fec:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005fee:	f7ff fb1b 	bl	8005628 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005ff2:	4605      	mov	r5, r0
 8005ff4:	b908      	cbnz	r0, 8005ffa <f_write+0x22>
 8005ff6:	7d65      	ldrb	r5, [r4, #21]
 8005ff8:	b10d      	cbz	r5, 8005ffe <f_write+0x26>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
 8005ffa:	4629      	mov	r1, r5
 8005ffc:	e031      	b.n	8006062 <f_write+0x8a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005ffe:	7d23      	ldrb	r3, [r4, #20]
 8006000:	079a      	lsls	r2, r3, #30
 8006002:	d408      	bmi.n	8006016 <f_write+0x3e>
 8006004:	2507      	movs	r5, #7
 8006006:	2107      	movs	r1, #7
 8006008:	9803      	ldr	r0, [sp, #12]
 800600a:	f7ff f852 	bl	80050b2 <unlock_fs>
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800600e:	4628      	mov	r0, r5
 8006010:	b005      	add	sp, #20
 8006012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006016:	69a3      	ldr	r3, [r4, #24]
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006018:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800601c:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800601e:	bf28      	it	cs
 8006020:	43de      	mvncs	r6, r3
	for ( ;  btw;							/* Repeat until all data written */
 8006022:	b1ce      	cbz	r6, 8006058 <f_write+0x80>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006024:	69a1      	ldr	r1, [r4, #24]
 8006026:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 8095 	bne.w	800615a <f_write+0x182>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006030:	9b03      	ldr	r3, [sp, #12]
 8006032:	895f      	ldrh	r7, [r3, #10]
 8006034:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8006036:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800603a:	d125      	bne.n	8006088 <f_write+0xb0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800603c:	b931      	cbnz	r1, 800604c <f_write+0x74>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800603e:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8006040:	b9a8      	cbnz	r0, 800606e <f_write+0x96>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006042:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006044:	4620      	mov	r0, r4
 8006046:	f7fe ffa4 	bl	8004f92 <create_chain>
 800604a:	e004      	b.n	8006056 <f_write+0x7e>
					if (fp->cltbl) {
 800604c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800604e:	b163      	cbz	r3, 800606a <f_write+0x92>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006050:	4620      	mov	r0, r4
 8006052:	f7fe fda6 	bl	8004ba2 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006056:	b950      	cbnz	r0, 800606e <f_write+0x96>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006058:	7d23      	ldrb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800605a:	2100      	movs	r1, #0
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800605c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006060:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8006062:	9803      	ldr	r0, [sp, #12]
 8006064:	f7ff f825 	bl	80050b2 <unlock_fs>
 8006068:	e7d1      	b.n	800600e <f_write+0x36>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800606a:	69e1      	ldr	r1, [r4, #28]
 800606c:	e7ea      	b.n	8006044 <f_write+0x6c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800606e:	2801      	cmp	r0, #1
 8006070:	d102      	bne.n	8006078 <f_write+0xa0>
 8006072:	2502      	movs	r5, #2
					ABORT(fs, FR_DISK_ERR);
 8006074:	7565      	strb	r5, [r4, #21]
 8006076:	e7c0      	b.n	8005ffa <f_write+0x22>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006078:	1c43      	adds	r3, r0, #1
 800607a:	d101      	bne.n	8006080 <f_write+0xa8>
					ABORT(fs, FR_DISK_ERR);
 800607c:	2501      	movs	r5, #1
 800607e:	e7f9      	b.n	8006074 <f_write+0x9c>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006080:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8006082:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006084:	b903      	cbnz	r3, 8006088 <f_write+0xb0>
 8006086:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006088:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	da0c      	bge.n	80060aa <f_write+0xd2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006090:	9803      	ldr	r0, [sp, #12]
 8006092:	2301      	movs	r3, #1
 8006094:	6a22      	ldr	r2, [r4, #32]
 8006096:	4651      	mov	r1, sl
 8006098:	7840      	ldrb	r0, [r0, #1]
 800609a:	f7fe fcab 	bl	80049f4 <disk_write>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d1ec      	bne.n	800607c <f_write+0xa4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060a2:	7d23      	ldrb	r3, [r4, #20]
 80060a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a8:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80060aa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80060ae:	69e1      	ldr	r1, [r4, #28]
 80060b0:	4658      	mov	r0, fp
 80060b2:	f7fe fd6b 	bl	8004b8c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80060b6:	b920      	cbnz	r0, 80060c2 <f_write+0xea>
 80060b8:	2502      	movs	r5, #2
 80060ba:	4658      	mov	r0, fp
 80060bc:	4629      	mov	r1, r5
 80060be:	7565      	strb	r5, [r4, #21]
 80060c0:	e7d0      	b.n	8006064 <f_write+0x8c>
			if (cc) {						/* Write maximum contiguous sectors directly */
 80060c2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80060c6:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80060ca:	d334      	bcc.n	8006136 <f_write+0x15e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80060cc:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 80060d0:	eb07 2056 	add.w	r0, r7, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80060d4:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80060d6:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060d8:	f89b 0001 	ldrb.w	r0, [fp, #1]
					cc = fs->csize - csect;
 80060dc:	bf88      	it	hi
 80060de:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060e0:	4641      	mov	r1, r8
 80060e2:	e9cd 2300 	strd	r2, r3, [sp]
 80060e6:	f7fe fc85 	bl	80049f4 <disk_write>
 80060ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ee:	2800      	cmp	r0, #0
 80060f0:	d1c4      	bne.n	800607c <f_write+0xa4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80060f2:	6a21      	ldr	r1, [r4, #32]
 80060f4:	1a89      	subs	r1, r1, r2
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d20c      	bcs.n	8006114 <f_write+0x13c>
 80060fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fe:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8006102:	4650      	mov	r0, sl
 8006104:	9300      	str	r3, [sp, #0]
	if (cnt) {
 8006106:	f7fe fd84 	bl	8004c12 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800610a:	7d22      	ldrb	r2, [r4, #20]
 800610c:	9b00      	ldr	r3, [sp, #0]
 800610e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006112:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006114:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006116:	69a3      	ldr	r3, [r4, #24]
 8006118:	44b8      	add	r8, r7
 800611a:	68e2      	ldr	r2, [r4, #12]
 800611c:	1bf6      	subs	r6, r6, r7
 800611e:	443b      	add	r3, r7
 8006120:	61a3      	str	r3, [r4, #24]
 8006122:	429a      	cmp	r2, r3
 8006124:	bf2c      	ite	cs
 8006126:	60e2      	strcs	r2, [r4, #12]
 8006128:	60e3      	strcc	r3, [r4, #12]
 800612a:	f8d9 3000 	ldr.w	r3, [r9]
 800612e:	443b      	add	r3, r7
 8006130:	f8c9 3000 	str.w	r3, [r9]
 8006134:	e775      	b.n	8006022 <f_write+0x4a>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006136:	6a23      	ldr	r3, [r4, #32]
 8006138:	4293      	cmp	r3, r2
 800613a:	d00d      	beq.n	8006158 <f_write+0x180>
 800613c:	68e1      	ldr	r1, [r4, #12]
 800613e:	69a3      	ldr	r3, [r4, #24]
 8006140:	4299      	cmp	r1, r3
 8006142:	d909      	bls.n	8006158 <f_write+0x180>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006144:	2301      	movs	r3, #1
 8006146:	4651      	mov	r1, sl
 8006148:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800614c:	9200      	str	r2, [sp, #0]
 800614e:	f7fe fc43 	bl	80049d8 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8006152:	9a00      	ldr	r2, [sp, #0]
 8006154:	2800      	cmp	r0, #0
 8006156:	d191      	bne.n	800607c <f_write+0xa4>
			fp->sect = sect;
 8006158:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800615a:	69a0      	ldr	r0, [r4, #24]
 800615c:	4641      	mov	r1, r8
 800615e:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8006162:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006166:	4450      	add	r0, sl
 8006168:	42b7      	cmp	r7, r6
 800616a:	bf28      	it	cs
 800616c:	4637      	movcs	r7, r6
	if (cnt) {
 800616e:	463a      	mov	r2, r7
 8006170:	f7fe fd4f 	bl	8004c12 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8006174:	7d23      	ldrb	r3, [r4, #20]
 8006176:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800617a:	7523      	strb	r3, [r4, #20]
 800617c:	e7cb      	b.n	8006116 <f_write+0x13e>

0800617e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800617e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006180:	a901      	add	r1, sp, #4
{
 8006182:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006184:	f7ff fa50 	bl	8005628 <validate>
	if (res == FR_OK) {
 8006188:	4604      	mov	r4, r0
 800618a:	2800      	cmp	r0, #0
 800618c:	d143      	bne.n	8006216 <f_sync+0x98>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800618e:	7d2b      	ldrb	r3, [r5, #20]
 8006190:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 8006194:	d03f      	beq.n	8006216 <f_sync+0x98>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006196:	061b      	lsls	r3, r3, #24
 8006198:	d514      	bpl.n	80061c4 <f_sync+0x46>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800619a:	9801      	ldr	r0, [sp, #4]
 800619c:	2301      	movs	r3, #1
 800619e:	6a2a      	ldr	r2, [r5, #32]
 80061a0:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80061a4:	7840      	ldrb	r0, [r0, #1]
 80061a6:	f7fe fc25 	bl	80049f4 <disk_write>
 80061aa:	b138      	cbz	r0, 80061bc <f_sync+0x3e>
 80061ac:	2401      	movs	r4, #1
 80061ae:	2101      	movs	r1, #1
 80061b0:	9801      	ldr	r0, [sp, #4]
 80061b2:	f7fe ff7e 	bl	80050b2 <unlock_fs>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 80061b6:	4620      	mov	r0, r4
 80061b8:	b003      	add	sp, #12
 80061ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->flag &= (BYTE)~FA_DIRTY;
 80061bc:	7d2b      	ldrb	r3, [r5, #20]
 80061be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061c2:	752b      	strb	r3, [r5, #20]
			tm = GET_FATTIME();				/* Modified time */
 80061c4:	f00a fa64 	bl	8010690 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 80061c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80061ca:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80061cc:	9801      	ldr	r0, [sp, #4]
 80061ce:	f7fe fd70 	bl	8004cb2 <move_window>
				if (res == FR_OK) {
 80061d2:	4604      	mov	r4, r0
 80061d4:	b9f8      	cbnz	r0, 8006216 <f_sync+0x98>
					dir = fp->dir_ptr;
 80061d6:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80061d8:	7af3      	ldrb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80061da:	4631      	mov	r1, r6
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80061dc:	f043 0320 	orr.w	r3, r3, #32
 80061e0:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80061e2:	68aa      	ldr	r2, [r5, #8]
 80061e4:	6828      	ldr	r0, [r5, #0]
 80061e6:	f7fe fd2c 	bl	8004c42 <st_clust.isra.0>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80061ea:	68e9      	ldr	r1, [r5, #12]
 80061ec:	f106 001c 	add.w	r0, r6, #28
 80061f0:	f7fe fc24 	bl	8004a3c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80061f4:	4639      	mov	r1, r7
 80061f6:	f106 0016 	add.w	r0, r6, #22
 80061fa:	f7fe fc1f 	bl	8004a3c <st_dword>
					fs->wflag = 1;
 80061fe:	2301      	movs	r3, #1
 8006200:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8006202:	74b4      	strb	r4, [r6, #18]
	*ptr++ = (BYTE)val;
 8006204:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 8006206:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006208:	f7fe ff5e 	bl	80050c8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800620c:	7d2b      	ldrb	r3, [r5, #20]
					res = sync_fs(fs);					/* Restore it to the directory */
 800620e:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006214:	752b      	strb	r3, [r5, #20]
	LEAVE_FF(fs, res);
 8006216:	4621      	mov	r1, r4
 8006218:	9801      	ldr	r0, [sp, #4]
 800621a:	f7fe ff4a 	bl	80050b2 <unlock_fs>
 800621e:	e7ca      	b.n	80061b6 <f_sync+0x38>

08006220 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006222:	4605      	mov	r5, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006224:	f7ff ffab 	bl	800617e <f_sync>
	if (res == FR_OK)
 8006228:	4604      	mov	r4, r0
 800622a:	b978      	cbnz	r0, 800624c <f_close+0x2c>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800622c:	a901      	add	r1, sp, #4
 800622e:	4628      	mov	r0, r5
 8006230:	f7ff f9fa 	bl	8005628 <validate>
		if (res == FR_OK) {
 8006234:	4604      	mov	r4, r0
 8006236:	b948      	cbnz	r0, 800624c <f_close+0x2c>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006238:	6928      	ldr	r0, [r5, #16]
 800623a:	f7fe fc89 	bl	8004b50 <dec_lock>
			if (res == FR_OK)
 800623e:	4604      	mov	r4, r0
 8006240:	b900      	cbnz	r0, 8006244 <f_close+0x24>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006242:	6028      	str	r0, [r5, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8006244:	2100      	movs	r1, #0
 8006246:	9801      	ldr	r0, [sp, #4]
 8006248:	f7fe ff33 	bl	80050b2 <unlock_fs>
#endif
		}
	}
	return res;
}
 800624c:	4620      	mov	r0, r4
 800624e:	b003      	add	sp, #12
 8006250:	bd30      	pop	{r4, r5, pc}
	...

08006254 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8006254:	4b0e      	ldr	r3, [pc, #56]	; (8006290 <FATFS_LinkDriverEx+0x3c>)
{
 8006256:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8006258:	7a5c      	ldrb	r4, [r3, #9]
{
 800625a:	4605      	mov	r5, r0
  if(disk.nbr < _VOLUMES)
 800625c:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8006260:	b9a4      	cbnz	r4, 800628c <FATFS_LinkDriverEx+0x38>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006262:	7a5c      	ldrb	r4, [r3, #9]
 8006264:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8006266:	7a5c      	ldrb	r4, [r3, #9]
 8006268:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800626c:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800626e:	7a5c      	ldrb	r4, [r3, #9]
 8006270:	441c      	add	r4, r3
 8006272:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 8006274:	7a5a      	ldrb	r2, [r3, #9]
 8006276:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8006278:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800627a:	b2e4      	uxtb	r4, r4
 800627c:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800627e:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8006280:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8006282:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8006284:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8006286:	70c8      	strb	r0, [r1, #3]
    path[2] = '/';
 8006288:	708b      	strb	r3, [r1, #2]
    ret = 0;
  }

  return ret;
}
 800628a:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 800628c:	2001      	movs	r0, #1
 800628e:	e7fc      	b.n	800628a <FATFS_LinkDriverEx+0x36>
 8006290:	200000e0 	.word	0x200000e0

08006294 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006294:	2200      	movs	r2, #0
 8006296:	f7ff bfdd 	b.w	8006254 <FATFS_LinkDriverEx>
	...

0800629c <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800629c:	287f      	cmp	r0, #127	; 0x7f
{
 800629e:	b510      	push	{r4, lr}
	if (chr < 0x80) {	/* ASCII */
 80062a0:	d906      	bls.n	80062b0 <ff_convert+0x14>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 80062a2:	b131      	cbz	r1, 80062b2 <ff_convert+0x16>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80062a4:	28ff      	cmp	r0, #255	; 0xff
 80062a6:	d812      	bhi.n	80062ce <ff_convert+0x32>
 80062a8:	3880      	subs	r0, #128	; 0x80
 80062aa:	4b0a      	ldr	r3, [pc, #40]	; (80062d4 <ff_convert+0x38>)
 80062ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
 80062b0:	bd10      	pop	{r4, pc}
 80062b2:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <ff_convert+0x38>)
				if (chr == Tbl[c]) break;
 80062b4:	f832 4b02 	ldrh.w	r4, [r2], #2
 80062b8:	b28b      	uxth	r3, r1
 80062ba:	4284      	cmp	r4, r0
 80062bc:	d003      	beq.n	80062c6 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 80062be:	3101      	adds	r1, #1
 80062c0:	2980      	cmp	r1, #128	; 0x80
 80062c2:	d1f7      	bne.n	80062b4 <ff_convert+0x18>
 80062c4:	460b      	mov	r3, r1
			c = (c + 0x80) & 0xFF;
 80062c6:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80062ca:	b2c0      	uxtb	r0, r0
 80062cc:	e7f0      	b.n	80062b0 <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80062ce:	2000      	movs	r0, #0
 80062d0:	e7ee      	b.n	80062b0 <ff_convert+0x14>
 80062d2:	bf00      	nop
 80062d4:	08012bea 	.word	0x08012bea

080062d8 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80062d8:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <ff_wtoupper+0x7c>)
 80062da:	4a1f      	ldr	r2, [pc, #124]	; (8006358 <ff_wtoupper+0x80>)
 80062dc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80062e0:	bf28      	it	cs
 80062e2:	4613      	movcs	r3, r2
{
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	1d19      	adds	r1, r3, #4
	for (;;) {
		bc = *p++;								/* Get block base */
 80062e8:	f831 3c04 	ldrh.w	r3, [r1, #-4]
		if (!bc || chr < bc) break;
 80062ec:	460a      	mov	r2, r1
 80062ee:	b1ab      	cbz	r3, 800631c <ff_wtoupper+0x44>
 80062f0:	4298      	cmp	r0, r3
 80062f2:	d313      	bcc.n	800631c <ff_wtoupper+0x44>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80062f4:	f831 4c02 	ldrh.w	r4, [r1, #-2]
 80062f8:	0a25      	lsrs	r5, r4, #8
 80062fa:	b2e6      	uxtb	r6, r4
		if (chr < bc + nc) {	/* In the block? */
 80062fc:	fa53 f484 	uxtab	r4, r3, r4
 8006300:	42a0      	cmp	r0, r4
 8006302:	da21      	bge.n	8006348 <ff_wtoupper+0x70>
			switch (cmd) {
 8006304:	2d08      	cmp	r5, #8
 8006306:	d809      	bhi.n	800631c <ff_wtoupper+0x44>
 8006308:	e8df f005 	tbb	[pc, r5]
 800630c:	110f0905 	.word	0x110f0905
 8006310:	19171513 	.word	0x19171513
 8006314:	1b          	.byte	0x1b
 8006315:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006316:	1ac0      	subs	r0, r0, r3
 8006318:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
		}
		if (!cmd) p += nc;
	}

	return chr;
}
 800631c:	bd70      	pop	{r4, r5, r6, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800631e:	1ac3      	subs	r3, r0, r3
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	1ac0      	subs	r0, r0, r3
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006326:	b280      	uxth	r0, r0
 8006328:	e7f8      	b.n	800631c <ff_wtoupper+0x44>
			case 2: chr -= 16; break;				/* Shift -16 */
 800632a:	3810      	subs	r0, #16
 800632c:	e7fb      	b.n	8006326 <ff_wtoupper+0x4e>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800632e:	3820      	subs	r0, #32
 8006330:	e7f9      	b.n	8006326 <ff_wtoupper+0x4e>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006332:	3830      	subs	r0, #48	; 0x30
 8006334:	e7f7      	b.n	8006326 <ff_wtoupper+0x4e>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006336:	381a      	subs	r0, #26
 8006338:	e7f5      	b.n	8006326 <ff_wtoupper+0x4e>
			case 6:	chr += 8; break;				/* Shift +8 */
 800633a:	3008      	adds	r0, #8
 800633c:	e7f3      	b.n	8006326 <ff_wtoupper+0x4e>
			case 7: chr -= 80; break;				/* Shift -80 */
 800633e:	3850      	subs	r0, #80	; 0x50
 8006340:	e7f1      	b.n	8006326 <ff_wtoupper+0x4e>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006342:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8006346:	e7ee      	b.n	8006326 <ff_wtoupper+0x4e>
		if (!cmd) p += nc;
 8006348:	3104      	adds	r1, #4
 800634a:	2d00      	cmp	r5, #0
 800634c:	d1cc      	bne.n	80062e8 <ff_wtoupper+0x10>
 800634e:	eb02 0346 	add.w	r3, r2, r6, lsl #1
 8006352:	e7c8      	b.n	80062e6 <ff_wtoupper+0xe>
 8006354:	08012cea 	.word	0x08012cea
 8006358:	08012edc 	.word	0x08012edc

0800635c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800635c:	b513      	push	{r0, r1, r4, lr}

    int ret;

    osSemaphoreDef(SEM);
 800635e:	2300      	movs	r3, #0
{
 8006360:	460c      	mov	r4, r1
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006362:	a801      	add	r0, sp, #4
 8006364:	2101      	movs	r1, #1
    osSemaphoreDef(SEM);
 8006366:	9301      	str	r3, [sp, #4]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8006368:	f000 f89c 	bl	80064a4 <osSemaphoreCreate>
 800636c:	6020      	str	r0, [r4, #0]
    ret = (*sobj != NULL);

    return ret;
}
 800636e:	3800      	subs	r0, #0
 8006370:	bf18      	it	ne
 8006372:	2001      	movne	r0, #1
 8006374:	b002      	add	sp, #8
 8006376:	bd10      	pop	{r4, pc}

08006378 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8006378:	b508      	push	{r3, lr}
    osSemaphoreDelete (sobj);
 800637a:	f000 f8d1 	bl	8006520 <osSemaphoreDelete>
    return 1;
}
 800637e:	2001      	movs	r0, #1
 8006380:	bd08      	pop	{r3, pc}

08006382 <ff_req_grant>:
	_SYNC_t sobj	/* Sync object to wait */
)
{
  int ret = 0;

  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8006382:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 8006386:	b508      	push	{r3, lr}
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8006388:	f000 f8a0 	bl	80064cc <osSemaphoreWait>
  {
    ret = 1;
  }

  return ret;
}
 800638c:	fab0 f080 	clz	r0, r0
 8006390:	0940      	lsrs	r0, r0, #5
 8006392:	bd08      	pop	{r3, pc}

08006394 <ff_rel_grant>:

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
  osSemaphoreRelease(sobj);
 8006394:	f000 b8c2 	b.w	800651c <osSemaphoreRelease>

08006398 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006398:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800639a:	f000 fea5 	bl	80070e8 <vTaskStartScheduler>
  
  return osOK;
}
 800639e:	2000      	movs	r0, #0
 80063a0:	bd08      	pop	{r3, pc}

080063a2 <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063a2:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80063a6:	b10b      	cbz	r3, 80063ac <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80063a8:	f000 beec 	b.w	8007184 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80063ac:	f000 bee4 	b.w	8007178 <xTaskGetTickCount>

080063b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063b0:	b530      	push	{r4, r5, lr}
 80063b2:	4604      	mov	r4, r0
 80063b4:	b085      	sub	sp, #20
 80063b6:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063b8:	8a22      	ldrh	r2, [r4, #16]
 80063ba:	ad03      	add	r5, sp, #12
 80063bc:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 80063c0:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80063c2:	bf14      	ite	ne
 80063c4:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80063c6:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063c8:	e9d0 1000 	ldrd	r1, r0, [r0]
 80063cc:	e9cd 4500 	strd	r4, r5, [sp]
 80063d0:	f000 fda6 	bl	8006f20 <xTaskCreate>
 80063d4:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80063d6:	bf0c      	ite	eq
 80063d8:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80063da:	2000      	movne	r0, #0
}
 80063dc:	b005      	add	sp, #20
 80063de:	bd30      	pop	{r4, r5, pc}

080063e0 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063e0:	2801      	cmp	r0, #1
{
 80063e2:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80063e4:	bf38      	it	cc
 80063e6:	2001      	movcc	r0, #1
 80063e8:	f000 ffe6 	bl	80073b8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80063ec:	2000      	movs	r0, #0
 80063ee:	bd08      	pop	{r3, pc}

080063f0 <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80063f0:	2001      	movs	r0, #1
 80063f2:	f000 baf3 	b.w	80069dc <xQueueCreateMutex>
	...

080063f8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80063f8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80063fa:	2400      	movs	r4, #0
{
 80063fc:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80063fe:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8006400:	b1e8      	cbz	r0, 800643e <osMutexWait+0x46>
 8006402:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8006406:	b19b      	cbz	r3, 8006430 <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006408:	aa01      	add	r2, sp, #4
 800640a:	4621      	mov	r1, r4
 800640c:	f000 fc8a 	bl	8006d24 <xQueueReceiveFromISR>
 8006410:	2801      	cmp	r0, #1
 8006412:	d112      	bne.n	800643a <osMutexWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006414:	9b01      	ldr	r3, [sp, #4]
 8006416:	b913      	cbnz	r3, 800641e <osMutexWait+0x26>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8006418:	2000      	movs	r0, #0
}
 800641a:	b002      	add	sp, #8
 800641c:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 800641e:	4b09      	ldr	r3, [pc, #36]	; (8006444 <osMutexWait+0x4c>)
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	e7f3      	b.n	8006418 <osMutexWait+0x20>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006430:	4619      	mov	r1, r3
 8006432:	f000 fbb1 	bl	8006b98 <xQueueGenericReceive>
 8006436:	2801      	cmp	r0, #1
 8006438:	d0ee      	beq.n	8006418 <osMutexWait+0x20>
    return osErrorOS;
 800643a:	20ff      	movs	r0, #255	; 0xff
 800643c:	e7ed      	b.n	800641a <osMutexWait+0x22>
    return osErrorParameter;
 800643e:	2080      	movs	r0, #128	; 0x80
 8006440:	e7eb      	b.n	800641a <osMutexWait+0x22>
 8006442:	bf00      	nop
 8006444:	e000ed04 	.word	0xe000ed04

08006448 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006448:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800644a:	2400      	movs	r4, #0
 800644c:	9401      	str	r4, [sp, #4]
 800644e:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8006452:	b193      	cbz	r3, 800647a <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006454:	a901      	add	r1, sp, #4
 8006456:	f000 fb42 	bl	8006ade <xQueueGiveFromISR>
 800645a:	2801      	cmp	r0, #1
 800645c:	d113      	bne.n	8006486 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	b913      	cbnz	r3, 8006468 <osMutexRelease+0x20>
  osStatus result = osOK;
 8006462:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8006464:	b002      	add	sp, #8
 8006466:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8006468:	4b08      	ldr	r3, [pc, #32]	; (800648c <osMutexRelease+0x44>)
 800646a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	e7f3      	b.n	8006462 <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800647a:	461a      	mov	r2, r3
 800647c:	4619      	mov	r1, r3
 800647e:	f000 f9f3 	bl	8006868 <xQueueGenericSend>
 8006482:	2801      	cmp	r0, #1
 8006484:	d0ed      	beq.n	8006462 <osMutexRelease+0x1a>
    result = osErrorOS;
 8006486:	20ff      	movs	r0, #255	; 0xff
 8006488:	e7ec      	b.n	8006464 <osMutexRelease+0x1c>
 800648a:	bf00      	nop
 800648c:	e000ed04 	.word	0xe000ed04

08006490 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8006490:	b510      	push	{r4, lr}
 8006492:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 8006496:	b91c      	cbnz	r4, 80064a0 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8006498:	f000 fcd6 	bl	8006e48 <vQueueDelete>

  return osOK;
}
 800649c:	4620      	mov	r0, r4
 800649e:	bd10      	pop	{r4, pc}
    return osErrorISR;
 80064a0:	2482      	movs	r4, #130	; 0x82
 80064a2:	e7fb      	b.n	800649c <osMutexDelete+0xc>

080064a4 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80064a4:	2901      	cmp	r1, #1
{ 
 80064a6:	4608      	mov	r0, r1
 80064a8:	b510      	push	{r4, lr}
  if (count == 1) {
 80064aa:	d10c      	bne.n	80064c6 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80064ac:	2203      	movs	r2, #3
 80064ae:	2100      	movs	r1, #0
 80064b0:	f000 f9b6 	bl	8006820 <xQueueGenericCreate>
 80064b4:	4604      	mov	r4, r0
 80064b6:	b120      	cbz	r0, 80064c2 <osSemaphoreCreate+0x1e>
 80064b8:	2300      	movs	r3, #0
 80064ba:	461a      	mov	r2, r3
 80064bc:	4619      	mov	r1, r3
 80064be:	f000 f9d3 	bl	8006868 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80064c2:	4620      	mov	r0, r4
 80064c4:	bd10      	pop	{r4, pc}
    return NULL;
 80064c6:	2400      	movs	r4, #0
 80064c8:	e7fb      	b.n	80064c2 <osSemaphoreCreate+0x1e>
	...

080064cc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80064cc:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80064ce:	2400      	movs	r4, #0
{
 80064d0:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80064d2:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80064d4:	b1e8      	cbz	r0, 8006512 <osSemaphoreWait+0x46>
 80064d6:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80064da:	b19b      	cbz	r3, 8006504 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80064dc:	aa01      	add	r2, sp, #4
 80064de:	4621      	mov	r1, r4
 80064e0:	f000 fc20 	bl	8006d24 <xQueueReceiveFromISR>
 80064e4:	2801      	cmp	r0, #1
 80064e6:	d112      	bne.n	800650e <osSemaphoreWait+0x42>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80064e8:	9b01      	ldr	r3, [sp, #4]
 80064ea:	b913      	cbnz	r3, 80064f2 <osSemaphoreWait+0x26>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80064ec:	2000      	movs	r0, #0
}
 80064ee:	b002      	add	sp, #8
 80064f0:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <osSemaphoreWait+0x4c>)
 80064f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064f8:	601a      	str	r2, [r3, #0]
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	e7f3      	b.n	80064ec <osSemaphoreWait+0x20>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006504:	4619      	mov	r1, r3
 8006506:	f000 fb47 	bl	8006b98 <xQueueGenericReceive>
 800650a:	2801      	cmp	r0, #1
 800650c:	d0ee      	beq.n	80064ec <osSemaphoreWait+0x20>
    return osErrorOS;
 800650e:	20ff      	movs	r0, #255	; 0xff
 8006510:	e7ed      	b.n	80064ee <osSemaphoreWait+0x22>
    return osErrorParameter;
 8006512:	2080      	movs	r0, #128	; 0x80
 8006514:	e7eb      	b.n	80064ee <osSemaphoreWait+0x22>
 8006516:	bf00      	nop
 8006518:	e000ed04 	.word	0xe000ed04

0800651c <osSemaphoreRelease>:
 800651c:	f7ff bf94 	b.w	8006448 <osMutexRelease>

08006520 <osSemaphoreDelete>:
 8006520:	f7ff bfb6 	b.w	8006490 <osMutexDelete>

08006524 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006524:	2200      	movs	r2, #0
 8006526:	e9d0 0100 	ldrd	r0, r1, [r0]
 800652a:	f000 b979 	b.w	8006820 <xQueueGenericCreate>
	...

08006530 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8006532:	2400      	movs	r4, #0
{
 8006534:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006536:	9403      	str	r4, [sp, #12]
 8006538:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 800653c:	b1a3      	cbz	r3, 8006568 <osMessagePut+0x38>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800653e:	4623      	mov	r3, r4
 8006540:	aa03      	add	r2, sp, #12
 8006542:	a901      	add	r1, sp, #4
 8006544:	f000 fa62 	bl	8006a0c <xQueueGenericSendFromISR>
 8006548:	2801      	cmp	r0, #1
 800654a:	d115      	bne.n	8006578 <osMessagePut+0x48>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800654c:	9b03      	ldr	r3, [sp, #12]
 800654e:	b913      	cbnz	r3, 8006556 <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8006550:	2000      	movs	r0, #0
}
 8006552:	b004      	add	sp, #16
 8006554:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <osMessagePut+0x4c>)
 8006558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	e7f3      	b.n	8006550 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006568:	2a01      	cmp	r2, #1
 800656a:	a901      	add	r1, sp, #4
 800656c:	bf38      	it	cc
 800656e:	2201      	movcc	r2, #1
 8006570:	f000 f97a 	bl	8006868 <xQueueGenericSend>
 8006574:	2801      	cmp	r0, #1
 8006576:	d0eb      	beq.n	8006550 <osMessagePut+0x20>
      return osErrorOS;
 8006578:	20ff      	movs	r0, #255	; 0xff
 800657a:	e7ea      	b.n	8006552 <osMessagePut+0x22>
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006580:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8006582:	2300      	movs	r3, #0
{
 8006584:	4604      	mov	r4, r0
 8006586:	4616      	mov	r6, r2
 8006588:	4608      	mov	r0, r1
 800658a:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 800658c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800658e:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8006590:	b911      	cbnz	r1, 8006598 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8006592:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	e016      	b.n	80065c6 <osMessageGet+0x46>
  taskWoken = pdFALSE;
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800659e:	b1cb      	cbz	r3, 80065d4 <osMessageGet+0x54>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80065a0:	466a      	mov	r2, sp
 80065a2:	a902      	add	r1, sp, #8
 80065a4:	f000 fbbe 	bl	8006d24 <xQueueReceiveFromISR>
      event.status = osOK;
 80065a8:	2801      	cmp	r0, #1
 80065aa:	bf0c      	ite	eq
 80065ac:	2310      	moveq	r3, #16
 80065ae:	2300      	movne	r3, #0
 80065b0:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80065b2:	9b00      	ldr	r3, [sp, #0]
 80065b4:	b13b      	cbz	r3, 80065c6 <osMessageGet+0x46>
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <osMessageGet+0x6c>)
 80065b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80065c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80065ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80065ce:	4620      	mov	r0, r4
 80065d0:	b004      	add	sp, #16
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80065d4:	a902      	add	r1, sp, #8
 80065d6:	f000 fadf 	bl	8006b98 <xQueueGenericReceive>
 80065da:	2801      	cmp	r0, #1
 80065dc:	d101      	bne.n	80065e2 <osMessageGet+0x62>
      event.status = osEventMessage;
 80065de:	2310      	movs	r3, #16
 80065e0:	e7d8      	b.n	8006594 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80065e2:	2e00      	cmp	r6, #0
 80065e4:	bf18      	it	ne
 80065e6:	2640      	movne	r6, #64	; 0x40
 80065e8:	9601      	str	r6, [sp, #4]
 80065ea:	e7ec      	b.n	80065c6 <osMessageGet+0x46>
 80065ec:	e000ed04 	.word	0xe000ed04

080065f0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80065f0:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80065f2:	f001 f83d 	bl	8007670 <xTaskGetSchedulerState>
 80065f6:	2801      	cmp	r0, #1
 80065f8:	d003      	beq.n	8006602 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80065fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80065fe:	f001 b9c1 	b.w	8007984 <xPortSysTickHandler>
}
 8006602:	bd08      	pop	{r3, pc}

08006604 <osMessageWaiting>:
 8006604:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 8006608:	b10b      	cbz	r3, 800660e <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800660a:	f000 bbf7 	b.w	8006dfc <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800660e:	f000 bbde 	b.w	8006dce <uxQueueMessagesWaiting>

08006612 <osMessageDelete>:
 8006612:	f7ff bf3d 	b.w	8006490 <osMutexDelete>

08006616 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006616:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800661a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800661e:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006620:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006622:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800662a:	4770      	bx	lr

0800662c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800662c:	2300      	movs	r3, #0
 800662e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006630:	4770      	bx	lr

08006632 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8006632:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006634:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8006636:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006638:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800663e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8006640:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006642:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006644:	3301      	adds	r3, #1
 8006646:	6003      	str	r3, [r0, #0]
}
 8006648:	4770      	bx	lr

0800664a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800664a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800664c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800664e:	1c63      	adds	r3, r4, #1
 8006650:	d10a      	bne.n	8006668 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006652:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006658:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800665a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800665c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800665e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006660:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8006662:	3301      	adds	r3, #1
 8006664:	6003      	str	r3, [r0, #0]
}
 8006666:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006668:	f100 0208 	add.w	r2, r0, #8
 800666c:	4613      	mov	r3, r2
 800666e:	6852      	ldr	r2, [r2, #4]
 8006670:	6815      	ldr	r5, [r2, #0]
 8006672:	42a5      	cmp	r5, r4
 8006674:	d9fa      	bls.n	800666c <vListInsert+0x22>
 8006676:	e7ed      	b.n	8006654 <vListInsert+0xa>

08006678 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006678:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800667a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800667e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006680:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006682:	6859      	ldr	r1, [r3, #4]
 8006684:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006686:	bf08      	it	eq
 8006688:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800668a:	2200      	movs	r2, #0
 800668c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800668e:	6818      	ldr	r0, [r3, #0]
 8006690:	3801      	subs	r0, #1
 8006692:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8006694:	4770      	bx	lr

08006696 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006698:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800669a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800669c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800669e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066a0:	b952      	cbnz	r2, 80066b8 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066a2:	6807      	ldr	r7, [r0, #0]
 80066a4:	bb47      	cbnz	r7, 80066f8 <prvCopyDataToQueue+0x62>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80066a6:	6840      	ldr	r0, [r0, #4]
 80066a8:	f001 f83e 	bl	8007728 <xTaskPriorityDisinherit>
 80066ac:	4605      	mov	r5, r0
				pxQueue->pxMutexHolder = NULL;
 80066ae:	6067      	str	r7, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80066b0:	3601      	adds	r6, #1

	return xReturn;
}
 80066b2:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80066b4:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80066b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80066b8:	b965      	cbnz	r5, 80066d4 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80066ba:	6880      	ldr	r0, [r0, #8]
 80066bc:	f00a fefa 	bl	80114b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80066c0:	68a3      	ldr	r3, [r4, #8]
 80066c2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80066c4:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066c6:	6862      	ldr	r2, [r4, #4]
 80066c8:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80066ca:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066cc:	d3f0      	bcc.n	80066b0 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	60a3      	str	r3, [r4, #8]
 80066d2:	e7ed      	b.n	80066b0 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066d4:	68c0      	ldr	r0, [r0, #12]
 80066d6:	f00a feed 	bl	80114b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80066da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80066dc:	68e3      	ldr	r3, [r4, #12]
 80066de:	4251      	negs	r1, r2
 80066e0:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066e2:	6822      	ldr	r2, [r4, #0]
 80066e4:	4293      	cmp	r3, r2
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80066e6:	60e3      	str	r3, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80066e8:	bf3e      	ittt	cc
 80066ea:	6863      	ldrcc	r3, [r4, #4]
 80066ec:	185b      	addcc	r3, r3, r1
 80066ee:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80066f0:	2d02      	cmp	r5, #2
 80066f2:	d101      	bne.n	80066f8 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f4:	b116      	cbz	r6, 80066fc <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80066f6:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80066f8:	2500      	movs	r5, #0
 80066fa:	e7d9      	b.n	80066b0 <prvCopyDataToQueue+0x1a>
 80066fc:	4635      	mov	r5, r6
 80066fe:	e7d7      	b.n	80066b0 <prvCopyDataToQueue+0x1a>

08006700 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006700:	4603      	mov	r3, r0
 8006702:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8006706:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006708:	b162      	cbz	r2, 8006724 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800670a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800670c:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800670e:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006710:	428c      	cmp	r4, r1
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006712:	60dc      	str	r4, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8006714:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006718:	bf24      	itt	cs
 800671a:	6819      	ldrcs	r1, [r3, #0]
 800671c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800671e:	68d9      	ldr	r1, [r3, #12]
 8006720:	f00a bec8 	b.w	80114b4 <memcpy>
}
 8006724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006728:	4770      	bx	lr

0800672a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800672a:	b570      	push	{r4, r5, r6, lr}
 800672c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800672e:	f001 f8b9 	bl	80078a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006732:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006736:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800673a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800673c:	2d00      	cmp	r5, #0
 800673e:	dc14      	bgt.n	800676a <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006740:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006742:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8006746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800674a:	f001 f8d1 	bl	80078f0 <vPortExitCritical>
	taskENTER_CRITICAL();
 800674e:	f001 f8a9 	bl	80078a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8006752:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8006756:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006758:	2d00      	cmp	r5, #0
 800675a:	dc12      	bgt.n	8006782 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800675c:	23ff      	movs	r3, #255	; 0xff
 800675e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8006762:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8006766:	f001 b8c3 	b.w	80078f0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800676a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d0e7      	beq.n	8006740 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006770:	4630      	mov	r0, r6
 8006772:	f000 fed9 	bl	8007528 <xTaskRemoveFromEventList>
 8006776:	b108      	cbz	r0, 800677c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8006778:	f000 ff74 	bl	8007664 <vTaskMissedYield>
			--cTxLock;
 800677c:	3d01      	subs	r5, #1
 800677e:	b26d      	sxtb	r5, r5
 8006780:	e7dc      	b.n	800673c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006782:	6923      	ldr	r3, [r4, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0e9      	beq.n	800675c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006788:	4630      	mov	r0, r6
 800678a:	f000 fecd 	bl	8007528 <xTaskRemoveFromEventList>
 800678e:	b108      	cbz	r0, 8006794 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8006790:	f000 ff68 	bl	8007664 <vTaskMissedYield>
				--cRxLock;
 8006794:	3d01      	subs	r5, #1
 8006796:	b26d      	sxtb	r5, r5
 8006798:	e7de      	b.n	8006758 <prvUnlockQueue+0x2e>
	...

0800679c <xQueueGenericReset>:
{
 800679c:	b538      	push	{r3, r4, r5, lr}
 800679e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80067a0:	4604      	mov	r4, r0
 80067a2:	b950      	cbnz	r0, 80067ba <xQueueGenericReset+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	b672      	cpsid	i
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	b662      	cpsie	i
 80067b8:	e7fe      	b.n	80067b8 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80067ba:	f001 f873 	bl	80078a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067be:	6822      	ldr	r2, [r4, #0]
 80067c0:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80067c4:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067c6:	434b      	muls	r3, r1
 80067c8:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80067ca:	1a5b      	subs	r3, r3, r1
 80067cc:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067ce:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067d0:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80067d2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80067d4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80067d6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80067d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80067dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80067e0:	b995      	cbnz	r5, 8006808 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	b163      	cbz	r3, 8006800 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067e6:	f104 0010 	add.w	r0, r4, #16
 80067ea:	f000 fe9d 	bl	8007528 <xTaskRemoveFromEventList>
 80067ee:	b138      	cbz	r0, 8006800 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <xQueueGenericReset+0x80>)
 80067f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8006800:	f001 f876 	bl	80078f0 <vPortExitCritical>
}
 8006804:	2001      	movs	r0, #1
 8006806:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006808:	f104 0010 	add.w	r0, r4, #16
 800680c:	f7ff ff03 	bl	8006616 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006810:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006814:	f7ff feff 	bl	8006616 <vListInitialise>
 8006818:	e7f2      	b.n	8006800 <xQueueGenericReset+0x64>
 800681a:	bf00      	nop
 800681c:	e000ed04 	.word	0xe000ed04

08006820 <xQueueGenericCreate>:
	{
 8006820:	b570      	push	{r4, r5, r6, lr}
 8006822:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006824:	4606      	mov	r6, r0
 8006826:	b950      	cbnz	r0, 800683e <xQueueGenericCreate+0x1e>
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	b672      	cpsid	i
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	b662      	cpsie	i
 800683c:	e7fe      	b.n	800683c <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006840:	3048      	adds	r0, #72	; 0x48
 8006842:	f001 f975 	bl	8007b30 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8006846:	4604      	mov	r4, r0
 8006848:	b148      	cbz	r0, 800685e <xQueueGenericCreate+0x3e>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800684a:	b155      	cbz	r5, 8006862 <xQueueGenericCreate+0x42>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800684c:	f100 0348 	add.w	r3, r0, #72	; 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006850:	2101      	movs	r1, #1
 8006852:	4620      	mov	r0, r4
 8006854:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8006856:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800685a:	f7ff ff9f 	bl	800679c <xQueueGenericReset>
	}
 800685e:	4620      	mov	r0, r4
 8006860:	bd70      	pop	{r4, r5, r6, pc}
 8006862:	4603      	mov	r3, r0
 8006864:	e7f4      	b.n	8006850 <xQueueGenericCreate+0x30>
	...

08006868 <xQueueGenericSend>:
{
 8006868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800686c:	4688      	mov	r8, r1
 800686e:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006870:	4604      	mov	r4, r0
{
 8006872:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006874:	b950      	cbnz	r0, 800688c <xQueueGenericSend+0x24>
 8006876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687a:	b672      	cpsid	i
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	b662      	cpsie	i
 800688a:	e7fe      	b.n	800688a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800688c:	b961      	cbnz	r1, 80068a8 <xQueueGenericSend+0x40>
 800688e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006890:	b153      	cbz	r3, 80068a8 <xQueueGenericSend+0x40>
 8006892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006896:	b672      	cpsid	i
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	b662      	cpsie	i
 80068a6:	e7fe      	b.n	80068a6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068a8:	2f02      	cmp	r7, #2
 80068aa:	d10d      	bne.n	80068c8 <xQueueGenericSend+0x60>
 80068ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d00a      	beq.n	80068c8 <xQueueGenericSend+0x60>
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	b672      	cpsid	i
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	b662      	cpsie	i
 80068c6:	e7fe      	b.n	80068c6 <xQueueGenericSend+0x5e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068c8:	f000 fed2 	bl	8007670 <xTaskGetSchedulerState>
 80068cc:	4606      	mov	r6, r0
 80068ce:	b960      	cbnz	r0, 80068ea <xQueueGenericSend+0x82>
 80068d0:	9b01      	ldr	r3, [sp, #4]
 80068d2:	b15b      	cbz	r3, 80068ec <xQueueGenericSend+0x84>
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	b672      	cpsid	i
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	b662      	cpsie	i
 80068e8:	e7fe      	b.n	80068e8 <xQueueGenericSend+0x80>
 80068ea:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80068ec:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 80068f0:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069d8 <xQueueGenericSend+0x170>
 80068f4:	e037      	b.n	8006966 <xQueueGenericSend+0xfe>
				if( xTicksToWait == ( TickType_t ) 0 )
 80068f6:	9d01      	ldr	r5, [sp, #4]
 80068f8:	b91d      	cbnz	r5, 8006902 <xQueueGenericSend+0x9a>
					taskEXIT_CRITICAL();
 80068fa:	f000 fff9 	bl	80078f0 <vPortExitCritical>
			return errQUEUE_FULL;
 80068fe:	2000      	movs	r0, #0
 8006900:	e050      	b.n	80069a4 <xQueueGenericSend+0x13c>
				else if( xEntryTimeSet == pdFALSE )
 8006902:	b916      	cbnz	r6, 800690a <xQueueGenericSend+0xa2>
					vTaskSetTimeOutState( &xTimeOut );
 8006904:	a802      	add	r0, sp, #8
 8006906:	f000 fe57 	bl	80075b8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800690a:	f000 fff1 	bl	80078f0 <vPortExitCritical>
		vTaskSuspendAll();
 800690e:	f000 fc2b 	bl	8007168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006912:	f000 ffc7 	bl	80078a4 <vPortEnterCritical>
 8006916:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800691a:	2bff      	cmp	r3, #255	; 0xff
 800691c:	d101      	bne.n	8006922 <xQueueGenericSend+0xba>
 800691e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8006922:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006926:	2bff      	cmp	r3, #255	; 0xff
 8006928:	d101      	bne.n	800692e <xQueueGenericSend+0xc6>
 800692a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800692e:	f000 ffdf 	bl	80078f0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006932:	a901      	add	r1, sp, #4
 8006934:	a802      	add	r0, sp, #8
 8006936:	f000 fe57 	bl	80075e8 <xTaskCheckForTimeOut>
 800693a:	2800      	cmp	r0, #0
 800693c:	d146      	bne.n	80069cc <xQueueGenericSend+0x164>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800693e:	f000 ffb1 	bl	80078a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006942:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006946:	429a      	cmp	r2, r3
 8006948:	d12f      	bne.n	80069aa <xQueueGenericSend+0x142>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800694a:	f000 ffd1 	bl	80078f0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800694e:	9901      	ldr	r1, [sp, #4]
 8006950:	f104 0010 	add.w	r0, r4, #16
 8006954:	f000 fdcc 	bl	80074f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006958:	4620      	mov	r0, r4
 800695a:	f7ff fee6 	bl	800672a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800695e:	f000 fcb1 	bl	80072c4 <xTaskResumeAll>
 8006962:	b350      	cbz	r0, 80069ba <xQueueGenericSend+0x152>
 8006964:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8006966:	f000 ff9d 	bl	80078a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800696a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800696c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800696e:	429a      	cmp	r2, r3
 8006970:	d301      	bcc.n	8006976 <xQueueGenericSend+0x10e>
 8006972:	2f02      	cmp	r7, #2
 8006974:	d1bf      	bne.n	80068f6 <xQueueGenericSend+0x8e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006976:	463a      	mov	r2, r7
 8006978:	4641      	mov	r1, r8
 800697a:	4620      	mov	r0, r4
 800697c:	f7ff fe8b 	bl	8006696 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006980:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006982:	b11b      	cbz	r3, 800698c <xQueueGenericSend+0x124>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006984:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006988:	f000 fdce 	bl	8007528 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800698c:	b138      	cbz	r0, 800699e <xQueueGenericSend+0x136>
						queueYIELD_IF_USING_PREEMPTION();
 800698e:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <xQueueGenericSend+0x170>)
 8006990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006994:	601a      	str	r2, [r3, #0]
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800699e:	f000 ffa7 	bl	80078f0 <vPortExitCritical>
				return pdPASS;
 80069a2:	2001      	movs	r0, #1
}
 80069a4:	b004      	add	sp, #16
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80069aa:	f000 ffa1 	bl	80078f0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff febb 	bl	800672a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069b4:	f000 fc86 	bl	80072c4 <xTaskResumeAll>
 80069b8:	e7d4      	b.n	8006964 <xQueueGenericSend+0xfc>
					portYIELD_WITHIN_API();
 80069ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80069be:	f8ca 3000 	str.w	r3, [sl]
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	e7cb      	b.n	8006964 <xQueueGenericSend+0xfc>
			prvUnlockQueue( pxQueue );
 80069cc:	4620      	mov	r0, r4
 80069ce:	f7ff feac 	bl	800672a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069d2:	f000 fc77 	bl	80072c4 <xTaskResumeAll>
 80069d6:	e792      	b.n	80068fe <xQueueGenericSend+0x96>
 80069d8:	e000ed04 	.word	0xe000ed04

080069dc <xQueueCreateMutex>:
	{
 80069dc:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80069de:	2048      	movs	r0, #72	; 0x48
 80069e0:	f001 f8a6 	bl	8007b30 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80069e4:	4604      	mov	r4, r0
 80069e6:	b178      	cbz	r0, 8006a08 <xQueueCreateMutex+0x2c>
	pxNewQueue->uxItemSize = uxItemSize;
 80069e8:	2500      	movs	r5, #0
 80069ea:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069ec:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80069ee:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069f2:	f7ff fed3 	bl	800679c <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80069f6:	462b      	mov	r3, r5
 80069f8:	462a      	mov	r2, r5
 80069fa:	4629      	mov	r1, r5
 80069fc:	4620      	mov	r0, r4
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80069fe:	60e5      	str	r5, [r4, #12]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006a00:	e9c4 5500 	strd	r5, r5, [r4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006a04:	f7ff ff30 	bl	8006868 <xQueueGenericSend>
	}
 8006a08:	4620      	mov	r0, r4
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}

08006a0c <xQueueGenericSendFromISR>:
{
 8006a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a10:	4689      	mov	r9, r1
 8006a12:	4690      	mov	r8, r2
 8006a14:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8006a16:	4604      	mov	r4, r0
 8006a18:	b950      	cbnz	r0, 8006a30 <xQueueGenericSendFromISR+0x24>
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	b672      	cpsid	i
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	b662      	cpsie	i
 8006a2e:	e7fe      	b.n	8006a2e <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a30:	b961      	cbnz	r1, 8006a4c <xQueueGenericSendFromISR+0x40>
 8006a32:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006a34:	b153      	cbz	r3, 8006a4c <xQueueGenericSendFromISR+0x40>
 8006a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a3a:	b672      	cpsid	i
 8006a3c:	f383 8811 	msr	BASEPRI, r3
 8006a40:	f3bf 8f6f 	isb	sy
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	b662      	cpsie	i
 8006a4a:	e7fe      	b.n	8006a4a <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a4c:	2f02      	cmp	r7, #2
 8006a4e:	d10d      	bne.n	8006a6c <xQueueGenericSendFromISR+0x60>
 8006a50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d00a      	beq.n	8006a6c <xQueueGenericSendFromISR+0x60>
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	b672      	cpsid	i
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	b662      	cpsie	i
 8006a6a:	e7fe      	b.n	8006a6a <xQueueGenericSendFromISR+0x5e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a6c:	f001 f80a 	bl	8007a84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a70:	f3ef 8611 	mrs	r6, BASEPRI
 8006a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a78:	b672      	cpsid	i
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d301      	bcc.n	8006a94 <xQueueGenericSendFromISR+0x88>
 8006a90:	2f02      	cmp	r7, #2
 8006a92:	d122      	bne.n	8006ada <xQueueGenericSendFromISR+0xce>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a94:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a98:	463a      	mov	r2, r7
 8006a9a:	4649      	mov	r1, r9
 8006a9c:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a9e:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006aa0:	f7ff fdf9 	bl	8006696 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8006aa4:	1c6b      	adds	r3, r5, #1
 8006aa6:	d113      	bne.n	8006ad0 <xQueueGenericSendFromISR+0xc4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aaa:	b90b      	cbnz	r3, 8006ab0 <xQueueGenericSendFromISR+0xa4>
			xReturn = pdPASS;
 8006aac:	2001      	movs	r0, #1
 8006aae:	e00b      	b.n	8006ac8 <xQueueGenericSendFromISR+0xbc>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ab0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006ab4:	f000 fd38 	bl	8007528 <xTaskRemoveFromEventList>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d0f7      	beq.n	8006aac <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8006abc:	f1b8 0f00 	cmp.w	r8, #0
 8006ac0:	d0f4      	beq.n	8006aac <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006ac2:	2001      	movs	r0, #1
 8006ac4:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ac8:	f386 8811 	msr	BASEPRI, r6
}
 8006acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006ad0:	3501      	adds	r5, #1
 8006ad2:	b26d      	sxtb	r5, r5
 8006ad4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8006ad8:	e7e8      	b.n	8006aac <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8006ada:	2000      	movs	r0, #0
 8006adc:	e7f4      	b.n	8006ac8 <xQueueGenericSendFromISR+0xbc>

08006ade <xQueueGiveFromISR>:
{
 8006ade:	b570      	push	{r4, r5, r6, lr}
 8006ae0:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	b950      	cbnz	r0, 8006afc <xQueueGiveFromISR+0x1e>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	b672      	cpsid	i
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	b662      	cpsie	i
 8006afa:	e7fe      	b.n	8006afa <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 8006afc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006afe:	b153      	cbz	r3, 8006b16 <xQueueGiveFromISR+0x38>
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	b672      	cpsid	i
 8006b06:	f383 8811 	msr	BASEPRI, r3
 8006b0a:	f3bf 8f6f 	isb	sy
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	b662      	cpsie	i
 8006b14:	e7fe      	b.n	8006b14 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8006b16:	6803      	ldr	r3, [r0, #0]
 8006b18:	b963      	cbnz	r3, 8006b34 <xQueueGiveFromISR+0x56>
 8006b1a:	6843      	ldr	r3, [r0, #4]
 8006b1c:	b153      	cbz	r3, 8006b34 <xQueueGiveFromISR+0x56>
 8006b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b22:	b672      	cpsid	i
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	b662      	cpsie	i
 8006b32:	e7fe      	b.n	8006b32 <xQueueGiveFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b34:	f000 ffa6 	bl	8007a84 <vPortValidateInterruptPriority>
	__asm volatile
 8006b38:	f3ef 8611 	mrs	r6, BASEPRI
 8006b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b40:	b672      	cpsid	i
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b50:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d91c      	bls.n	8006b92 <xQueueGiveFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8006b5c:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8006b5e:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b60:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8006b62:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8006b64:	d110      	bne.n	8006b88 <xQueueGiveFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b68:	b90b      	cbnz	r3, 8006b6e <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8006b6a:	2001      	movs	r0, #1
 8006b6c:	e009      	b.n	8006b82 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006b72:	f000 fcd9 	bl	8007528 <xTaskRemoveFromEventList>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d0f7      	beq.n	8006b6a <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 8006b7a:	2d00      	cmp	r5, #0
 8006b7c:	d0f5      	beq.n	8006b6a <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b7e:	2001      	movs	r0, #1
 8006b80:	6028      	str	r0, [r5, #0]
	__asm volatile
 8006b82:	f386 8811 	msr	BASEPRI, r6
}
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b88:	3301      	adds	r3, #1
 8006b8a:	b25b      	sxtb	r3, r3
 8006b8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006b90:	e7eb      	b.n	8006b6a <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 8006b92:	2000      	movs	r0, #0
 8006b94:	e7f5      	b.n	8006b82 <xQueueGiveFromISR+0xa4>
	...

08006b98 <xQueueGenericReceive>:
{
 8006b98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b9c:	460e      	mov	r6, r1
 8006b9e:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 8006ba0:	4604      	mov	r4, r0
{
 8006ba2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8006ba4:	b950      	cbnz	r0, 8006bbc <xQueueGenericReceive+0x24>
	__asm volatile
 8006ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006baa:	b672      	cpsid	i
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	b662      	cpsie	i
 8006bba:	e7fe      	b.n	8006bba <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bbc:	b961      	cbnz	r1, 8006bd8 <xQueueGenericReceive+0x40>
 8006bbe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006bc0:	b153      	cbz	r3, 8006bd8 <xQueueGenericReceive+0x40>
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	b672      	cpsid	i
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	b662      	cpsie	i
 8006bd6:	e7fe      	b.n	8006bd6 <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bd8:	f000 fd4a 	bl	8007670 <xTaskGetSchedulerState>
 8006bdc:	4605      	mov	r5, r0
 8006bde:	b960      	cbnz	r0, 8006bfa <xQueueGenericReceive+0x62>
 8006be0:	9b01      	ldr	r3, [sp, #4]
 8006be2:	b15b      	cbz	r3, 8006bfc <xQueueGenericReceive+0x64>
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	b672      	cpsid	i
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	b662      	cpsie	i
 8006bf8:	e7fe      	b.n	8006bf8 <xQueueGenericReceive+0x60>
 8006bfa:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8006bfc:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8006c00:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8006d20 <xQueueGenericReceive+0x188>
 8006c04:	e055      	b.n	8006cb2 <xQueueGenericReceive+0x11a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8006c08:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d074      	beq.n	8006cf8 <xQueueGenericReceive+0x160>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c12:	e066      	b.n	8006ce2 <xQueueGenericReceive+0x14a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c14:	9b01      	ldr	r3, [sp, #4]
 8006c16:	b91b      	cbnz	r3, 8006c20 <xQueueGenericReceive+0x88>
					taskEXIT_CRITICAL();
 8006c18:	f000 fe6a 	bl	80078f0 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e06e      	b.n	8006cfe <xQueueGenericReceive+0x166>
				else if( xEntryTimeSet == pdFALSE )
 8006c20:	b915      	cbnz	r5, 8006c28 <xQueueGenericReceive+0x90>
					vTaskSetTimeOutState( &xTimeOut );
 8006c22:	a802      	add	r0, sp, #8
 8006c24:	f000 fcc8 	bl	80075b8 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8006c28:	f000 fe62 	bl	80078f0 <vPortExitCritical>
		vTaskSuspendAll();
 8006c2c:	f000 fa9c 	bl	8007168 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c30:	f000 fe38 	bl	80078a4 <vPortEnterCritical>
 8006c34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006c38:	2bff      	cmp	r3, #255	; 0xff
 8006c3a:	d101      	bne.n	8006c40 <xQueueGenericReceive+0xa8>
 8006c3c:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8006c40:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006c44:	2bff      	cmp	r3, #255	; 0xff
 8006c46:	d101      	bne.n	8006c4c <xQueueGenericReceive+0xb4>
 8006c48:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8006c4c:	f000 fe50 	bl	80078f0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c50:	a901      	add	r1, sp, #4
 8006c52:	a802      	add	r0, sp, #8
 8006c54:	f000 fcc8 	bl	80075e8 <xTaskCheckForTimeOut>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d153      	bne.n	8006d04 <xQueueGenericReceive+0x16c>
	taskENTER_CRITICAL();
 8006c5c:	f000 fe22 	bl	80078a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c60:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c62:	b9f3      	cbnz	r3, 8006ca2 <xQueueGenericReceive+0x10a>
	taskEXIT_CRITICAL();
 8006c64:	f000 fe44 	bl	80078f0 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	b933      	cbnz	r3, 8006c7a <xQueueGenericReceive+0xe2>
						taskENTER_CRITICAL();
 8006c6c:	f000 fe1a 	bl	80078a4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8006c70:	6860      	ldr	r0, [r4, #4]
 8006c72:	f000 fd0d 	bl	8007690 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8006c76:	f000 fe3b 	bl	80078f0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c7a:	9901      	ldr	r1, [sp, #4]
 8006c7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006c80:	f000 fc36 	bl	80074f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c84:	4620      	mov	r0, r4
 8006c86:	f7ff fd50 	bl	800672a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c8a:	f000 fb1b 	bl	80072c4 <xTaskResumeAll>
 8006c8e:	b978      	cbnz	r0, 8006cb0 <xQueueGenericReceive+0x118>
					portYIELD_WITHIN_API();
 8006c90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c94:	f8ca 3000 	str.w	r3, [sl]
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	f3bf 8f6f 	isb	sy
 8006ca0:	e006      	b.n	8006cb0 <xQueueGenericReceive+0x118>
	taskEXIT_CRITICAL();
 8006ca2:	f000 fe25 	bl	80078f0 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f7ff fd3f 	bl	800672a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cac:	f000 fb0a 	bl	80072c4 <xTaskResumeAll>
 8006cb0:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 8006cb2:	f000 fdf7 	bl	80078a4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cb6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006cb8:	2f00      	cmp	r7, #0
 8006cba:	d0ab      	beq.n	8006c14 <xQueueGenericReceive+0x7c>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cbc:	4631      	mov	r1, r6
 8006cbe:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8006cc0:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cc2:	f7ff fd1d 	bl	8006700 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8006cc6:	f1b8 0f00 	cmp.w	r8, #0
 8006cca:	d19c      	bne.n	8006c06 <xQueueGenericReceive+0x6e>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006ccc:	3f01      	subs	r7, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cce:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006cd0:	63a7      	str	r7, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cd2:	b913      	cbnz	r3, 8006cda <xQueueGenericReceive+0x142>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006cd4:	f000 fd7e 	bl	80077d4 <pvTaskIncrementMutexHeldCount>
 8006cd8:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cda:	6923      	ldr	r3, [r4, #16]
 8006cdc:	b163      	cbz	r3, 8006cf8 <xQueueGenericReceive+0x160>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cde:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce2:	f000 fc21 	bl	8007528 <xTaskRemoveFromEventList>
 8006ce6:	b138      	cbz	r0, 8006cf8 <xQueueGenericReceive+0x160>
							queueYIELD_IF_USING_PREEMPTION();
 8006ce8:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <xQueueGenericReceive+0x188>)
 8006cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8006cf8:	f000 fdfa 	bl	80078f0 <vPortExitCritical>
				return pdPASS;
 8006cfc:	2001      	movs	r0, #1
}
 8006cfe:	b004      	add	sp, #16
 8006d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			prvUnlockQueue( pxQueue );
 8006d04:	4620      	mov	r0, r4
 8006d06:	f7ff fd10 	bl	800672a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d0a:	f000 fadb 	bl	80072c4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8006d0e:	f000 fdc9 	bl	80078a4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	f43f af7f 	beq.w	8006c18 <xQueueGenericReceive+0x80>
	taskEXIT_CRITICAL();
 8006d1a:	f000 fde9 	bl	80078f0 <vPortExitCritical>
	return xReturn;
 8006d1e:	e7c7      	b.n	8006cb0 <xQueueGenericReceive+0x118>
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <xQueueReceiveFromISR>:
{
 8006d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d28:	4689      	mov	r9, r1
 8006d2a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8006d2c:	4605      	mov	r5, r0
 8006d2e:	b950      	cbnz	r0, 8006d46 <xQueueReceiveFromISR+0x22>
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	b672      	cpsid	i
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	b662      	cpsie	i
 8006d44:	e7fe      	b.n	8006d44 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d46:	b961      	cbnz	r1, 8006d62 <xQueueReceiveFromISR+0x3e>
 8006d48:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006d4a:	b153      	cbz	r3, 8006d62 <xQueueReceiveFromISR+0x3e>
 8006d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d50:	b672      	cpsid	i
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	b662      	cpsie	i
 8006d60:	e7fe      	b.n	8006d60 <xQueueReceiveFromISR+0x3c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d62:	f000 fe8f 	bl	8007a84 <vPortValidateInterruptPriority>
	__asm volatile
 8006d66:	f3ef 8711 	mrs	r7, BASEPRI
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	b672      	cpsid	i
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d7e:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d80:	b31c      	cbz	r4, 8006dca <xQueueReceiveFromISR+0xa6>
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d82:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d86:	4649      	mov	r1, r9
 8006d88:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006d8a:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8006d8c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d8e:	f7ff fcb7 	bl	8006700 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8006d92:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8006d94:	1c73      	adds	r3, r6, #1
 8006d96:	d113      	bne.n	8006dc0 <xQueueReceiveFromISR+0x9c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d98:	692b      	ldr	r3, [r5, #16]
 8006d9a:	b90b      	cbnz	r3, 8006da0 <xQueueReceiveFromISR+0x7c>
			xReturn = pdPASS;
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	e00b      	b.n	8006db8 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da0:	f105 0010 	add.w	r0, r5, #16
 8006da4:	f000 fbc0 	bl	8007528 <xTaskRemoveFromEventList>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d0f7      	beq.n	8006d9c <xQueueReceiveFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
 8006dac:	f1b8 0f00 	cmp.w	r8, #0
 8006db0:	d0f4      	beq.n	8006d9c <xQueueReceiveFromISR+0x78>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006db2:	2001      	movs	r0, #1
 8006db4:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8006db8:	f387 8811 	msr	BASEPRI, r7
}
 8006dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006dc0:	3601      	adds	r6, #1
 8006dc2:	b276      	sxtb	r6, r6
 8006dc4:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8006dc8:	e7e8      	b.n	8006d9c <xQueueReceiveFromISR+0x78>
			xReturn = pdFAIL;
 8006dca:	4620      	mov	r0, r4
 8006dcc:	e7f4      	b.n	8006db8 <xQueueReceiveFromISR+0x94>

08006dce <uxQueueMessagesWaiting>:
{
 8006dce:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	b950      	cbnz	r0, 8006dea <uxQueueMessagesWaiting+0x1c>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd8:	b672      	cpsid	i
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	b662      	cpsie	i
 8006de8:	e7fe      	b.n	8006de8 <uxQueueMessagesWaiting+0x1a>
	taskENTER_CRITICAL();
 8006dea:	f000 fd5b 	bl	80078a4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006dee:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006df0:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8006df2:	f000 fd7d 	bl	80078f0 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006df6:	9801      	ldr	r0, [sp, #4]
 8006df8:	b002      	add	sp, #8
 8006dfa:	bd10      	pop	{r4, pc}

08006dfc <uxQueueMessagesWaitingFromISR>:
	configASSERT( xQueue );
 8006dfc:	b950      	cbnz	r0, 8006e14 <uxQueueMessagesWaitingFromISR+0x18>
 8006dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e02:	b672      	cpsid	i
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	b662      	cpsie	i
 8006e12:	e7fe      	b.n	8006e12 <uxQueueMessagesWaitingFromISR+0x16>
	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006e14:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006e16:	4770      	bx	lr

08006e18 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e18:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006e1a:	4909      	ldr	r1, [pc, #36]	; (8006e40 <vQueueUnregisterQueue+0x28>)
	{
 8006e1c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006e1e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8006e22:	00dc      	lsls	r4, r3, #3
 8006e24:	4282      	cmp	r2, r0
 8006e26:	d106      	bne.n	8006e36 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006e28:	4a06      	ldr	r2, [pc, #24]	; (8006e44 <vQueueUnregisterQueue+0x2c>)
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006e30:	4422      	add	r2, r4
 8006e32:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006e34:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e36:	3301      	adds	r3, #1
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d1f0      	bne.n	8006e1e <vQueueUnregisterQueue+0x6>
 8006e3c:	e7fa      	b.n	8006e34 <vQueueUnregisterQueue+0x1c>
 8006e3e:	bf00      	nop
 8006e40:	200085f0 	.word	0x200085f0
 8006e44:	200085ec 	.word	0x200085ec

08006e48 <vQueueDelete>:
{
 8006e48:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8006e4a:	b950      	cbnz	r0, 8006e62 <vQueueDelete+0x1a>
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	b672      	cpsid	i
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	b662      	cpsie	i
 8006e60:	e7fe      	b.n	8006e60 <vQueueDelete+0x18>
		vQueueUnregisterQueue( pxQueue );
 8006e62:	f7ff ffd9 	bl	8006e18 <vQueueUnregisterQueue>
}
 8006e66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8006e6a:	f000 beef 	b.w	8007c4c <vPortFree>
	...

08006e70 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e70:	4a06      	ldr	r2, [pc, #24]	; (8006e8c <prvResetNextTaskUnblockTime+0x1c>)
 8006e72:	6813      	ldr	r3, [r2, #0]
 8006e74:	6819      	ldr	r1, [r3, #0]
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <prvResetNextTaskUnblockTime+0x20>)
 8006e78:	b919      	cbnz	r1, 8006e82 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e7e:	601a      	str	r2, [r3, #0]
	}
}
 8006e80:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e82:	6812      	ldr	r2, [r2, #0]
 8006e84:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e86:	68d2      	ldr	r2, [r2, #12]
 8006e88:	6852      	ldr	r2, [r2, #4]
 8006e8a:	e7f8      	b.n	8006e7e <prvResetNextTaskUnblockTime+0xe>
 8006e8c:	200000f0 	.word	0x200000f0
 8006e90:	200001c8 	.word	0x200001c8

08006e94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e96:	4b1b      	ldr	r3, [pc, #108]	; (8006f04 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8006e98:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e9a:	4f1b      	ldr	r7, [pc, #108]	; (8006f08 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8006e9c:	460e      	mov	r6, r1
const TickType_t xConstTickCount = xTickCount;
 8006e9e:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006ea0:	6838      	ldr	r0, [r7, #0]
 8006ea2:	3004      	adds	r0, #4
 8006ea4:	f7ff fbe8 	bl	8006678 <uxListRemove>
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	b940      	cbnz	r0, 8006ebe <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	4817      	ldr	r0, [pc, #92]	; (8006f0c <prvAddCurrentTaskToDelayedList+0x78>)
 8006eb0:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8006eb2:	2101      	movs	r1, #1
 8006eb4:	6802      	ldr	r2, [r0, #0]
 8006eb6:	40b9      	lsls	r1, r7
 8006eb8:	ea22 0201 	bic.w	r2, r2, r1
 8006ebc:	6002      	str	r2, [r0, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ebe:	1c62      	adds	r2, r4, #1
 8006ec0:	d107      	bne.n	8006ed2 <prvAddCurrentTaskToDelayedList+0x3e>
 8006ec2:	b136      	cbz	r6, 8006ed2 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ec4:	6819      	ldr	r1, [r3, #0]
 8006ec6:	4812      	ldr	r0, [pc, #72]	; (8006f10 <prvAddCurrentTaskToDelayedList+0x7c>)
 8006ec8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006eca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ece:	f7ff bbb0 	b.w	8006632 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ed2:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8006ed8:	d307      	bcc.n	8006eea <prvAddCurrentTaskToDelayedList+0x56>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eda:	4a0e      	ldr	r2, [pc, #56]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x80>)
 8006edc:	6810      	ldr	r0, [r2, #0]
 8006ede:	6819      	ldr	r1, [r3, #0]
}
 8006ee0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee4:	3104      	adds	r1, #4
 8006ee6:	f7ff bbb0 	b.w	800664a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eea:	4a0b      	ldr	r2, [pc, #44]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x84>)
 8006eec:	6810      	ldr	r0, [r2, #0]
 8006eee:	6819      	ldr	r1, [r3, #0]
 8006ef0:	3104      	adds	r1, #4
 8006ef2:	f7ff fbaa 	bl	800664a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ef6:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x88>)
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	42a2      	cmp	r2, r4
 8006efc:	d900      	bls.n	8006f00 <prvAddCurrentTaskToDelayedList+0x6c>
					xNextTaskUnblockTime = xTimeToWake;
 8006efe:	601c      	str	r4, [r3, #0]
}
 8006f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000210 	.word	0x20000210
 8006f08:	200000ec 	.word	0x200000ec
 8006f0c:	20000198 	.word	0x20000198
 8006f10:	200001e8 	.word	0x200001e8
 8006f14:	200000f4 	.word	0x200000f4
 8006f18:	200000f0 	.word	0x200000f0
 8006f1c:	200001c8 	.word	0x200001c8

08006f20 <xTaskCreate>:
	{
 8006f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f24:	0097      	lsls	r7, r2, #2
	{
 8006f26:	4680      	mov	r8, r0
 8006f28:	460e      	mov	r6, r1
 8006f2a:	469a      	mov	sl, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f000 fdff 	bl	8007b30 <pvPortMalloc>
			if( pxStack != NULL )
 8006f32:	4605      	mov	r5, r0
 8006f34:	2800      	cmp	r0, #0
 8006f36:	f000 80a2 	beq.w	800707e <xTaskCreate+0x15e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006f3a:	2054      	movs	r0, #84	; 0x54
 8006f3c:	f000 fdf8 	bl	8007b30 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006f40:	4604      	mov	r4, r0
 8006f42:	2800      	cmp	r0, #0
 8006f44:	f000 8098 	beq.w	8007078 <xTaskCreate+0x158>
					pxNewTCB->pxStack = pxStack;
 8006f48:	1e73      	subs	r3, r6, #1
 8006f4a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8006f4e:	360f      	adds	r6, #15
 8006f50:	6305      	str	r5, [r0, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f52:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006f56:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8006f5a:	7819      	ldrb	r1, [r3, #0]
 8006f5c:	b109      	cbz	r1, 8006f62 <xTaskCreate+0x42>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f5e:	42b3      	cmp	r3, r6
 8006f60:	d1f7      	bne.n	8006f52 <xTaskCreate+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f62:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006f64:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f68:	f104 0904 	add.w	r9, r4, #4
 8006f6c:	2e06      	cmp	r6, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f6e:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f72:	4648      	mov	r0, r9
 8006f74:	bf28      	it	cs
 8006f76:	2606      	movcs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8006f78:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8006f7a:	e9c4 6b11 	strd	r6, fp, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f7e:	f7ff fb55 	bl	800662c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f82:	f104 0018 	add.w	r0, r4, #24
 8006f86:	f7ff fb51 	bl	800662c <vListInitialiseItem>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f8a:	1f38      	subs	r0, r7, #4
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f8c:	f1c6 0607 	rsb	r6, r6, #7
		pxNewTCB->ulNotifiedValue = 0;
 8006f90:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006f94:	4428      	add	r0, r5
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f96:	4652      	mov	r2, sl
 8006f98:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f9a:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f9c:	f020 0007 	bic.w	r0, r0, #7
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa0:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006fa2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fa4:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fa8:	f000 fc56 	bl	8007858 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 8006fac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fae:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006fb0:	b103      	cbz	r3, 8006fb4 <xTaskCreate+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fb2:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8006fb4:	f000 fc76 	bl	80078a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006fb8:	4b37      	ldr	r3, [pc, #220]	; (8007098 <xTaskCreate+0x178>)
		if( pxCurrentTCB == NULL )
 8006fba:	4e38      	ldr	r6, [pc, #224]	; (800709c <xTaskCreate+0x17c>)
		uxCurrentNumberOfTasks++;
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4f38      	ldr	r7, [pc, #224]	; (80070a0 <xTaskCreate+0x180>)
 8006fc0:	3201      	adds	r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006fc4:	6832      	ldr	r2, [r6, #0]
 8006fc6:	2a00      	cmp	r2, #0
 8006fc8:	d15c      	bne.n	8007084 <xTaskCreate+0x164>
			pxCurrentTCB = pxNewTCB;
 8006fca:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d12b      	bne.n	800702a <xTaskCreate+0x10a>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006fd2:	4834      	ldr	r0, [pc, #208]	; (80070a4 <xTaskCreate+0x184>)
 8006fd4:	f7ff fb1f 	bl	8006616 <vListInitialise>
 8006fd8:	4833      	ldr	r0, [pc, #204]	; (80070a8 <xTaskCreate+0x188>)
 8006fda:	f7ff fb1c 	bl	8006616 <vListInitialise>
 8006fde:	4833      	ldr	r0, [pc, #204]	; (80070ac <xTaskCreate+0x18c>)
 8006fe0:	f7ff fb19 	bl	8006616 <vListInitialise>
 8006fe4:	4832      	ldr	r0, [pc, #200]	; (80070b0 <xTaskCreate+0x190>)
 8006fe6:	f7ff fb16 	bl	8006616 <vListInitialise>
 8006fea:	4832      	ldr	r0, [pc, #200]	; (80070b4 <xTaskCreate+0x194>)
 8006fec:	f7ff fb13 	bl	8006616 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8006ff0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80070e4 <xTaskCreate+0x1c4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ff4:	4830      	ldr	r0, [pc, #192]	; (80070b8 <xTaskCreate+0x198>)
 8006ff6:	f7ff fb0e 	bl	8006616 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ffa:	4d30      	ldr	r5, [pc, #192]	; (80070bc <xTaskCreate+0x19c>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ffc:	4830      	ldr	r0, [pc, #192]	; (80070c0 <xTaskCreate+0x1a0>)
 8006ffe:	f7ff fb0a 	bl	8006616 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8007002:	4640      	mov	r0, r8
 8007004:	f7ff fb07 	bl	8006616 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007008:	4628      	mov	r0, r5
 800700a:	f7ff fb04 	bl	8006616 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800700e:	482d      	ldr	r0, [pc, #180]	; (80070c4 <xTaskCreate+0x1a4>)
 8007010:	f7ff fb01 	bl	8006616 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8007014:	482c      	ldr	r0, [pc, #176]	; (80070c8 <xTaskCreate+0x1a8>)
 8007016:	f7ff fafe 	bl	8006616 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800701a:	482c      	ldr	r0, [pc, #176]	; (80070cc <xTaskCreate+0x1ac>)
 800701c:	f7ff fafb 	bl	8006616 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8007020:	4b2b      	ldr	r3, [pc, #172]	; (80070d0 <xTaskCreate+0x1b0>)
 8007022:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007026:	4b2b      	ldr	r3, [pc, #172]	; (80070d4 <xTaskCreate+0x1b4>)
 8007028:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800702a:	4a2b      	ldr	r2, [pc, #172]	; (80070d8 <xTaskCreate+0x1b8>)
		prvAddTaskToReadyList( pxNewTCB );
 800702c:	2501      	movs	r5, #1
 800702e:	492b      	ldr	r1, [pc, #172]	; (80070dc <xTaskCreate+0x1bc>)
		uxTaskNumber++;
 8007030:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007032:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8007034:	3301      	adds	r3, #1
 8007036:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8007038:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800703a:	fa05 f302 	lsl.w	r3, r5, r2
 800703e:	4303      	orrs	r3, r0
 8007040:	2014      	movs	r0, #20
 8007042:	600b      	str	r3, [r1, #0]
 8007044:	4649      	mov	r1, r9
 8007046:	4b17      	ldr	r3, [pc, #92]	; (80070a4 <xTaskCreate+0x184>)
 8007048:	fb00 3002 	mla	r0, r0, r2, r3
 800704c:	f7ff faf1 	bl	8006632 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8007050:	f000 fc4e 	bl	80078f0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	b163      	cbz	r3, 8007072 <xTaskCreate+0x152>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007058:	6833      	ldr	r3, [r6, #0]
 800705a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800705e:	429a      	cmp	r2, r3
 8007060:	d207      	bcs.n	8007072 <xTaskCreate+0x152>
			taskYIELD_IF_USING_PREEMPTION();
 8007062:	4b1f      	ldr	r3, [pc, #124]	; (80070e0 <xTaskCreate+0x1c0>)
 8007064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	f3bf 8f6f 	isb	sy
	}
 8007072:	4628      	mov	r0, r5
 8007074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8007078:	4628      	mov	r0, r5
 800707a:	f000 fde7 	bl	8007c4c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800707e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007082:	e7f6      	b.n	8007072 <xTaskCreate+0x152>
			if( xSchedulerRunning == pdFALSE )
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1cf      	bne.n	800702a <xTaskCreate+0x10a>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800708a:	6833      	ldr	r3, [r6, #0]
 800708c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800708e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007090:	429a      	cmp	r2, r3
 8007092:	d3ca      	bcc.n	800702a <xTaskCreate+0x10a>
					pxCurrentTCB = pxNewTCB;
 8007094:	6034      	str	r4, [r6, #0]
 8007096:	e7c8      	b.n	800702a <xTaskCreate+0x10a>
 8007098:	20000184 	.word	0x20000184
 800709c:	200000ec 	.word	0x200000ec
 80070a0:	200001e4 	.word	0x200001e4
 80070a4:	200000f8 	.word	0x200000f8
 80070a8:	2000010c 	.word	0x2000010c
 80070ac:	20000120 	.word	0x20000120
 80070b0:	20000134 	.word	0x20000134
 80070b4:	20000148 	.word	0x20000148
 80070b8:	2000015c 	.word	0x2000015c
 80070bc:	200001b0 	.word	0x200001b0
 80070c0:	20000170 	.word	0x20000170
 80070c4:	200001d0 	.word	0x200001d0
 80070c8:	200001fc 	.word	0x200001fc
 80070cc:	200001e8 	.word	0x200001e8
 80070d0:	200000f0 	.word	0x200000f0
 80070d4:	200000f4 	.word	0x200000f4
 80070d8:	20000194 	.word	0x20000194
 80070dc:	20000198 	.word	0x20000198
 80070e0:	e000ed04 	.word	0xe000ed04
 80070e4:	2000019c 	.word	0x2000019c

080070e8 <vTaskStartScheduler>:
{
 80070e8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80070ea:	4b19      	ldr	r3, [pc, #100]	; (8007150 <vTaskStartScheduler+0x68>)
 80070ec:	2400      	movs	r4, #0
 80070ee:	2280      	movs	r2, #128	; 0x80
 80070f0:	4918      	ldr	r1, [pc, #96]	; (8007154 <vTaskStartScheduler+0x6c>)
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	4623      	mov	r3, r4
 80070f6:	4818      	ldr	r0, [pc, #96]	; (8007158 <vTaskStartScheduler+0x70>)
 80070f8:	9400      	str	r4, [sp, #0]
 80070fa:	f7ff ff11 	bl	8006f20 <xTaskCreate>
	if( xReturn == pdPASS )
 80070fe:	2801      	cmp	r0, #1
 8007100:	d116      	bne.n	8007130 <vTaskStartScheduler+0x48>
 8007102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007106:	b672      	cpsid	i
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8007116:	4b11      	ldr	r3, [pc, #68]	; (800715c <vTaskStartScheduler+0x74>)
 8007118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800711c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800711e:	4b10      	ldr	r3, [pc, #64]	; (8007160 <vTaskStartScheduler+0x78>)
 8007120:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007122:	4b10      	ldr	r3, [pc, #64]	; (8007164 <vTaskStartScheduler+0x7c>)
 8007124:	601c      	str	r4, [r3, #0]
}
 8007126:	b002      	add	sp, #8
 8007128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800712c:	f000 bc56 	b.w	80079dc <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007130:	3001      	adds	r0, #1
 8007132:	d10a      	bne.n	800714a <vTaskStartScheduler+0x62>
 8007134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007138:	b672      	cpsid	i
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	b662      	cpsie	i
 8007148:	e7fe      	b.n	8007148 <vTaskStartScheduler+0x60>
}
 800714a:	b002      	add	sp, #8
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	200001c4 	.word	0x200001c4
 8007154:	08012f98 	.word	0x08012f98
 8007158:	08007405 	.word	0x08007405
 800715c:	200001c8 	.word	0x200001c8
 8007160:	200001e4 	.word	0x200001e4
 8007164:	20000210 	.word	0x20000210

08007168 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8007168:	4a02      	ldr	r2, [pc, #8]	; (8007174 <vTaskSuspendAll+0xc>)
 800716a:	6813      	ldr	r3, [r2, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	6013      	str	r3, [r2, #0]
}
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000190 	.word	0x20000190

08007178 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8007178:	4b01      	ldr	r3, [pc, #4]	; (8007180 <xTaskGetTickCount+0x8>)
 800717a:	6818      	ldr	r0, [r3, #0]
}
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20000210 	.word	0x20000210

08007184 <xTaskGetTickCountFromISR>:
{
 8007184:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007186:	f000 fc7d 	bl	8007a84 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 800718a:	4b01      	ldr	r3, [pc, #4]	; (8007190 <xTaskGetTickCountFromISR+0xc>)
 800718c:	6818      	ldr	r0, [r3, #0]
}
 800718e:	bd08      	pop	{r3, pc}
 8007190:	20000210 	.word	0x20000210

08007194 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007194:	4b40      	ldr	r3, [pc, #256]	; (8007298 <xTaskIncrementTick+0x104>)
 8007196:	681b      	ldr	r3, [r3, #0]
{
 8007198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800719c:	2b00      	cmp	r3, #0
 800719e:	d175      	bne.n	800728c <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + 1;
 80071a0:	4b3e      	ldr	r3, [pc, #248]	; (800729c <xTaskIncrementTick+0x108>)
 80071a2:	681d      	ldr	r5, [r3, #0]
 80071a4:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80071a6:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80071a8:	b9cd      	cbnz	r5, 80071de <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80071aa:	4b3d      	ldr	r3, [pc, #244]	; (80072a0 <xTaskIncrementTick+0x10c>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	b152      	cbz	r2, 80071c8 <xTaskIncrementTick+0x34>
 80071b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	e7fe      	b.n	80071c6 <xTaskIncrementTick+0x32>
 80071c8:	4a36      	ldr	r2, [pc, #216]	; (80072a4 <xTaskIncrementTick+0x110>)
 80071ca:	6819      	ldr	r1, [r3, #0]
 80071cc:	6810      	ldr	r0, [r2, #0]
 80071ce:	6018      	str	r0, [r3, #0]
 80071d0:	6011      	str	r1, [r2, #0]
 80071d2:	4a35      	ldr	r2, [pc, #212]	; (80072a8 <xTaskIncrementTick+0x114>)
 80071d4:	6813      	ldr	r3, [r2, #0]
 80071d6:	3301      	adds	r3, #1
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	f7ff fe49 	bl	8006e70 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071de:	4e33      	ldr	r6, [pc, #204]	; (80072ac <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80071e0:	2400      	movs	r4, #0
 80071e2:	4f33      	ldr	r7, [pc, #204]	; (80072b0 <xTaskIncrementTick+0x11c>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071e4:	6833      	ldr	r3, [r6, #0]
 80071e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 80072bc <xTaskIncrementTick+0x128>
 80071ea:	42ab      	cmp	r3, r5
 80071ec:	d911      	bls.n	8007212 <xTaskIncrementTick+0x7e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071ee:	f8d8 3000 	ldr.w	r3, [r8]
 80071f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f4:	2314      	movs	r3, #20
 80071f6:	4353      	muls	r3, r2
 80071f8:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	bf28      	it	cs
 80071fe:	2401      	movcs	r4, #1
		if( xYieldPending != pdFALSE )
 8007200:	4b2c      	ldr	r3, [pc, #176]	; (80072b4 <xTaskIncrementTick+0x120>)
 8007202:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8007204:	2b00      	cmp	r3, #0
}
 8007206:	bf0c      	ite	eq
 8007208:	4620      	moveq	r0, r4
 800720a:	2001      	movne	r0, #1
 800720c:	b003      	add	sp, #12
 800720e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007212:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80072a0 <xTaskIncrementTick+0x10c>
					prvAddTaskToReadyList( pxTCB );
 8007216:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80072c0 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800721a:	f8da 3000 	ldr.w	r3, [sl]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	b91b      	cbnz	r3, 800722a <xTaskIncrementTick+0x96>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007226:	6033      	str	r3, [r6, #0]
					break;
 8007228:	e7e1      	b.n	80071ee <xTaskIncrementTick+0x5a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800722a:	f8da 3000 	ldr.w	r3, [sl]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007234:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 8007238:	4295      	cmp	r5, r2
 800723a:	d201      	bcs.n	8007240 <xTaskIncrementTick+0xac>
						xNextTaskUnblockTime = xItemValue;
 800723c:	6032      	str	r2, [r6, #0]
						break;
 800723e:	e7d6      	b.n	80071ee <xTaskIncrementTick+0x5a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007240:	f10b 0104 	add.w	r1, fp, #4
 8007244:	4608      	mov	r0, r1
 8007246:	9101      	str	r1, [sp, #4]
 8007248:	f7ff fa16 	bl	8006678 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800724c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 8007250:	9901      	ldr	r1, [sp, #4]
 8007252:	b122      	cbz	r2, 800725e <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007254:	f10b 0018 	add.w	r0, fp, #24
 8007258:	f7ff fa0e 	bl	8006678 <uxListRemove>
 800725c:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800725e:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8007262:	2201      	movs	r2, #1
 8007264:	f8d9 3000 	ldr.w	r3, [r9]
 8007268:	4082      	lsls	r2, r0
 800726a:	431a      	orrs	r2, r3
 800726c:	f8c9 2000 	str.w	r2, [r9]
 8007270:	2214      	movs	r2, #20
 8007272:	fb02 7000 	mla	r0, r2, r0, r7
 8007276:	f7ff f9dc 	bl	8006632 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800727a:	f8d8 1000 	ldr.w	r1, [r8]
 800727e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8007282:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8007284:	429a      	cmp	r2, r3
 8007286:	bf28      	it	cs
 8007288:	2401      	movcs	r4, #1
 800728a:	e7c6      	b.n	800721a <xTaskIncrementTick+0x86>
		++uxPendedTicks;
 800728c:	4a0a      	ldr	r2, [pc, #40]	; (80072b8 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800728e:	2400      	movs	r4, #0
		++uxPendedTicks;
 8007290:	6813      	ldr	r3, [r2, #0]
 8007292:	3301      	adds	r3, #1
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	e7b3      	b.n	8007200 <xTaskIncrementTick+0x6c>
 8007298:	20000190 	.word	0x20000190
 800729c:	20000210 	.word	0x20000210
 80072a0:	200000f0 	.word	0x200000f0
 80072a4:	200000f4 	.word	0x200000f4
 80072a8:	200001cc 	.word	0x200001cc
 80072ac:	200001c8 	.word	0x200001c8
 80072b0:	200000f8 	.word	0x200000f8
 80072b4:	20000214 	.word	0x20000214
 80072b8:	2000018c 	.word	0x2000018c
 80072bc:	200000ec 	.word	0x200000ec
 80072c0:	20000198 	.word	0x20000198

080072c4 <xTaskResumeAll>:
{
 80072c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80072c8:	4c32      	ldr	r4, [pc, #200]	; (8007394 <xTaskResumeAll+0xd0>)
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	b953      	cbnz	r3, 80072e4 <xTaskResumeAll+0x20>
 80072ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d2:	b672      	cpsid	i
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	b662      	cpsie	i
 80072e2:	e7fe      	b.n	80072e2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80072e4:	f000 fade 	bl	80078a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072ee:	6824      	ldr	r4, [r4, #0]
 80072f0:	b134      	cbz	r4, 8007300 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 80072f2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80072f4:	f000 fafc 	bl	80078f0 <vPortExitCritical>
}
 80072f8:	4620      	mov	r0, r4
 80072fa:	b002      	add	sp, #8
 80072fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007300:	4b25      	ldr	r3, [pc, #148]	; (8007398 <xTaskResumeAll+0xd4>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f4      	beq.n	80072f2 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007308:	4d24      	ldr	r5, [pc, #144]	; (800739c <xTaskResumeAll+0xd8>)
					prvAddTaskToReadyList( pxTCB );
 800730a:	4e25      	ldr	r6, [pc, #148]	; (80073a0 <xTaskResumeAll+0xdc>)
 800730c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80073b4 <xTaskResumeAll+0xf0>
 8007310:	e01f      	b.n	8007352 <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007312:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8007314:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007316:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007318:	f104 0018 	add.w	r0, r4, #24
 800731c:	f7ff f9ac 	bl	8006678 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007320:	1d21      	adds	r1, r4, #4
 8007322:	4608      	mov	r0, r1
 8007324:	9101      	str	r1, [sp, #4]
 8007326:	f7ff f9a7 	bl	8006678 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800732a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800732c:	6830      	ldr	r0, [r6, #0]
 800732e:	fa07 f302 	lsl.w	r3, r7, r2
 8007332:	9901      	ldr	r1, [sp, #4]
 8007334:	4303      	orrs	r3, r0
 8007336:	2014      	movs	r0, #20
 8007338:	fb00 8002 	mla	r0, r0, r2, r8
 800733c:	6033      	str	r3, [r6, #0]
 800733e:	f7ff f978 	bl	8006632 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007342:	4b18      	ldr	r3, [pc, #96]	; (80073a4 <xTaskResumeAll+0xe0>)
 8007344:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	429a      	cmp	r2, r3
 800734c:	d301      	bcc.n	8007352 <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 800734e:	4b16      	ldr	r3, [pc, #88]	; (80073a8 <xTaskResumeAll+0xe4>)
 8007350:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1dc      	bne.n	8007312 <xTaskResumeAll+0x4e>
				if( pxTCB != NULL )
 8007358:	b10c      	cbz	r4, 800735e <xTaskResumeAll+0x9a>
					prvResetNextTaskUnblockTime();
 800735a:	f7ff fd89 	bl	8006e70 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800735e:	4d13      	ldr	r5, [pc, #76]	; (80073ac <xTaskResumeAll+0xe8>)
 8007360:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007362:	b144      	cbz	r4, 8007376 <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8007364:	4e10      	ldr	r6, [pc, #64]	; (80073a8 <xTaskResumeAll+0xe4>)
 8007366:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8007368:	f7ff ff14 	bl	8007194 <xTaskIncrementTick>
 800736c:	b100      	cbz	r0, 8007370 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800736e:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007370:	3c01      	subs	r4, #1
 8007372:	d1f9      	bne.n	8007368 <xTaskResumeAll+0xa4>
						uxPendedTicks = 0;
 8007374:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8007376:	4b0c      	ldr	r3, [pc, #48]	; (80073a8 <xTaskResumeAll+0xe4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d0b9      	beq.n	80072f2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800737e:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <xTaskResumeAll+0xec>)
 8007380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800738e:	2401      	movs	r4, #1
 8007390:	e7b0      	b.n	80072f4 <xTaskResumeAll+0x30>
 8007392:	bf00      	nop
 8007394:	20000190 	.word	0x20000190
 8007398:	20000184 	.word	0x20000184
 800739c:	200001d0 	.word	0x200001d0
 80073a0:	20000198 	.word	0x20000198
 80073a4:	200000ec 	.word	0x200000ec
 80073a8:	20000214 	.word	0x20000214
 80073ac:	2000018c 	.word	0x2000018c
 80073b0:	e000ed04 	.word	0xe000ed04
 80073b4:	200000f8 	.word	0x200000f8

080073b8 <vTaskDelay>:
	{
 80073b8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80073ba:	b940      	cbnz	r0, 80073ce <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80073bc:	4b0f      	ldr	r3, [pc, #60]	; (80073fc <vTaskDelay+0x44>)
 80073be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	f3bf 8f6f 	isb	sy
	}
 80073cc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80073ce:	4b0c      	ldr	r3, [pc, #48]	; (8007400 <vTaskDelay+0x48>)
 80073d0:	6819      	ldr	r1, [r3, #0]
 80073d2:	b151      	cbz	r1, 80073ea <vTaskDelay+0x32>
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	b672      	cpsid	i
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	b662      	cpsie	i
 80073e8:	e7fe      	b.n	80073e8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80073ea:	f7ff febd 	bl	8007168 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80073ee:	f7ff fd51 	bl	8006e94 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80073f2:	f7ff ff67 	bl	80072c4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80073f6:	2800      	cmp	r0, #0
 80073f8:	d0e0      	beq.n	80073bc <vTaskDelay+0x4>
 80073fa:	e7e7      	b.n	80073cc <vTaskDelay+0x14>
 80073fc:	e000ed04 	.word	0xe000ed04
 8007400:	20000190 	.word	0x20000190

08007404 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8007404:	4e17      	ldr	r6, [pc, #92]	; (8007464 <prvIdleTask+0x60>)
{
 8007406:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007408:	4c17      	ldr	r4, [pc, #92]	; (8007468 <prvIdleTask+0x64>)
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	b963      	cbnz	r3, 8007428 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800740e:	4b17      	ldr	r3, [pc, #92]	; (800746c <prvIdleTask+0x68>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d9f8      	bls.n	8007408 <prvIdleTask+0x4>
				taskYIELD();
 8007416:	4b16      	ldr	r3, [pc, #88]	; (8007470 <prvIdleTask+0x6c>)
 8007418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741c:	601a      	str	r2, [r3, #0]
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	e7ef      	b.n	8007408 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8007428:	f7ff fe9e 	bl	8007168 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800742c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 800742e:	f7ff ff49 	bl	80072c4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8007432:	2d00      	cmp	r5, #0
 8007434:	d0e9      	beq.n	800740a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8007436:	f000 fa35 	bl	80078a4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800743a:	68f3      	ldr	r3, [r6, #12]
 800743c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800743e:	1d28      	adds	r0, r5, #4
 8007440:	f7ff f91a 	bl	8006678 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8007444:	4a0b      	ldr	r2, [pc, #44]	; (8007474 <prvIdleTask+0x70>)
 8007446:	6813      	ldr	r3, [r2, #0]
 8007448:	3b01      	subs	r3, #1
 800744a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	3b01      	subs	r3, #1
 8007450:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8007452:	f000 fa4d 	bl	80078f0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8007456:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8007458:	f000 fbf8 	bl	8007c4c <vPortFree>
			vPortFree( pxTCB );
 800745c:	4628      	mov	r0, r5
 800745e:	f000 fbf5 	bl	8007c4c <vPortFree>
	}
 8007462:	e7d2      	b.n	800740a <prvIdleTask+0x6>
 8007464:	200001fc 	.word	0x200001fc
 8007468:	20000188 	.word	0x20000188
 800746c:	200000f8 	.word	0x200000f8
 8007470:	e000ed04 	.word	0xe000ed04
 8007474:	20000184 	.word	0x20000184

08007478 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007478:	4b18      	ldr	r3, [pc, #96]	; (80074dc <vTaskSwitchContext+0x64>)
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	4b18      	ldr	r3, [pc, #96]	; (80074e0 <vTaskSwitchContext+0x68>)
{
 800747e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007480:	b112      	cbz	r2, 8007488 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8007482:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007484:	601a      	str	r2, [r3, #0]
}
 8007486:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8007488:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800748a:	4b16      	ldr	r3, [pc, #88]	; (80074e4 <vTaskSwitchContext+0x6c>)
 800748c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800748e:	fab3 f383 	clz	r3, r3
 8007492:	b2db      	uxtb	r3, r3
 8007494:	2214      	movs	r2, #20
 8007496:	4914      	ldr	r1, [pc, #80]	; (80074e8 <vTaskSwitchContext+0x70>)
 8007498:	f1c3 031f 	rsb	r3, r3, #31
 800749c:	435a      	muls	r2, r3
 800749e:	588c      	ldr	r4, [r1, r2]
 80074a0:	1888      	adds	r0, r1, r2
 80074a2:	b954      	cbnz	r4, 80074ba <vTaskSwitchContext+0x42>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a8:	b672      	cpsid	i
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	b662      	cpsie	i
 80074b8:	e7fe      	b.n	80074b8 <vTaskSwitchContext+0x40>
 80074ba:	6844      	ldr	r4, [r0, #4]
 80074bc:	3208      	adds	r2, #8
 80074be:	6864      	ldr	r4, [r4, #4]
 80074c0:	440a      	add	r2, r1
 80074c2:	4294      	cmp	r4, r2
 80074c4:	6044      	str	r4, [r0, #4]
 80074c6:	bf04      	itt	eq
 80074c8:	6862      	ldreq	r2, [r4, #4]
 80074ca:	6042      	streq	r2, [r0, #4]
 80074cc:	2214      	movs	r2, #20
 80074ce:	fb02 1303 	mla	r3, r2, r3, r1
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	68da      	ldr	r2, [r3, #12]
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <vTaskSwitchContext+0x74>)
 80074d8:	e7d4      	b.n	8007484 <vTaskSwitchContext+0xc>
 80074da:	bf00      	nop
 80074dc:	20000190 	.word	0x20000190
 80074e0:	20000214 	.word	0x20000214
 80074e4:	20000198 	.word	0x20000198
 80074e8:	200000f8 	.word	0x200000f8
 80074ec:	200000ec 	.word	0x200000ec

080074f0 <vTaskPlaceOnEventList>:
{
 80074f0:	b510      	push	{r4, lr}
 80074f2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80074f4:	b950      	cbnz	r0, 800750c <vTaskPlaceOnEventList+0x1c>
 80074f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fa:	b672      	cpsid	i
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	b662      	cpsie	i
 800750a:	e7fe      	b.n	800750a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <vTaskPlaceOnEventList+0x34>)
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	3118      	adds	r1, #24
 8007512:	f7ff f89a 	bl	800664a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007516:	4620      	mov	r0, r4
 8007518:	2101      	movs	r1, #1
}
 800751a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800751e:	f7ff bcb9 	b.w	8006e94 <prvAddCurrentTaskToDelayedList>
 8007522:	bf00      	nop
 8007524:	200000ec 	.word	0x200000ec

08007528 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007528:	68c3      	ldr	r3, [r0, #12]
{
 800752a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800752c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800752e:	b954      	cbnz	r4, 8007546 <xTaskRemoveFromEventList+0x1e>
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	b672      	cpsid	i
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	b662      	cpsie	i
 8007544:	e7fe      	b.n	8007544 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007546:	f104 0118 	add.w	r1, r4, #24
 800754a:	4608      	mov	r0, r1
 800754c:	9101      	str	r1, [sp, #4]
 800754e:	f7ff f893 	bl	8006678 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <xTaskRemoveFromEventList+0x78>)
 8007554:	9901      	ldr	r1, [sp, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	b9eb      	cbnz	r3, 8007596 <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800755a:	1d21      	adds	r1, r4, #4
 800755c:	4608      	mov	r0, r1
 800755e:	9101      	str	r1, [sp, #4]
 8007560:	f7ff f88a 	bl	8006678 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007564:	480f      	ldr	r0, [pc, #60]	; (80075a4 <xTaskRemoveFromEventList+0x7c>)
 8007566:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007568:	2301      	movs	r3, #1
 800756a:	6805      	ldr	r5, [r0, #0]
 800756c:	4093      	lsls	r3, r2
 800756e:	9901      	ldr	r1, [sp, #4]
 8007570:	432b      	orrs	r3, r5
 8007572:	6003      	str	r3, [r0, #0]
 8007574:	2014      	movs	r0, #20
 8007576:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <xTaskRemoveFromEventList+0x80>)
 8007578:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800757c:	f7ff f859 	bl	8006632 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <xTaskRemoveFromEventList+0x84>)
 8007582:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007588:	429a      	cmp	r2, r3
 800758a:	d906      	bls.n	800759a <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
 800758c:	2001      	movs	r0, #1
 800758e:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <xTaskRemoveFromEventList+0x88>)
 8007590:	6018      	str	r0, [r3, #0]
}
 8007592:	b003      	add	sp, #12
 8007594:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007596:	4807      	ldr	r0, [pc, #28]	; (80075b4 <xTaskRemoveFromEventList+0x8c>)
 8007598:	e7f0      	b.n	800757c <xTaskRemoveFromEventList+0x54>
		xReturn = pdFALSE;
 800759a:	2000      	movs	r0, #0
	return xReturn;
 800759c:	e7f9      	b.n	8007592 <xTaskRemoveFromEventList+0x6a>
 800759e:	bf00      	nop
 80075a0:	20000190 	.word	0x20000190
 80075a4:	20000198 	.word	0x20000198
 80075a8:	200000f8 	.word	0x200000f8
 80075ac:	200000ec 	.word	0x200000ec
 80075b0:	20000214 	.word	0x20000214
 80075b4:	200001d0 	.word	0x200001d0

080075b8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 80075b8:	b950      	cbnz	r0, 80075d0 <vTaskSetTimeOutState+0x18>
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	b672      	cpsid	i
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	b662      	cpsie	i
 80075ce:	e7fe      	b.n	80075ce <vTaskSetTimeOutState+0x16>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075d0:	4b03      	ldr	r3, [pc, #12]	; (80075e0 <vTaskSetTimeOutState+0x28>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075d6:	4b03      	ldr	r3, [pc, #12]	; (80075e4 <vTaskSetTimeOutState+0x2c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6043      	str	r3, [r0, #4]
}
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	200001cc 	.word	0x200001cc
 80075e4:	20000210 	.word	0x20000210

080075e8 <xTaskCheckForTimeOut>:
{
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80075ec:	4604      	mov	r4, r0
 80075ee:	b950      	cbnz	r0, 8007606 <xTaskCheckForTimeOut+0x1e>
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	b672      	cpsid	i
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	b662      	cpsie	i
 8007604:	e7fe      	b.n	8007604 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8007606:	b951      	cbnz	r1, 800761e <xTaskCheckForTimeOut+0x36>
 8007608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760c:	b672      	cpsid	i
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	b662      	cpsie	i
 800761c:	e7fe      	b.n	800761c <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800761e:	f000 f941 	bl	80078a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8007622:	4b0e      	ldr	r3, [pc, #56]	; (800765c <xTaskCheckForTimeOut+0x74>)
 8007624:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	d010      	beq.n	800764e <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800762c:	4a0c      	ldr	r2, [pc, #48]	; (8007660 <xTaskCheckForTimeOut+0x78>)
 800762e:	6810      	ldr	r0, [r2, #0]
 8007630:	e9d4 6200 	ldrd	r6, r2, [r4]
 8007634:	4286      	cmp	r6, r0
 8007636:	d001      	beq.n	800763c <xTaskCheckForTimeOut+0x54>
 8007638:	4291      	cmp	r1, r2
 800763a:	d20d      	bcs.n	8007658 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800763c:	1a88      	subs	r0, r1, r2
 800763e:	4283      	cmp	r3, r0
 8007640:	d90a      	bls.n	8007658 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007642:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8007644:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8007646:	4413      	add	r3, r2
 8007648:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800764a:	f7ff ffb5 	bl	80075b8 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 800764e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8007650:	f000 f94e 	bl	80078f0 <vPortExitCritical>
}
 8007654:	4620      	mov	r0, r4
 8007656:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8007658:	2401      	movs	r4, #1
 800765a:	e7f9      	b.n	8007650 <xTaskCheckForTimeOut+0x68>
 800765c:	20000210 	.word	0x20000210
 8007660:	200001cc 	.word	0x200001cc

08007664 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8007664:	4b01      	ldr	r3, [pc, #4]	; (800766c <vTaskMissedYield+0x8>)
 8007666:	2201      	movs	r2, #1
 8007668:	601a      	str	r2, [r3, #0]
}
 800766a:	4770      	bx	lr
 800766c:	20000214 	.word	0x20000214

08007670 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <xTaskGetSchedulerState+0x18>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	b133      	cbz	r3, 8007684 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007676:	4b05      	ldr	r3, [pc, #20]	; (800768c <xTaskGetSchedulerState+0x1c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800767c:	bf0c      	ite	eq
 800767e:	2002      	moveq	r0, #2
 8007680:	2000      	movne	r0, #0
 8007682:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007684:	2001      	movs	r0, #1
	}
 8007686:	4770      	bx	lr
 8007688:	200001e4 	.word	0x200001e4
 800768c:	20000190 	.word	0x20000190

08007690 <vTaskPriorityInherit>:
	{
 8007690:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8007692:	4604      	mov	r4, r0
 8007694:	2800      	cmp	r0, #0
 8007696:	d02f      	beq.n	80076f8 <vTaskPriorityInherit+0x68>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007698:	4d20      	ldr	r5, [pc, #128]	; (800771c <vTaskPriorityInherit+0x8c>)
 800769a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800769c:	682a      	ldr	r2, [r5, #0]
 800769e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d229      	bcs.n	80076f8 <vTaskPriorityInherit+0x68>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076a4:	6982      	ldr	r2, [r0, #24]
 80076a6:	2a00      	cmp	r2, #0
 80076a8:	db04      	blt.n	80076b4 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076aa:	682a      	ldr	r2, [r5, #0]
 80076ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80076ae:	f1c2 0207 	rsb	r2, r2, #7
 80076b2:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80076b4:	4e1a      	ldr	r6, [pc, #104]	; (8007720 <vTaskPriorityInherit+0x90>)
 80076b6:	2714      	movs	r7, #20
 80076b8:	6962      	ldr	r2, [r4, #20]
 80076ba:	fb07 6303 	mla	r3, r7, r3, r6
 80076be:	429a      	cmp	r2, r3
 80076c0:	d117      	bne.n	80076f2 <vTaskPriorityInherit+0x62>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c2:	1d21      	adds	r1, r4, #4
 80076c4:	4608      	mov	r0, r1
 80076c6:	9101      	str	r1, [sp, #4]
 80076c8:	f7fe ffd6 	bl	8006678 <uxListRemove>
 80076cc:	4a15      	ldr	r2, [pc, #84]	; (8007724 <vTaskPriorityInherit+0x94>)
 80076ce:	9901      	ldr	r1, [sp, #4]
 80076d0:	b1a0      	cbz	r0, 80076fc <vTaskPriorityInherit+0x6c>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076d2:	682b      	ldr	r3, [r5, #0]
 80076d4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80076d6:	2301      	movs	r3, #1
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076d8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80076da:	4083      	lsls	r3, r0
 80076dc:	6814      	ldr	r4, [r2, #0]
 80076de:	4323      	orrs	r3, r4
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	2314      	movs	r3, #20
 80076e4:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80076e8:	b003      	add	sp, #12
 80076ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
					prvAddTaskToReadyList( pxTCB );
 80076ee:	f7fe bfa0 	b.w	8006632 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076f2:	682b      	ldr	r3, [r5, #0]
 80076f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 80076f8:	b003      	add	sp, #12
 80076fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80076fc:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8007700:	fb07 f70c 	mul.w	r7, r7, ip
 8007704:	59f3      	ldr	r3, [r6, r7]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1e3      	bne.n	80076d2 <vTaskPriorityInherit+0x42>
 800770a:	2001      	movs	r0, #1
 800770c:	6813      	ldr	r3, [r2, #0]
 800770e:	fa00 f00c 	lsl.w	r0, r0, ip
 8007712:	ea23 0300 	bic.w	r3, r3, r0
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	e7db      	b.n	80076d2 <vTaskPriorityInherit+0x42>
 800771a:	bf00      	nop
 800771c:	200000ec 	.word	0x200000ec
 8007720:	200000f8 	.word	0x200000f8
 8007724:	20000198 	.word	0x20000198

08007728 <xTaskPriorityDisinherit>:
	{
 8007728:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800772a:	4604      	mov	r4, r0
 800772c:	b910      	cbnz	r0, 8007734 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 800772e:	2000      	movs	r0, #0
	}
 8007730:	b003      	add	sp, #12
 8007732:	bdf0      	pop	{r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8007734:	4b24      	ldr	r3, [pc, #144]	; (80077c8 <xTaskPriorityDisinherit+0xa0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4283      	cmp	r3, r0
 800773a:	d00a      	beq.n	8007752 <xTaskPriorityDisinherit+0x2a>
 800773c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007740:	b672      	cpsid	i
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	b662      	cpsie	i
 8007750:	e7fe      	b.n	8007750 <xTaskPriorityDisinherit+0x28>
			configASSERT( pxTCB->uxMutexesHeld );
 8007752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007754:	b953      	cbnz	r3, 800776c <xTaskPriorityDisinherit+0x44>
 8007756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775a:	b672      	cpsid	i
 800775c:	f383 8811 	msr	BASEPRI, r3
 8007760:	f3bf 8f6f 	isb	sy
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	b662      	cpsie	i
 800776a:	e7fe      	b.n	800776a <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800776c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800776e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007770:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8007772:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007774:	4291      	cmp	r1, r2
 8007776:	d0da      	beq.n	800772e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1d8      	bne.n	800772e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800777c:	1d01      	adds	r1, r0, #4
 800777e:	4f13      	ldr	r7, [pc, #76]	; (80077cc <xTaskPriorityDisinherit+0xa4>)
 8007780:	4608      	mov	r0, r1
 8007782:	9101      	str	r1, [sp, #4]
 8007784:	f7fe ff78 	bl	8006678 <uxListRemove>
 8007788:	4a11      	ldr	r2, [pc, #68]	; (80077d0 <xTaskPriorityDisinherit+0xa8>)
 800778a:	9901      	ldr	r1, [sp, #4]
 800778c:	b950      	cbnz	r0, 80077a4 <xTaskPriorityDisinherit+0x7c>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800778e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007790:	2614      	movs	r6, #20
 8007792:	4346      	muls	r6, r0
 8007794:	59bb      	ldr	r3, [r7, r6]
 8007796:	b92b      	cbnz	r3, 80077a4 <xTaskPriorityDisinherit+0x7c>
 8007798:	2501      	movs	r5, #1
 800779a:	6813      	ldr	r3, [r2, #0]
 800779c:	4085      	lsls	r5, r0
 800779e:	ea23 0305 	bic.w	r3, r3, r5
 80077a2:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077a6:	f1c3 0007 	rsb	r0, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077aa:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ac:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80077ae:	2401      	movs	r4, #1
 80077b0:	6810      	ldr	r0, [r2, #0]
 80077b2:	fa04 f503 	lsl.w	r5, r4, r3
 80077b6:	4305      	orrs	r5, r0
 80077b8:	2014      	movs	r0, #20
 80077ba:	fb00 7003 	mla	r0, r0, r3, r7
 80077be:	6015      	str	r5, [r2, #0]
 80077c0:	f7fe ff37 	bl	8006632 <vListInsertEnd>
					xReturn = pdTRUE;
 80077c4:	4620      	mov	r0, r4
		return xReturn;
 80077c6:	e7b3      	b.n	8007730 <xTaskPriorityDisinherit+0x8>
 80077c8:	200000ec 	.word	0x200000ec
 80077cc:	200000f8 	.word	0x200000f8
 80077d0:	20000198 	.word	0x20000198

080077d4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <pvTaskIncrementMutexHeldCount+0x14>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	b11a      	cbz	r2, 80077e2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80077da:	6819      	ldr	r1, [r3, #0]
 80077dc:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80077de:	3201      	adds	r2, #1
 80077e0:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80077e2:	6818      	ldr	r0, [r3, #0]
	}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	200000ec 	.word	0x200000ec

080077ec <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077ec:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <prvTaskExitError+0x34>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3301      	adds	r3, #1
 80077f2:	d00a      	beq.n	800780a <prvTaskExitError+0x1e>
 80077f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f8:	b672      	cpsid	i
 80077fa:	f383 8811 	msr	BASEPRI, r3
 80077fe:	f3bf 8f6f 	isb	sy
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	b662      	cpsie	i
 8007808:	e7fe      	b.n	8007808 <prvTaskExitError+0x1c>
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	b672      	cpsid	i
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	for( ;; );
 800781e:	e7fe      	b.n	800781e <prvTaskExitError+0x32>
 8007820:	20000024 	.word	0x20000024

08007824 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007824:	4806      	ldr	r0, [pc, #24]	; (8007840 <prvPortStartFirstTask+0x1c>)
 8007826:	6800      	ldr	r0, [r0, #0]
 8007828:	6800      	ldr	r0, [r0, #0]
 800782a:	f380 8808 	msr	MSP, r0
 800782e:	b662      	cpsie	i
 8007830:	b661      	cpsie	f
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	df00      	svc	0
 800783c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800783e:	0000      	.short	0x0000
 8007840:	e000ed08 	.word	0xe000ed08

08007844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007854 <vPortEnableVFP+0x10>
 8007848:	6801      	ldr	r1, [r0, #0]
 800784a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800784e:	6001      	str	r1, [r0, #0]
 8007850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007852:	0000      	.short	0x0000
 8007854:	e000ed88 	.word	0xe000ed88

08007858 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800785c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007860:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8007864:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007866:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007868:	4b03      	ldr	r3, [pc, #12]	; (8007878 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800786a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800786c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800786e:	f06f 0302 	mvn.w	r3, #2
 8007872:	6203      	str	r3, [r0, #32]
}
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	080077ed 	.word	0x080077ed
 800787c:	00000000 	.word	0x00000000

08007880 <SVC_Handler>:
	__asm volatile (
 8007880:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <pxCurrentTCBConst2>)
 8007882:	6819      	ldr	r1, [r3, #0]
 8007884:	6808      	ldr	r0, [r1, #0]
 8007886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788a:	f380 8809 	msr	PSP, r0
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8811 	msr	BASEPRI, r0
 800789a:	4770      	bx	lr
 800789c:	f3af 8000 	nop.w

080078a0 <pxCurrentTCBConst2>:
 80078a0:	200000ec 	.word	0x200000ec

080078a4 <vPortEnterCritical>:
 80078a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a8:	b672      	cpsid	i
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	b662      	cpsie	i
	uxCriticalNesting++;
 80078b8:	4a0b      	ldr	r2, [pc, #44]	; (80078e8 <vPortEnterCritical+0x44>)
 80078ba:	6813      	ldr	r3, [r2, #0]
 80078bc:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80078be:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80078c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80078c2:	d10f      	bne.n	80078e4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078c4:	4b09      	ldr	r3, [pc, #36]	; (80078ec <vPortEnterCritical+0x48>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80078cc:	d00a      	beq.n	80078e4 <vPortEnterCritical+0x40>
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	b672      	cpsid	i
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	b662      	cpsie	i
 80078e2:	e7fe      	b.n	80078e2 <vPortEnterCritical+0x3e>
}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000024 	.word	0x20000024
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80078f0:	4a09      	ldr	r2, [pc, #36]	; (8007918 <vPortExitCritical+0x28>)
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	b953      	cbnz	r3, 800790c <vPortExitCritical+0x1c>
 80078f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fa:	b672      	cpsid	i
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	b662      	cpsie	i
 800790a:	e7fe      	b.n	800790a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800790c:	3b01      	subs	r3, #1
 800790e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007910:	b90b      	cbnz	r3, 8007916 <vPortExitCritical+0x26>
	__asm volatile
 8007912:	f383 8811 	msr	BASEPRI, r3
}
 8007916:	4770      	bx	lr
 8007918:	20000024 	.word	0x20000024
 800791c:	00000000 	.word	0x00000000

08007920 <PendSV_Handler>:
	__asm volatile
 8007920:	f3ef 8009 	mrs	r0, PSP
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	4b15      	ldr	r3, [pc, #84]	; (8007980 <pxCurrentTCBConst>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	f01e 0f10 	tst.w	lr, #16
 8007930:	bf08      	it	eq
 8007932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793a:	6010      	str	r0, [r2, #0]
 800793c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8007940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007944:	b672      	cpsid	i
 8007946:	f380 8811 	msr	BASEPRI, r0
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	b662      	cpsie	i
 8007954:	f7ff fd90 	bl	8007478 <vTaskSwitchContext>
 8007958:	f04f 0000 	mov.w	r0, #0
 800795c:	f380 8811 	msr	BASEPRI, r0
 8007960:	bc08      	pop	{r3}
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	6808      	ldr	r0, [r1, #0]
 8007966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	f01e 0f10 	tst.w	lr, #16
 800796e:	bf08      	it	eq
 8007970:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007974:	f380 8809 	msr	PSP, r0
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop

08007980 <pxCurrentTCBConst>:
 8007980:	200000ec 	.word	0x200000ec

08007984 <xPortSysTickHandler>:
{
 8007984:	b508      	push	{r3, lr}
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	b672      	cpsid	i
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 800799a:	f7ff fbfb 	bl	8007194 <xTaskIncrementTick>
 800799e:	b118      	cbz	r0, 80079a8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079a0:	4b03      	ldr	r3, [pc, #12]	; (80079b0 <xPortSysTickHandler+0x2c>)
 80079a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a6:	601a      	str	r2, [r3, #0]
	__asm volatile
 80079a8:	2300      	movs	r3, #0
 80079aa:	f383 8811 	msr	BASEPRI, r3
}
 80079ae:	bd08      	pop	{r3, pc}
 80079b0:	e000ed04 	.word	0xe000ed04

080079b4 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80079b4:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <vPortSetupTimerInterrupt+0x1c>)
 80079b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80079c0:	4a04      	ldr	r2, [pc, #16]	; (80079d4 <vPortSetupTimerInterrupt+0x20>)
 80079c2:	3b01      	subs	r3, #1
 80079c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80079c6:	2207      	movs	r2, #7
 80079c8:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <vPortSetupTimerInterrupt+0x24>)
 80079ca:	601a      	str	r2, [r3, #0]
}
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	20000030 	.word	0x20000030
 80079d4:	e000e014 	.word	0xe000e014
 80079d8:	e000e010 	.word	0xe000e010

080079dc <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079dc:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <xPortStartScheduler+0x90>)
{
 80079de:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079e0:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079e2:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079e4:	b2d2      	uxtb	r2, r2
 80079e6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079e8:	22ff      	movs	r2, #255	; 0xff
 80079ea:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079ec:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079ee:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079f6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80079fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079fe:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a00:	2207      	movs	r2, #7
 8007a02:	4b1c      	ldr	r3, [pc, #112]	; (8007a74 <xPortStartScheduler+0x98>)
 8007a04:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a06:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8007a0a:	1e54      	subs	r4, r2, #1
 8007a0c:	0600      	lsls	r0, r0, #24
 8007a0e:	d423      	bmi.n	8007a58 <xPortStartScheduler+0x7c>
 8007a10:	b101      	cbz	r1, 8007a14 <xPortStartScheduler+0x38>
 8007a12:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a18:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007a1c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	4a12      	ldr	r2, [pc, #72]	; (8007a6c <xPortStartScheduler+0x90>)
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a26:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <xPortStartScheduler+0x9c>)
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007a2e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8007a36:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007a38:	f7ff ffbc 	bl	80079b4 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <xPortStartScheduler+0xa0>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8007a42:	f7ff feff 	bl	8007844 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a46:	4a0e      	ldr	r2, [pc, #56]	; (8007a80 <xPortStartScheduler+0xa4>)
 8007a48:	6813      	ldr	r3, [r2, #0]
 8007a4a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a4e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007a50:	f7ff fee8 	bl	8007824 <prvPortStartFirstTask>
	prvTaskExitError();
 8007a54:	f7ff feca 	bl	80077ec <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a58:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	0052      	lsls	r2, r2, #1
 8007a60:	b2d2      	uxtb	r2, r2
 8007a62:	f88d 2003 	strb.w	r2, [sp, #3]
 8007a66:	4622      	mov	r2, r4
 8007a68:	e7cd      	b.n	8007a06 <xPortStartScheduler+0x2a>
 8007a6a:	bf00      	nop
 8007a6c:	e000e400 	.word	0xe000e400
 8007a70:	20000218 	.word	0x20000218
 8007a74:	2000021c 	.word	0x2000021c
 8007a78:	e000ed20 	.word	0xe000ed20
 8007a7c:	20000024 	.word	0x20000024
 8007a80:	e000ef34 	.word	0xe000ef34

08007a84 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8007a84:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007a88:	2b0f      	cmp	r3, #15
 8007a8a:	d910      	bls.n	8007aae <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007a8c:	4a12      	ldr	r2, [pc, #72]	; (8007ad8 <vPortValidateInterruptPriority+0x54>)
 8007a8e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007a90:	4a12      	ldr	r2, [pc, #72]	; (8007adc <vPortValidateInterruptPriority+0x58>)
 8007a92:	7812      	ldrb	r2, [r2, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d90a      	bls.n	8007aae <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	b672      	cpsid	i
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	b662      	cpsie	i
 8007aac:	e7fe      	b.n	8007aac <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007aae:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <vPortValidateInterruptPriority+0x5c>)
 8007ab0:	4a0c      	ldr	r2, [pc, #48]	; (8007ae4 <vPortValidateInterruptPriority+0x60>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d90a      	bls.n	8007ad4 <vPortValidateInterruptPriority+0x50>
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	b672      	cpsid	i
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	b662      	cpsie	i
 8007ad2:	e7fe      	b.n	8007ad2 <vPortValidateInterruptPriority+0x4e>
	}
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	e000e3f0 	.word	0xe000e3f0
 8007adc:	20000218 	.word	0x20000218
 8007ae0:	e000ed0c 	.word	0xe000ed0c
 8007ae4:	2000021c 	.word	0x2000021c

08007ae8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007ae8:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <prvInsertBlockIntoFreeList+0x40>)
{
 8007aea:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007aec:	461a      	mov	r2, r3
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4283      	cmp	r3, r0
 8007af2:	d3fb      	bcc.n	8007aec <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007af4:	6854      	ldr	r4, [r2, #4]
 8007af6:	1911      	adds	r1, r2, r4
 8007af8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007afa:	bf01      	itttt	eq
 8007afc:	6841      	ldreq	r1, [r0, #4]
 8007afe:	4610      	moveq	r0, r2
 8007b00:	1909      	addeq	r1, r1, r4
 8007b02:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b04:	6844      	ldr	r4, [r0, #4]
 8007b06:	1901      	adds	r1, r0, r4
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	d107      	bne.n	8007b1c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b0c:	4907      	ldr	r1, [pc, #28]	; (8007b2c <prvInsertBlockIntoFreeList+0x44>)
 8007b0e:	6809      	ldr	r1, [r1, #0]
 8007b10:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b12:	bf1f      	itttt	ne
 8007b14:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b16:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b18:	1909      	addne	r1, r1, r4
 8007b1a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b1c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b1e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b20:	bf18      	it	ne
 8007b22:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b24:	bd10      	pop	{r4, pc}
 8007b26:	bf00      	nop
 8007b28:	20008230 	.word	0x20008230
 8007b2c:	20000220 	.word	0x20000220

08007b30 <pvPortMalloc>:
{
 8007b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b34:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007b36:	f7ff fb17 	bl	8007168 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8007b3a:	4b3d      	ldr	r3, [pc, #244]	; (8007c30 <pvPortMalloc+0x100>)
 8007b3c:	483d      	ldr	r0, [pc, #244]	; (8007c34 <pvPortMalloc+0x104>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	469c      	mov	ip, r3
 8007b42:	b9d2      	cbnz	r2, 8007b7a <pvPortMalloc+0x4a>
	uxAddress = ( size_t ) ucHeap;
 8007b44:	4a3c      	ldr	r2, [pc, #240]	; (8007c38 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8007b46:	2100      	movs	r1, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b48:	4b3c      	ldr	r3, [pc, #240]	; (8007c3c <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007b4a:	0755      	lsls	r5, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8007b4c:	6059      	str	r1, [r3, #4]
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007b4e:	bf1c      	itt	ne
 8007b50:	3207      	addne	r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b52:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b56:	601a      	str	r2, [r3, #0]
	uxAddress -= xHeapStructSize;
 8007b58:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <pvPortMalloc+0x110>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b5a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8007b5e:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b62:	1a99      	subs	r1, r3, r2
	pxEnd = ( void * ) uxAddress;
 8007b64:	f8cc 3000 	str.w	r3, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b68:	e9c2 3100 	strd	r3, r1, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b6c:	4b35      	ldr	r3, [pc, #212]	; (8007c44 <pvPortMalloc+0x114>)
 8007b6e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b70:	4b35      	ldr	r3, [pc, #212]	; (8007c48 <pvPortMalloc+0x118>)
 8007b72:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b78:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b7a:	6807      	ldr	r7, [r0, #0]
 8007b7c:	4227      	tst	r7, r4
 8007b7e:	d152      	bne.n	8007c26 <pvPortMalloc+0xf6>
			if( xWantedSize > 0 )
 8007b80:	2c00      	cmp	r4, #0
 8007b82:	d041      	beq.n	8007c08 <pvPortMalloc+0xd8>
				xWantedSize += xHeapStructSize;
 8007b84:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b88:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b8a:	bf1c      	itt	ne
 8007b8c:	f023 0307 	bicne.w	r3, r3, #7
 8007b90:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d047      	beq.n	8007c26 <pvPortMalloc+0xf6>
 8007b96:	4a2c      	ldr	r2, [pc, #176]	; (8007c48 <pvPortMalloc+0x118>)
 8007b98:	6816      	ldr	r6, [r2, #0]
 8007b9a:	4690      	mov	r8, r2
 8007b9c:	429e      	cmp	r6, r3
 8007b9e:	d342      	bcc.n	8007c26 <pvPortMalloc+0xf6>
				pxBlock = xStart.pxNextFreeBlock;
 8007ba0:	4a26      	ldr	r2, [pc, #152]	; (8007c3c <pvPortMalloc+0x10c>)
 8007ba2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ba4:	6869      	ldr	r1, [r5, #4]
 8007ba6:	4299      	cmp	r1, r3
 8007ba8:	d201      	bcs.n	8007bae <pvPortMalloc+0x7e>
 8007baa:	6828      	ldr	r0, [r5, #0]
 8007bac:	b9b8      	cbnz	r0, 8007bde <pvPortMalloc+0xae>
				if( pxBlock != pxEnd )
 8007bae:	f8dc 0000 	ldr.w	r0, [ip]
 8007bb2:	42a8      	cmp	r0, r5
 8007bb4:	d037      	beq.n	8007c26 <pvPortMalloc+0xf6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bb6:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bb8:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bba:	6814      	ldr	r4, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bbc:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007bbe:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007bc0:	d914      	bls.n	8007bec <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007bc2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bc4:	0742      	lsls	r2, r0, #29
 8007bc6:	d00d      	beq.n	8007be4 <pvPortMalloc+0xb4>
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
 8007bdc:	e7fe      	b.n	8007bdc <pvPortMalloc+0xac>
 8007bde:	462a      	mov	r2, r5
 8007be0:	4605      	mov	r5, r0
 8007be2:	e7df      	b.n	8007ba4 <pvPortMalloc+0x74>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007be4:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007be6:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007be8:	f7ff ff7e 	bl	8007ae8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bec:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007bee:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bf0:	4914      	ldr	r1, [pc, #80]	; (8007c44 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bf2:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007bf4:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bf6:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8007bf8:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bfa:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bfe:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007c00:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007c02:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c04:	bf38      	it	cc
 8007c06:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8007c08:	f7ff fb5c 	bl	80072c4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c0c:	0763      	lsls	r3, r4, #29
 8007c0e:	d00c      	beq.n	8007c2a <pvPortMalloc+0xfa>
 8007c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c14:	b672      	cpsid	i
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	b662      	cpsie	i
 8007c24:	e7fe      	b.n	8007c24 <pvPortMalloc+0xf4>
void *pvReturn = NULL;
 8007c26:	2400      	movs	r4, #0
 8007c28:	e7ee      	b.n	8007c08 <pvPortMalloc+0xd8>
}
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c30:	20000220 	.word	0x20000220
 8007c34:	20008224 	.word	0x20008224
 8007c38:	20000224 	.word	0x20000224
 8007c3c:	20008230 	.word	0x20008230
 8007c40:	2000821c 	.word	0x2000821c
 8007c44:	2000822c 	.word	0x2000822c
 8007c48:	20008228 	.word	0x20008228

08007c4c <vPortFree>:
{
 8007c4c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8007c4e:	4604      	mov	r4, r0
 8007c50:	2800      	cmp	r0, #0
 8007c52:	d032      	beq.n	8007cba <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c54:	4a19      	ldr	r2, [pc, #100]	; (8007cbc <vPortFree+0x70>)
 8007c56:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007c5a:	6812      	ldr	r2, [r2, #0]
 8007c5c:	4213      	tst	r3, r2
 8007c5e:	d10a      	bne.n	8007c76 <vPortFree+0x2a>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	b672      	cpsid	i
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	b662      	cpsie	i
 8007c74:	e7fe      	b.n	8007c74 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c76:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8007c7a:	b151      	cbz	r1, 8007c92 <vPortFree+0x46>
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	b672      	cpsid	i
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	b662      	cpsie	i
 8007c90:	e7fe      	b.n	8007c90 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c92:	ea23 0302 	bic.w	r3, r3, r2
 8007c96:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007c9a:	f7ff fa65 	bl	8007168 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c9e:	4a08      	ldr	r2, [pc, #32]	; (8007cc0 <vPortFree+0x74>)
 8007ca0:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ca4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007ca8:	6811      	ldr	r1, [r2, #0]
 8007caa:	440b      	add	r3, r1
 8007cac:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007cae:	f7ff ff1b 	bl	8007ae8 <prvInsertBlockIntoFreeList>
}
 8007cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8007cb6:	f7ff bb05 	b.w	80072c4 <xTaskResumeAll>
}
 8007cba:	bd10      	pop	{r4, pc}
 8007cbc:	20008224 	.word	0x20008224
 8007cc0:	20008228 	.word	0x20008228

08007cc4 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007cc4:	680a      	ldr	r2, [r1, #0]
{
 8007cc6:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007cc8:	320c      	adds	r2, #12
{
 8007cca:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8007ccc:	f001 fae4 	bl	8009298 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8007cd0:	b908      	cbnz	r0, 8007cd6 <netconn_apimsg+0x12>
    return apimsg->err;
 8007cd2:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8007cd6:	bd10      	pop	{r4, pc}

08007cd8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8007cd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007cda:	b958      	cbnz	r0, 8007cf4 <netconn_close_shutdown+0x1c>
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	; (8007d0c <netconn_close_shutdown+0x34>)
 8007cde:	f44f 724a 	mov.w	r2, #808	; 0x328
 8007ce2:	490b      	ldr	r1, [pc, #44]	; (8007d10 <netconn_close_shutdown+0x38>)
 8007ce4:	480b      	ldr	r0, [pc, #44]	; (8007d14 <netconn_close_shutdown+0x3c>)
 8007ce6:	f009 fca5 	bl	8011634 <iprintf>
 8007cea:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8007cee:	b007      	add	sp, #28
 8007cf0:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007cf4:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8007cf6:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007cf8:	f88d 100c 	strb.w	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007cfc:	a901      	add	r1, sp, #4
 8007cfe:	4806      	ldr	r0, [pc, #24]	; (8007d18 <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007d00:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007d04:	f7ff ffde 	bl	8007cc4 <netconn_apimsg>
  return err;
 8007d08:	e7f1      	b.n	8007cee <netconn_close_shutdown+0x16>
 8007d0a:	bf00      	nop
 8007d0c:	08012f9d 	.word	0x08012f9d
 8007d10:	08012fcf 	.word	0x08012fcf
 8007d14:	08012feb 	.word	0x08012feb
 8007d18:	08008fd9 	.word	0x08008fd9

08007d1c <netconn_recv_data>:
{
 8007d1c:	b570      	push	{r4, r5, r6, lr}
  void *buf = NULL;
 8007d1e:	2300      	movs	r3, #0
{
 8007d20:	b086      	sub	sp, #24
 8007d22:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007d24:	460d      	mov	r5, r1
  void *buf = NULL;
 8007d26:	9300      	str	r3, [sp, #0]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007d28:	b951      	cbnz	r1, 8007d40 <netconn_recv_data+0x24>
 8007d2a:	4b3e      	ldr	r3, [pc, #248]	; (8007e24 <netconn_recv_data+0x108>)
 8007d2c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8007d30:	493d      	ldr	r1, [pc, #244]	; (8007e28 <netconn_recv_data+0x10c>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007d32:	483e      	ldr	r0, [pc, #248]	; (8007e2c <netconn_recv_data+0x110>)
 8007d34:	f009 fc7e 	bl	8011634 <iprintf>
 8007d38:	f06f 000f 	mvn.w	r0, #15
}
 8007d3c:	b006      	add	sp, #24
 8007d3e:	bd70      	pop	{r4, r5, r6, pc}
  *new_buf = NULL;
 8007d40:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007d42:	b920      	cbnz	r0, 8007d4e <netconn_recv_data+0x32>
 8007d44:	4b37      	ldr	r3, [pc, #220]	; (8007e24 <netconn_recv_data+0x108>)
 8007d46:	f240 12e9 	movw	r2, #489	; 0x1e9
 8007d4a:	4939      	ldr	r1, [pc, #228]	; (8007e30 <netconn_recv_data+0x114>)
 8007d4c:	e7f1      	b.n	8007d32 <netconn_recv_data+0x16>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007d4e:	4606      	mov	r6, r0
 8007d50:	f816 3b10 	ldrb.w	r3, [r6], #16
 8007d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d10e      	bne.n	8007d7a <netconn_recv_data+0x5e>
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f008 f95e 	bl	801001e <sys_mbox_valid>
 8007d62:	b950      	cbnz	r0, 8007d7a <netconn_recv_data+0x5e>
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8007d64:	f104 0014 	add.w	r0, r4, #20
 8007d68:	f008 f959 	bl	801001e <sys_mbox_valid>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	bf14      	ite	ne
 8007d70:	f06f 000a 	mvnne.w	r0, #10
 8007d74:	f06f 000e 	mvneq.w	r0, #14
 8007d78:	e7e0      	b.n	8007d3c <netconn_recv_data+0x20>
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f008 f94f 	bl	801001e <sys_mbox_valid>
 8007d80:	b948      	cbnz	r0, 8007d96 <netconn_recv_data+0x7a>
 8007d82:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <netconn_recv_data+0x108>)
 8007d84:	f240 12f5 	movw	r2, #501	; 0x1f5
 8007d88:	492a      	ldr	r1, [pc, #168]	; (8007e34 <netconn_recv_data+0x118>)
 8007d8a:	4828      	ldr	r0, [pc, #160]	; (8007e2c <netconn_recv_data+0x110>)
 8007d8c:	f009 fc52 	bl	8011634 <iprintf>
 8007d90:	f06f 000a 	mvn.w	r0, #10
 8007d94:	e7d2      	b.n	8007d3c <netconn_recv_data+0x20>
  if (ERR_IS_FATAL(conn->last_err)) {
 8007d96:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8007d9a:	f110 0f0c 	cmn.w	r0, #12
 8007d9e:	dbcd      	blt.n	8007d3c <netconn_recv_data+0x20>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007da0:	2200      	movs	r2, #0
 8007da2:	4669      	mov	r1, sp
 8007da4:	4630      	mov	r0, r6
 8007da6:	f008 f907 	bl	800ffb8 <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007daa:	7823      	ldrb	r3, [r4, #0]
 8007dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007db0:	2b10      	cmp	r3, #16
 8007db2:	9b00      	ldr	r3, [sp, #0]
 8007db4:	d12a      	bne.n	8007e0c <netconn_recv_data+0xf0>
    API_MSG_VAR_REF(msg).conn = conn;
 8007db6:	9401      	str	r4, [sp, #4]
    if (buf != NULL) {
 8007db8:	b1ab      	cbz	r3, 8007de6 <netconn_recv_data+0xca>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 8007dba:	891b      	ldrh	r3, [r3, #8]
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 8007dbc:	a901      	add	r1, sp, #4
 8007dbe:	481e      	ldr	r0, [pc, #120]	; (8007e38 <netconn_recv_data+0x11c>)
 8007dc0:	9303      	str	r3, [sp, #12]
 8007dc2:	f7ff ff7f 	bl	8007cc4 <netconn_apimsg>
    if (buf == NULL) {
 8007dc6:	9a00      	ldr	r2, [sp, #0]
 8007dc8:	b9b2      	cbnz	r2, 8007df8 <netconn_recv_data+0xdc>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007dca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dcc:	b113      	cbz	r3, 8007dd4 <netconn_recv_data+0xb8>
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	b943      	cbnz	r3, 8007dea <netconn_recv_data+0xce>
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8007dd8:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	bf08      	it	eq
 8007de0:	f06f 000d 	mvneq.w	r0, #13
 8007de4:	e7aa      	b.n	8007d3c <netconn_recv_data+0x20>
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e7e8      	b.n	8007dbc <netconn_recv_data+0xa0>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007dea:	2101      	movs	r1, #1
 8007dec:	4620      	mov	r0, r4
 8007dee:	f7ff ff73 	bl	8007cd8 <netconn_close_shutdown>
      return ERR_CLSD;
 8007df2:	f06f 000e 	mvn.w	r0, #14
 8007df6:	e7a1      	b.n	8007d3c <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8007df8:	8912      	ldrh	r2, [r2, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007dfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007dfc:	b113      	cbz	r3, 8007e04 <netconn_recv_data+0xe8>
 8007dfe:	2101      	movs	r1, #1
 8007e00:	4620      	mov	r0, r4
 8007e02:	4798      	blx	r3
  *new_buf = buf;
 8007e04:	9b00      	ldr	r3, [sp, #0]
  return ERR_OK;
 8007e06:	2000      	movs	r0, #0
  *new_buf = buf;
 8007e08:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 8007e0a:	e797      	b.n	8007d3c <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007e0c:	b933      	cbnz	r3, 8007e1c <netconn_recv_data+0x100>
 8007e0e:	4b05      	ldr	r3, [pc, #20]	; (8007e24 <netconn_recv_data+0x108>)
 8007e10:	f240 223e 	movw	r2, #574	; 0x23e
 8007e14:	4909      	ldr	r1, [pc, #36]	; (8007e3c <netconn_recv_data+0x120>)
 8007e16:	4805      	ldr	r0, [pc, #20]	; (8007e2c <netconn_recv_data+0x110>)
 8007e18:	f009 fc0c 	bl	8011634 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 8007e1c:	9b00      	ldr	r3, [sp, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	891a      	ldrh	r2, [r3, #8]
 8007e22:	e7ea      	b.n	8007dfa <netconn_recv_data+0xde>
 8007e24:	08012f9d 	.word	0x08012f9d
 8007e28:	08013013 	.word	0x08013013
 8007e2c:	08012feb 	.word	0x08012feb
 8007e30:	08013031 	.word	0x08013031
 8007e34:	0801304c 	.word	0x0801304c
 8007e38:	08008e99 	.word	0x08008e99
 8007e3c:	0801306b 	.word	0x0801306b

08007e40 <netconn_new_with_proto_and_callback>:
{
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	460d      	mov	r5, r1
 8007e44:	b086      	sub	sp, #24
  conn = netconn_alloc(t, callback);
 8007e46:	4611      	mov	r1, r2
 8007e48:	f000 fdac 	bl	80089a4 <netconn_alloc>
  if (conn != NULL) {
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d03e      	beq.n	8007ed0 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 8007e52:	9001      	str	r0, [sp, #4]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007e54:	a901      	add	r1, sp, #4
 8007e56:	4820      	ldr	r0, [pc, #128]	; (8007ed8 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8007e58:	f88d 500c 	strb.w	r5, [sp, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007e5c:	f7ff ff32 	bl	8007cc4 <netconn_apimsg>
    if (err != ERR_OK) {
 8007e60:	2800      	cmp	r0, #0
 8007e62:	d035      	beq.n	8007ed0 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	b12b      	cbz	r3, 8007e74 <netconn_new_with_proto_and_callback+0x34>
 8007e68:	4b1c      	ldr	r3, [pc, #112]	; (8007edc <netconn_new_with_proto_and_callback+0x9c>)
 8007e6a:	2289      	movs	r2, #137	; 0x89
 8007e6c:	491c      	ldr	r1, [pc, #112]	; (8007ee0 <netconn_new_with_proto_and_callback+0xa0>)
 8007e6e:	481d      	ldr	r0, [pc, #116]	; (8007ee4 <netconn_new_with_proto_and_callback+0xa4>)
 8007e70:	f009 fbe0 	bl	8011634 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007e74:	f104 0510 	add.w	r5, r4, #16
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f008 f8d0 	bl	801001e <sys_mbox_valid>
 8007e7e:	b928      	cbnz	r0, 8007e8c <netconn_new_with_proto_and_callback+0x4c>
 8007e80:	4b16      	ldr	r3, [pc, #88]	; (8007edc <netconn_new_with_proto_and_callback+0x9c>)
 8007e82:	228a      	movs	r2, #138	; 0x8a
 8007e84:	4918      	ldr	r1, [pc, #96]	; (8007ee8 <netconn_new_with_proto_and_callback+0xa8>)
 8007e86:	4817      	ldr	r0, [pc, #92]	; (8007ee4 <netconn_new_with_proto_and_callback+0xa4>)
 8007e88:	f009 fbd4 	bl	8011634 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8007e8c:	f104 0014 	add.w	r0, r4, #20
 8007e90:	f008 f8c5 	bl	801001e <sys_mbox_valid>
 8007e94:	b128      	cbz	r0, 8007ea2 <netconn_new_with_proto_and_callback+0x62>
 8007e96:	4b11      	ldr	r3, [pc, #68]	; (8007edc <netconn_new_with_proto_and_callback+0x9c>)
 8007e98:	228c      	movs	r2, #140	; 0x8c
 8007e9a:	4914      	ldr	r1, [pc, #80]	; (8007eec <netconn_new_with_proto_and_callback+0xac>)
 8007e9c:	4811      	ldr	r0, [pc, #68]	; (8007ee4 <netconn_new_with_proto_and_callback+0xa4>)
 8007e9e:	f009 fbc9 	bl	8011634 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007ea2:	f104 060c 	add.w	r6, r4, #12
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f008 f8f9 	bl	801009e <sys_sem_valid>
 8007eac:	b928      	cbnz	r0, 8007eba <netconn_new_with_proto_and_callback+0x7a>
 8007eae:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <netconn_new_with_proto_and_callback+0x9c>)
 8007eb0:	228f      	movs	r2, #143	; 0x8f
 8007eb2:	490f      	ldr	r1, [pc, #60]	; (8007ef0 <netconn_new_with_proto_and_callback+0xb0>)
 8007eb4:	480b      	ldr	r0, [pc, #44]	; (8007ee4 <netconn_new_with_proto_and_callback+0xa4>)
 8007eb6:	f009 fbbd 	bl	8011634 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f008 f8ec 	bl	8010098 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f008 f859 	bl	800ff78 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007ec6:	4621      	mov	r1, r4
      return NULL;
 8007ec8:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 8007eca:	2007      	movs	r0, #7
 8007ecc:	f001 fce6 	bl	800989c <memp_free>
}
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	b006      	add	sp, #24
 8007ed4:	bd70      	pop	{r4, r5, r6, pc}
 8007ed6:	bf00      	nop
 8007ed8:	0800892d 	.word	0x0800892d
 8007edc:	08012f9d 	.word	0x08012f9d
 8007ee0:	08013077 	.word	0x08013077
 8007ee4:	08012feb 	.word	0x08012feb
 8007ee8:	08013098 	.word	0x08013098
 8007eec:	080130ad 	.word	0x080130ad
 8007ef0:	080130ce 	.word	0x080130ce

08007ef4 <netconn_delete>:
{
 8007ef4:	b530      	push	{r4, r5, lr}
  if (conn == NULL) {
 8007ef6:	4604      	mov	r4, r0
{
 8007ef8:	b087      	sub	sp, #28
  if (conn == NULL) {
 8007efa:	b178      	cbz	r0, 8007f1c <netconn_delete+0x28>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007efc:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8007efe:	9001      	str	r0, [sp, #4]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007f00:	a901      	add	r1, sp, #4
 8007f02:	4807      	ldr	r0, [pc, #28]	; (8007f20 <netconn_delete+0x2c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007f04:	f88d 300d 	strb.w	r3, [sp, #13]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8007f08:	f7ff fedc 	bl	8007cc4 <netconn_apimsg>
  if (err != ERR_OK) {
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	b910      	cbnz	r0, 8007f16 <netconn_delete+0x22>
  netconn_free(conn);
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 fd8d 	bl	8008a30 <netconn_free>
}
 8007f16:	4628      	mov	r0, r5
 8007f18:	b007      	add	sp, #28
 8007f1a:	bd30      	pop	{r4, r5, pc}
    return ERR_OK;
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	e7fa      	b.n	8007f16 <netconn_delete+0x22>
 8007f20:	08008c29 	.word	0x08008c29

08007f24 <netconn_bind>:
{
 8007f24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8007f26:	b950      	cbnz	r0, 8007f3e <netconn_bind+0x1a>
 8007f28:	4b0b      	ldr	r3, [pc, #44]	; (8007f58 <netconn_bind+0x34>)
 8007f2a:	22ff      	movs	r2, #255	; 0xff
 8007f2c:	490b      	ldr	r1, [pc, #44]	; (8007f5c <netconn_bind+0x38>)
 8007f2e:	480c      	ldr	r0, [pc, #48]	; (8007f60 <netconn_bind+0x3c>)
 8007f30:	f009 fb80 	bl	8011634 <iprintf>
 8007f34:	f06f 000f 	mvn.w	r0, #15
}
 8007f38:	b007      	add	sp, #28
 8007f3a:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8007f3e:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <netconn_bind+0x40>)
  API_MSG_VAR_REF(msg).conn = conn;
 8007f40:	9001      	str	r0, [sp, #4]
    addr = IP4_ADDR_ANY;
 8007f42:	2900      	cmp	r1, #0
 8007f44:	bf08      	it	eq
 8007f46:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007f48:	4807      	ldr	r0, [pc, #28]	; (8007f68 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007f4a:	f8ad 2010 	strh.w	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007f4e:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8007f50:	a901      	add	r1, sp, #4
 8007f52:	f7ff feb7 	bl	8007cc4 <netconn_apimsg>
  return err;
 8007f56:	e7ef      	b.n	8007f38 <netconn_bind+0x14>
 8007f58:	08012f9d 	.word	0x08012f9d
 8007f5c:	080130e7 	.word	0x080130e7
 8007f60:	08012feb 	.word	0x08012feb
 8007f64:	08015038 	.word	0x08015038
 8007f68:	08008d59 	.word	0x08008d59

08007f6c <netconn_listen_with_backlog>:
{
 8007f6c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8007f6e:	b958      	cbnz	r0, 8007f88 <netconn_listen_with_backlog+0x1c>
 8007f70:	4b08      	ldr	r3, [pc, #32]	; (8007f94 <netconn_listen_with_backlog+0x28>)
 8007f72:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8007f76:	4908      	ldr	r1, [pc, #32]	; (8007f98 <netconn_listen_with_backlog+0x2c>)
 8007f78:	4808      	ldr	r0, [pc, #32]	; (8007f9c <netconn_listen_with_backlog+0x30>)
 8007f7a:	f009 fb5b 	bl	8011634 <iprintf>
 8007f7e:	f06f 000f 	mvn.w	r0, #15
}
 8007f82:	b007      	add	sp, #28
 8007f84:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8007f88:	9001      	str	r0, [sp, #4]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8007f8a:	a901      	add	r1, sp, #4
 8007f8c:	4804      	ldr	r0, [pc, #16]	; (8007fa0 <netconn_listen_with_backlog+0x34>)
 8007f8e:	f7ff fe99 	bl	8007cc4 <netconn_apimsg>
  return err;
 8007f92:	e7f6      	b.n	8007f82 <netconn_listen_with_backlog+0x16>
 8007f94:	08012f9d 	.word	0x08012f9d
 8007f98:	08013102 	.word	0x08013102
 8007f9c:	08012feb 	.word	0x08012feb
 8007fa0:	08008db9 	.word	0x08008db9

08007fa4 <netconn_accept>:
{
 8007fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fa6:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8007fa8:	460d      	mov	r5, r1
 8007faa:	b951      	cbnz	r1, 8007fc2 <netconn_accept+0x1e>
 8007fac:	4b20      	ldr	r3, [pc, #128]	; (8008030 <netconn_accept+0x8c>)
 8007fae:	f240 128d 	movw	r2, #397	; 0x18d
 8007fb2:	4920      	ldr	r1, [pc, #128]	; (8008034 <netconn_accept+0x90>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007fb4:	4820      	ldr	r0, [pc, #128]	; (8008038 <netconn_accept+0x94>)
 8007fb6:	f009 fb3d 	bl	8011634 <iprintf>
 8007fba:	f06f 000f 	mvn.w	r0, #15
}
 8007fbe:	b002      	add	sp, #8
 8007fc0:	bd70      	pop	{r4, r5, r6, pc}
  *new_conn = NULL;
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	600a      	str	r2, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8007fc6:	b920      	cbnz	r0, 8007fd2 <netconn_accept+0x2e>
 8007fc8:	4b19      	ldr	r3, [pc, #100]	; (8008030 <netconn_accept+0x8c>)
 8007fca:	f240 128f 	movw	r2, #399	; 0x18f
 8007fce:	491b      	ldr	r1, [pc, #108]	; (800803c <netconn_accept+0x98>)
 8007fd0:	e7f0      	b.n	8007fb4 <netconn_accept+0x10>
  if (ERR_IS_FATAL(conn->last_err)) {
 8007fd2:	f990 0008 	ldrsb.w	r0, [r0, #8]
 8007fd6:	f110 0f0c 	cmn.w	r0, #12
 8007fda:	dbf0      	blt.n	8007fbe <netconn_accept+0x1a>
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8007fdc:	f104 0614 	add.w	r6, r4, #20
 8007fe0:	4630      	mov	r0, r6
 8007fe2:	f008 f81c 	bl	801001e <sys_mbox_valid>
 8007fe6:	b1d0      	cbz	r0, 800801e <netconn_accept+0x7a>
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8007fe8:	4630      	mov	r0, r6
 8007fea:	2200      	movs	r2, #0
 8007fec:	a901      	add	r1, sp, #4
 8007fee:	f007 ffe3 	bl	800ffb8 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007ff2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  newconn = (struct netconn *)accept_ptr;
 8007ff4:	9e01      	ldr	r6, [sp, #4]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007ff6:	b11b      	cbz	r3, 8008000 <netconn_accept+0x5c>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	4798      	blx	r3
  if (accept_ptr == &netconn_aborted) {
 8008000:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <netconn_accept+0x9c>)
 8008002:	9a01      	ldr	r2, [sp, #4]
 8008004:	429a      	cmp	r2, r3
 8008006:	d010      	beq.n	800802a <netconn_accept+0x86>
  if (newconn == NULL) {
 8008008:	b966      	cbnz	r6, 8008024 <netconn_accept+0x80>
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800800a:	f008 f883 	bl	8010114 <sys_arch_protect>
 800800e:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8008012:	330c      	adds	r3, #12
 8008014:	bfa4      	itt	ge
 8008016:	23f1      	movge	r3, #241	; 0xf1
 8008018:	7223      	strbge	r3, [r4, #8]
 800801a:	f008 f887 	bl	801012c <sys_arch_unprotect>
    return ERR_CLSD;
 800801e:	f06f 000e 	mvn.w	r0, #14
 8008022:	e7cc      	b.n	8007fbe <netconn_accept+0x1a>
  return ERR_OK;
 8008024:	2000      	movs	r0, #0
  *new_conn = newconn;
 8008026:	602e      	str	r6, [r5, #0]
  return ERR_OK;
 8008028:	e7c9      	b.n	8007fbe <netconn_accept+0x1a>
    return ERR_ABRT;
 800802a:	f06f 000c 	mvn.w	r0, #12
 800802e:	e7c6      	b.n	8007fbe <netconn_accept+0x1a>
 8008030:	08012f9d 	.word	0x08012f9d
 8008034:	0801311f 	.word	0x0801311f
 8008038:	08012feb 	.word	0x08012feb
 800803c:	0801313f 	.word	0x0801313f
 8008040:	2000862c 	.word	0x2000862c

08008044 <netconn_recv>:
{
 8008044:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008046:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008048:	460e      	mov	r6, r1
 800804a:	b959      	cbnz	r1, 8008064 <netconn_recv+0x20>
 800804c:	4b20      	ldr	r3, [pc, #128]	; (80080d0 <netconn_recv+0x8c>)
 800804e:	f44f 721d 	mov.w	r2, #628	; 0x274
 8008052:	4920      	ldr	r1, [pc, #128]	; (80080d4 <netconn_recv+0x90>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008054:	f06f 040f 	mvn.w	r4, #15
 8008058:	481f      	ldr	r0, [pc, #124]	; (80080d8 <netconn_recv+0x94>)
 800805a:	f009 faeb 	bl	8011634 <iprintf>
}
 800805e:	4620      	mov	r0, r4
 8008060:	b002      	add	sp, #8
 8008062:	bd70      	pop	{r4, r5, r6, pc}
  *new_buf = NULL;
 8008064:	2200      	movs	r2, #0
 8008066:	600a      	str	r2, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008068:	b920      	cbnz	r0, 8008074 <netconn_recv+0x30>
 800806a:	4b19      	ldr	r3, [pc, #100]	; (80080d0 <netconn_recv+0x8c>)
 800806c:	f240 2276 	movw	r2, #630	; 0x276
 8008070:	491a      	ldr	r1, [pc, #104]	; (80080dc <netconn_recv+0x98>)
 8008072:	e7ef      	b.n	8008054 <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008074:	7803      	ldrb	r3, [r0, #0]
 8008076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800807a:	2b10      	cmp	r3, #16
 800807c:	d124      	bne.n	80080c8 <netconn_recv+0x84>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800807e:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8008080:	9201      	str	r2, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008082:	f001 fbef 	bl	8009864 <memp_malloc>
    if (buf == NULL) {
 8008086:	4605      	mov	r5, r0
 8008088:	b1d8      	cbz	r0, 80080c2 <netconn_recv+0x7e>
    err = netconn_recv_data(conn, (void **)&p);
 800808a:	4620      	mov	r0, r4
 800808c:	a901      	add	r1, sp, #4
 800808e:	f7ff fe45 	bl	8007d1c <netconn_recv_data>
    if (err != ERR_OK) {
 8008092:	4604      	mov	r4, r0
 8008094:	b120      	cbz	r0, 80080a0 <netconn_recv+0x5c>
      memp_free(MEMP_NETBUF, buf);
 8008096:	4629      	mov	r1, r5
 8008098:	2006      	movs	r0, #6
 800809a:	f001 fbff 	bl	800989c <memp_free>
      return err;
 800809e:	e7de      	b.n	800805e <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 80080a0:	9b01      	ldr	r3, [sp, #4]
 80080a2:	b933      	cbnz	r3, 80080b2 <netconn_recv+0x6e>
 80080a4:	4b0a      	ldr	r3, [pc, #40]	; (80080d0 <netconn_recv+0x8c>)
 80080a6:	f240 228a 	movw	r2, #650	; 0x28a
 80080aa:	490d      	ldr	r1, [pc, #52]	; (80080e0 <netconn_recv+0x9c>)
 80080ac:	480a      	ldr	r0, [pc, #40]	; (80080d8 <netconn_recv+0x94>)
 80080ae:	f009 fac1 	bl	8011634 <iprintf>
    buf->p = p;
 80080b2:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 80080b4:	e9c5 3300 	strd	r3, r3, [r5]
    buf->port = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	81ab      	strh	r3, [r5, #12]
    ip_addr_set_zero(&buf->addr);
 80080bc:	60ab      	str	r3, [r5, #8]
    *new_buf = buf;
 80080be:	6035      	str	r5, [r6, #0]
    return ERR_OK;
 80080c0:	e7cd      	b.n	800805e <netconn_recv+0x1a>
      return ERR_MEM;
 80080c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80080c6:	e7ca      	b.n	800805e <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf);
 80080c8:	f7ff fe28 	bl	8007d1c <netconn_recv_data>
 80080cc:	4604      	mov	r4, r0
 80080ce:	e7c6      	b.n	800805e <netconn_recv+0x1a>
 80080d0:	08012f9d 	.word	0x08012f9d
 80080d4:	08013013 	.word	0x08013013
 80080d8:	08012feb 	.word	0x08012feb
 80080dc:	08013031 	.word	0x08013031
 80080e0:	08013b8e 	.word	0x08013b8e

080080e4 <netconn_write_partly>:
{
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	b086      	sub	sp, #24
 80080e8:	4615      	mov	r5, r2
 80080ea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80080ec:	b950      	cbnz	r0, 8008104 <netconn_write_partly+0x20>
 80080ee:	4b1d      	ldr	r3, [pc, #116]	; (8008164 <netconn_write_partly+0x80>)
 80080f0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80080f4:	491c      	ldr	r1, [pc, #112]	; (8008168 <netconn_write_partly+0x84>)
 80080f6:	481d      	ldr	r0, [pc, #116]	; (800816c <netconn_write_partly+0x88>)
 80080f8:	f009 fa9c 	bl	8011634 <iprintf>
 80080fc:	f06f 000f 	mvn.w	r0, #15
}
 8008100:	b006      	add	sp, #24
 8008102:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 8008104:	7802      	ldrb	r2, [r0, #0]
 8008106:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800810a:	2a10      	cmp	r2, #16
 800810c:	d009      	beq.n	8008122 <netconn_write_partly+0x3e>
 800810e:	4b15      	ldr	r3, [pc, #84]	; (8008164 <netconn_write_partly+0x80>)
 8008110:	f240 22e7 	movw	r2, #743	; 0x2e7
 8008114:	4916      	ldr	r1, [pc, #88]	; (8008170 <netconn_write_partly+0x8c>)
 8008116:	4815      	ldr	r0, [pc, #84]	; (800816c <netconn_write_partly+0x88>)
 8008118:	f009 fa8c 	bl	8011634 <iprintf>
    return ERR_VAL;
 800811c:	f06f 0005 	mvn.w	r0, #5
 8008120:	e7ee      	b.n	8008100 <netconn_write_partly+0x1c>
  if (size == 0) {
 8008122:	b90d      	cbnz	r5, 8008128 <netconn_write_partly+0x44>
    return ERR_OK;
 8008124:	2000      	movs	r0, #0
 8008126:	e7eb      	b.n	8008100 <netconn_write_partly+0x1c>
  if (dontblock && !bytes_written) {
 8008128:	7f04      	ldrb	r4, [r0, #28]
 800812a:	f003 0204 	and.w	r2, r3, #4
 800812e:	f004 0402 	and.w	r4, r4, #2
 8008132:	4314      	orrs	r4, r2
 8008134:	d002      	beq.n	800813c <netconn_write_partly+0x58>
 8008136:	2e00      	cmp	r6, #0
 8008138:	d0f0      	beq.n	800811c <netconn_write_partly+0x38>
 800813a:	2401      	movs	r4, #1
  API_MSG_VAR_REF(msg).conn = conn;
 800813c:	9001      	str	r0, [sp, #4]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800813e:	9103      	str	r1, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008140:	a901      	add	r1, sp, #4
 8008142:	480c      	ldr	r0, [pc, #48]	; (8008174 <netconn_write_partly+0x90>)
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008144:	f88d 3014 	strb.w	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008148:	9504      	str	r5, [sp, #16]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800814a:	f7ff fdbb 	bl	8007cc4 <netconn_apimsg>
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800814e:	2800      	cmp	r0, #0
 8008150:	d1d6      	bne.n	8008100 <netconn_write_partly+0x1c>
 8008152:	2e00      	cmp	r6, #0
 8008154:	d0e6      	beq.n	8008124 <netconn_write_partly+0x40>
    if (dontblock) {
 8008156:	b114      	cbz	r4, 800815e <netconn_write_partly+0x7a>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8008158:	9b04      	ldr	r3, [sp, #16]
 800815a:	6033      	str	r3, [r6, #0]
 800815c:	e7d0      	b.n	8008100 <netconn_write_partly+0x1c>
      *bytes_written = size;
 800815e:	6035      	str	r5, [r6, #0]
 8008160:	e7ce      	b.n	8008100 <netconn_write_partly+0x1c>
 8008162:	bf00      	nop
 8008164:	08012f9d 	.word	0x08012f9d
 8008168:	0801315c 	.word	0x0801315c
 800816c:	08012feb 	.word	0x08012feb
 8008170:	08013178 	.word	0x08013178
 8008174:	08008ef1 	.word	0x08008ef1

08008178 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008178:	2103      	movs	r1, #3
 800817a:	f7ff bdad 	b.w	8007cd8 <netconn_close_shutdown>
	...

08008180 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8008180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008184:	4606      	mov	r6, r0
 8008186:	4617      	mov	r7, r2
 8008188:	461d      	mov	r5, r3
 800818a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800818e:	460c      	mov	r4, r1
 8008190:	b929      	cbnz	r1, 800819e <recv_udp+0x1e>
 8008192:	4b25      	ldr	r3, [pc, #148]	; (8008228 <recv_udp+0xa8>)
 8008194:	22b1      	movs	r2, #177	; 0xb1
 8008196:	4925      	ldr	r1, [pc, #148]	; (800822c <recv_udp+0xac>)
 8008198:	4825      	ldr	r0, [pc, #148]	; (8008230 <recv_udp+0xb0>)
 800819a:	f009 fa4b 	bl	8011634 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800819e:	b99e      	cbnz	r6, 80081c8 <recv_udp+0x48>
 80081a0:	4b21      	ldr	r3, [pc, #132]	; (8008228 <recv_udp+0xa8>)
 80081a2:	22b2      	movs	r2, #178	; 0xb2
 80081a4:	4923      	ldr	r1, [pc, #140]	; (8008234 <recv_udp+0xb4>)
 80081a6:	4822      	ldr	r0, [pc, #136]	; (8008230 <recv_udp+0xb0>)
 80081a8:	f009 fa44 	bl	8011634 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80081ac:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 80081ae:	b003      	add	sp, #12
 80081b0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 80081b4:	f001 bcf6 	b.w	8009ba4 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80081b8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d031      	beq.n	8008222 <recv_udp+0xa2>
 80081be:	4630      	mov	r0, r6
}
 80081c0:	b003      	add	sp, #12
 80081c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80081c6:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80081c8:	6873      	ldr	r3, [r6, #4]
 80081ca:	42a3      	cmp	r3, r4
 80081cc:	d005      	beq.n	80081da <recv_udp+0x5a>
 80081ce:	4b16      	ldr	r3, [pc, #88]	; (8008228 <recv_udp+0xa8>)
 80081d0:	22ba      	movs	r2, #186	; 0xba
 80081d2:	4919      	ldr	r1, [pc, #100]	; (8008238 <recv_udp+0xb8>)
 80081d4:	4816      	ldr	r0, [pc, #88]	; (8008230 <recv_udp+0xb0>)
 80081d6:	f009 fa2d 	bl	8011634 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80081da:	f106 0910 	add.w	r9, r6, #16
 80081de:	4648      	mov	r0, r9
 80081e0:	f007 ff1d 	bl	801001e <sys_mbox_valid>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d0e1      	beq.n	80081ac <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80081e8:	2006      	movs	r0, #6
 80081ea:	f001 fb3b 	bl	8009864 <memp_malloc>
  if (buf == NULL) {
 80081ee:	4604      	mov	r4, r0
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0db      	beq.n	80081ac <recv_udp+0x2c>
    buf->ptr = p;
 80081f4:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 80081f8:	b105      	cbz	r5, 80081fc <recv_udp+0x7c>
 80081fa:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 80081fc:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80081fe:	4621      	mov	r1, r4
 8008200:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 8008202:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 8008204:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 8008208:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800820a:	f007 fecb 	bl	800ffa4 <sys_mbox_trypost>
 800820e:	9a01      	ldr	r2, [sp, #4]
 8008210:	4601      	mov	r1, r0
 8008212:	2800      	cmp	r0, #0
 8008214:	d0d0      	beq.n	80081b8 <recv_udp+0x38>
    netbuf_delete(buf);
 8008216:	4620      	mov	r0, r4
}
 8008218:	b003      	add	sp, #12
 800821a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 800821e:	f000 bf45 	b.w	80090ac <netbuf_delete>
}
 8008222:	b003      	add	sp, #12
 8008224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008228:	0801319a 	.word	0x0801319a
 800822c:	080131cc 	.word	0x080131cc
 8008230:	08012feb 	.word	0x08012feb
 8008234:	080131ee 	.word	0x080131ee
 8008238:	0801320d 	.word	0x0801320d

0800823c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800823c:	b507      	push	{r0, r1, r2, lr}
 800823e:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008240:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 8008242:	9001      	str	r0, [sp, #4]
 8008244:	f002 f920 	bl	800a488 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008248:	9801      	ldr	r0, [sp, #4]
 800824a:	4909      	ldr	r1, [pc, #36]	; (8008270 <setup_tcp+0x34>)
 800824c:	f002 f920 	bl	800a490 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008250:	9801      	ldr	r0, [sp, #4]
 8008252:	4908      	ldr	r1, [pc, #32]	; (8008274 <setup_tcp+0x38>)
 8008254:	f002 f934 	bl	800a4c0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008258:	9801      	ldr	r0, [sp, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	4906      	ldr	r1, [pc, #24]	; (8008278 <setup_tcp+0x3c>)
 800825e:	f002 f963 	bl	800a528 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008262:	4906      	ldr	r1, [pc, #24]	; (800827c <setup_tcp+0x40>)
 8008264:	9801      	ldr	r0, [sp, #4]
}
 8008266:	b003      	add	sp, #12
 8008268:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 800826c:	f002 b93e 	b.w	800a4ec <tcp_err>
 8008270:	080087fd 	.word	0x080087fd
 8008274:	080088c1 	.word	0x080088c1
 8008278:	08008785 	.word	0x08008785
 800827c:	08008281 	.word	0x08008281

08008280 <err_tcp>:
{
 8008280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008284:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008286:	4604      	mov	r4, r0
 8008288:	b930      	cbnz	r0, 8008298 <err_tcp+0x18>
 800828a:	4b41      	ldr	r3, [pc, #260]	; (8008390 <err_tcp+0x110>)
 800828c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008290:	4940      	ldr	r1, [pc, #256]	; (8008394 <err_tcp+0x114>)
 8008292:	4841      	ldr	r0, [pc, #260]	; (8008398 <err_tcp+0x118>)
 8008294:	f009 f9ce 	bl	8011634 <iprintf>
  old_state = conn->state;
 8008298:	7866      	ldrb	r6, [r4, #1]
  conn->pcb.tcp = NULL;
 800829a:	2700      	movs	r7, #0
  if (old_state == NETCONN_CLOSE) {
 800829c:	2e04      	cmp	r6, #4
  conn->pcb.tcp = NULL;
 800829e:	6067      	str	r7, [r4, #4]
  conn->state = NETCONN_NONE;
 80082a0:	7067      	strb	r7, [r4, #1]
  if (old_state == NETCONN_CLOSE) {
 80082a2:	d162      	bne.n	800836a <err_tcp+0xea>
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80082a4:	f007 ff36 	bl	8010114 <sys_arch_protect>
 80082a8:	f994 3008 	ldrsb.w	r3, [r4, #8]
    err = ERR_OK;
 80082ac:	2500      	movs	r5, #0
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 80082ae:	330c      	adds	r3, #12
 80082b0:	bfa8      	it	ge
 80082b2:	7227      	strbge	r7, [r4, #8]
 80082b4:	f007 ff3a 	bl	801012c <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80082b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082ba:	b11b      	cbz	r3, 80082c4 <err_tcp+0x44>
 80082bc:	2200      	movs	r2, #0
 80082be:	2104      	movs	r1, #4
 80082c0:	4620      	mov	r0, r4
 80082c2:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80082c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082c6:	b11b      	cbz	r3, 80082d0 <err_tcp+0x50>
 80082c8:	2200      	movs	r2, #0
 80082ca:	4620      	mov	r0, r4
 80082cc:	4611      	mov	r1, r2
 80082ce:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80082d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80082d2:	b11b      	cbz	r3, 80082dc <err_tcp+0x5c>
 80082d4:	2200      	movs	r2, #0
 80082d6:	2102      	movs	r1, #2
 80082d8:	4620      	mov	r0, r4
 80082da:	4798      	blx	r3
  if (sys_mbox_valid(&conn->recvmbox)) {
 80082dc:	f104 0710 	add.w	r7, r4, #16
 80082e0:	4638      	mov	r0, r7
 80082e2:	f007 fe9c 	bl	801001e <sys_mbox_valid>
 80082e6:	b118      	cbz	r0, 80082f0 <err_tcp+0x70>
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80082e8:	2100      	movs	r1, #0
 80082ea:	4638      	mov	r0, r7
 80082ec:	f007 fe5a 	bl	800ffa4 <sys_mbox_trypost>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80082f0:	f104 0714 	add.w	r7, r4, #20
 80082f4:	4638      	mov	r0, r7
 80082f6:	f007 fe92 	bl	801001e <sys_mbox_valid>
 80082fa:	b118      	cbz	r0, 8008304 <err_tcp+0x84>
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80082fc:	2100      	movs	r1, #0
 80082fe:	4638      	mov	r0, r7
 8008300:	f007 fe50 	bl	800ffa4 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008304:	2e01      	cmp	r6, #1
 8008306:	d002      	beq.n	800830e <err_tcp+0x8e>
 8008308:	3e03      	subs	r6, #3
 800830a:	2e01      	cmp	r6, #1
 800830c:	d833      	bhi.n	8008376 <err_tcp+0xf6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800830e:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008310:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8008314:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008316:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 8008318:	d438      	bmi.n	800838c <err_tcp+0x10c>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800831a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800831c:	b933      	cbnz	r3, 800832c <err_tcp+0xac>
 800831e:	4b1c      	ldr	r3, [pc, #112]	; (8008390 <err_tcp+0x110>)
 8008320:	f240 12b3 	movw	r2, #435	; 0x1b3
 8008324:	491d      	ldr	r1, [pc, #116]	; (800839c <err_tcp+0x11c>)
 8008326:	481c      	ldr	r0, [pc, #112]	; (8008398 <err_tcp+0x118>)
 8008328:	f009 f984 	bl	8011634 <iprintf>
      conn->current_msg->err = err;
 800832c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800832e:	681e      	ldr	r6, [r3, #0]
      conn->current_msg->err = err;
 8008330:	711d      	strb	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008332:	360c      	adds	r6, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008334:	4630      	mov	r0, r6
 8008336:	f007 feb2 	bl	801009e <sys_sem_valid>
 800833a:	b930      	cbnz	r0, 800834a <err_tcp+0xca>
 800833c:	4b14      	ldr	r3, [pc, #80]	; (8008390 <err_tcp+0x110>)
 800833e:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8008342:	4917      	ldr	r1, [pc, #92]	; (80083a0 <err_tcp+0x120>)
 8008344:	4814      	ldr	r0, [pc, #80]	; (8008398 <err_tcp+0x118>)
 8008346:	f009 f975 	bl	8011634 <iprintf>
      conn->current_msg = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	6263      	str	r3, [r4, #36]	; 0x24
      NETCONN_SET_SAFE_ERR(conn, err);
 800834e:	f007 fee1 	bl	8010114 <sys_arch_protect>
 8008352:	f994 3008 	ldrsb.w	r3, [r4, #8]
 8008356:	330c      	adds	r3, #12
 8008358:	bfa8      	it	ge
 800835a:	7225      	strbge	r5, [r4, #8]
 800835c:	f007 fee6 	bl	801012c <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8008360:	4630      	mov	r0, r6
}
 8008362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8008366:	f007 be94 	b.w	8010092 <sys_sem_signal>
    SYS_ARCH_SET(conn->last_err, err);
 800836a:	f007 fed3 	bl	8010114 <sys_arch_protect>
 800836e:	7225      	strb	r5, [r4, #8]
 8008370:	f007 fedc 	bl	801012c <sys_arch_unprotect>
 8008374:	e7a0      	b.n	80082b8 <err_tcp+0x38>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008378:	b143      	cbz	r3, 800838c <err_tcp+0x10c>
 800837a:	4b05      	ldr	r3, [pc, #20]	; (8008390 <err_tcp+0x110>)
 800837c:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008380:	4908      	ldr	r1, [pc, #32]	; (80083a4 <err_tcp+0x124>)
 8008382:	4805      	ldr	r0, [pc, #20]	; (8008398 <err_tcp+0x118>)
}
 8008384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008388:	f009 b954 	b.w	8011634 <iprintf>
}
 800838c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008390:	0801319a 	.word	0x0801319a
 8008394:	0801322b 	.word	0x0801322b
 8008398:	08012feb 	.word	0x08012feb
 800839c:	08013238 	.word	0x08013238
 80083a0:	08013252 	.word	0x08013252
 80083a4:	0801326b 	.word	0x0801326b

080083a8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80083a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ac:	4688      	mov	r8, r1
  u8_t write_finished = 0;
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80083ae:	4604      	mov	r4, r0
 80083b0:	b930      	cbnz	r0, 80083c0 <lwip_netconn_do_writemore+0x18>
 80083b2:	4b6d      	ldr	r3, [pc, #436]	; (8008568 <lwip_netconn_do_writemore+0x1c0>)
 80083b4:	f240 52e3 	movw	r2, #1507	; 0x5e3
 80083b8:	496c      	ldr	r1, [pc, #432]	; (800856c <lwip_netconn_do_writemore+0x1c4>)
 80083ba:	486d      	ldr	r0, [pc, #436]	; (8008570 <lwip_netconn_do_writemore+0x1c8>)
 80083bc:	f009 f93a 	bl	8011634 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80083c0:	7863      	ldrb	r3, [r4, #1]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d006      	beq.n	80083d4 <lwip_netconn_do_writemore+0x2c>
 80083c6:	4b68      	ldr	r3, [pc, #416]	; (8008568 <lwip_netconn_do_writemore+0x1c0>)
 80083c8:	f240 52e4 	movw	r2, #1508	; 0x5e4
 80083cc:	4969      	ldr	r1, [pc, #420]	; (8008574 <lwip_netconn_do_writemore+0x1cc>)
 80083ce:	4868      	ldr	r0, [pc, #416]	; (8008570 <lwip_netconn_do_writemore+0x1c8>)
 80083d0:	f009 f930 	bl	8011634 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80083d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80083d6:	b933      	cbnz	r3, 80083e6 <lwip_netconn_do_writemore+0x3e>
 80083d8:	4b63      	ldr	r3, [pc, #396]	; (8008568 <lwip_netconn_do_writemore+0x1c0>)
 80083da:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80083de:	4966      	ldr	r1, [pc, #408]	; (8008578 <lwip_netconn_do_writemore+0x1d0>)
 80083e0:	4863      	ldr	r0, [pc, #396]	; (8008570 <lwip_netconn_do_writemore+0x1c8>)
 80083e2:	f009 f927 	bl	8011634 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80083e6:	6863      	ldr	r3, [r4, #4]
 80083e8:	b933      	cbnz	r3, 80083f8 <lwip_netconn_do_writemore+0x50>
 80083ea:	4b5f      	ldr	r3, [pc, #380]	; (8008568 <lwip_netconn_do_writemore+0x1c0>)
 80083ec:	f240 52e6 	movw	r2, #1510	; 0x5e6
 80083f0:	4962      	ldr	r1, [pc, #392]	; (800857c <lwip_netconn_do_writemore+0x1d4>)
 80083f2:	485f      	ldr	r0, [pc, #380]	; (8008570 <lwip_netconn_do_writemore+0x1c8>)
 80083f4:	f009 f91e 	bl	8011634 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80083f8:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d306      	bcc.n	8008410 <lwip_netconn_do_writemore+0x68>
 8008402:	4b59      	ldr	r3, [pc, #356]	; (8008568 <lwip_netconn_do_writemore+0x1c0>)
 8008404:	f240 52e7 	movw	r2, #1511	; 0x5e7
 8008408:	495d      	ldr	r1, [pc, #372]	; (8008580 <lwip_netconn_do_writemore+0x1d8>)
 800840a:	4859      	ldr	r0, [pc, #356]	; (8008570 <lwip_netconn_do_writemore+0x1c8>)
 800840c:	f009 f912 	bl	8011634 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8008410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008412:	7f27      	ldrb	r7, [r4, #28]
 8008414:	7c1d      	ldrb	r5, [r3, #16]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008416:	f007 0702 	and.w	r7, r7, #2
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800841a:	6899      	ldr	r1, [r3, #8]
 800841c:	f005 0204 	and.w	r2, r5, #4
      len = 0xffff;
      apiflags |= TCP_WRITE_FLAG_MORE;
    } else {
      len = (u16_t)diff;
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 8008420:	6860      	ldr	r0, [r4, #4]
 8008422:	4317      	orrs	r7, r2
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8008424:	6a22      	ldr	r2, [r4, #32]
    available = tcp_sndbuf(conn->pcb.tcp);
 8008426:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800842a:	eb01 0902 	add.w	r9, r1, r2
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800842e:	68d9      	ldr	r1, [r3, #12]
 8008430:	1a8b      	subs	r3, r1, r2
    if (diff > 0xffffUL) { /* max_u16_t */
 8008432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
      len = 0xffff;
 8008436:	bf2a      	itet	cs
 8008438:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
      len = (u16_t)diff;
 800843c:	b29b      	uxthcc	r3, r3
      apiflags |= TCP_WRITE_FLAG_MORE;
 800843e:	f045 0502 	orrcs.w	r5, r5, #2
    if (available < len) {
 8008442:	42b3      	cmp	r3, r6
 8008444:	d95c      	bls.n	8008500 <lwip_netconn_do_writemore+0x158>
      /* don't try to write more than sendbuf */
      len = available;
      if (dontblock) {
 8008446:	b11f      	cbz	r7, 8008450 <lwip_netconn_do_writemore+0xa8>
        if (!len) {
 8008448:	b926      	cbnz	r6, 8008454 <lwip_netconn_do_writemore+0xac>
          err = ERR_WOULDBLOCK;
 800844a:	f06f 0506 	mvn.w	r5, #6
 800844e:	e018      	b.n	8008482 <lwip_netconn_do_writemore+0xda>
          goto err_mem;
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8008450:	f045 0502 	orr.w	r5, r5, #2
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8008454:	4432      	add	r2, r6
 8008456:	4291      	cmp	r1, r2
 8008458:	d206      	bcs.n	8008468 <lwip_netconn_do_writemore+0xc0>
 800845a:	4b43      	ldr	r3, [pc, #268]	; (8008568 <lwip_netconn_do_writemore+0x1c0>)
 800845c:	f240 6213 	movw	r2, #1555	; 0x613
 8008460:	4948      	ldr	r1, [pc, #288]	; (8008584 <lwip_netconn_do_writemore+0x1dc>)
 8008462:	4843      	ldr	r0, [pc, #268]	; (8008570 <lwip_netconn_do_writemore+0x1c8>)
 8008464:	f009 f8e6 	bl	8011634 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008468:	462b      	mov	r3, r5
 800846a:	4632      	mov	r2, r6
 800846c:	4649      	mov	r1, r9
 800846e:	6860      	ldr	r0, [r4, #4]
 8008470:	f004 f928 	bl	800c6c4 <tcp_write>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008474:	1c43      	adds	r3, r0, #1
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008476:	4605      	mov	r5, r0
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b01      	cmp	r3, #1
 800847c:	d85f      	bhi.n	800853e <lwip_netconn_do_writemore+0x196>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800847e:	2f00      	cmp	r7, #0
 8008480:	d040      	beq.n	8008504 <lwip_netconn_do_writemore+0x15c>
 8008482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	429e      	cmp	r6, r3
 8008488:	d23c      	bcs.n	8008504 <lwip_netconn_do_writemore+0x15c>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800848a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800848c:	b11b      	cbz	r3, 8008496 <lwip_netconn_do_writemore+0xee>
 800848e:	4632      	mov	r2, r6
 8008490:	2103      	movs	r1, #3
 8008492:	4620      	mov	r0, r4
 8008494:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008496:	7f23      	ldrb	r3, [r4, #28]
 8008498:	f043 0310 	orr.w	r3, r3, #16
 800849c:	7723      	strb	r3, [r4, #28]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
      }
    }

    if (err == ERR_OK) {
 800849e:	2d00      	cmp	r5, #0
 80084a0:	d142      	bne.n	8008528 <lwip_netconn_do_writemore+0x180>
      err_t out_err;
      conn->write_offset += len;
 80084a2:	6a23      	ldr	r3, [r4, #32]
 80084a4:	441e      	add	r6, r3
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80084a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084a8:	68da      	ldr	r2, [r3, #12]
      conn->write_offset += len;
 80084aa:	6226      	str	r6, [r4, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80084ac:	4296      	cmp	r6, r2
 80084ae:	d000      	beq.n	80084b2 <lwip_netconn_do_writemore+0x10a>
 80084b0:	b10f      	cbz	r7, 80084b6 <lwip_netconn_do_writemore+0x10e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
        /* everything was written */
        write_finished = 1;
 80084b2:	2701      	movs	r7, #1
        conn->current_msg->msg.w.len = conn->write_offset;
 80084b4:	60de      	str	r6, [r3, #12]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80084b6:	6860      	ldr	r0, [r4, #4]
 80084b8:	f004 fc84 	bl	800cdc4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 80084bc:	f110 0f0c 	cmn.w	r0, #12
 80084c0:	db01      	blt.n	80084c6 <lwip_netconn_do_writemore+0x11e>
 80084c2:	1d01      	adds	r1, r0, #4
 80084c4:	d14a      	bne.n	800855c <lwip_netconn_do_writemore+0x1b4>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
        conn->current_msg->msg.w.len = 0;
 80084c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084c8:	2200      	movs	r2, #0
      out_err = tcp_output(conn->pcb.tcp);
 80084ca:	4605      	mov	r5, r0
        conn->current_msg->msg.w.len = 0;
 80084cc:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80084ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084d0:	681e      	ldr	r6, [r3, #0]
    conn->current_msg->err = err;
 80084d2:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
 80084d4:	2300      	movs	r3, #0
    conn->write_offset = 0;
 80084d6:	e9c4 3308 	strd	r3, r3, [r4, #32]
    conn->state = NETCONN_NONE;
 80084da:	7063      	strb	r3, [r4, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80084dc:	f007 fe1a 	bl	8010114 <sys_arch_protect>
 80084e0:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80084e4:	330c      	adds	r3, #12
 80084e6:	bfa8      	it	ge
 80084e8:	7225      	strbge	r5, [r4, #8]
 80084ea:	f007 fe1f 	bl	801012c <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80084ee:	f1b8 0f00 	cmp.w	r8, #0
 80084f2:	d036      	beq.n	8008562 <lwip_netconn_do_writemore+0x1ba>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80084f4:	f106 000c 	add.w	r0, r6, #12
 80084f8:	f007 fdcb 	bl	8010092 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 80084fc:	2000      	movs	r0, #0
 80084fe:	e025      	b.n	800854c <lwip_netconn_do_writemore+0x1a4>
 8008500:	461e      	mov	r6, r3
 8008502:	e7a7      	b.n	8008454 <lwip_netconn_do_writemore+0xac>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8008504:	6863      	ldr	r3, [r4, #4]
 8008506:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800850a:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800850e:	d303      	bcc.n	8008518 <lwip_netconn_do_writemore+0x170>
 8008510:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008514:	2b04      	cmp	r3, #4
 8008516:	d9c2      	bls.n	800849e <lwip_netconn_do_writemore+0xf6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008518:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800851a:	2b00      	cmp	r3, #0
 800851c:	d0bf      	beq.n	800849e <lwip_netconn_do_writemore+0xf6>
 800851e:	4632      	mov	r2, r6
 8008520:	2103      	movs	r1, #3
 8008522:	4620      	mov	r0, r4
 8008524:	4798      	blx	r3
 8008526:	e7ba      	b.n	800849e <lwip_netconn_do_writemore+0xf6>
    } else if (err == ERR_MEM) {
 8008528:	1c6a      	adds	r2, r5, #1
 800852a:	d108      	bne.n	800853e <lwip_netconn_do_writemore+0x196>
      err_t out_err = tcp_output(conn->pcb.tcp);
 800852c:	6860      	ldr	r0, [r4, #4]
 800852e:	f004 fc49 	bl	800cdc4 <tcp_output>
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008532:	f110 0f0c 	cmn.w	r0, #12
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008536:	4605      	mov	r5, r0
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008538:	db01      	blt.n	800853e <lwip_netconn_do_writemore+0x196>
 800853a:	1d03      	adds	r3, r0, #4
 800853c:	d103      	bne.n	8008546 <lwip_netconn_do_writemore+0x19e>
      conn->current_msg->msg.w.len = 0;
 800853e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008540:	2200      	movs	r2, #0
 8008542:	60da      	str	r2, [r3, #12]
  if (write_finished) {
 8008544:	e7c3      	b.n	80084ce <lwip_netconn_do_writemore+0x126>
      } else if (dontblock) {
 8008546:	b91f      	cbnz	r7, 8008550 <lwip_netconn_do_writemore+0x1a8>
    return ERR_MEM;
 8008548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800854c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        conn->current_msg->msg.w.len = 0;
 8008550:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008552:	2200      	movs	r2, #0
        err = ERR_WOULDBLOCK;
 8008554:	f06f 0506 	mvn.w	r5, #6
        conn->current_msg->msg.w.len = 0;
 8008558:	60da      	str	r2, [r3, #12]
  if (write_finished) {
 800855a:	e7b8      	b.n	80084ce <lwip_netconn_do_writemore+0x126>
 800855c:	2f00      	cmp	r7, #0
 800855e:	d1b6      	bne.n	80084ce <lwip_netconn_do_writemore+0x126>
 8008560:	e7f2      	b.n	8008548 <lwip_netconn_do_writemore+0x1a0>
  return ERR_OK;
 8008562:	4640      	mov	r0, r8
 8008564:	e7f2      	b.n	800854c <lwip_netconn_do_writemore+0x1a4>
 8008566:	bf00      	nop
 8008568:	0801319a 	.word	0x0801319a
 800856c:	0801322b 	.word	0x0801322b
 8008570:	08012feb 	.word	0x08012feb
 8008574:	08013285 	.word	0x08013285
 8008578:	08013238 	.word	0x08013238
 800857c:	080132a2 	.word	0x080132a2
 8008580:	080132b8 	.word	0x080132b8
 8008584:	080132ea 	.word	0x080132ea

08008588 <lwip_netconn_do_close_internal>:
{
 8008588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858c:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800858e:	4604      	mov	r4, r0
 8008590:	b930      	cbnz	r0, 80085a0 <lwip_netconn_do_close_internal+0x18>
 8008592:	4b71      	ldr	r3, [pc, #452]	; (8008758 <lwip_netconn_do_close_internal+0x1d0>)
 8008594:	f240 3243 	movw	r2, #835	; 0x343
 8008598:	4970      	ldr	r1, [pc, #448]	; (800875c <lwip_netconn_do_close_internal+0x1d4>)
 800859a:	4871      	ldr	r0, [pc, #452]	; (8008760 <lwip_netconn_do_close_internal+0x1d8>)
 800859c:	f009 f84a 	bl	8011634 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80085a0:	7823      	ldrb	r3, [r4, #0]
 80085a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085a6:	2b10      	cmp	r3, #16
 80085a8:	d006      	beq.n	80085b8 <lwip_netconn_do_close_internal+0x30>
 80085aa:	4b6b      	ldr	r3, [pc, #428]	; (8008758 <lwip_netconn_do_close_internal+0x1d0>)
 80085ac:	f44f 7251 	mov.w	r2, #836	; 0x344
 80085b0:	496c      	ldr	r1, [pc, #432]	; (8008764 <lwip_netconn_do_close_internal+0x1dc>)
 80085b2:	486b      	ldr	r0, [pc, #428]	; (8008760 <lwip_netconn_do_close_internal+0x1d8>)
 80085b4:	f009 f83e 	bl	8011634 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80085b8:	7863      	ldrb	r3, [r4, #1]
 80085ba:	2b04      	cmp	r3, #4
 80085bc:	d006      	beq.n	80085cc <lwip_netconn_do_close_internal+0x44>
 80085be:	4b66      	ldr	r3, [pc, #408]	; (8008758 <lwip_netconn_do_close_internal+0x1d0>)
 80085c0:	f240 3245 	movw	r2, #837	; 0x345
 80085c4:	4968      	ldr	r1, [pc, #416]	; (8008768 <lwip_netconn_do_close_internal+0x1e0>)
 80085c6:	4866      	ldr	r0, [pc, #408]	; (8008760 <lwip_netconn_do_close_internal+0x1d8>)
 80085c8:	f009 f834 	bl	8011634 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80085cc:	6863      	ldr	r3, [r4, #4]
 80085ce:	b933      	cbnz	r3, 80085de <lwip_netconn_do_close_internal+0x56>
 80085d0:	4b61      	ldr	r3, [pc, #388]	; (8008758 <lwip_netconn_do_close_internal+0x1d0>)
 80085d2:	f240 3246 	movw	r2, #838	; 0x346
 80085d6:	4965      	ldr	r1, [pc, #404]	; (800876c <lwip_netconn_do_close_internal+0x1e4>)
 80085d8:	4861      	ldr	r0, [pc, #388]	; (8008760 <lwip_netconn_do_close_internal+0x1d8>)
 80085da:	f009 f82b 	bl	8011634 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80085de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085e0:	b933      	cbnz	r3, 80085f0 <lwip_netconn_do_close_internal+0x68>
 80085e2:	4b5d      	ldr	r3, [pc, #372]	; (8008758 <lwip_netconn_do_close_internal+0x1d0>)
 80085e4:	f240 3247 	movw	r2, #839	; 0x347
 80085e8:	4961      	ldr	r1, [pc, #388]	; (8008770 <lwip_netconn_do_close_internal+0x1e8>)
 80085ea:	485d      	ldr	r0, [pc, #372]	; (8008760 <lwip_netconn_do_close_internal+0x1d8>)
 80085ec:	f009 f822 	bl	8011634 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80085f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  tpcb = conn->pcb.tcp;
 80085f2:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80085f4:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 80085f6:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80085f8:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80085fc:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8008600:	d00f      	beq.n	8008622 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 8008602:	f1ba 0f00 	cmp.w	sl, #0
 8008606:	d005      	beq.n	8008614 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 8008608:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 800860a:	1f5a      	subs	r2, r3, #5
 800860c:	2a01      	cmp	r2, #1
 800860e:	d908      	bls.n	8008622 <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 8008610:	2b08      	cmp	r3, #8
 8008612:	d006      	beq.n	8008622 <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008614:	f1b8 0f00 	cmp.w	r8, #0
 8008618:	d016      	beq.n	8008648 <lwip_netconn_do_close_internal+0xc0>
 800861a:	7eaf      	ldrb	r7, [r5, #26]
 800861c:	f017 0710 	ands.w	r7, r7, #16
 8008620:	d004      	beq.n	800862c <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 8008622:	2701      	movs	r7, #1
 8008624:	2100      	movs	r1, #0
 8008626:	4628      	mov	r0, r5
 8008628:	f001 ff2e 	bl	800a488 <tcp_arg>
  if (tpcb->state == LISTEN) {
 800862c:	7d2b      	ldrb	r3, [r5, #20]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d10c      	bne.n	800864c <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 8008632:	2100      	movs	r1, #0
 8008634:	4628      	mov	r0, r5
 8008636:	f001 ff71 	bl	800a51c <tcp_accept>
  if (close) {
 800863a:	bb27      	cbnz	r7, 8008686 <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800863c:	4642      	mov	r2, r8
 800863e:	4651      	mov	r1, sl
 8008640:	4628      	mov	r0, r5
 8008642:	f002 fb1f 	bl	800ac84 <tcp_shutdown>
 8008646:	e021      	b.n	800868c <lwip_netconn_do_close_internal+0x104>
    close = 0;
 8008648:	4647      	mov	r7, r8
 800864a:	e7ef      	b.n	800862c <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 800864c:	f1ba 0f00 	cmp.w	sl, #0
 8008650:	d007      	beq.n	8008662 <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 8008652:	2100      	movs	r1, #0
 8008654:	4628      	mov	r0, r5
 8008656:	f001 ff1b 	bl	800a490 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800865a:	2100      	movs	r1, #0
 800865c:	4628      	mov	r0, r5
 800865e:	f001 ff5d 	bl	800a51c <tcp_accept>
    if (shut_tx) {
 8008662:	f1b8 0f00 	cmp.w	r8, #0
 8008666:	d003      	beq.n	8008670 <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 8008668:	2100      	movs	r1, #0
 800866a:	4628      	mov	r0, r5
 800866c:	f001 ff28 	bl	800a4c0 <tcp_sent>
    if (close) {
 8008670:	2f00      	cmp	r7, #0
 8008672:	d0e3      	beq.n	800863c <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8008674:	2200      	movs	r2, #0
 8008676:	4628      	mov	r0, r5
 8008678:	4611      	mov	r1, r2
 800867a:	f001 ff55 	bl	800a528 <tcp_poll>
      tcp_err(tpcb, NULL);
 800867e:	2100      	movs	r1, #0
 8008680:	4628      	mov	r0, r5
 8008682:	f001 ff33 	bl	800a4ec <tcp_err>
      err = tcp_close(tpcb);
 8008686:	4628      	mov	r0, r5
 8008688:	f002 fa5c 	bl	800ab44 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800868c:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 800868e:	b160      	cbz	r0, 80086aa <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d10a      	bne.n	80086aa <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008696:	f893 b009 	ldrb.w	fp, [r3, #9]
 800869a:	f1bb 0f00 	cmp.w	fp, #0
 800869e:	d139      	bne.n	8008714 <lwip_netconn_do_close_internal+0x18c>
        if (close) {
 80086a0:	b11f      	cbz	r7, 80086aa <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 80086a2:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 80086a4:	4628      	mov	r0, r5
 80086a6:	f002 fb8b 	bl	800adc0 <tcp_abort>
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80086aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ac:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 80086ae:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 80086b0:	2300      	movs	r3, #0
 80086b2:	6263      	str	r3, [r4, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80086b4:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 80086b6:	b9ce      	cbnz	r6, 80086ec <lwip_netconn_do_close_internal+0x164>
      if (close) {
 80086b8:	b137      	cbz	r7, 80086c8 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80086ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        conn->pcb.tcp = NULL;
 80086bc:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80086be:	b11b      	cbz	r3, 80086c8 <lwip_netconn_do_close_internal+0x140>
 80086c0:	4632      	mov	r2, r6
 80086c2:	2104      	movs	r1, #4
 80086c4:	4620      	mov	r0, r4
 80086c6:	4798      	blx	r3
      if (shut_rx) {
 80086c8:	f1ba 0f00 	cmp.w	sl, #0
 80086cc:	d005      	beq.n	80086da <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80086ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086d0:	b11b      	cbz	r3, 80086da <lwip_netconn_do_close_internal+0x152>
 80086d2:	2200      	movs	r2, #0
 80086d4:	4620      	mov	r0, r4
 80086d6:	4611      	mov	r1, r2
 80086d8:	4798      	blx	r3
      if (shut_tx) {
 80086da:	f1b8 0f00 	cmp.w	r8, #0
 80086de:	d005      	beq.n	80086ec <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80086e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80086e2:	b11b      	cbz	r3, 80086ec <lwip_netconn_do_close_internal+0x164>
 80086e4:	2200      	movs	r2, #0
 80086e6:	2102      	movs	r1, #2
 80086e8:	4620      	mov	r0, r4
 80086ea:	4798      	blx	r3
    NETCONN_SET_SAFE_ERR(conn, err);
 80086ec:	f007 fd12 	bl	8010114 <sys_arch_protect>
 80086f0:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80086f4:	330c      	adds	r3, #12
 80086f6:	bfa8      	it	ge
 80086f8:	7226      	strbge	r6, [r4, #8]
 80086fa:	f007 fd17 	bl	801012c <sys_arch_unprotect>
    if (delayed)
 80086fe:	f1b9 0f00 	cmp.w	r9, #0
 8008702:	d026      	beq.n	8008752 <lwip_netconn_do_close_internal+0x1ca>
    return ERR_OK;
 8008704:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 8008706:	f105 000c 	add.w	r0, r5, #12
 800870a:	f007 fcc2 	bl	8010092 <sys_sem_signal>
}
 800870e:	4630      	mov	r0, r6
 8008710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008714:	7d2b      	ldrb	r3, [r5, #20]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d106      	bne.n	8008728 <lwip_netconn_do_close_internal+0x1a0>
 800871a:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <lwip_netconn_do_close_internal+0x1d0>)
 800871c:	f240 32e3 	movw	r2, #995	; 0x3e3
 8008720:	4914      	ldr	r1, [pc, #80]	; (8008774 <lwip_netconn_do_close_internal+0x1ec>)
 8008722:	480f      	ldr	r0, [pc, #60]	; (8008760 <lwip_netconn_do_close_internal+0x1d8>)
 8008724:	f008 ff86 	bl	8011634 <iprintf>
    if (shut_tx) {
 8008728:	f1b8 0f00 	cmp.w	r8, #0
 800872c:	d003      	beq.n	8008736 <lwip_netconn_do_close_internal+0x1ae>
      tcp_sent(tpcb, sent_tcp);
 800872e:	4912      	ldr	r1, [pc, #72]	; (8008778 <lwip_netconn_do_close_internal+0x1f0>)
 8008730:	4628      	mov	r0, r5
 8008732:	f001 fec5 	bl	800a4c0 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 8008736:	2201      	movs	r2, #1
 8008738:	4628      	mov	r0, r5
 800873a:	4910      	ldr	r1, [pc, #64]	; (800877c <lwip_netconn_do_close_internal+0x1f4>)
 800873c:	f001 fef4 	bl	800a528 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008740:	4628      	mov	r0, r5
 8008742:	490f      	ldr	r1, [pc, #60]	; (8008780 <lwip_netconn_do_close_internal+0x1f8>)
 8008744:	f001 fed2 	bl	800a4ec <tcp_err>
    tcp_arg(tpcb, conn);
 8008748:	4621      	mov	r1, r4
 800874a:	4628      	mov	r0, r5
 800874c:	f001 fe9c 	bl	800a488 <tcp_arg>
  return err;
 8008750:	e7dd      	b.n	800870e <lwip_netconn_do_close_internal+0x186>
    return ERR_OK;
 8008752:	464e      	mov	r6, r9
 8008754:	e7db      	b.n	800870e <lwip_netconn_do_close_internal+0x186>
 8008756:	bf00      	nop
 8008758:	0801319a 	.word	0x0801319a
 800875c:	080130f5 	.word	0x080130f5
 8008760:	08012feb 	.word	0x08012feb
 8008764:	08013315 	.word	0x08013315
 8008768:	08013333 	.word	0x08013333
 800876c:	08013357 	.word	0x08013357
 8008770:	08013238 	.word	0x08013238
 8008774:	0801336a 	.word	0x0801336a
 8008778:	080088c1 	.word	0x080088c1
 800877c:	08008785 	.word	0x08008785
 8008780:	08008281 	.word	0x08008281

08008784 <poll_tcp>:
{
 8008784:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008786:	4604      	mov	r4, r0
 8008788:	b930      	cbnz	r0, 8008798 <poll_tcp+0x14>
 800878a:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <poll_tcp+0x6c>)
 800878c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008790:	4918      	ldr	r1, [pc, #96]	; (80087f4 <poll_tcp+0x70>)
 8008792:	4819      	ldr	r0, [pc, #100]	; (80087f8 <poll_tcp+0x74>)
 8008794:	f008 ff4e 	bl	8011634 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8008798:	7861      	ldrb	r1, [r4, #1]
 800879a:	2901      	cmp	r1, #1
 800879c:	d11b      	bne.n	80087d6 <poll_tcp+0x52>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800879e:	4620      	mov	r0, r4
 80087a0:	f7ff fe02 	bl	80083a8 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80087a4:	7f23      	ldrb	r3, [r4, #28]
 80087a6:	06da      	lsls	r2, r3, #27
 80087a8:	d513      	bpl.n	80087d2 <poll_tcp+0x4e>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80087aa:	6862      	ldr	r2, [r4, #4]
 80087ac:	b18a      	cbz	r2, 80087d2 <poll_tcp+0x4e>
 80087ae:	f8b2 1060 	ldrh.w	r1, [r2, #96]	; 0x60
 80087b2:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 80087b6:	d30c      	bcc.n	80087d2 <poll_tcp+0x4e>
 80087b8:	f8b2 2062 	ldrh.w	r2, [r2, #98]	; 0x62
 80087bc:	2a04      	cmp	r2, #4
 80087be:	d808      	bhi.n	80087d2 <poll_tcp+0x4e>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80087c0:	f023 0310 	bic.w	r3, r3, #16
 80087c4:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80087c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80087c8:	b11b      	cbz	r3, 80087d2 <poll_tcp+0x4e>
 80087ca:	2200      	movs	r2, #0
 80087cc:	2102      	movs	r1, #2
 80087ce:	4620      	mov	r0, r4
 80087d0:	4798      	blx	r3
}
 80087d2:	2000      	movs	r0, #0
 80087d4:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 80087d6:	2904      	cmp	r1, #4
 80087d8:	d1e4      	bne.n	80087a4 <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80087da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80087dc:	b11a      	cbz	r2, 80087e6 <poll_tcp+0x62>
 80087de:	7a53      	ldrb	r3, [r2, #9]
 80087e0:	b10b      	cbz	r3, 80087e6 <poll_tcp+0x62>
      conn->current_msg->msg.sd.polls_left--;
 80087e2:	3b01      	subs	r3, #1
 80087e4:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80087e6:	2101      	movs	r1, #1
 80087e8:	4620      	mov	r0, r4
 80087ea:	f7ff fecd 	bl	8008588 <lwip_netconn_do_close_internal>
 80087ee:	e7d9      	b.n	80087a4 <poll_tcp+0x20>
 80087f0:	0801319a 	.word	0x0801319a
 80087f4:	0801322b 	.word	0x0801322b
 80087f8:	08012feb 	.word	0x08012feb

080087fc <recv_tcp>:
{
 80087fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008800:	4605      	mov	r5, r0
 8008802:	4616      	mov	r6, r2
 8008804:	4698      	mov	r8, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008806:	460f      	mov	r7, r1
 8008808:	b929      	cbnz	r1, 8008816 <recv_tcp+0x1a>
 800880a:	4b28      	ldr	r3, [pc, #160]	; (80088ac <recv_tcp+0xb0>)
 800880c:	22f9      	movs	r2, #249	; 0xf9
 800880e:	4928      	ldr	r1, [pc, #160]	; (80088b0 <recv_tcp+0xb4>)
 8008810:	4828      	ldr	r0, [pc, #160]	; (80088b4 <recv_tcp+0xb8>)
 8008812:	f008 ff0f 	bl	8011634 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008816:	bb9d      	cbnz	r5, 8008880 <recv_tcp+0x84>
    return ERR_VAL;
 8008818:	f06f 0405 	mvn.w	r4, #5
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800881c:	4b23      	ldr	r3, [pc, #140]	; (80088ac <recv_tcp+0xb0>)
 800881e:	22fa      	movs	r2, #250	; 0xfa
 8008820:	4925      	ldr	r1, [pc, #148]	; (80088b8 <recv_tcp+0xbc>)
 8008822:	4824      	ldr	r0, [pc, #144]	; (80088b4 <recv_tcp+0xb8>)
 8008824:	f008 ff06 	bl	8011634 <iprintf>
}
 8008828:	4620      	mov	r0, r4
 800882a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      tcp_recved(pcb, p->tot_len);
 800882e:	4638      	mov	r0, r7
 8008830:	8931      	ldrh	r1, [r6, #8]
 8008832:	f001 fdbf 	bl	800a3b4 <tcp_recved>
      pbuf_free(p);
 8008836:	4630      	mov	r0, r6
 8008838:	f001 f9b4 	bl	8009ba4 <pbuf_free>
 800883c:	e7f4      	b.n	8008828 <recv_tcp+0x2c>
  if (err != ERR_OK) {
 800883e:	f1b8 0f00 	cmp.w	r8, #0
 8008842:	d009      	beq.n	8008858 <recv_tcp+0x5c>
    NETCONN_SET_SAFE_ERR(conn, err);
 8008844:	f007 fc66 	bl	8010114 <sys_arch_protect>
 8008848:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800884c:	330c      	adds	r3, #12
 800884e:	bfa8      	it	ge
 8008850:	f885 8008 	strbge.w	r8, [r5, #8]
 8008854:	f007 fc6a 	bl	801012c <sys_arch_unprotect>
  if (p != NULL) {
 8008858:	b16e      	cbz	r6, 8008876 <recv_tcp+0x7a>
    len = p->tot_len;
 800885a:	8937      	ldrh	r7, [r6, #8]
  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800885c:	4631      	mov	r1, r6
 800885e:	4648      	mov	r0, r9
 8008860:	f007 fba0 	bl	800ffa4 <sys_mbox_trypost>
 8008864:	4604      	mov	r4, r0
 8008866:	b940      	cbnz	r0, 800887a <recv_tcp+0x7e>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008868:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800886a:	b1eb      	cbz	r3, 80088a8 <recv_tcp+0xac>
 800886c:	4601      	mov	r1, r0
 800886e:	463a      	mov	r2, r7
 8008870:	4628      	mov	r0, r5
 8008872:	4798      	blx	r3
 8008874:	e7d8      	b.n	8008828 <recv_tcp+0x2c>
    len = 0;
 8008876:	4637      	mov	r7, r6
 8008878:	e7f0      	b.n	800885c <recv_tcp+0x60>
    return ERR_MEM;
 800887a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800887e:	e7d3      	b.n	8008828 <recv_tcp+0x2c>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008880:	686b      	ldr	r3, [r5, #4]
 8008882:	42bb      	cmp	r3, r7
 8008884:	d006      	beq.n	8008894 <recv_tcp+0x98>
 8008886:	4b09      	ldr	r3, [pc, #36]	; (80088ac <recv_tcp+0xb0>)
 8008888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800888c:	490b      	ldr	r1, [pc, #44]	; (80088bc <recv_tcp+0xc0>)
 800888e:	4809      	ldr	r0, [pc, #36]	; (80088b4 <recv_tcp+0xb8>)
 8008890:	f008 fed0 	bl	8011634 <iprintf>
  if (!sys_mbox_valid(&conn->recvmbox)) {
 8008894:	f105 0910 	add.w	r9, r5, #16
 8008898:	4648      	mov	r0, r9
 800889a:	f007 fbc0 	bl	801001e <sys_mbox_valid>
 800889e:	4604      	mov	r4, r0
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d1cc      	bne.n	800883e <recv_tcp+0x42>
    if (p != NULL) {
 80088a4:	2e00      	cmp	r6, #0
 80088a6:	d1c2      	bne.n	800882e <recv_tcp+0x32>
    return ERR_OK;
 80088a8:	2400      	movs	r4, #0
 80088aa:	e7bd      	b.n	8008828 <recv_tcp+0x2c>
 80088ac:	0801319a 	.word	0x0801319a
 80088b0:	0801338d 	.word	0x0801338d
 80088b4:	08012feb 	.word	0x08012feb
 80088b8:	080133af 	.word	0x080133af
 80088bc:	080133ce 	.word	0x080133ce

080088c0 <sent_tcp>:
{
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80088c4:	4604      	mov	r4, r0
 80088c6:	b970      	cbnz	r0, 80088e6 <sent_tcp+0x26>
 80088c8:	4b15      	ldr	r3, [pc, #84]	; (8008920 <sent_tcp+0x60>)
 80088ca:	f240 1261 	movw	r2, #353	; 0x161
 80088ce:	4915      	ldr	r1, [pc, #84]	; (8008924 <sent_tcp+0x64>)
 80088d0:	4815      	ldr	r0, [pc, #84]	; (8008928 <sent_tcp+0x68>)
 80088d2:	f008 feaf 	bl	8011634 <iprintf>
}
 80088d6:	2000      	movs	r0, #0
 80088d8:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 80088da:	2904      	cmp	r1, #4
 80088dc:	d108      	bne.n	80088f0 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80088de:	2101      	movs	r1, #1
 80088e0:	f7ff fe52 	bl	8008588 <lwip_netconn_do_close_internal>
 80088e4:	e004      	b.n	80088f0 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 80088e6:	7841      	ldrb	r1, [r0, #1]
 80088e8:	2901      	cmp	r1, #1
 80088ea:	d1f6      	bne.n	80088da <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80088ec:	f7ff fd5c 	bl	80083a8 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80088f0:	6863      	ldr	r3, [r4, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0ef      	beq.n	80088d6 <sent_tcp+0x16>
 80088f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80088fa:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80088fe:	d3ea      	bcc.n	80088d6 <sent_tcp+0x16>
 8008900:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008904:	2b04      	cmp	r3, #4
 8008906:	d8e6      	bhi.n	80088d6 <sent_tcp+0x16>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008908:	7f23      	ldrb	r3, [r4, #28]
 800890a:	f023 0310 	bic.w	r3, r3, #16
 800890e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008910:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0df      	beq.n	80088d6 <sent_tcp+0x16>
 8008916:	462a      	mov	r2, r5
 8008918:	2102      	movs	r1, #2
 800891a:	4620      	mov	r0, r4
 800891c:	4798      	blx	r3
  return ERR_OK;
 800891e:	e7da      	b.n	80088d6 <sent_tcp+0x16>
 8008920:	0801319a 	.word	0x0801319a
 8008924:	0801322b 	.word	0x0801322b
 8008928:	08012feb 	.word	0x08012feb

0800892c <lwip_netconn_do_newconn>:
{
 800892c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 800892e:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8008930:	6805      	ldr	r5, [r0, #0]
{
 8008932:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8008934:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008936:	6868      	ldr	r0, [r5, #4]
 8008938:	bb28      	cbnz	r0, 8008986 <lwip_netconn_do_newconn+0x5a>
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800893a:	782b      	ldrb	r3, [r5, #0]
 800893c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008940:	2b10      	cmp	r3, #16
 8008942:	d014      	beq.n	800896e <lwip_netconn_do_newconn+0x42>
 8008944:	2b20      	cmp	r3, #32
 8008946:	d11c      	bne.n	8008982 <lwip_netconn_do_newconn+0x56>
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008948:	f004 ffea 	bl	800d920 <udp_new_ip_type>
    if (msg->conn->pcb.udp != NULL) {
 800894c:	6822      	ldr	r2, [r4, #0]
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800894e:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.udp != NULL) {
 8008950:	6850      	ldr	r0, [r2, #4]
 8008952:	b150      	cbz	r0, 800896a <lwip_netconn_do_newconn+0x3e>
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008954:	7813      	ldrb	r3, [r2, #0]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008956:	4912      	ldr	r1, [pc, #72]	; (80089a0 <lwip_netconn_do_newconn+0x74>)
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008958:	2b22      	cmp	r3, #34	; 0x22
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800895a:	bf04      	itt	eq
 800895c:	2301      	moveq	r3, #1
 800895e:	7403      	strbeq	r3, [r0, #16]
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008960:	f004 ffb4 	bl	800d8cc <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	b96b      	cbnz	r3, 8008986 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 800896a:	23ff      	movs	r3, #255	; 0xff
 800896c:	e00a      	b.n	8008984 <lwip_netconn_do_newconn+0x58>
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800896e:	f002 fae3 	bl	800af38 <tcp_new_ip_type>
 8008972:	6068      	str	r0, [r5, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	6843      	ldr	r3, [r0, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d0f6      	beq.n	800896a <lwip_netconn_do_newconn+0x3e>
      setup_tcp(msg->conn);
 800897c:	f7ff fc5e 	bl	800823c <setup_tcp>
 8008980:	e7f0      	b.n	8008964 <lwip_netconn_do_newconn+0x38>
    msg->err = ERR_VAL;
 8008982:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8008984:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8008986:	f007 fbc5 	bl	8010114 <sys_arch_protect>
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008990:	320c      	adds	r2, #12
 8008992:	db01      	blt.n	8008998 <lwip_netconn_do_newconn+0x6c>
 8008994:	7922      	ldrb	r2, [r4, #4]
 8008996:	721a      	strb	r2, [r3, #8]
}
 8008998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TCPIP_APIMSG_ACK(msg);
 800899c:	f007 bbc6 	b.w	801012c <sys_arch_unprotect>
 80089a0:	08008181 	.word	0x08008181

080089a4 <netconn_alloc>:
{
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80089a8:	2007      	movs	r0, #7
{
 80089aa:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80089ac:	f000 ff5a 	bl	8009864 <memp_malloc>
  if (conn == NULL) {
 80089b0:	4604      	mov	r4, r0
 80089b2:	b3a8      	cbz	r0, 8008a20 <netconn_alloc+0x7c>
  conn->type = t;
 80089b4:	7005      	strb	r5, [r0, #0]
 80089b6:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->last_err = ERR_OK;
 80089ba:	2300      	movs	r3, #0
  switch(NETCONNTYPE_GROUP(t)) {
 80089bc:	2d10      	cmp	r5, #16
  conn->last_err = ERR_OK;
 80089be:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 80089c0:	6043      	str	r3, [r0, #4]
  switch(NETCONNTYPE_GROUP(t)) {
 80089c2:	d00e      	beq.n	80089e2 <netconn_alloc+0x3e>
 80089c4:	2d20      	cmp	r5, #32
 80089c6:	d00c      	beq.n	80089e2 <netconn_alloc+0x3e>
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80089c8:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <netconn_alloc+0x80>)
 80089ca:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80089ce:	4916      	ldr	r1, [pc, #88]	; (8008a28 <netconn_alloc+0x84>)
 80089d0:	4816      	ldr	r0, [pc, #88]	; (8008a2c <netconn_alloc+0x88>)
 80089d2:	f008 fe2f 	bl	8011634 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 80089d6:	4621      	mov	r1, r4
 80089d8:	2007      	movs	r0, #7
  return NULL;
 80089da:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 80089dc:	f000 ff5e 	bl	800989c <memp_free>
  return NULL;
 80089e0:	e01e      	b.n	8008a20 <netconn_alloc+0x7c>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80089e2:	f104 0710 	add.w	r7, r4, #16
 80089e6:	2106      	movs	r1, #6
 80089e8:	4638      	mov	r0, r7
 80089ea:	f007 fab5 	bl	800ff58 <sys_mbox_new>
 80089ee:	4601      	mov	r1, r0
 80089f0:	2800      	cmp	r0, #0
 80089f2:	d1f0      	bne.n	80089d6 <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80089f4:	f104 000c 	add.w	r0, r4, #12
 80089f8:	f007 fb19 	bl	801002e <sys_sem_new>
 80089fc:	4605      	mov	r5, r0
 80089fe:	b118      	cbz	r0, 8008a08 <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8008a00:	4638      	mov	r0, r7
 8008a02:	f007 fab9 	bl	800ff78 <sys_mbox_free>
    goto free_and_return;
 8008a06:	e7e6      	b.n	80089d6 <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008a08:	f104 0014 	add.w	r0, r4, #20
 8008a0c:	f007 fb0c 	bl	8010028 <sys_mbox_set_invalid>
  conn->socket       = -1;
 8008a10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  conn->state        = NETCONN_NONE;
 8008a14:	7065      	strb	r5, [r4, #1]
  conn->socket       = -1;
 8008a16:	61a3      	str	r3, [r4, #24]
  conn->write_offset = 0;
 8008a18:	6225      	str	r5, [r4, #32]
  conn->flags = 0;
 8008a1a:	7725      	strb	r5, [r4, #28]
  conn->current_msg  = NULL;
 8008a1c:	e9c4 5609 	strd	r5, r6, [r4, #36]	; 0x24
}
 8008a20:	4620      	mov	r0, r4
 8008a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a24:	0801319a 	.word	0x0801319a
 8008a28:	080133ec 	.word	0x080133ec
 8008a2c:	08012feb 	.word	0x08012feb

08008a30 <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008a30:	6843      	ldr	r3, [r0, #4]
{
 8008a32:	b513      	push	{r0, r1, r4, lr}
 8008a34:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008a36:	b133      	cbz	r3, 8008a46 <netconn_free+0x16>
 8008a38:	4b16      	ldr	r3, [pc, #88]	; (8008a94 <netconn_free+0x64>)
 8008a3a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008a3e:	4916      	ldr	r1, [pc, #88]	; (8008a98 <netconn_free+0x68>)
 8008a40:	4816      	ldr	r0, [pc, #88]	; (8008a9c <netconn_free+0x6c>)
 8008a42:	f008 fdf7 	bl	8011634 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008a46:	f104 0010 	add.w	r0, r4, #16
 8008a4a:	f007 fae8 	bl	801001e <sys_mbox_valid>
 8008a4e:	b130      	cbz	r0, 8008a5e <netconn_free+0x2e>
 8008a50:	4b10      	ldr	r3, [pc, #64]	; (8008a94 <netconn_free+0x64>)
 8008a52:	f240 22e1 	movw	r2, #737	; 0x2e1
 8008a56:	4912      	ldr	r1, [pc, #72]	; (8008aa0 <netconn_free+0x70>)
 8008a58:	4810      	ldr	r0, [pc, #64]	; (8008a9c <netconn_free+0x6c>)
 8008a5a:	f008 fdeb 	bl	8011634 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008a5e:	f104 0014 	add.w	r0, r4, #20
 8008a62:	f007 fadc 	bl	801001e <sys_mbox_valid>
 8008a66:	b130      	cbz	r0, 8008a76 <netconn_free+0x46>
 8008a68:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <netconn_free+0x64>)
 8008a6a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008a6e:	490d      	ldr	r1, [pc, #52]	; (8008aa4 <netconn_free+0x74>)
 8008a70:	480a      	ldr	r0, [pc, #40]	; (8008a9c <netconn_free+0x6c>)
 8008a72:	f008 fddf 	bl	8011634 <iprintf>
  sys_sem_free(&conn->op_completed);
 8008a76:	f104 000c 	add.w	r0, r4, #12
 8008a7a:	9001      	str	r0, [sp, #4]
 8008a7c:	f007 fb0c 	bl	8010098 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008a80:	9801      	ldr	r0, [sp, #4]
 8008a82:	f007 fb11 	bl	80100a8 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8008a86:	4621      	mov	r1, r4
 8008a88:	2007      	movs	r0, #7
}
 8008a8a:	b002      	add	sp, #8
 8008a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8008a90:	f000 bf04 	b.w	800989c <memp_free>
 8008a94:	0801319a 	.word	0x0801319a
 8008a98:	08013412 	.word	0x08013412
 8008a9c:	08012feb 	.word	0x08012feb
 8008aa0:	08013440 	.word	0x08013440
 8008aa4:	0801347a 	.word	0x0801347a

08008aa8 <netconn_drain>:
{
 8008aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008aaa:	f100 0510 	add.w	r5, r0, #16
{
 8008aae:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f007 fab4 	bl	801001e <sys_mbox_valid>
 8008ab6:	b158      	cbz	r0, 8008ad0 <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008ab8:	a901      	add	r1, sp, #4
 8008aba:	4628      	mov	r0, r5
 8008abc:	f007 fa9e 	bl	800fffc <sys_arch_mbox_tryfetch>
 8008ac0:	3001      	adds	r0, #1
 8008ac2:	d119      	bne.n	8008af8 <netconn_drain+0x50>
    sys_mbox_free(&conn->recvmbox);
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f007 fa57 	bl	800ff78 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008aca:	4628      	mov	r0, r5
 8008acc:	f007 faac 	bl	8010028 <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008ad0:	3414      	adds	r4, #20
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f007 faa3 	bl	801001e <sys_mbox_valid>
 8008ad8:	b160      	cbz	r0, 8008af4 <netconn_drain+0x4c>
      if (mem != &netconn_aborted) {
 8008ada:	4e1a      	ldr	r6, [pc, #104]	; (8008b44 <netconn_drain+0x9c>)
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008adc:	a901      	add	r1, sp, #4
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f007 fa8c 	bl	800fffc <sys_arch_mbox_tryfetch>
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d11c      	bne.n	8008b22 <netconn_drain+0x7a>
    sys_mbox_free(&conn->acceptmbox);
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f007 fa45 	bl	800ff78 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008aee:	4620      	mov	r0, r4
 8008af0:	f007 fa9a 	bl	8010028 <sys_mbox_set_invalid>
}
 8008af4:	b002      	add	sp, #8
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008af8:	7823      	ldrb	r3, [r4, #0]
 8008afa:	9e01      	ldr	r6, [sp, #4]
 8008afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b00:	2b10      	cmp	r3, #16
 8008b02:	d10a      	bne.n	8008b1a <netconn_drain+0x72>
        if (mem != NULL) {
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	d0d7      	beq.n	8008ab8 <netconn_drain+0x10>
          if (conn->pcb.tcp != NULL) {
 8008b08:	6860      	ldr	r0, [r4, #4]
 8008b0a:	b110      	cbz	r0, 8008b12 <netconn_drain+0x6a>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8008b0c:	8931      	ldrh	r1, [r6, #8]
 8008b0e:	f001 fc51 	bl	800a3b4 <tcp_recved>
          pbuf_free(p);
 8008b12:	4630      	mov	r0, r6
 8008b14:	f001 f846 	bl	8009ba4 <pbuf_free>
 8008b18:	e7ce      	b.n	8008ab8 <netconn_drain+0x10>
        netbuf_delete((struct netbuf *)mem);
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f000 fac6 	bl	80090ac <netbuf_delete>
 8008b20:	e7ca      	b.n	8008ab8 <netconn_drain+0x10>
      if (mem != &netconn_aborted) {
 8008b22:	9d01      	ldr	r5, [sp, #4]
 8008b24:	42b5      	cmp	r5, r6
 8008b26:	d0d9      	beq.n	8008adc <netconn_drain+0x34>
        netconn_drain(newconn);
 8008b28:	4628      	mov	r0, r5
 8008b2a:	f7ff ffbd 	bl	8008aa8 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8008b2e:	6868      	ldr	r0, [r5, #4]
 8008b30:	b118      	cbz	r0, 8008b3a <netconn_drain+0x92>
          tcp_abort(newconn->pcb.tcp);
 8008b32:	f002 f945 	bl	800adc0 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	606b      	str	r3, [r5, #4]
        netconn_free(newconn);
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7ff ff78 	bl	8008a30 <netconn_free>
 8008b40:	e7cc      	b.n	8008adc <netconn_drain+0x34>
 8008b42:	bf00      	nop
 8008b44:	2000862c 	.word	0x2000862c

08008b48 <accept_function>:
{
 8008b48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	4690      	mov	r8, r2
  if (conn == NULL) {
 8008b50:	4605      	mov	r5, r0
 8008b52:	b928      	cbnz	r0, 8008b60 <accept_function+0x18>
    return ERR_VAL;
 8008b54:	f06f 0405 	mvn.w	r4, #5
}
 8008b58:	4620      	mov	r0, r4
 8008b5a:	b002      	add	sp, #8
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8008b60:	f100 0414 	add.w	r4, r0, #20
 8008b64:	4620      	mov	r0, r4
 8008b66:	f007 fa5a 	bl	801001e <sys_mbox_valid>
 8008b6a:	2800      	cmp	r0, #0
 8008b6c:	d0f2      	beq.n	8008b54 <accept_function+0xc>
  if (newpcb == NULL) {
 8008b6e:	b96f      	cbnz	r7, 8008b8c <accept_function+0x44>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8008b70:	492c      	ldr	r1, [pc, #176]	; (8008c24 <accept_function+0xdc>)
 8008b72:	4620      	mov	r0, r4
 8008b74:	f007 fa16 	bl	800ffa4 <sys_mbox_trypost>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	2800      	cmp	r0, #0
 8008b7c:	d1ea      	bne.n	8008b54 <accept_function+0xc>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0e7      	beq.n	8008b54 <accept_function+0xc>
 8008b84:	4601      	mov	r1, r0
 8008b86:	4628      	mov	r0, r5
 8008b88:	4798      	blx	r3
 8008b8a:	e7e3      	b.n	8008b54 <accept_function+0xc>
  newconn = netconn_alloc(conn->type, conn->callback);
 8008b8c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008b8e:	7828      	ldrb	r0, [r5, #0]
 8008b90:	f7ff ff08 	bl	80089a4 <netconn_alloc>
  if (newconn == NULL) {
 8008b94:	4606      	mov	r6, r0
 8008b96:	b968      	cbnz	r0, 8008bb4 <accept_function+0x6c>
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8008b98:	4922      	ldr	r1, [pc, #136]	; (8008c24 <accept_function+0xdc>)
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f007 fa02 	bl	800ffa4 <sys_mbox_trypost>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	b920      	cbnz	r0, 8008bae <accept_function+0x66>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008ba4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008ba6:	b113      	cbz	r3, 8008bae <accept_function+0x66>
 8008ba8:	4601      	mov	r1, r0
 8008baa:	4628      	mov	r0, r5
 8008bac:	4798      	blx	r3
    return ERR_MEM;
 8008bae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008bb2:	e7d1      	b.n	8008b58 <accept_function+0x10>
  newconn->pcb.tcp = newpcb;
 8008bb4:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8008bb6:	f7ff fb41 	bl	800823c <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4631      	mov	r1, r6
  newconn->last_err = err;
 8008bbe:	f886 8008 	strb.w	r8, [r6, #8]
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8008bc2:	f007 f9ef 	bl	800ffa4 <sys_mbox_trypost>
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	b318      	cbz	r0, 8008c12 <accept_function+0xca>
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 8008bca:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8008bcc:	2100      	movs	r1, #0
 8008bce:	9001      	str	r0, [sp, #4]
 8008bd0:	f001 fc5a 	bl	800a488 <tcp_arg>
    tcp_recv(pcb, NULL);
 8008bd4:	9801      	ldr	r0, [sp, #4]
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	f001 fc5a 	bl	800a490 <tcp_recv>
    tcp_sent(pcb, NULL);
 8008bdc:	9801      	ldr	r0, [sp, #4]
 8008bde:	2100      	movs	r1, #0
 8008be0:	f001 fc6e 	bl	800a4c0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8008be4:	2200      	movs	r2, #0
 8008be6:	9801      	ldr	r0, [sp, #4]
 8008be8:	4611      	mov	r1, r2
 8008bea:	f001 fc9d 	bl	800a528 <tcp_poll>
    tcp_err(pcb, NULL);
 8008bee:	2100      	movs	r1, #0
 8008bf0:	9801      	ldr	r0, [sp, #4]
 8008bf2:	f001 fc7b 	bl	800a4ec <tcp_err>
    newconn->pcb.tcp = NULL;
 8008bf6:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8008bf8:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8008bfc:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8008bfe:	9001      	str	r0, [sp, #4]
 8008c00:	f007 f9ba 	bl	800ff78 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8008c04:	9801      	ldr	r0, [sp, #4]
 8008c06:	f007 fa0f 	bl	8010028 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f7ff ff10 	bl	8008a30 <netconn_free>
    return ERR_MEM;
 8008c10:	e7cd      	b.n	8008bae <accept_function+0x66>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008c12:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d09f      	beq.n	8008b58 <accept_function+0x10>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	4628      	mov	r0, r5
 8008c1e:	4798      	blx	r3
 8008c20:	e79a      	b.n	8008b58 <accept_function+0x10>
 8008c22:	bf00      	nop
 8008c24:	2000862c 	.word	0x2000862c

08008c28 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8008c28:	6803      	ldr	r3, [r0, #0]
{
 8008c2a:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 8008c2c:	785d      	ldrb	r5, [r3, #1]
{
 8008c2e:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008c30:	b16d      	cbz	r5, 8008c4e <lwip_netconn_do_delconn+0x26>
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c38:	2b10      	cmp	r3, #16
 8008c3a:	d006      	beq.n	8008c4a <lwip_netconn_do_delconn+0x22>
 8008c3c:	4b40      	ldr	r3, [pc, #256]	; (8008d40 <lwip_netconn_do_delconn+0x118>)
 8008c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c42:	4940      	ldr	r1, [pc, #256]	; (8008d44 <lwip_netconn_do_delconn+0x11c>)
 8008c44:	4840      	ldr	r0, [pc, #256]	; (8008d48 <lwip_netconn_do_delconn+0x120>)
 8008c46:	f008 fcf5 	bl	8011634 <iprintf>
  if (((state != NETCONN_NONE) &&
 8008c4a:	2d02      	cmp	r5, #2
 8008c4c:	d121      	bne.n	8008c92 <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 8008c4e:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8008c50:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8008c52:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8008c54:	f7ff ff28 	bl	8008aa8 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	6858      	ldr	r0, [r3, #4]
 8008c5c:	b160      	cbz	r0, 8008c78 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008c5e:	781a      	ldrb	r2, [r3, #0]
 8008c60:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008c64:	2a10      	cmp	r2, #16
 8008c66:	d032      	beq.n	8008cce <lwip_netconn_do_delconn+0xa6>
 8008c68:	2a20      	cmp	r2, #32
 8008c6a:	d102      	bne.n	8008c72 <lwip_netconn_do_delconn+0x4a>
        msg->conn->pcb.udp->recv_arg = NULL;
 8008c6c:	61c5      	str	r5, [r0, #28]
        udp_remove(msg->conn->pcb.udp);
 8008c6e:	f004 fe31 	bl	800d8d4 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	2200      	movs	r2, #0
 8008c76:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c7c:	b113      	cbz	r3, 8008c84 <lwip_netconn_do_delconn+0x5c>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	4611      	mov	r1, r2
 8008c82:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008c84:	6820      	ldr	r0, [r4, #0]
 8008c86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008c88:	b15b      	cbz	r3, 8008ca2 <lwip_netconn_do_delconn+0x7a>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	4798      	blx	r3
 8008c90:	e007      	b.n	8008ca2 <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8008c92:	2d03      	cmp	r5, #3
 8008c94:	d103      	bne.n	8008c9e <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	7f1b      	ldrb	r3, [r3, #28]
 8008c9a:	075b      	lsls	r3, r3, #29
 8008c9c:	d4d7      	bmi.n	8008c4e <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 8008c9e:	23fb      	movs	r3, #251	; 0xfb
 8008ca0:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	300c      	adds	r0, #12
 8008ca6:	f007 f9fa 	bl	801009e <sys_sem_valid>
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d046      	beq.n	8008d3c <lwip_netconn_do_delconn+0x114>
    TCPIP_APIMSG_ACK(msg);
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d043      	beq.n	8008d3c <lwip_netconn_do_delconn+0x114>
 8008cb4:	f007 fa2e 	bl	8010114 <sys_arch_protect>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008cbe:	320c      	adds	r2, #12
 8008cc0:	bfa4      	itt	ge
 8008cc2:	7922      	ldrbge	r2, [r4, #4]
 8008cc4:	721a      	strbge	r2, [r3, #8]
}
 8008cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    TCPIP_APIMSG_ACK(msg);
 8008cca:	f007 ba2f 	b.w	801012c <sys_arch_unprotect>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd0:	b90a      	cbnz	r2, 8008cd6 <lwip_netconn_do_delconn+0xae>
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	b133      	cbz	r3, 8008ce4 <lwip_netconn_do_delconn+0xbc>
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <lwip_netconn_do_delconn+0x118>)
 8008cd8:	f240 4234 	movw	r2, #1076	; 0x434
 8008cdc:	491b      	ldr	r1, [pc, #108]	; (8008d4c <lwip_netconn_do_delconn+0x124>)
 8008cde:	481a      	ldr	r0, [pc, #104]	; (8008d48 <lwip_netconn_do_delconn+0x120>)
 8008ce0:	f008 fca8 	bl	8011634 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	2304      	movs	r3, #4
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008ce8:	2100      	movs	r1, #0
        msg->conn->state = NETCONN_CLOSE;
 8008cea:	7043      	strb	r3, [r0, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008cec:	2303      	movs	r3, #3
 8008cee:	7223      	strb	r3, [r4, #8]
        msg->conn->current_msg = msg;
 8008cf0:	6244      	str	r4, [r0, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008cf2:	f7ff fc49 	bl	8008588 <lwip_netconn_do_close_internal>
 8008cf6:	b308      	cbz	r0, 8008d3c <lwip_netconn_do_delconn+0x114>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	785b      	ldrb	r3, [r3, #1]
 8008cfc:	2b04      	cmp	r3, #4
 8008cfe:	d006      	beq.n	8008d0e <lwip_netconn_do_delconn+0xe6>
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <lwip_netconn_do_delconn+0x118>)
 8008d02:	f240 423b 	movw	r2, #1083	; 0x43b
 8008d06:	4912      	ldr	r1, [pc, #72]	; (8008d50 <lwip_netconn_do_delconn+0x128>)
 8008d08:	480f      	ldr	r0, [pc, #60]	; (8008d48 <lwip_netconn_do_delconn+0x120>)
 8008d0a:	f008 fc93 	bl	8011634 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008d0e:	4811      	ldr	r0, [pc, #68]	; (8008d54 <lwip_netconn_do_delconn+0x12c>)
 8008d10:	f007 f9ed 	bl	80100ee <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	2100      	movs	r1, #0
 8008d18:	300c      	adds	r0, #12
 8008d1a:	f007 f99f 	bl	801005c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008d1e:	480d      	ldr	r0, [pc, #52]	; (8008d54 <lwip_netconn_do_delconn+0x12c>)
 8008d20:	f007 f9e0 	bl	80100e4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	b143      	cbz	r3, 8008d3c <lwip_netconn_do_delconn+0x114>
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <lwip_netconn_do_delconn+0x118>)
 8008d2c:	f240 423f 	movw	r2, #1087	; 0x43f
 8008d30:	4907      	ldr	r1, [pc, #28]	; (8008d50 <lwip_netconn_do_delconn+0x128>)
 8008d32:	4805      	ldr	r0, [pc, #20]	; (8008d48 <lwip_netconn_do_delconn+0x120>)
}
 8008d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008d38:	f008 bc7c 	b.w	8011634 <iprintf>
}
 8008d3c:	bd70      	pop	{r4, r5, r6, pc}
 8008d3e:	bf00      	nop
 8008d40:	0801319a 	.word	0x0801319a
 8008d44:	080134b6 	.word	0x080134b6
 8008d48:	08012feb 	.word	0x08012feb
 8008d4c:	080134ca 	.word	0x080134ca
 8008d50:	080134e5 	.word	0x080134e5
 8008d54:	20008630 	.word	0x20008630

08008d58 <lwip_netconn_do_bind>:
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008d58:	6803      	ldr	r3, [r0, #0]
{
 8008d5a:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008d5c:	f993 2008 	ldrsb.w	r2, [r3, #8]
{
 8008d60:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008d62:	f112 0f0c 	cmn.w	r2, #12
 8008d66:	da0f      	bge.n	8008d88 <lwip_netconn_do_bind+0x30>
    msg->err = msg->conn->last_err;
 8008d68:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	b31b      	cbz	r3, 8008db6 <lwip_netconn_do_bind+0x5e>
 8008d6e:	f007 f9d1 	bl	8010114 <sys_arch_protect>
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008d78:	320c      	adds	r2, #12
 8008d7a:	bfa4      	itt	ge
 8008d7c:	7922      	ldrbge	r2, [r4, #4]
 8008d7e:	721a      	strbge	r2, [r3, #8]
}
 8008d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8008d84:	f007 b9d2 	b.w	801012c <sys_arch_unprotect>
    msg->err = ERR_VAL;
 8008d88:	22fa      	movs	r2, #250	; 0xfa
 8008d8a:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008d8c:	6858      	ldr	r0, [r3, #4]
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	d0eb      	beq.n	8008d6a <lwip_netconn_do_bind+0x12>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008d98:	2b10      	cmp	r3, #16
 8008d9a:	d007      	beq.n	8008dac <lwip_netconn_do_bind+0x54>
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	d1e4      	bne.n	8008d6a <lwip_netconn_do_bind+0x12>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008da0:	89a2      	ldrh	r2, [r4, #12]
 8008da2:	68a1      	ldr	r1, [r4, #8]
 8008da4:	f004 fc94 	bl	800d6d0 <udp_bind>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008da8:	7120      	strb	r0, [r4, #4]
        break;
 8008daa:	e7de      	b.n	8008d6a <lwip_netconn_do_bind+0x12>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008dac:	89a2      	ldrh	r2, [r4, #12]
 8008dae:	68a1      	ldr	r1, [r4, #8]
 8008db0:	f001 fa32 	bl	800a218 <tcp_bind>
 8008db4:	e7f8      	b.n	8008da8 <lwip_netconn_do_bind+0x50>
}
 8008db6:	bd10      	pop	{r4, pc}

08008db8 <lwip_netconn_do_listen>:
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008db8:	6803      	ldr	r3, [r0, #0]
{
 8008dba:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008dbc:	f993 2008 	ldrsb.w	r2, [r3, #8]
{
 8008dc0:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008dc2:	f112 0f0c 	cmn.w	r2, #12
 8008dc6:	da0c      	bge.n	8008de2 <lwip_netconn_do_listen+0x2a>
    msg->err = msg->conn->last_err;
 8008dc8:	7102      	strb	r2, [r0, #4]
  TCPIP_APIMSG_ACK(msg);
 8008dca:	f007 f9a3 	bl	8010114 <sys_arch_protect>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008dd4:	320c      	adds	r2, #12
 8008dd6:	db01      	blt.n	8008ddc <lwip_netconn_do_listen+0x24>
 8008dd8:	7922      	ldrb	r2, [r4, #4]
 8008dda:	721a      	strb	r2, [r3, #8]
 8008ddc:	f007 f9a6 	bl	801012c <sys_arch_unprotect>
}
 8008de0:	e01e      	b.n	8008e20 <lwip_netconn_do_listen+0x68>
    msg->err = ERR_CONN;
 8008de2:	22f5      	movs	r2, #245	; 0xf5
 8008de4:	7102      	strb	r2, [r0, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008de6:	6858      	ldr	r0, [r3, #4]
 8008de8:	2800      	cmp	r0, #0
 8008dea:	d0ee      	beq.n	8008dca <lwip_netconn_do_listen+0x12>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008dec:	781a      	ldrb	r2, [r3, #0]
 8008dee:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008df2:	2a10      	cmp	r2, #16
 8008df4:	d14b      	bne.n	8008e8e <lwip_netconn_do_listen+0xd6>
        if (msg->conn->state == NETCONN_NONE) {
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d144      	bne.n	8008e86 <lwip_netconn_do_listen+0xce>
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8008dfc:	7d03      	ldrb	r3, [r0, #20]
 8008dfe:	b113      	cbz	r3, 8008e06 <lwip_netconn_do_listen+0x4e>
            msg->err = ERR_VAL;
 8008e00:	23fa      	movs	r3, #250	; 0xfa
        msg->err = ERR_ARG;
 8008e02:	7123      	strb	r3, [r4, #4]
 8008e04:	e7e1      	b.n	8008dca <lwip_netconn_do_listen+0x12>
            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8008e06:	f10d 0207 	add.w	r2, sp, #7
 8008e0a:	21ff      	movs	r1, #255	; 0xff
 8008e0c:	f001 fa4e 	bl	800a2ac <tcp_listen_with_backlog_and_err>
            if (lpcb == NULL) {
 8008e10:	4605      	mov	r5, r0
 8008e12:	b938      	cbnz	r0, 8008e24 <lwip_netconn_do_listen+0x6c>
              msg->err = err;
 8008e14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008e18:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1d4      	bne.n	8008dca <lwip_netconn_do_listen+0x12>
}
 8008e20:	b003      	add	sp, #12
 8008e22:	bd30      	pop	{r4, r5, pc}
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8008e24:	6820      	ldr	r0, [r4, #0]
 8008e26:	3010      	adds	r0, #16
 8008e28:	f007 f8f9 	bl	801001e <sys_mbox_valid>
 8008e2c:	b138      	cbz	r0, 8008e3e <lwip_netconn_do_listen+0x86>
                sys_mbox_free(&msg->conn->recvmbox);
 8008e2e:	6820      	ldr	r0, [r4, #0]
 8008e30:	3010      	adds	r0, #16
 8008e32:	f007 f8a1 	bl	800ff78 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8008e36:	6820      	ldr	r0, [r4, #0]
 8008e38:	3010      	adds	r0, #16
 8008e3a:	f007 f8f5 	bl	8010028 <sys_mbox_set_invalid>
              msg->err = ERR_OK;
 8008e3e:	2300      	movs	r3, #0
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008e40:	6820      	ldr	r0, [r4, #0]
              msg->err = ERR_OK;
 8008e42:	7123      	strb	r3, [r4, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008e44:	3014      	adds	r0, #20
 8008e46:	f007 f8ea 	bl	801001e <sys_mbox_valid>
 8008e4a:	b928      	cbnz	r0, 8008e58 <lwip_netconn_do_listen+0xa0>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8008e4c:	6820      	ldr	r0, [r4, #0]
 8008e4e:	2106      	movs	r1, #6
 8008e50:	3014      	adds	r0, #20
 8008e52:	f007 f881 	bl	800ff58 <sys_mbox_new>
 8008e56:	7120      	strb	r0, [r4, #4]
              if (msg->err == ERR_OK) {
 8008e58:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8008e5c:	b963      	cbnz	r3, 8008e78 <lwip_netconn_do_listen+0xc0>
                msg->conn->state = NETCONN_LISTEN;
 8008e5e:	6821      	ldr	r1, [r4, #0]
 8008e60:	2302      	movs	r3, #2
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008e62:	4628      	mov	r0, r5
                msg->conn->state = NETCONN_LISTEN;
 8008e64:	704b      	strb	r3, [r1, #1]
                msg->conn->pcb.tcp = lpcb;
 8008e66:	604d      	str	r5, [r1, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8008e68:	f001 fb0e 	bl	800a488 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	4909      	ldr	r1, [pc, #36]	; (8008e94 <lwip_netconn_do_listen+0xdc>)
 8008e70:	6858      	ldr	r0, [r3, #4]
 8008e72:	f001 fb53 	bl	800a51c <tcp_accept>
 8008e76:	e7d0      	b.n	8008e1a <lwip_netconn_do_listen+0x62>
                tcp_close(lpcb);
 8008e78:	4628      	mov	r0, r5
 8008e7a:	f001 fe63 	bl	800ab44 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	2200      	movs	r2, #0
 8008e82:	605a      	str	r2, [r3, #4]
 8008e84:	e7c9      	b.n	8008e1a <lwip_netconn_do_listen+0x62>
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d19f      	bne.n	8008dca <lwip_netconn_do_listen+0x12>
          msg->err = ERR_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	e7b9      	b.n	8008e02 <lwip_netconn_do_listen+0x4a>
        msg->err = ERR_ARG;
 8008e8e:	23f0      	movs	r3, #240	; 0xf0
 8008e90:	e7b7      	b.n	8008e02 <lwip_netconn_do_listen+0x4a>
 8008e92:	bf00      	nop
 8008e94:	08008b49 	.word	0x08008b49

08008e98 <lwip_netconn_do_recv>:
{
 8008e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8008e9a:	2300      	movs	r3, #0
{
 8008e9c:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8008e9e:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8008ea0:	6803      	ldr	r3, [r0, #0]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	b952      	cbnz	r2, 8008ebc <lwip_netconn_do_recv+0x24>
  TCPIP_APIMSG_ACK(msg);
 8008ea6:	f007 f935 	bl	8010114 <sys_arch_protect>
 8008eaa:	6823      	ldr	r3, [r4, #0]
 8008eac:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008eb0:	320c      	adds	r2, #12
 8008eb2:	da1a      	bge.n	8008eea <lwip_netconn_do_recv+0x52>
}
 8008eb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  TCPIP_APIMSG_ACK(msg);
 8008eb8:	f007 b938 	b.w	801012c <sys_arch_unprotect>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	d1ef      	bne.n	8008ea6 <lwip_netconn_do_recv+0xe>
      u32_t remaining = msg->msg.r.len;
 8008ec6:	6885      	ldr	r5, [r0, #8]
 8008ec8:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8008ecc:	42bd      	cmp	r5, r7
 8008ece:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8008ed0:	6823      	ldr	r3, [r4, #0]
 8008ed2:	bf28      	it	cs
 8008ed4:	463e      	movcs	r6, r7
 8008ed6:	6858      	ldr	r0, [r3, #4]
 8008ed8:	b2b1      	uxth	r1, r6
 8008eda:	f001 fa6b 	bl	800a3b4 <tcp_recved>
      } while (remaining != 0);
 8008ede:	1bad      	subs	r5, r5, r6
 8008ee0:	d1f4      	bne.n	8008ecc <lwip_netconn_do_recv+0x34>
  TCPIP_APIMSG_ACK(msg);
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1de      	bne.n	8008ea6 <lwip_netconn_do_recv+0xe>
}
 8008ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  TCPIP_APIMSG_ACK(msg);
 8008eea:	7922      	ldrb	r2, [r4, #4]
 8008eec:	721a      	strb	r2, [r3, #8]
 8008eee:	e7e1      	b.n	8008eb4 <lwip_netconn_do_recv+0x1c>

08008ef0 <lwip_netconn_do_write>:
void
lwip_netconn_do_write(void *m)
{
  struct api_msg *msg = (struct api_msg*)m;

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008ef0:	6803      	ldr	r3, [r0, #0]
{
 8008ef2:	b510      	push	{r4, lr}
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008ef4:	f993 2008 	ldrsb.w	r2, [r3, #8]
{
 8008ef8:	4604      	mov	r4, r0
  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008efa:	f112 0f0c 	cmn.w	r2, #12
 8008efe:	da0d      	bge.n	8008f1c <lwip_netconn_do_write+0x2c>
    msg->err = msg->conn->last_err;
 8008f00:	7102      	strb	r2, [r0, #4]
    } else {
      msg->err = ERR_VAL;
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8008f02:	f007 f907 	bl	8010114 <sys_arch_protect>
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008f0c:	320c      	adds	r2, #12
 8008f0e:	bfa4      	itt	ge
 8008f10:	7922      	ldrbge	r2, [r4, #4]
 8008f12:	721a      	strbge	r2, [r3, #8]
}
 8008f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8008f18:	f007 b908 	b.w	801012c <sys_arch_unprotect>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8008f22:	2a10      	cmp	r2, #16
 8008f24:	d149      	bne.n	8008fba <lwip_netconn_do_write+0xca>
      if (msg->conn->state != NETCONN_NONE) {
 8008f26:	785a      	ldrb	r2, [r3, #1]
 8008f28:	b112      	cbz	r2, 8008f30 <lwip_netconn_do_write+0x40>
        msg->err = ERR_INPROGRESS;
 8008f2a:	23fb      	movs	r3, #251	; 0xfb
      msg->err = ERR_VAL;
 8008f2c:	7123      	strb	r3, [r4, #4]
 8008f2e:	e7e8      	b.n	8008f02 <lwip_netconn_do_write+0x12>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	2a00      	cmp	r2, #0
 8008f34:	d03f      	beq.n	8008fb6 <lwip_netconn_do_write+0xc6>
        msg->conn->state = NETCONN_WRITE;
 8008f36:	2201      	movs	r2, #1
 8008f38:	705a      	strb	r2, [r3, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008f3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f3c:	b90a      	cbnz	r2, 8008f42 <lwip_netconn_do_write+0x52>
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	b133      	cbz	r3, 8008f50 <lwip_netconn_do_write+0x60>
 8008f42:	4b1f      	ldr	r3, [pc, #124]	; (8008fc0 <lwip_netconn_do_write+0xd0>)
 8008f44:	f240 6282 	movw	r2, #1666	; 0x682
 8008f48:	491e      	ldr	r1, [pc, #120]	; (8008fc4 <lwip_netconn_do_write+0xd4>)
 8008f4a:	481f      	ldr	r0, [pc, #124]	; (8008fc8 <lwip_netconn_do_write+0xd8>)
 8008f4c:	f008 fb72 	bl	8011634 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8008f50:	68e3      	ldr	r3, [r4, #12]
 8008f52:	b933      	cbnz	r3, 8008f62 <lwip_netconn_do_write+0x72>
 8008f54:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <lwip_netconn_do_write+0xd0>)
 8008f56:	f240 6284 	movw	r2, #1668	; 0x684
 8008f5a:	491c      	ldr	r1, [pc, #112]	; (8008fcc <lwip_netconn_do_write+0xdc>)
 8008f5c:	481a      	ldr	r0, [pc, #104]	; (8008fc8 <lwip_netconn_do_write+0xd8>)
 8008f5e:	f008 fb69 	bl	8011634 <iprintf>
        msg->conn->current_msg = msg;
 8008f62:	6820      	ldr	r0, [r4, #0]
        msg->conn->write_offset = 0;
 8008f64:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 8008f66:	6244      	str	r4, [r0, #36]	; 0x24
        msg->conn->write_offset = 0;
 8008f68:	6201      	str	r1, [r0, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8008f6a:	f7ff fa1d 	bl	80083a8 <lwip_netconn_do_writemore>
 8008f6e:	b330      	cbz	r0, 8008fbe <lwip_netconn_do_write+0xce>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d006      	beq.n	8008f86 <lwip_netconn_do_write+0x96>
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <lwip_netconn_do_write+0xd0>)
 8008f7a:	f240 6289 	movw	r2, #1673	; 0x689
 8008f7e:	4914      	ldr	r1, [pc, #80]	; (8008fd0 <lwip_netconn_do_write+0xe0>)
 8008f80:	4811      	ldr	r0, [pc, #68]	; (8008fc8 <lwip_netconn_do_write+0xd8>)
 8008f82:	f008 fb57 	bl	8011634 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008f86:	4813      	ldr	r0, [pc, #76]	; (8008fd4 <lwip_netconn_do_write+0xe4>)
 8008f88:	f007 f8b1 	bl	80100ee <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008f8c:	6820      	ldr	r0, [r4, #0]
 8008f8e:	2100      	movs	r1, #0
 8008f90:	300c      	adds	r0, #12
 8008f92:	f007 f863 	bl	801005c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008f96:	480f      	ldr	r0, [pc, #60]	; (8008fd4 <lwip_netconn_do_write+0xe4>)
 8008f98:	f007 f8a4 	bl	80100e4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	785b      	ldrb	r3, [r3, #1]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d10c      	bne.n	8008fbe <lwip_netconn_do_write+0xce>
 8008fa4:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <lwip_netconn_do_write+0xd0>)
 8008fa6:	f240 628d 	movw	r2, #1677	; 0x68d
 8008faa:	4909      	ldr	r1, [pc, #36]	; (8008fd0 <lwip_netconn_do_write+0xe0>)
 8008fac:	4806      	ldr	r0, [pc, #24]	; (8008fc8 <lwip_netconn_do_write+0xd8>)
}
 8008fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008fb2:	f008 bb3f 	b.w	8011634 <iprintf>
        msg->err = ERR_CONN;
 8008fb6:	23f5      	movs	r3, #245	; 0xf5
 8008fb8:	e7b8      	b.n	8008f2c <lwip_netconn_do_write+0x3c>
      msg->err = ERR_VAL;
 8008fba:	23fa      	movs	r3, #250	; 0xfa
 8008fbc:	e7b6      	b.n	8008f2c <lwip_netconn_do_write+0x3c>
}
 8008fbe:	bd10      	pop	{r4, pc}
 8008fc0:	0801319a 	.word	0x0801319a
 8008fc4:	080134ca 	.word	0x080134ca
 8008fc8:	08012feb 	.word	0x08012feb
 8008fcc:	080134ec 	.word	0x080134ec
 8008fd0:	080134e5 	.word	0x080134e5
 8008fd4:	20008630 	.word	0x20008630

08008fd8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8008fd8:	b510      	push	{r4, lr}
 8008fda:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg*)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008fdc:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008fde:	6843      	ldr	r3, [r0, #4]
 8008fe0:	b163      	cbz	r3, 8008ffc <lwip_netconn_do_close+0x24>
 8008fe2:	7803      	ldrb	r3, [r0, #0]
 8008fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fe8:	2b10      	cmp	r3, #16
 8008fea:	d107      	bne.n	8008ffc <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008fec:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 8008fee:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008ff0:	2a03      	cmp	r2, #3
 8008ff2:	d001      	beq.n	8008ff8 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d001      	beq.n	8008ffc <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d10e      	bne.n	800901a <lwip_netconn_do_close+0x42>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8008ffc:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8008ffe:	7123      	strb	r3, [r4, #4]
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
 8009000:	f007 f888 	bl	8010114 <sys_arch_protect>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800900a:	320c      	adds	r2, #12
 800900c:	bfa4      	itt	ge
 800900e:	7922      	ldrbge	r2, [r4, #4]
 8009010:	721a      	strbge	r2, [r3, #8]
}
 8009012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TCPIP_APIMSG_ACK(msg);
 8009016:	f007 b889 	b.w	801012c <sys_arch_unprotect>
    } else if (state == NETCONN_WRITE) {
 800901a:	2b01      	cmp	r3, #1
 800901c:	d101      	bne.n	8009022 <lwip_netconn_do_close+0x4a>
      msg->err = ERR_INPROGRESS;
 800901e:	23fb      	movs	r3, #251	; 0xfb
 8009020:	e7ed      	b.n	8008ffe <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009022:	07d3      	lsls	r3, r2, #31
 8009024:	d501      	bpl.n	800902a <lwip_netconn_do_close+0x52>
        netconn_drain(msg->conn);
 8009026:	f7ff fd3f 	bl	8008aa8 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800902e:	b90a      	cbnz	r2, 8009034 <lwip_netconn_do_close+0x5c>
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	b133      	cbz	r3, 8009042 <lwip_netconn_do_close+0x6a>
 8009034:	4b18      	ldr	r3, [pc, #96]	; (8009098 <lwip_netconn_do_close+0xc0>)
 8009036:	f240 721b 	movw	r2, #1819	; 0x71b
 800903a:	4918      	ldr	r1, [pc, #96]	; (800909c <lwip_netconn_do_close+0xc4>)
 800903c:	4818      	ldr	r0, [pc, #96]	; (80090a0 <lwip_netconn_do_close+0xc8>)
 800903e:	f008 faf9 	bl	8011634 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009046:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 8009048:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 800904a:	6244      	str	r4, [r0, #36]	; 0x24
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800904c:	f7ff fa9c 	bl	8008588 <lwip_netconn_do_close_internal>
 8009050:	b308      	cbz	r0, 8009096 <lwip_netconn_do_close+0xbe>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009052:	6823      	ldr	r3, [r4, #0]
 8009054:	785b      	ldrb	r3, [r3, #1]
 8009056:	2b04      	cmp	r3, #4
 8009058:	d006      	beq.n	8009068 <lwip_netconn_do_close+0x90>
 800905a:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <lwip_netconn_do_close+0xc0>)
 800905c:	f240 7221 	movw	r2, #1825	; 0x721
 8009060:	4910      	ldr	r1, [pc, #64]	; (80090a4 <lwip_netconn_do_close+0xcc>)
 8009062:	480f      	ldr	r0, [pc, #60]	; (80090a0 <lwip_netconn_do_close+0xc8>)
 8009064:	f008 fae6 	bl	8011634 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009068:	480f      	ldr	r0, [pc, #60]	; (80090a8 <lwip_netconn_do_close+0xd0>)
 800906a:	f007 f840 	bl	80100ee <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800906e:	6820      	ldr	r0, [r4, #0]
 8009070:	2100      	movs	r1, #0
 8009072:	300c      	adds	r0, #12
 8009074:	f006 fff2 	bl	801005c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009078:	480b      	ldr	r0, [pc, #44]	; (80090a8 <lwip_netconn_do_close+0xd0>)
 800907a:	f007 f833 	bl	80100e4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	785b      	ldrb	r3, [r3, #1]
 8009082:	b143      	cbz	r3, 8009096 <lwip_netconn_do_close+0xbe>
 8009084:	4b04      	ldr	r3, [pc, #16]	; (8009098 <lwip_netconn_do_close+0xc0>)
 8009086:	f240 7225 	movw	r2, #1829	; 0x725
 800908a:	4906      	ldr	r1, [pc, #24]	; (80090a4 <lwip_netconn_do_close+0xcc>)
 800908c:	4804      	ldr	r0, [pc, #16]	; (80090a0 <lwip_netconn_do_close+0xc8>)
}
 800908e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009092:	f008 bacf 	b.w	8011634 <iprintf>
}
 8009096:	bd10      	pop	{r4, pc}
 8009098:	0801319a 	.word	0x0801319a
 800909c:	080134ca 	.word	0x080134ca
 80090a0:	08012feb 	.word	0x08012feb
 80090a4:	080134e5 	.word	0x080134e5
 80090a8:	20008630 	.word	0x20008630

080090ac <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80090ac:	b510      	push	{r4, lr}
  if (buf != NULL) {
 80090ae:	4604      	mov	r4, r0
 80090b0:	b160      	cbz	r0, 80090cc <netbuf_delete+0x20>
    if (buf->p != NULL) {
 80090b2:	6800      	ldr	r0, [r0, #0]
 80090b4:	b120      	cbz	r0, 80090c0 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80090b6:	f000 fd75 	bl	8009ba4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80090ba:	2300      	movs	r3, #0
 80090bc:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 80090c0:	4621      	mov	r1, r4
 80090c2:	2006      	movs	r0, #6
  }
}
 80090c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 80090c8:	f000 bbe8 	b.w	800989c <memp_free>
}
 80090cc:	bd10      	pop	{r4, pc}
	...

080090d0 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80090d0:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80090d2:	b940      	cbnz	r0, 80090e6 <netbuf_data+0x16>
 80090d4:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <netbuf_data+0x44>)
 80090d6:	22c2      	movs	r2, #194	; 0xc2
 80090d8:	490f      	ldr	r1, [pc, #60]	; (8009118 <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80090da:	4810      	ldr	r0, [pc, #64]	; (800911c <netbuf_data+0x4c>)
 80090dc:	f008 faaa 	bl	8011634 <iprintf>
 80090e0:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 80090e4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80090e6:	b919      	cbnz	r1, 80090f0 <netbuf_data+0x20>
 80090e8:	4b0a      	ldr	r3, [pc, #40]	; (8009114 <netbuf_data+0x44>)
 80090ea:	22c3      	movs	r2, #195	; 0xc3
 80090ec:	490c      	ldr	r1, [pc, #48]	; (8009120 <netbuf_data+0x50>)
 80090ee:	e7f4      	b.n	80090da <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80090f0:	b91a      	cbnz	r2, 80090fa <netbuf_data+0x2a>
 80090f2:	4b08      	ldr	r3, [pc, #32]	; (8009114 <netbuf_data+0x44>)
 80090f4:	22c4      	movs	r2, #196	; 0xc4
 80090f6:	490b      	ldr	r1, [pc, #44]	; (8009124 <netbuf_data+0x54>)
 80090f8:	e7ef      	b.n	80090da <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 80090fa:	6843      	ldr	r3, [r0, #4]
 80090fc:	b133      	cbz	r3, 800910c <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8009102:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8009104:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 8009106:	895b      	ldrh	r3, [r3, #10]
 8009108:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 800910a:	e7eb      	b.n	80090e4 <netbuf_data+0x14>
    return ERR_BUF;
 800910c:	f06f 0001 	mvn.w	r0, #1
 8009110:	e7e8      	b.n	80090e4 <netbuf_data+0x14>
 8009112:	bf00      	nop
 8009114:	08013500 	.word	0x08013500
 8009118:	0801356f 	.word	0x0801356f
 800911c:	08012feb 	.word	0x08012feb
 8009120:	08013588 	.word	0x08013588
 8009124:	080135a5 	.word	0x080135a5

08009128 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8009128:	4b1e      	ldr	r3, [pc, #120]	; (80091a4 <tcpip_thread+0x7c>)
 800912a:	681b      	ldr	r3, [r3, #0]
{
 800912c:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 800912e:	b113      	cbz	r3, 8009136 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8009130:	4a1d      	ldr	r2, [pc, #116]	; (80091a8 <tcpip_thread+0x80>)
 8009132:	6810      	ldr	r0, [r2, #0]
 8009134:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8009136:	4d1d      	ldr	r5, [pc, #116]	; (80091ac <tcpip_thread+0x84>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8009138:	4e1d      	ldr	r6, [pc, #116]	; (80091b0 <tcpip_thread+0x88>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800913a:	4c1e      	ldr	r4, [pc, #120]	; (80091b4 <tcpip_thread+0x8c>)
  LOCK_TCPIP_CORE();
 800913c:	481b      	ldr	r0, [pc, #108]	; (80091ac <tcpip_thread+0x84>)
 800913e:	f006 ffd1 	bl	80100e4 <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8009142:	4628      	mov	r0, r5
 8009144:	f006 ffd3 	bl	80100ee <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8009148:	a901      	add	r1, sp, #4
 800914a:	4630      	mov	r0, r6
 800914c:	f004 f9cc 	bl	800d4e8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009150:	4628      	mov	r0, r5
 8009152:	f006 ffc7 	bl	80100e4 <sys_mutex_lock>
    if (msg == NULL) {
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	b933      	cbnz	r3, 8009168 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800915a:	4623      	mov	r3, r4
 800915c:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800915e:	4916      	ldr	r1, [pc, #88]	; (80091b8 <tcpip_thread+0x90>)
 8009160:	4816      	ldr	r0, [pc, #88]	; (80091bc <tcpip_thread+0x94>)
 8009162:	f008 fa67 	bl	8011634 <iprintf>
      break;
 8009166:	e7ec      	b.n	8009142 <tcpip_thread+0x1a>
    switch (msg->type) {
 8009168:	781a      	ldrb	r2, [r3, #0]
 800916a:	2a03      	cmp	r2, #3
 800916c:	d00c      	beq.n	8009188 <tcpip_thread+0x60>
 800916e:	2a04      	cmp	r2, #4
 8009170:	d010      	beq.n	8009194 <tcpip_thread+0x6c>
 8009172:	2a02      	cmp	r2, #2
 8009174:	d112      	bne.n	800919c <tcpip_thread+0x74>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8009176:	6858      	ldr	r0, [r3, #4]
 8009178:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800917c:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800917e:	9901      	ldr	r1, [sp, #4]
 8009180:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009182:	f000 fb8b 	bl	800989c <memp_free>
      break;
 8009186:	e7dc      	b.n	8009142 <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009188:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 800918c:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800918e:	9901      	ldr	r1, [sp, #4]
 8009190:	2008      	movs	r0, #8
 8009192:	e7f6      	b.n	8009182 <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009194:	e9d3 2001 	ldrd	r2, r0, [r3, #4]
 8009198:	4790      	blx	r2
      break;
 800919a:	e7d2      	b.n	8009142 <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800919c:	4623      	mov	r3, r4
 800919e:	229b      	movs	r2, #155	; 0x9b
 80091a0:	e7dd      	b.n	800915e <tcpip_thread+0x36>
 80091a2:	bf00      	nop
 80091a4:	2000823c 	.word	0x2000823c
 80091a8:	20008240 	.word	0x20008240
 80091ac:	20008630 	.word	0x20008630
 80091b0:	20008238 	.word	0x20008238
 80091b4:	080135be 	.word	0x080135be
 80091b8:	080135ee 	.word	0x080135ee
 80091bc:	08012feb 	.word	0x08012feb

080091c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80091c4:	4810      	ldr	r0, [pc, #64]	; (8009208 <tcpip_inpkt+0x48>)
{
 80091c6:	460e      	mov	r6, r1
 80091c8:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80091ca:	f006 ff28 	bl	801001e <sys_mbox_valid>
 80091ce:	b928      	cbnz	r0, 80091dc <tcpip_inpkt+0x1c>
 80091d0:	4b0e      	ldr	r3, [pc, #56]	; (800920c <tcpip_inpkt+0x4c>)
 80091d2:	22b5      	movs	r2, #181	; 0xb5
 80091d4:	490e      	ldr	r1, [pc, #56]	; (8009210 <tcpip_inpkt+0x50>)
 80091d6:	480f      	ldr	r0, [pc, #60]	; (8009214 <tcpip_inpkt+0x54>)
 80091d8:	f008 fa2c 	bl	8011634 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80091dc:	2009      	movs	r0, #9
 80091de:	f000 fb41 	bl	8009864 <memp_malloc>
  if (msg == NULL) {
 80091e2:	4604      	mov	r4, r0
 80091e4:	b168      	cbz	r0, 8009202 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 80091e6:	2302      	movs	r3, #2
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80091e8:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 80091ea:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 80091ec:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 80091ee:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80091f2:	4805      	ldr	r0, [pc, #20]	; (8009208 <tcpip_inpkt+0x48>)
 80091f4:	f006 fed6 	bl	800ffa4 <sys_mbox_trypost>
 80091f8:	b128      	cbz	r0, 8009206 <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80091fa:	4621      	mov	r1, r4
 80091fc:	2009      	movs	r0, #9
 80091fe:	f000 fb4d 	bl	800989c <memp_free>
    return ERR_MEM;
 8009202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009208:	20008238 	.word	0x20008238
 800920c:	080135be 	.word	0x080135be
 8009210:	0801360c 	.word	0x0801360c
 8009214:	08012feb 	.word	0x08012feb

08009218 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009218:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800921c:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8009220:	bf14      	ite	ne
 8009222:	4a02      	ldrne	r2, [pc, #8]	; (800922c <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8009224:	4a02      	ldreq	r2, [pc, #8]	; (8009230 <tcpip_input+0x18>)
 8009226:	f7ff bfcb 	b.w	80091c0 <tcpip_inpkt>
 800922a:	bf00      	nop
 800922c:	0800fe51 	.word	0x0800fe51
 8009230:	0800f40d 	.word	0x0800f40d

08009234 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009238:	4813      	ldr	r0, [pc, #76]	; (8009288 <tcpip_callback_with_block+0x54>)
{
 800923a:	460e      	mov	r6, r1
 800923c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800923e:	f006 feee 	bl	801001e <sys_mbox_valid>
 8009242:	b928      	cbnz	r0, 8009250 <tcpip_callback_with_block+0x1c>
 8009244:	4b11      	ldr	r3, [pc, #68]	; (800928c <tcpip_callback_with_block+0x58>)
 8009246:	22ee      	movs	r2, #238	; 0xee
 8009248:	4911      	ldr	r1, [pc, #68]	; (8009290 <tcpip_callback_with_block+0x5c>)
 800924a:	4812      	ldr	r0, [pc, #72]	; (8009294 <tcpip_callback_with_block+0x60>)
 800924c:	f008 f9f2 	bl	8011634 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009250:	2008      	movs	r0, #8
 8009252:	f000 fb07 	bl	8009864 <memp_malloc>
  if (msg == NULL) {
 8009256:	4604      	mov	r4, r0
 8009258:	b190      	cbz	r0, 8009280 <tcpip_callback_with_block+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800925a:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
  msg->msg.cb.ctx = ctx;
  if (block) {
    sys_mbox_post(&mbox, msg);
 800925c:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 800925e:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.ctx = ctx;
 8009260:	e9c0 7601 	strd	r7, r6, [r0, #4]
    sys_mbox_post(&mbox, msg);
 8009264:	4808      	ldr	r0, [pc, #32]	; (8009288 <tcpip_callback_with_block+0x54>)
  if (block) {
 8009266:	b11d      	cbz	r5, 8009270 <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 8009268:	f006 fe90 	bl	800ff8c <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 800926c:	2000      	movs	r0, #0
}
 800926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009270:	f006 fe98 	bl	800ffa4 <sys_mbox_trypost>
 8009274:	2800      	cmp	r0, #0
 8009276:	d0fa      	beq.n	800926e <tcpip_callback_with_block+0x3a>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009278:	4621      	mov	r1, r4
 800927a:	2008      	movs	r0, #8
 800927c:	f000 fb0e 	bl	800989c <memp_free>
    return ERR_MEM;
 8009280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009284:	e7f3      	b.n	800926e <tcpip_callback_with_block+0x3a>
 8009286:	bf00      	nop
 8009288:	20008238 	.word	0x20008238
 800928c:	080135be 	.word	0x080135be
 8009290:	0801360c 	.word	0x0801360c
 8009294:	08012feb 	.word	0x08012feb

08009298 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8009298:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800929a:	4e06      	ldr	r6, [pc, #24]	; (80092b4 <tcpip_send_msg_wait_sem+0x1c>)
{
 800929c:	460d      	mov	r5, r1
 800929e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80092a0:	4630      	mov	r0, r6
 80092a2:	f006 ff1f 	bl	80100e4 <sys_mutex_lock>
  fn(apimsg);
 80092a6:	4628      	mov	r0, r5
 80092a8:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 80092aa:	4630      	mov	r0, r6
 80092ac:	f006 ff1f 	bl	80100ee <sys_mutex_unlock>
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80092b0:	2000      	movs	r0, #0
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	20008630 	.word	0x20008630

080092b8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80092b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80092ba:	4605      	mov	r5, r0
 80092bc:	460c      	mov	r4, r1
  lwip_init();
 80092be:	f000 f840 	bl	8009342 <lwip_init>

  tcpip_init_done = initfunc;
 80092c2:	4b13      	ldr	r3, [pc, #76]	; (8009310 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80092c4:	2106      	movs	r1, #6
 80092c6:	4813      	ldr	r0, [pc, #76]	; (8009314 <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 80092c8:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 80092ca:	4b13      	ldr	r3, [pc, #76]	; (8009318 <tcpip_init+0x60>)
 80092cc:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80092ce:	f006 fe43 	bl	800ff58 <sys_mbox_new>
 80092d2:	b130      	cbz	r0, 80092e2 <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80092d4:	4b11      	ldr	r3, [pc, #68]	; (800931c <tcpip_init+0x64>)
 80092d6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80092da:	4911      	ldr	r1, [pc, #68]	; (8009320 <tcpip_init+0x68>)
 80092dc:	4811      	ldr	r0, [pc, #68]	; (8009324 <tcpip_init+0x6c>)
 80092de:	f008 f9a9 	bl	8011634 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80092e2:	4811      	ldr	r0, [pc, #68]	; (8009328 <tcpip_init+0x70>)
 80092e4:	f006 fef0 	bl	80100c8 <sys_mutex_new>
 80092e8:	b130      	cbz	r0, 80092f8 <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80092ea:	4b0c      	ldr	r3, [pc, #48]	; (800931c <tcpip_init+0x64>)
 80092ec:	f240 12d9 	movw	r2, #473	; 0x1d9
 80092f0:	490e      	ldr	r1, [pc, #56]	; (800932c <tcpip_init+0x74>)
 80092f2:	480c      	ldr	r0, [pc, #48]	; (8009324 <tcpip_init+0x6c>)
 80092f4:	f008 f99e 	bl	8011634 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80092f8:	2303      	movs	r3, #3
 80092fa:	2200      	movs	r2, #0
 80092fc:	490c      	ldr	r1, [pc, #48]	; (8009330 <tcpip_init+0x78>)
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009304:	480b      	ldr	r0, [pc, #44]	; (8009334 <tcpip_init+0x7c>)
 8009306:	f006 fef5 	bl	80100f4 <sys_thread_new>
}
 800930a:	b003      	add	sp, #12
 800930c:	bd30      	pop	{r4, r5, pc}
 800930e:	bf00      	nop
 8009310:	2000823c 	.word	0x2000823c
 8009314:	20008238 	.word	0x20008238
 8009318:	20008240 	.word	0x20008240
 800931c:	080135be 	.word	0x080135be
 8009320:	08013619 	.word	0x08013619
 8009324:	08012feb 	.word	0x08012feb
 8009328:	20008630 	.word	0x20008630
 800932c:	0801363c 	.word	0x0801363c
 8009330:	08009129 	.word	0x08009129
 8009334:	0801365d 	.word	0x0801365d

08009338 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8009338:	ba40      	rev16	r0, r0
}
 800933a:	b280      	uxth	r0, r0
 800933c:	4770      	bx	lr

0800933e <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 800933e:	ba00      	rev	r0, r0
 8009340:	4770      	bx	lr

08009342 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009342:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009344:	f006 feb4 	bl	80100b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009348:	f000 f80c 	bl	8009364 <mem_init>
  memp_init();
 800934c:	f000 fa7c 	bl	8009848 <memp_init>
  pbuf_init();
  netif_init();
 8009350:	f000 fac7 	bl	80098e2 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009354:	f004 f924 	bl	800d5a0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009358:	f000 ff5c 	bl	800a214 <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 800935c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8009360:	f004 b88a 	b.w	800d478 <sys_timeouts_init>

08009364 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009364:	4b12      	ldr	r3, [pc, #72]	; (80093b0 <mem_init+0x4c>)
 8009366:	4a13      	ldr	r2, [pc, #76]	; (80093b4 <mem_init+0x50>)
 8009368:	f023 0303 	bic.w	r3, r3, #3
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800936c:	4812      	ldr	r0, [pc, #72]	; (80093b8 <mem_init+0x54>)
{
 800936e:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009370:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 8009372:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8009376:	f503 61c8 	add.w	r1, r3, #1600	; 0x640
  mem->next = MEM_SIZE_ALIGNED;
 800937a:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 800937c:	2200      	movs	r2, #0
 800937e:	711a      	strb	r2, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8009380:	4a0e      	ldr	r2, [pc, #56]	; (80093bc <mem_init+0x58>)
 8009382:	6011      	str	r1, [r2, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009384:	4a0e      	ldr	r2, [pc, #56]	; (80093c0 <mem_init+0x5c>)
 8009386:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
  ram_end->used = 1;
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
  lfree = (struct mem *)(void *)ram;
 8009390:	4a0c      	ldr	r2, [pc, #48]	; (80093c4 <mem_init+0x60>)
 8009392:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009394:	f006 fe98 	bl	80100c8 <sys_mutex_new>
 8009398:	b140      	cbz	r0, 80093ac <mem_init+0x48>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800939a:	4b0b      	ldr	r3, [pc, #44]	; (80093c8 <mem_init+0x64>)
 800939c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80093a0:	490a      	ldr	r1, [pc, #40]	; (80093cc <mem_init+0x68>)
 80093a2:	480b      	ldr	r0, [pc, #44]	; (80093d0 <mem_init+0x6c>)
  }
}
 80093a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80093a8:	f008 b944 	b.w	8011634 <iprintf>
}
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	bf00      	nop
 80093b0:	2000864f 	.word	0x2000864f
 80093b4:	2000824c 	.word	0x2000824c
 80093b8:	20008248 	.word	0x20008248
 80093bc:	20008250 	.word	0x20008250
 80093c0:	06400640 	.word	0x06400640
 80093c4:	20008244 	.word	0x20008244
 80093c8:	0801366a 	.word	0x0801366a
 80093cc:	08013699 	.word	0x08013699
 80093d0:	08012feb 	.word	0x08012feb

080093d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80093d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80093d8:	4604      	mov	r4, r0
 80093da:	2800      	cmp	r0, #0
 80093dc:	f000 8098 	beq.w	8009510 <mem_free+0x13c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80093e0:	0783      	lsls	r3, r0, #30
 80093e2:	d006      	beq.n	80093f2 <mem_free+0x1e>
 80093e4:	4b4b      	ldr	r3, [pc, #300]	; (8009514 <mem_free+0x140>)
 80093e6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80093ea:	494b      	ldr	r1, [pc, #300]	; (8009518 <mem_free+0x144>)
 80093ec:	484b      	ldr	r0, [pc, #300]	; (800951c <mem_free+0x148>)
 80093ee:	f008 f921 	bl	8011634 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80093f2:	4f4b      	ldr	r7, [pc, #300]	; (8009520 <mem_free+0x14c>)
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	42a3      	cmp	r3, r4
 80093f8:	d875      	bhi.n	80094e6 <mem_free+0x112>
 80093fa:	4b4a      	ldr	r3, [pc, #296]	; (8009524 <mem_free+0x150>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	42a3      	cmp	r3, r4
 8009400:	d971      	bls.n	80094e6 <mem_free+0x112>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return;
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8009402:	4849      	ldr	r0, [pc, #292]	; (8009528 <mem_free+0x154>)
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009404:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_MEM_FREE_PROTECT();
 8009408:	f006 fe6c 	bl	80100e4 <sys_mutex_lock>
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800940c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009410:	b933      	cbnz	r3, 8009420 <mem_free+0x4c>
 8009412:	4b40      	ldr	r3, [pc, #256]	; (8009514 <mem_free+0x140>)
 8009414:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8009418:	4944      	ldr	r1, [pc, #272]	; (800952c <mem_free+0x158>)
 800941a:	4840      	ldr	r0, [pc, #256]	; (800951c <mem_free+0x148>)
 800941c:	f008 f90a 	bl	8011634 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8009420:	2300      	movs	r3, #0

  if (mem < lfree) {
 8009422:	4e43      	ldr	r6, [pc, #268]	; (8009530 <mem_free+0x15c>)
  mem->used = 0;
 8009424:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8009428:	6833      	ldr	r3, [r6, #0]
 800942a:	42ab      	cmp	r3, r5
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800942c:	683b      	ldr	r3, [r7, #0]
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800942e:	bf88      	it	hi
 8009430:	6035      	strhi	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009432:	429d      	cmp	r5, r3
 8009434:	d206      	bcs.n	8009444 <mem_free+0x70>
 8009436:	4b37      	ldr	r3, [pc, #220]	; (8009514 <mem_free+0x140>)
 8009438:	f240 125d 	movw	r2, #349	; 0x15d
 800943c:	493d      	ldr	r1, [pc, #244]	; (8009534 <mem_free+0x160>)
 800943e:	4837      	ldr	r0, [pc, #220]	; (800951c <mem_free+0x148>)
 8009440:	f008 f8f8 	bl	8011634 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009444:	4b37      	ldr	r3, [pc, #220]	; (8009524 <mem_free+0x150>)
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	4698      	mov	r8, r3
 800944a:	4295      	cmp	r5, r2
 800944c:	d306      	bcc.n	800945c <mem_free+0x88>
 800944e:	4b31      	ldr	r3, [pc, #196]	; (8009514 <mem_free+0x140>)
 8009450:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009454:	4938      	ldr	r1, [pc, #224]	; (8009538 <mem_free+0x164>)
 8009456:	4831      	ldr	r0, [pc, #196]	; (800951c <mem_free+0x148>)
 8009458:	f008 f8ec 	bl	8011634 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800945c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8009460:	b133      	cbz	r3, 8009470 <mem_free+0x9c>
 8009462:	4b2c      	ldr	r3, [pc, #176]	; (8009514 <mem_free+0x140>)
 8009464:	f240 125f 	movw	r2, #351	; 0x15f
 8009468:	4934      	ldr	r1, [pc, #208]	; (800953c <mem_free+0x168>)
 800946a:	482c      	ldr	r0, [pc, #176]	; (800951c <mem_free+0x148>)
 800946c:	f008 f8e2 	bl	8011634 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009470:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8009474:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009478:	d906      	bls.n	8009488 <mem_free+0xb4>
 800947a:	4b26      	ldr	r3, [pc, #152]	; (8009514 <mem_free+0x140>)
 800947c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8009480:	492f      	ldr	r1, [pc, #188]	; (8009540 <mem_free+0x16c>)
 8009482:	4826      	ldr	r0, [pc, #152]	; (800951c <mem_free+0x148>)
 8009484:	f008 f8d6 	bl	8011634 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800948e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009490:	4295      	cmp	r5, r2
 8009492:	d011      	beq.n	80094b8 <mem_free+0xe4>
 8009494:	7910      	ldrb	r0, [r2, #4]
 8009496:	b978      	cbnz	r0, 80094b8 <mem_free+0xe4>
 8009498:	f8d8 0000 	ldr.w	r0, [r8]
 800949c:	4282      	cmp	r2, r0
 800949e:	d00b      	beq.n	80094b8 <mem_free+0xe4>
    if (lfree == nmem) {
 80094a0:	6830      	ldr	r0, [r6, #0]
 80094a2:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80094a4:	5a5a      	ldrh	r2, [r3, r1]
 80094a6:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80094aa:	5a5a      	ldrh	r2, [r3, r1]
 80094ac:	eba5 0103 	sub.w	r1, r5, r3
      lfree = mem;
 80094b0:	bf08      	it	eq
 80094b2:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80094b4:	441a      	add	r2, r3
 80094b6:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80094b8:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 80094bc:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80094be:	428d      	cmp	r5, r1
 80094c0:	d00c      	beq.n	80094dc <mem_free+0x108>
 80094c2:	7908      	ldrb	r0, [r1, #4]
 80094c4:	b950      	cbnz	r0, 80094dc <mem_free+0x108>
    if (lfree == mem) {
 80094c6:	6830      	ldr	r0, [r6, #0]
 80094c8:	4285      	cmp	r5, r0
      lfree = pmem;
 80094ca:	bf08      	it	eq
 80094cc:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80094ce:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80094d2:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80094d4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80094d8:	440b      	add	r3, r1
 80094da:	805a      	strh	r2, [r3, #2]
  /* finally, see if prev or next are free also */
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80094dc:	4812      	ldr	r0, [pc, #72]	; (8009528 <mem_free+0x154>)
}
 80094de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 80094e2:	f006 be04 	b.w	80100ee <sys_mutex_unlock>
  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80094e6:	4b0b      	ldr	r3, [pc, #44]	; (8009514 <mem_free+0x140>)
 80094e8:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80094ec:	4915      	ldr	r1, [pc, #84]	; (8009544 <mem_free+0x170>)
 80094ee:	480b      	ldr	r0, [pc, #44]	; (800951c <mem_free+0x148>)
 80094f0:	f008 f8a0 	bl	8011634 <iprintf>
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	42a3      	cmp	r3, r4
 80094f8:	d804      	bhi.n	8009504 <mem_free+0x130>
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <mem_free+0x150>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	42a3      	cmp	r3, r4
 8009500:	f63f af7f 	bhi.w	8009402 <mem_free+0x2e>
    SYS_ARCH_PROTECT(lev);
 8009504:	f006 fe06 	bl	8010114 <sys_arch_protect>
}
 8009508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 800950c:	f006 be0e 	b.w	801012c <sys_arch_unprotect>
}
 8009510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009514:	0801366a 	.word	0x0801366a
 8009518:	080136b4 	.word	0x080136b4
 800951c:	08012feb 	.word	0x08012feb
 8009520:	2000824c 	.word	0x2000824c
 8009524:	20008250 	.word	0x20008250
 8009528:	20008248 	.word	0x20008248
 800952c:	080136ec 	.word	0x080136ec
 8009530:	20008244 	.word	0x20008244
 8009534:	08013700 	.word	0x08013700
 8009538:	08013717 	.word	0x08013717
 800953c:	08013731 	.word	0x08013731
 8009540:	0801374c 	.word	0x0801374c
 8009544:	080136d5 	.word	0x080136d5

08009548 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8009548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800954c:	3103      	adds	r1, #3
 800954e:	f64f 75fc 	movw	r5, #65532	; 0xfffc
{
 8009552:	4604      	mov	r4, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8009554:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8009556:	2d0b      	cmp	r5, #11
 8009558:	d904      	bls.n	8009564 <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800955a:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800955e:	d902      	bls.n	8009566 <mem_trim+0x1e>
    return NULL;
 8009560:	2400      	movs	r4, #0
 8009562:	e01c      	b.n	800959e <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 8009564:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009566:	4b3c      	ldr	r3, [pc, #240]	; (8009658 <mem_trim+0x110>)
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	4698      	mov	r8, r3
 800956c:	42a2      	cmp	r2, r4
 800956e:	d803      	bhi.n	8009578 <mem_trim+0x30>
 8009570:	4b3a      	ldr	r3, [pc, #232]	; (800965c <mem_trim+0x114>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	42a3      	cmp	r3, r4
 8009576:	d806      	bhi.n	8009586 <mem_trim+0x3e>
 8009578:	4b39      	ldr	r3, [pc, #228]	; (8009660 <mem_trim+0x118>)
 800957a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800957e:	4939      	ldr	r1, [pc, #228]	; (8009664 <mem_trim+0x11c>)
 8009580:	4839      	ldr	r0, [pc, #228]	; (8009668 <mem_trim+0x120>)
 8009582:	f008 f857 	bl	8011634 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009586:	f8d8 3000 	ldr.w	r3, [r8]
 800958a:	42a3      	cmp	r3, r4
 800958c:	d803      	bhi.n	8009596 <mem_trim+0x4e>
 800958e:	4a33      	ldr	r2, [pc, #204]	; (800965c <mem_trim+0x114>)
 8009590:	6812      	ldr	r2, [r2, #0]
 8009592:	42a2      	cmp	r2, r4
 8009594:	d806      	bhi.n	80095a4 <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8009596:	f006 fdbd 	bl	8010114 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800959a:	f006 fdc7 	bl	801012c <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 800959e:	4620      	mov	r0, r4
 80095a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80095a4:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80095a8:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80095ac:	1af6      	subs	r6, r6, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80095ae:	3f08      	subs	r7, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 80095b0:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 80095b2:	1bbf      	subs	r7, r7, r6
 80095b4:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80095b6:	42af      	cmp	r7, r5
 80095b8:	d223      	bcs.n	8009602 <mem_trim+0xba>
 80095ba:	4b29      	ldr	r3, [pc, #164]	; (8009660 <mem_trim+0x118>)
 80095bc:	f240 2206 	movw	r2, #518	; 0x206
 80095c0:	492a      	ldr	r1, [pc, #168]	; (800966c <mem_trim+0x124>)
 80095c2:	4829      	ldr	r0, [pc, #164]	; (8009668 <mem_trim+0x120>)
 80095c4:	f008 f836 	bl	8011634 <iprintf>
  if (newsize > size) {
 80095c8:	e7ca      	b.n	8009560 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80095ca:	f105 0214 	add.w	r2, r5, #20
 80095ce:	42ba      	cmp	r2, r7
 80095d0:	d83d      	bhi.n	800964e <mem_trim+0x106>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80095d2:	f106 0208 	add.w	r2, r6, #8
    if (mem2 < lfree) {
 80095d6:	4826      	ldr	r0, [pc, #152]	; (8009670 <mem_trim+0x128>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80095d8:	4415      	add	r5, r2
    if (mem2 < lfree) {
 80095da:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80095dc:	b2aa      	uxth	r2, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80095de:	fa13 f585 	uxtah	r5, r3, r5
    if (mem2 < lfree) {
 80095e2:	42af      	cmp	r7, r5
      lfree = mem2;
 80095e4:	bf88      	it	hi
 80095e6:	6005      	strhi	r5, [r0, #0]
    mem2->used = 0;
 80095e8:	2000      	movs	r0, #0
 80095ea:	7128      	strb	r0, [r5, #4]
    mem2->next = mem->next;
 80095ec:	5299      	strh	r1, [r3, r2]
    mem2->prev = ptr;
 80095ee:	806e      	strh	r6, [r5, #2]
    mem->next = ptr2;
 80095f0:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80095f4:	5a99      	ldrh	r1, [r3, r2]
 80095f6:	f5b1 6fc8 	cmp.w	r1, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80095fa:	bf1c      	itt	ne
 80095fc:	185b      	addne	r3, r3, r1
 80095fe:	805a      	strhne	r2, [r3, #2]
 8009600:	e025      	b.n	800964e <mem_trim+0x106>
  if (newsize == size) {
 8009602:	d0cc      	beq.n	800959e <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 8009604:	481b      	ldr	r0, [pc, #108]	; (8009674 <mem_trim+0x12c>)
 8009606:	f006 fd6d 	bl	80100e4 <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 800960a:	f8d8 3000 	ldr.w	r3, [r8]
 800960e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8009612:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 8009614:	7902      	ldrb	r2, [r0, #4]
 8009616:	2a00      	cmp	r2, #0
 8009618:	d1d7      	bne.n	80095ca <mem_trim+0x82>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800961a:	f106 0208 	add.w	r2, r6, #8
    next = mem2->next;
 800961e:	f833 c001 	ldrh.w	ip, [r3, r1]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009622:	4415      	add	r5, r2
    if (lfree == mem2) {
 8009624:	4a12      	ldr	r2, [pc, #72]	; (8009670 <mem_trim+0x128>)
 8009626:	6817      	ldr	r7, [r2, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009628:	b2a9      	uxth	r1, r5
    if (lfree == mem2) {
 800962a:	fa13 f585 	uxtah	r5, r3, r5
 800962e:	4287      	cmp	r7, r0
      lfree = (struct mem *)(void *)&ram[ptr2];
 8009630:	bf08      	it	eq
 8009632:	6015      	streq	r5, [r2, #0]
    mem2->used = 0;
 8009634:	2200      	movs	r2, #0
 8009636:	712a      	strb	r2, [r5, #4]
    mem2->next = next;
 8009638:	f823 c001 	strh.w	ip, [r3, r1]
    mem2->prev = ptr;
 800963c:	806e      	strh	r6, [r5, #2]
    mem->next = ptr2;
 800963e:	f824 1c08 	strh.w	r1, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009642:	5a5a      	ldrh	r2, [r3, r1]
 8009644:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8009648:	d001      	beq.n	800964e <mem_trim+0x106>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800964a:	4413      	add	r3, r2
 800964c:	8059      	strh	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800964e:	4809      	ldr	r0, [pc, #36]	; (8009674 <mem_trim+0x12c>)
 8009650:	f006 fd4d 	bl	80100ee <sys_mutex_unlock>
  return rmem;
 8009654:	e7a3      	b.n	800959e <mem_trim+0x56>
 8009656:	bf00      	nop
 8009658:	2000824c 	.word	0x2000824c
 800965c:	20008250 	.word	0x20008250
 8009660:	0801366a 	.word	0x0801366a
 8009664:	08013776 	.word	0x08013776
 8009668:	08012feb 	.word	0x08012feb
 800966c:	0801378d 	.word	0x0801378d
 8009670:	20008244 	.word	0x20008244
 8009674:	20008248 	.word	0x20008248

08009678 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8009678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800967c:	2800      	cmp	r0, #0
 800967e:	d077      	beq.n	8009770 <mem_malloc+0xf8>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8009680:	3003      	adds	r0, #3
 8009682:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8009686:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8009688:	2d0b      	cmp	r5, #11
 800968a:	d904      	bls.n	8009696 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800968c:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8009690:	d902      	bls.n	8009698 <mem_malloc+0x20>
    return NULL;
 8009692:	2000      	movs	r0, #0
 8009694:	e06c      	b.n	8009770 <mem_malloc+0xf8>
    size = MIN_SIZE_ALIGNED;
 8009696:	250c      	movs	r5, #12
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8009698:	483a      	ldr	r0, [pc, #232]	; (8009784 <mem_malloc+0x10c>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800969a:	f5c5 67c8 	rsb	r7, r5, #1600	; 0x640
  sys_mutex_lock(&mem_mutex);
 800969e:	f006 fd21 	bl	80100e4 <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80096a2:	4e39      	ldr	r6, [pc, #228]	; (8009788 <mem_malloc+0x110>)
 80096a4:	4a39      	ldr	r2, [pc, #228]	; (800978c <mem_malloc+0x114>)
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80096a6:	f06f 0807 	mvn.w	r8, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80096aa:	6833      	ldr	r3, [r6, #0]
 80096ac:	6811      	ldr	r1, [r2, #0]
 80096ae:	1a5a      	subs	r2, r3, r1
 80096b0:	b292      	uxth	r2, r2
 80096b2:	42ba      	cmp	r2, r7
 80096b4:	d303      	bcc.n	80096be <mem_malloc+0x46>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80096b6:	4833      	ldr	r0, [pc, #204]	; (8009784 <mem_malloc+0x10c>)
 80096b8:	f006 fd19 	bl	80100ee <sys_mutex_unlock>
  return NULL;
 80096bc:	e7e9      	b.n	8009692 <mem_malloc+0x1a>
      mem = (struct mem *)(void *)&ram[ptr];
 80096be:	188c      	adds	r4, r1, r2
      if ((!mem->used) &&
 80096c0:	f831 c002 	ldrh.w	ip, [r1, r2]
 80096c4:	f894 e004 	ldrb.w	lr, [r4, #4]
 80096c8:	f1be 0f00 	cmp.w	lr, #0
 80096cc:	d158      	bne.n	8009780 <mem_malloc+0x108>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80096ce:	eba8 0002 	sub.w	r0, r8, r2
 80096d2:	4460      	add	r0, ip
      if ((!mem->used) &&
 80096d4:	42a8      	cmp	r0, r5
 80096d6:	d353      	bcc.n	8009780 <mem_malloc+0x108>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80096d8:	f105 0714 	add.w	r7, r5, #20
 80096dc:	42b8      	cmp	r0, r7
 80096de:	d349      	bcc.n	8009774 <mem_malloc+0xfc>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80096e0:	f105 0008 	add.w	r0, r5, #8
 80096e4:	4410      	add	r0, r2
 80096e6:	b287      	uxth	r7, r0
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80096e8:	fa11 f080 	uxtah	r0, r1, r0
          mem2->used = 0;
 80096ec:	f880 e004 	strb.w	lr, [r0, #4]
          mem2->next = mem->next;
 80096f0:	f821 c007 	strh.w	ip, [r1, r7]
          mem2->prev = ptr;
 80096f4:	8042      	strh	r2, [r0, #2]
          mem->used = 1;
 80096f6:	2201      	movs	r2, #1
          mem->next = ptr2;
 80096f8:	8027      	strh	r7, [r4, #0]
          mem->used = 1;
 80096fa:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80096fc:	5bca      	ldrh	r2, [r1, r7]
 80096fe:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
 8009702:	d001      	beq.n	8009708 <mem_malloc+0x90>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009704:	440a      	add	r2, r1
 8009706:	8057      	strh	r7, [r2, #2]
        if (mem == lfree) {
 8009708:	42a3      	cmp	r3, r4
 800970a:	4f21      	ldr	r7, [pc, #132]	; (8009790 <mem_malloc+0x118>)
 800970c:	d10f      	bne.n	800972e <mem_malloc+0xb6>
          while (cur->used && cur != ram_end) {
 800970e:	6838      	ldr	r0, [r7, #0]
 8009710:	791a      	ldrb	r2, [r3, #4]
 8009712:	b10a      	cbz	r2, 8009718 <mem_malloc+0xa0>
 8009714:	4298      	cmp	r0, r3
 8009716:	d130      	bne.n	800977a <mem_malloc+0x102>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8009718:	4298      	cmp	r0, r3
          lfree = cur;
 800971a:	6033      	str	r3, [r6, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800971c:	d007      	beq.n	800972e <mem_malloc+0xb6>
 800971e:	b132      	cbz	r2, 800972e <mem_malloc+0xb6>
 8009720:	4b1c      	ldr	r3, [pc, #112]	; (8009794 <mem_malloc+0x11c>)
 8009722:	f240 22cf 	movw	r2, #719	; 0x2cf
 8009726:	491c      	ldr	r1, [pc, #112]	; (8009798 <mem_malloc+0x120>)
 8009728:	481c      	ldr	r0, [pc, #112]	; (800979c <mem_malloc+0x124>)
 800972a:	f007 ff83 	bl	8011634 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800972e:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 8009730:	4814      	ldr	r0, [pc, #80]	; (8009784 <mem_malloc+0x10c>)
 8009732:	f006 fcdc 	bl	80100ee <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	4425      	add	r5, r4
 800973a:	42ab      	cmp	r3, r5
 800973c:	d206      	bcs.n	800974c <mem_malloc+0xd4>
 800973e:	4b15      	ldr	r3, [pc, #84]	; (8009794 <mem_malloc+0x11c>)
 8009740:	f240 22d3 	movw	r2, #723	; 0x2d3
 8009744:	4916      	ldr	r1, [pc, #88]	; (80097a0 <mem_malloc+0x128>)
 8009746:	4815      	ldr	r0, [pc, #84]	; (800979c <mem_malloc+0x124>)
 8009748:	f007 ff74 	bl	8011634 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800974c:	07a3      	lsls	r3, r4, #30
 800974e:	d00d      	beq.n	800976c <mem_malloc+0xf4>
 8009750:	4b10      	ldr	r3, [pc, #64]	; (8009794 <mem_malloc+0x11c>)
 8009752:	f240 22d5 	movw	r2, #725	; 0x2d5
 8009756:	4913      	ldr	r1, [pc, #76]	; (80097a4 <mem_malloc+0x12c>)
 8009758:	4810      	ldr	r0, [pc, #64]	; (800979c <mem_malloc+0x124>)
 800975a:	f007 ff6b 	bl	8011634 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800975e:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <mem_malloc+0x11c>)
 8009760:	f240 22d7 	movw	r2, #727	; 0x2d7
 8009764:	4910      	ldr	r1, [pc, #64]	; (80097a8 <mem_malloc+0x130>)
 8009766:	480d      	ldr	r0, [pc, #52]	; (800979c <mem_malloc+0x124>)
 8009768:	f007 ff64 	bl	8011634 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800976c:	f104 0008 	add.w	r0, r4, #8
}
 8009770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8009774:	2201      	movs	r2, #1
 8009776:	7122      	strb	r2, [r4, #4]
 8009778:	e7c6      	b.n	8009708 <mem_malloc+0x90>
            cur = (struct mem *)(void *)&ram[cur->next];
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	440b      	add	r3, r1
 800977e:	e7c7      	b.n	8009710 <mem_malloc+0x98>
    size = MIN_SIZE_ALIGNED;
 8009780:	4662      	mov	r2, ip
 8009782:	e796      	b.n	80096b2 <mem_malloc+0x3a>
 8009784:	20008248 	.word	0x20008248
 8009788:	20008244 	.word	0x20008244
 800978c:	2000824c 	.word	0x2000824c
 8009790:	20008250 	.word	0x20008250
 8009794:	0801366a 	.word	0x0801366a
 8009798:	080137ad 	.word	0x080137ad
 800979c:	08012feb 	.word	0x08012feb
 80097a0:	080137c6 	.word	0x080137c6
 80097a4:	080137f6 	.word	0x080137f6
 80097a8:	08013825 	.word	0x08013825

080097ac <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80097b0:	f006 fcb0 	bl	8010114 <sys_arch_protect>
 80097b4:	4605      	mov	r5, r0

  memp = *desc->tab;
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80097ba:	b15c      	cbz	r4, 80097d4 <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80097bc:	6822      	ldr	r2, [r4, #0]
 80097be:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80097c0:	07a3      	lsls	r3, r4, #30
 80097c2:	d006      	beq.n	80097d2 <do_memp_malloc_pool.isra.0+0x26>
 80097c4:	4b05      	ldr	r3, [pc, #20]	; (80097dc <do_memp_malloc_pool.isra.0+0x30>)
 80097c6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80097ca:	4905      	ldr	r1, [pc, #20]	; (80097e0 <do_memp_malloc_pool.isra.0+0x34>)
 80097cc:	4805      	ldr	r0, [pc, #20]	; (80097e4 <do_memp_malloc_pool.isra.0+0x38>)
 80097ce:	f007 ff31 	bl	8011634 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80097d2:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 80097d4:	f006 fcaa 	bl	801012c <sys_arch_unprotect>
  return NULL;
}
 80097d8:	4620      	mov	r0, r4
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	08013848 	.word	0x08013848
 80097e0:	08013878 	.word	0x08013878
 80097e4:	08012feb 	.word	0x08012feb

080097e8 <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80097e8:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80097ea:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80097f0:	d006      	beq.n	8009800 <do_memp_free_pool.isra.0+0x18>
 80097f2:	4b08      	ldr	r3, [pc, #32]	; (8009814 <do_memp_free_pool.isra.0+0x2c>)
 80097f4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80097f8:	4907      	ldr	r1, [pc, #28]	; (8009818 <do_memp_free_pool.isra.0+0x30>)
 80097fa:	4808      	ldr	r0, [pc, #32]	; (800981c <do_memp_free_pool.isra.0+0x34>)
 80097fc:	f007 ff1a 	bl	8011634 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8009800:	f006 fc88 	bl	8010114 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009804:	682b      	ldr	r3, [r5, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 800980a:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800980c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8009810:	f006 bc8c 	b.w	801012c <sys_arch_unprotect>
 8009814:	08013848 	.word	0x08013848
 8009818:	0801389b 	.word	0x0801389b
 800981c:	08012feb 	.word	0x08012feb

08009820 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8009820:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8009822:	2200      	movs	r2, #0
 8009824:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8009826:	3303      	adds	r3, #3
{
 8009828:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800982a:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800982e:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8009830:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8009832:	4294      	cmp	r4, r2
 8009834:	dc00      	bgt.n	8009838 <memp_init_pool+0x18>
}
 8009836:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8009838:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 800983a:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 800983c:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800983e:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8009840:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8009842:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8009844:	e7f5      	b.n	8009832 <memp_init_pool+0x12>
	...

08009848 <memp_init>:
{
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d05      	ldr	r5, [pc, #20]	; (8009860 <memp_init+0x18>)
 800984c:	240d      	movs	r4, #13
    memp_init_pool(memp_pools[i]);
 800984e:	3c01      	subs	r4, #1
 8009850:	f855 0b04 	ldr.w	r0, [r5], #4
 8009854:	f7ff ffe4 	bl	8009820 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8009858:	b2a4      	uxth	r4, r4
 800985a:	2c00      	cmp	r4, #0
 800985c:	d1f7      	bne.n	800984e <memp_init+0x6>
}
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	08013990 	.word	0x08013990

08009864 <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009864:	280c      	cmp	r0, #12
{
 8009866:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009868:	d807      	bhi.n	800987a <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 800986a:	4b08      	ldr	r3, [pc, #32]	; (800988c <memp_malloc+0x28>)
 800986c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8009870:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8009874:	3008      	adds	r0, #8
 8009876:	f7ff bf99 	b.w	80097ac <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <memp_malloc+0x2c>)
 800987c:	f240 1287 	movw	r2, #391	; 0x187
 8009880:	4904      	ldr	r1, [pc, #16]	; (8009894 <memp_malloc+0x30>)
 8009882:	4805      	ldr	r0, [pc, #20]	; (8009898 <memp_malloc+0x34>)
 8009884:	f007 fed6 	bl	8011634 <iprintf>
}
 8009888:	2000      	movs	r0, #0
 800988a:	bd08      	pop	{r3, pc}
 800988c:	08013990 	.word	0x08013990
 8009890:	08013848 	.word	0x08013848
 8009894:	080138bb 	.word	0x080138bb
 8009898:	08012feb 	.word	0x08012feb

0800989c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800989c:	280c      	cmp	r0, #12
 800989e:	d906      	bls.n	80098ae <memp_free+0x12>
 80098a0:	4b07      	ldr	r3, [pc, #28]	; (80098c0 <memp_free+0x24>)
 80098a2:	f240 12db 	movw	r2, #475	; 0x1db
 80098a6:	4907      	ldr	r1, [pc, #28]	; (80098c4 <memp_free+0x28>)
 80098a8:	4807      	ldr	r0, [pc, #28]	; (80098c8 <memp_free+0x2c>)
 80098aa:	f007 bec3 	b.w	8011634 <iprintf>

  if (mem == NULL) {
 80098ae:	b129      	cbz	r1, 80098bc <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80098b0:	4b06      	ldr	r3, [pc, #24]	; (80098cc <memp_free+0x30>)
 80098b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80098b6:	3008      	adds	r0, #8
 80098b8:	f7ff bf96 	b.w	80097e8 <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	08013848 	.word	0x08013848
 80098c4:	080138d8 	.word	0x080138d8
 80098c8:	08012feb 	.word	0x08012feb
 80098cc:	08013990 	.word	0x08013990

080098d0 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80098d0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 80098d4:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80098d6:	071b      	lsls	r3, r3, #28
 80098d8:	d502      	bpl.n	80098e0 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 80098da:	3104      	adds	r1, #4
 80098dc:	f005 bac4 	b.w	800ee68 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80098e0:	4770      	bx	lr

080098e2 <netif_init>:
}
 80098e2:	4770      	bx	lr

080098e4 <netif_set_ipaddr>:
{
 80098e4:	b530      	push	{r4, r5, lr}
 80098e6:	4604      	mov	r4, r0
 80098e8:	b085      	sub	sp, #20
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80098ea:	460d      	mov	r5, r1
 80098ec:	b191      	cbz	r1, 8009914 <netif_set_ipaddr+0x30>
 80098ee:	680b      	ldr	r3, [r1, #0]
 80098f0:	9303      	str	r3, [sp, #12]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80098f2:	9a03      	ldr	r2, [sp, #12]
 80098f4:	6863      	ldr	r3, [r4, #4]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d00a      	beq.n	8009910 <netif_set_ipaddr+0x2c>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80098fa:	1d20      	adds	r0, r4, #4
 80098fc:	a903      	add	r1, sp, #12
 80098fe:	9001      	str	r0, [sp, #4]
 8009900:	f001 fb3a 	bl	800af78 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8009904:	a903      	add	r1, sp, #12
 8009906:	9801      	ldr	r0, [sp, #4]
 8009908:	f004 f80c 	bl	800d924 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800990c:	b92d      	cbnz	r5, 800991a <netif_set_ipaddr+0x36>
 800990e:	6065      	str	r5, [r4, #4]
}
 8009910:	b005      	add	sp, #20
 8009912:	bd30      	pop	{r4, r5, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8009914:	4b05      	ldr	r3, [pc, #20]	; (800992c <netif_set_ipaddr+0x48>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	e7ea      	b.n	80098f0 <netif_set_ipaddr+0xc>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800991a:	682b      	ldr	r3, [r5, #0]
 800991c:	6063      	str	r3, [r4, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0f6      	beq.n	8009910 <netif_set_ipaddr+0x2c>
 8009922:	4620      	mov	r0, r4
 8009924:	f7ff ffd4 	bl	80098d0 <netif_issue_reports.part.0>
}
 8009928:	e7f2      	b.n	8009910 <netif_set_ipaddr+0x2c>
 800992a:	bf00      	nop
 800992c:	08015038 	.word	0x08015038

08009930 <netif_set_addr>:
{
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	4606      	mov	r6, r0
 8009934:	4615      	mov	r5, r2
 8009936:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8009938:	b109      	cbz	r1, 800993e <netif_set_addr+0xe>
 800993a:	680b      	ldr	r3, [r1, #0]
 800993c:	b94b      	cbnz	r3, 8009952 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 800993e:	4630      	mov	r0, r6
 8009940:	f7ff ffd0 	bl	80098e4 <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009944:	b105      	cbz	r5, 8009948 <netif_set_addr+0x18>
 8009946:	682d      	ldr	r5, [r5, #0]
 8009948:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800994a:	b104      	cbz	r4, 800994e <netif_set_addr+0x1e>
 800994c:	6824      	ldr	r4, [r4, #0]
 800994e:	60f4      	str	r4, [r6, #12]
}
 8009950:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009952:	b102      	cbz	r2, 8009956 <netif_set_addr+0x26>
 8009954:	6815      	ldr	r5, [r2, #0]
 8009956:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009958:	b104      	cbz	r4, 800995c <netif_set_addr+0x2c>
 800995a:	6824      	ldr	r4, [r4, #0]
    netif_set_ipaddr(netif, ipaddr);
 800995c:	4630      	mov	r0, r6
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800995e:	60f4      	str	r4, [r6, #12]
}
 8009960:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8009964:	f7ff bfbe 	b.w	80098e4 <netif_set_ipaddr>

08009968 <netif_add>:
{
 8009968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800996c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009970:	4604      	mov	r4, r0
 8009972:	460e      	mov	r6, r1
 8009974:	4617      	mov	r7, r2
 8009976:	4698      	mov	r8, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8009978:	f1b9 0f00 	cmp.w	r9, #0
 800997c:	d105      	bne.n	800998a <netif_add+0x22>
 800997e:	4b16      	ldr	r3, [pc, #88]	; (80099d8 <netif_add+0x70>)
 8009980:	22fb      	movs	r2, #251	; 0xfb
 8009982:	4916      	ldr	r1, [pc, #88]	; (80099dc <netif_add+0x74>)
 8009984:	4816      	ldr	r0, [pc, #88]	; (80099e0 <netif_add+0x78>)
 8009986:	f007 fe55 	bl	8011634 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800998a:	2303      	movs	r3, #3
  netif->num = netif_num++;
 800998c:	4a15      	ldr	r2, [pc, #84]	; (80099e4 <netif_add+0x7c>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800998e:	2500      	movs	r5, #0
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009990:	4620      	mov	r0, r4
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8009992:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 8009996:	9b08      	ldr	r3, [sp, #32]
  ip_addr_set_zero_ip4(&netif->gw);
 8009998:	60e5      	str	r5, [r4, #12]
  netif->state = state;
 800999a:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 800999c:	7813      	ldrb	r3, [r2, #0]
  netif->flags = 0;
 800999e:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  netif->num = netif_num++;
 80099a2:	1c59      	adds	r1, r3, #1
 80099a4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 80099a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 80099aa:	7011      	strb	r1, [r2, #0]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80099ac:	463a      	mov	r2, r7
  netif->input = input;
 80099ae:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80099b0:	4631      	mov	r1, r6
 80099b2:	4643      	mov	r3, r8
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80099b4:	6225      	str	r5, [r4, #32]
  ip_addr_set_zero_ip4(&netif->netmask);
 80099b6:	e9c4 5501 	strd	r5, r5, [r4, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80099ba:	f7ff ffb9 	bl	8009930 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80099be:	4620      	mov	r0, r4
 80099c0:	47c8      	blx	r9
 80099c2:	b930      	cbnz	r0, 80099d2 <netif_add+0x6a>
  netif->next = netif_list;
 80099c4:	4b08      	ldr	r3, [pc, #32]	; (80099e8 <netif_add+0x80>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 80099ca:	601c      	str	r4, [r3, #0]
}
 80099cc:	4620      	mov	r0, r4
 80099ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 80099d2:	462c      	mov	r4, r5
 80099d4:	e7fa      	b.n	80099cc <netif_add+0x64>
 80099d6:	bf00      	nop
 80099d8:	080139c4 	.word	0x080139c4
 80099dc:	080139f5 	.word	0x080139f5
 80099e0:	08012feb 	.word	0x08012feb
 80099e4:	20008288 	.word	0x20008288
 80099e8:	2000bd48 	.word	0x2000bd48

080099ec <netif_set_default>:
  netif_default = netif;
 80099ec:	4b01      	ldr	r3, [pc, #4]	; (80099f4 <netif_set_default+0x8>)
 80099ee:	6018      	str	r0, [r3, #0]
}
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	2000bd4c 	.word	0x2000bd4c

080099f8 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80099f8:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 80099fc:	07d1      	lsls	r1, r2, #31
 80099fe:	d409      	bmi.n	8009a14 <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8009a00:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009a04:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8009a06:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009a0a:	d503      	bpl.n	8009a14 <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009a0c:	6843      	ldr	r3, [r0, #4]
 8009a0e:	b10b      	cbz	r3, 8009a14 <netif_set_up+0x1c>
 8009a10:	f7ff bf5e 	b.w	80098d0 <netif_issue_reports.part.0>
}
 8009a14:	4770      	bx	lr

08009a16 <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8009a16:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8009a1a:	07d1      	lsls	r1, r2, #31
 8009a1c:	d507      	bpl.n	8009a2e <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8009a1e:	f022 0101 	bic.w	r1, r2, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009a22:	0713      	lsls	r3, r2, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8009a24:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009a28:	d501      	bpl.n	8009a2e <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8009a2a:	f005 b961 	b.w	800ecf0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009a2e:	4770      	bx	lr

08009a30 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009a30:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009a32:	f006 fb6f 	bl	8010114 <sys_arch_protect>
 8009a36:	4b08      	ldr	r3, [pc, #32]	; (8009a58 <pbuf_free_ooseq_callback+0x28>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	f006 fb76 	bl	801012c <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009a40:	4b06      	ldr	r3, [pc, #24]	; (8009a5c <pbuf_free_ooseq_callback+0x2c>)
 8009a42:	681c      	ldr	r4, [r3, #0]
 8009a44:	b12c      	cbz	r4, 8009a52 <pbuf_free_ooseq_callback+0x22>
    if (NULL != pcb->ooseq) {
 8009a46:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009a48:	b120      	cbz	r0, 8009a54 <pbuf_free_ooseq_callback+0x24>
      tcp_segs_free(pcb->ooseq);
 8009a4a:	f000 fcff 	bl	800a44c <tcp_segs_free>
      pcb->ooseq = NULL;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	6723      	str	r3, [r4, #112]	; 0x70
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8009a52:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009a54:	68e4      	ldr	r4, [r4, #12]
 8009a56:	e7f5      	b.n	8009a44 <pbuf_free_ooseq_callback+0x14>
 8009a58:	2000bd50 	.word	0x2000bd50
 8009a5c:	2000bd58 	.word	0x2000bd58

08009a60 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009a60:	b570      	push	{r4, r5, r6, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009a62:	4604      	mov	r4, r0
 8009a64:	bb70      	cbnz	r0, 8009ac4 <pbuf_header_impl+0x64>
 8009a66:	4b20      	ldr	r3, [pc, #128]	; (8009ae8 <pbuf_header_impl+0x88>)
 8009a68:	f240 223f 	movw	r2, #575	; 0x23f
 8009a6c:	491f      	ldr	r1, [pc, #124]	; (8009aec <pbuf_header_impl+0x8c>)
 8009a6e:	4820      	ldr	r0, [pc, #128]	; (8009af0 <pbuf_header_impl+0x90>)
 8009a70:	f007 fde0 	bl	8011634 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8009a74:	2000      	movs	r0, #0
}
 8009a76:	bd70      	pop	{r4, r5, r6, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8009a78:	461d      	mov	r5, r3
  type = p->type;
 8009a7a:	7b26      	ldrb	r6, [r4, #12]
  payload = p->payload;
 8009a7c:	6860      	ldr	r0, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8009a7e:	b10e      	cbz	r6, 8009a84 <pbuf_header_impl+0x24>
 8009a80:	2e03      	cmp	r6, #3
 8009a82:	d106      	bne.n	8009a92 <pbuf_header_impl+0x32>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8009a84:	1a40      	subs	r0, r0, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009a86:	f104 0210 	add.w	r2, r4, #16
 8009a8a:	4290      	cmp	r0, r2
 8009a8c:	d20a      	bcs.n	8009aa4 <pbuf_header_impl+0x44>
      return 1;
 8009a8e:	2001      	movs	r0, #1
 8009a90:	e7f1      	b.n	8009a76 <pbuf_header_impl+0x16>
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8009a92:	3e01      	subs	r6, #1
 8009a94:	2e01      	cmp	r6, #1
 8009a96:	d810      	bhi.n	8009aba <pbuf_header_impl+0x5a>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009a98:	2900      	cmp	r1, #0
 8009a9a:	da0b      	bge.n	8009ab4 <pbuf_header_impl+0x54>
 8009a9c:	8962      	ldrh	r2, [r4, #10]
 8009a9e:	42aa      	cmp	r2, r5
 8009aa0:	d3f5      	bcc.n	8009a8e <pbuf_header_impl+0x2e>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009aa2:	1a40      	subs	r0, r0, r1
  p->len += header_size_increment;
 8009aa4:	8962      	ldrh	r2, [r4, #10]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8009aa6:	6060      	str	r0, [r4, #4]
  p->len += header_size_increment;
 8009aa8:	441a      	add	r2, r3
 8009aaa:	8162      	strh	r2, [r4, #10]
  p->tot_len += header_size_increment;
 8009aac:	8922      	ldrh	r2, [r4, #8]
 8009aae:	4413      	add	r3, r2
 8009ab0:	8123      	strh	r3, [r4, #8]
 8009ab2:	e7df      	b.n	8009a74 <pbuf_header_impl+0x14>
    } else if ((header_size_increment > 0) && force) {
 8009ab4:	2a00      	cmp	r2, #0
 8009ab6:	d1f4      	bne.n	8009aa2 <pbuf_header_impl+0x42>
 8009ab8:	e7e9      	b.n	8009a8e <pbuf_header_impl+0x2e>
    LWIP_ASSERT("bad pbuf type", 0);
 8009aba:	4b0b      	ldr	r3, [pc, #44]	; (8009ae8 <pbuf_header_impl+0x88>)
 8009abc:	f240 2277 	movw	r2, #631	; 0x277
 8009ac0:	490c      	ldr	r1, [pc, #48]	; (8009af4 <pbuf_header_impl+0x94>)
 8009ac2:	e00c      	b.n	8009ade <pbuf_header_impl+0x7e>
  if ((header_size_increment == 0) || (p == NULL)) {
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	d0d5      	beq.n	8009a74 <pbuf_header_impl+0x14>
  if (header_size_increment < 0) {
 8009ac8:	b28b      	uxth	r3, r1
 8009aca:	dad5      	bge.n	8009a78 <pbuf_header_impl+0x18>
    increment_magnitude = (u16_t)-header_size_increment;
 8009acc:	425d      	negs	r5, r3
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009ace:	8960      	ldrh	r0, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8009ad0:	b2ad      	uxth	r5, r5
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8009ad2:	42a8      	cmp	r0, r5
 8009ad4:	d2d1      	bcs.n	8009a7a <pbuf_header_impl+0x1a>
 8009ad6:	4b04      	ldr	r3, [pc, #16]	; (8009ae8 <pbuf_header_impl+0x88>)
 8009ad8:	f240 2247 	movw	r2, #583	; 0x247
 8009adc:	4906      	ldr	r1, [pc, #24]	; (8009af8 <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 8009ade:	4804      	ldr	r0, [pc, #16]	; (8009af0 <pbuf_header_impl+0x90>)
 8009ae0:	f007 fda8 	bl	8011634 <iprintf>
    return 1;
 8009ae4:	e7d3      	b.n	8009a8e <pbuf_header_impl+0x2e>
 8009ae6:	bf00      	nop
 8009ae8:	08013a0c 	.word	0x08013a0c
 8009aec:	08013b8e 	.word	0x08013b8e
 8009af0:	08012feb 	.word	0x08012feb
 8009af4:	08013a5a 	.word	0x08013a5a
 8009af8:	08013a3c 	.word	0x08013a3c

08009afc <pbuf_pool_is_empty>:
{
 8009afc:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 8009afe:	4d0c      	ldr	r5, [pc, #48]	; (8009b30 <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 8009b00:	f006 fb08 	bl	8010114 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 8009b04:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8009b06:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8009b08:	702b      	strb	r3, [r5, #0]
  queued = pbuf_free_ooseq_pending;
 8009b0a:	b2e4      	uxtb	r4, r4
  SYS_ARCH_UNPROTECT(old_level);
 8009b0c:	f006 fb0e 	bl	801012c <sys_arch_unprotect>
  if (!queued) {
 8009b10:	b964      	cbnz	r4, 8009b2c <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009b12:	4622      	mov	r2, r4
 8009b14:	4621      	mov	r1, r4
 8009b16:	4807      	ldr	r0, [pc, #28]	; (8009b34 <pbuf_pool_is_empty+0x38>)
 8009b18:	f7ff fb8c 	bl	8009234 <tcpip_callback_with_block>
 8009b1c:	b130      	cbz	r0, 8009b2c <pbuf_pool_is_empty+0x30>
 8009b1e:	f006 faf9 	bl	8010114 <sys_arch_protect>
 8009b22:	702c      	strb	r4, [r5, #0]
}
 8009b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009b28:	f006 bb00 	b.w	801012c <sys_arch_unprotect>
}
 8009b2c:	bd38      	pop	{r3, r4, r5, pc}
 8009b2e:	bf00      	nop
 8009b30:	2000bd50 	.word	0x2000bd50
 8009b34:	08009a31 	.word	0x08009a31

08009b38 <pbuf_alloced_custom>:
  switch (l) {
 8009b38:	2804      	cmp	r0, #4
{
 8009b3a:	b570      	push	{r4, r5, r6, lr}
 8009b3c:	9d04      	ldr	r5, [sp, #16]
 8009b3e:	d80c      	bhi.n	8009b5a <pbuf_alloced_custom+0x22>
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009b40:	4c11      	ldr	r4, [pc, #68]	; (8009b88 <pbuf_alloced_custom+0x50>)
 8009b42:	5c24      	ldrb	r4, [r4, r0]
 8009b44:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8009b48:	3403      	adds	r4, #3
 8009b4a:	f024 0403 	bic.w	r4, r4, #3
 8009b4e:	190e      	adds	r6, r1, r4
 8009b50:	4286      	cmp	r6, r0
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	d909      	bls.n	8009b6c <pbuf_alloced_custom+0x34>
}
 8009b58:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <pbuf_alloced_custom+0x54>)
 8009b5c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8009b60:	490b      	ldr	r1, [pc, #44]	; (8009b90 <pbuf_alloced_custom+0x58>)
 8009b62:	480c      	ldr	r0, [pc, #48]	; (8009b94 <pbuf_alloced_custom+0x5c>)
 8009b64:	f007 fd66 	bl	8011634 <iprintf>
    return NULL;
 8009b68:	2000      	movs	r0, #0
 8009b6a:	e7f5      	b.n	8009b58 <pbuf_alloced_custom+0x20>
  p->pbuf.next = NULL;
 8009b6c:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8009b6e:	b105      	cbz	r5, 8009b72 <pbuf_alloced_custom+0x3a>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8009b70:	4425      	add	r5, r4
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8009b72:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8009b74:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8009b76:	2201      	movs	r2, #1
 8009b78:	605d      	str	r5, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8009b7a:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 8009b7c:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 8009b7e:	8119      	strh	r1, [r3, #8]
 8009b80:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8009b82:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8009b84:	e7e8      	b.n	8009b58 <pbuf_alloced_custom+0x20>
 8009b86:	bf00      	nop
 8009b88:	08013d57 	.word	0x08013d57
 8009b8c:	08013a0c 	.word	0x08013a0c
 8009b90:	08013a68 	.word	0x08013a68
 8009b94:	08012feb 	.word	0x08012feb

08009b98 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f7ff bf61 	b.w	8009a60 <pbuf_header_impl>

08009b9e <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f7ff bf5e 	b.w	8009a60 <pbuf_header_impl>

08009ba4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009ba8:	4604      	mov	r4, r0
 8009baa:	b950      	cbnz	r0, 8009bc2 <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8009bac:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8009bae:	4b2c      	ldr	r3, [pc, #176]	; (8009c60 <pbuf_free+0xbc>)
 8009bb0:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009bb4:	492b      	ldr	r1, [pc, #172]	; (8009c64 <pbuf_free+0xc0>)
 8009bb6:	482c      	ldr	r0, [pc, #176]	; (8009c68 <pbuf_free+0xc4>)
 8009bb8:	f007 fd3c 	bl	8011634 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8009bc2:	7b03      	ldrb	r3, [r0, #12]
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d906      	bls.n	8009bd6 <pbuf_free+0x32>
 8009bc8:	4b25      	ldr	r3, [pc, #148]	; (8009c60 <pbuf_free+0xbc>)
 8009bca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009bce:	4927      	ldr	r1, [pc, #156]	; (8009c6c <pbuf_free+0xc8>)
 8009bd0:	4825      	ldr	r0, [pc, #148]	; (8009c68 <pbuf_free+0xc4>)
 8009bd2:	f007 fd2f 	bl	8011634 <iprintf>
{
 8009bd6:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009bd8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8009c60 <pbuf_free+0xbc>
 8009bdc:	f8df a094 	ldr.w	sl, [pc, #148]	; 8009c74 <pbuf_free+0xd0>
 8009be0:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8009c68 <pbuf_free+0xc4>
    SYS_ARCH_PROTECT(old_level);
 8009be4:	f006 fa96 	bl	8010114 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009be8:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8009bea:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009bec:	b933      	cbnz	r3, 8009bfc <pbuf_free+0x58>
 8009bee:	4643      	mov	r3, r8
 8009bf0:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009bf4:	4651      	mov	r1, sl
 8009bf6:	4648      	mov	r0, r9
 8009bf8:	f007 fd1c 	bl	8011634 <iprintf>
    ref = --(p->ref);
 8009bfc:	89e6      	ldrh	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8009bfe:	4638      	mov	r0, r7
    ref = --(p->ref);
 8009c00:	3e01      	subs	r6, #1
 8009c02:	b2b6      	uxth	r6, r6
 8009c04:	81e6      	strh	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8009c06:	f006 fa91 	bl	801012c <sys_arch_unprotect>
    if (ref == 0) {
 8009c0a:	2e00      	cmp	r6, #0
 8009c0c:	d1d6      	bne.n	8009bbc <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009c0e:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8009c10:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009c12:	079b      	lsls	r3, r3, #30
 8009c14:	d511      	bpl.n	8009c3a <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009c16:	6923      	ldr	r3, [r4, #16]
 8009c18:	b933      	cbnz	r3, 8009c28 <pbuf_free+0x84>
 8009c1a:	4643      	mov	r3, r8
 8009c1c:	f240 22f9 	movw	r2, #761	; 0x2f9
 8009c20:	4913      	ldr	r1, [pc, #76]	; (8009c70 <pbuf_free+0xcc>)
 8009c22:	4648      	mov	r0, r9
 8009c24:	f007 fd06 	bl	8011634 <iprintf>
        pc->custom_free_function(p);
 8009c28:	6923      	ldr	r3, [r4, #16]
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4798      	blx	r3
      count++;
 8009c2e:	3501      	adds	r5, #1
 8009c30:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8009c32:	2e00      	cmp	r6, #0
 8009c34:	d0c2      	beq.n	8009bbc <pbuf_free+0x18>
 8009c36:	4634      	mov	r4, r6
 8009c38:	e7d4      	b.n	8009be4 <pbuf_free+0x40>
      type = p->type;
 8009c3a:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d104      	bne.n	8009c4a <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 8009c40:	4621      	mov	r1, r4
 8009c42:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8009c44:	f7ff fe2a 	bl	800989c <memp_free>
 8009c48:	e7f1      	b.n	8009c2e <pbuf_free+0x8a>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d802      	bhi.n	8009c56 <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 8009c50:	4621      	mov	r1, r4
 8009c52:	200b      	movs	r0, #11
 8009c54:	e7f6      	b.n	8009c44 <pbuf_free+0xa0>
          mem_free(p);
 8009c56:	4620      	mov	r0, r4
 8009c58:	f7ff fbbc 	bl	80093d4 <mem_free>
 8009c5c:	e7e7      	b.n	8009c2e <pbuf_free+0x8a>
 8009c5e:	bf00      	nop
 8009c60:	08013a0c 	.word	0x08013a0c
 8009c64:	08013b8e 	.word	0x08013b8e
 8009c68:	08012feb 	.word	0x08012feb
 8009c6c:	08013a8c 	.word	0x08013a8c
 8009c70:	08013ab7 	.word	0x08013ab7
 8009c74:	08013aa1 	.word	0x08013aa1

08009c78 <pbuf_alloc>:
  switch (layer) {
 8009c78:	2804      	cmp	r0, #4
{
 8009c7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7e:	460e      	mov	r6, r1
 8009c80:	4617      	mov	r7, r2
 8009c82:	d819      	bhi.n	8009cb8 <pbuf_alloc+0x40>
 8009c84:	4b5c      	ldr	r3, [pc, #368]	; (8009df8 <pbuf_alloc+0x180>)
  switch (type) {
 8009c86:	2a02      	cmp	r2, #2
 8009c88:	5c1d      	ldrb	r5, [r3, r0]
 8009c8a:	d80e      	bhi.n	8009caa <pbuf_alloc+0x32>
 8009c8c:	2a00      	cmp	r2, #0
 8009c8e:	f000 8098 	beq.w	8009dc2 <pbuf_alloc+0x14a>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009c92:	200b      	movs	r0, #11
 8009c94:	f7ff fde6 	bl	8009864 <memp_malloc>
    if (p == NULL) {
 8009c98:	4604      	mov	r4, r0
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d058      	beq.n	8009d50 <pbuf_alloc+0xd8>
    p->payload = NULL;
 8009c9e:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8009ca0:	8106      	strh	r6, [r0, #8]
 8009ca2:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 8009ca4:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 8009ca6:	6003      	str	r3, [r0, #0]
 8009ca8:	e0a3      	b.n	8009df2 <pbuf_alloc+0x17a>
  switch (type) {
 8009caa:	2a03      	cmp	r2, #3
 8009cac:	d00c      	beq.n	8009cc8 <pbuf_alloc+0x50>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009cae:	4b53      	ldr	r3, [pc, #332]	; (8009dfc <pbuf_alloc+0x184>)
 8009cb0:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8009cb4:	4952      	ldr	r1, [pc, #328]	; (8009e00 <pbuf_alloc+0x188>)
 8009cb6:	e003      	b.n	8009cc0 <pbuf_alloc+0x48>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8009cb8:	4b50      	ldr	r3, [pc, #320]	; (8009dfc <pbuf_alloc+0x184>)
 8009cba:	f44f 728b 	mov.w	r2, #278	; 0x116
 8009cbe:	4951      	ldr	r1, [pc, #324]	; (8009e04 <pbuf_alloc+0x18c>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009cc0:	4851      	ldr	r0, [pc, #324]	; (8009e08 <pbuf_alloc+0x190>)
 8009cc2:	f007 fcb7 	bl	8011634 <iprintf>
 8009cc6:	e043      	b.n	8009d50 <pbuf_alloc+0xd8>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009cc8:	200c      	movs	r0, #12
 8009cca:	f7ff fdcb 	bl	8009864 <memp_malloc>
    if (p == NULL) {
 8009cce:	4604      	mov	r4, r0
 8009cd0:	b920      	cbnz	r0, 8009cdc <pbuf_alloc+0x64>
      PBUF_POOL_IS_EMPTY();
 8009cd2:	f7ff ff13 	bl	8009afc <pbuf_pool_is_empty>
}
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->next = NULL;
 8009cdc:	2300      	movs	r3, #0
    p->type = type;
 8009cde:	7307      	strb	r7, [r0, #12]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009ce0:	f500 7718 	add.w	r7, r0, #608	; 0x260
    p->tot_len = length;
 8009ce4:	8106      	strh	r6, [r0, #8]
    p->next = NULL;
 8009ce6:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009ce8:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009cea:	3503      	adds	r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009cec:	3313      	adds	r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009cee:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009cf2:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009cf6:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009cfa:	6043      	str	r3, [r0, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009cfc:	42b5      	cmp	r5, r6
 8009cfe:	bf28      	it	cs
 8009d00:	4635      	movcs	r5, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009d02:	442b      	add	r3, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009d04:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009d06:	429f      	cmp	r7, r3
 8009d08:	d206      	bcs.n	8009d18 <pbuf_alloc+0xa0>
 8009d0a:	4b3c      	ldr	r3, [pc, #240]	; (8009dfc <pbuf_alloc+0x184>)
 8009d0c:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009d10:	493e      	ldr	r1, [pc, #248]	; (8009e0c <pbuf_alloc+0x194>)
 8009d12:	483d      	ldr	r0, [pc, #244]	; (8009e08 <pbuf_alloc+0x190>)
 8009d14:	f007 fc8e 	bl	8011634 <iprintf>
    rem_len = length - p->len;
 8009d18:	8961      	ldrh	r1, [r4, #10]
    p->ref = 1;
 8009d1a:	2301      	movs	r3, #1
    while (rem_len > 0) {
 8009d1c:	46a3      	mov	fp, r4
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009d1e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8009dfc <pbuf_alloc+0x184>
    rem_len = length - p->len;
 8009d22:	1a76      	subs	r6, r6, r1
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009d24:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8009e14 <pbuf_alloc+0x19c>
 8009d28:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8009e08 <pbuf_alloc+0x190>
    p->ref = 1;
 8009d2c:	81e3      	strh	r3, [r4, #14]
    while (rem_len > 0) {
 8009d2e:	2e00      	cmp	r6, #0
 8009d30:	dc04      	bgt.n	8009d3c <pbuf_alloc+0xc4>
  p->ref = 1;
 8009d32:	2301      	movs	r3, #1
 8009d34:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	7363      	strb	r3, [r4, #13]
  return p;
 8009d3a:	e7cc      	b.n	8009cd6 <pbuf_alloc+0x5e>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009d3c:	200c      	movs	r0, #12
 8009d3e:	f7ff fd91 	bl	8009864 <memp_malloc>
      if (q == NULL) {
 8009d42:	4605      	mov	r5, r0
 8009d44:	b930      	cbnz	r0, 8009d54 <pbuf_alloc+0xdc>
        PBUF_POOL_IS_EMPTY();
 8009d46:	f7ff fed9 	bl	8009afc <pbuf_pool_is_empty>
        pbuf_free(p);
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	f7ff ff2a 	bl	8009ba4 <pbuf_free>
    return NULL;
 8009d50:	2400      	movs	r4, #0
 8009d52:	e7c0      	b.n	8009cd6 <pbuf_alloc+0x5e>
      q->type = type;
 8009d54:	2303      	movs	r3, #3
 8009d56:	8183      	strh	r3, [r0, #12]
      q->next = NULL;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
      r->next = q;
 8009d60:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009d64:	429e      	cmp	r6, r3
 8009d66:	d106      	bne.n	8009d76 <pbuf_alloc+0xfe>
 8009d68:	4653      	mov	r3, sl
 8009d6a:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8009d6e:	4649      	mov	r1, r9
 8009d70:	4640      	mov	r0, r8
 8009d72:	f007 fc5f 	bl	8011634 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8009d76:	b2b2      	uxth	r2, r6
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8009d78:	f105 0310 	add.w	r3, r5, #16
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009d7c:	f5b2 7f14 	cmp.w	r2, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8009d80:	812a      	strh	r2, [r5, #8]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8009d82:	606b      	str	r3, [r5, #4]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009d84:	bf28      	it	cs
 8009d86:	f44f 7214 	movcs.w	r2, #592	; 0x250
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009d8a:	079b      	lsls	r3, r3, #30
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009d8c:	816a      	strh	r2, [r5, #10]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009d8e:	d006      	beq.n	8009d9e <pbuf_alloc+0x126>
 8009d90:	4653      	mov	r3, sl
 8009d92:	f240 1251 	movw	r2, #337	; 0x151
 8009d96:	491e      	ldr	r1, [pc, #120]	; (8009e10 <pbuf_alloc+0x198>)
 8009d98:	4640      	mov	r0, r8
 8009d9a:	f007 fc4b 	bl	8011634 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009d9e:	8962      	ldrh	r2, [r4, #10]
 8009da0:	6863      	ldr	r3, [r4, #4]
 8009da2:	4413      	add	r3, r2
 8009da4:	429f      	cmp	r7, r3
 8009da6:	d206      	bcs.n	8009db6 <pbuf_alloc+0x13e>
 8009da8:	4653      	mov	r3, sl
 8009daa:	f240 1253 	movw	r2, #339	; 0x153
 8009dae:	4917      	ldr	r1, [pc, #92]	; (8009e0c <pbuf_alloc+0x194>)
 8009db0:	4640      	mov	r0, r8
 8009db2:	f007 fc3f 	bl	8011634 <iprintf>
      q->ref = 1;
 8009db6:	2301      	movs	r3, #1
      rem_len -= q->len;
 8009db8:	46ab      	mov	fp, r5
      q->ref = 1;
 8009dba:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8009dbc:	896b      	ldrh	r3, [r5, #10]
 8009dbe:	1af6      	subs	r6, r6, r3
      r = q;
 8009dc0:	e7b5      	b.n	8009d2e <pbuf_alloc+0xb6>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8009dc2:	f105 0013 	add.w	r0, r5, #19
 8009dc6:	1ccb      	adds	r3, r1, #3
 8009dc8:	f020 0003 	bic.w	r0, r0, #3
 8009dcc:	f023 0303 	bic.w	r3, r3, #3
 8009dd0:	4418      	add	r0, r3
 8009dd2:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8009dd4:	4298      	cmp	r0, r3
 8009dd6:	d3bb      	bcc.n	8009d50 <pbuf_alloc+0xd8>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8009dd8:	f7ff fc4e 	bl	8009678 <mem_malloc>
    if (p == NULL) {
 8009ddc:	4604      	mov	r4, r0
 8009dde:	2800      	cmp	r0, #0
 8009de0:	d0b6      	beq.n	8009d50 <pbuf_alloc+0xd8>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8009de2:	4405      	add	r5, r0
    p->len = p->tot_len = length;
 8009de4:	8106      	strh	r6, [r0, #8]
 8009de6:	8146      	strh	r6, [r0, #10]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8009de8:	3513      	adds	r5, #19
    p->next = NULL;
 8009dea:	6007      	str	r7, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8009dec:	f025 0503 	bic.w	r5, r5, #3
 8009df0:	6045      	str	r5, [r0, #4]
    p->type = type;
 8009df2:	7327      	strb	r7, [r4, #12]
    break;
 8009df4:	e79d      	b.n	8009d32 <pbuf_alloc+0xba>
 8009df6:	bf00      	nop
 8009df8:	08013d57 	.word	0x08013d57
 8009dfc:	08013a0c 	.word	0x08013a0c
 8009e00:	08013b65 	.word	0x08013b65
 8009e04:	08013ad8 	.word	0x08013ad8
 8009e08:	08012feb 	.word	0x08012feb
 8009e0c:	08013af3 	.word	0x08013af3
 8009e10:	08013b38 	.word	0x08013b38
 8009e14:	08013b24 	.word	0x08013b24

08009e18 <pbuf_realloc>:
{
 8009e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e1c:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009e1e:	4604      	mov	r4, r0
 8009e20:	b930      	cbnz	r0, 8009e30 <pbuf_realloc+0x18>
 8009e22:	4b2e      	ldr	r3, [pc, #184]	; (8009edc <pbuf_realloc+0xc4>)
 8009e24:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009e28:	492d      	ldr	r1, [pc, #180]	; (8009ee0 <pbuf_realloc+0xc8>)
 8009e2a:	482e      	ldr	r0, [pc, #184]	; (8009ee4 <pbuf_realloc+0xcc>)
 8009e2c:	f007 fc02 	bl	8011634 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009e30:	7b23      	ldrb	r3, [r4, #12]
 8009e32:	2b03      	cmp	r3, #3
 8009e34:	d906      	bls.n	8009e44 <pbuf_realloc+0x2c>
 8009e36:	4b29      	ldr	r3, [pc, #164]	; (8009edc <pbuf_realloc+0xc4>)
 8009e38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009e3c:	492a      	ldr	r1, [pc, #168]	; (8009ee8 <pbuf_realloc+0xd0>)
 8009e3e:	4829      	ldr	r0, [pc, #164]	; (8009ee4 <pbuf_realloc+0xcc>)
 8009e40:	f007 fbf8 	bl	8011634 <iprintf>
  if (new_len >= p->tot_len) {
 8009e44:	8926      	ldrh	r6, [r4, #8]
 8009e46:	42ae      	cmp	r6, r5
 8009e48:	d945      	bls.n	8009ed6 <pbuf_realloc+0xbe>
  grow = new_len - p->tot_len;
 8009e4a:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009e4c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009edc <pbuf_realloc+0xc4>
 8009e50:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009ef4 <pbuf_realloc+0xdc>
 8009e54:	4f23      	ldr	r7, [pc, #140]	; (8009ee4 <pbuf_realloc+0xcc>)
  while (rem_len > q->len) {
 8009e56:	8961      	ldrh	r1, [r4, #10]
 8009e58:	42a9      	cmp	r1, r5
 8009e5a:	d319      	bcc.n	8009e90 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8009e5c:	7b23      	ldrb	r3, [r4, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d131      	bne.n	8009ec6 <pbuf_realloc+0xae>
 8009e62:	42a9      	cmp	r1, r5
 8009e64:	d02f      	beq.n	8009ec6 <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009e66:	7b63      	ldrb	r3, [r4, #13]
 8009e68:	079b      	lsls	r3, r3, #30
 8009e6a:	d42c      	bmi.n	8009ec6 <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8009e6c:	6861      	ldr	r1, [r4, #4]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	1b09      	subs	r1, r1, r4
 8009e72:	4429      	add	r1, r5
 8009e74:	b289      	uxth	r1, r1
 8009e76:	f7ff fb67 	bl	8009548 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	bb18      	cbnz	r0, 8009ec6 <pbuf_realloc+0xae>
 8009e7e:	4b17      	ldr	r3, [pc, #92]	; (8009edc <pbuf_realloc+0xc4>)
 8009e80:	f240 221d 	movw	r2, #541	; 0x21d
 8009e84:	4919      	ldr	r1, [pc, #100]	; (8009eec <pbuf_realloc+0xd4>)
 8009e86:	4817      	ldr	r0, [pc, #92]	; (8009ee4 <pbuf_realloc+0xcc>)
 8009e88:	f007 fbd4 	bl	8011634 <iprintf>
  q->len = rem_len;
 8009e8c:	8164      	strh	r4, [r4, #10]
 8009e8e:	deff      	udf	#255	; 0xff
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    rem_len -= q->len;
 8009e94:	1a6d      	subs	r5, r5, r1
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009e96:	429e      	cmp	r6, r3
    rem_len -= q->len;
 8009e98:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8009e9a:	d106      	bne.n	8009eaa <pbuf_realloc+0x92>
 8009e9c:	464b      	mov	r3, r9
 8009e9e:	f240 220b 	movw	r2, #523	; 0x20b
 8009ea2:	4641      	mov	r1, r8
 8009ea4:	4638      	mov	r0, r7
 8009ea6:	f007 fbc5 	bl	8011634 <iprintf>
    q->tot_len += (u16_t)grow;
 8009eaa:	8922      	ldrh	r2, [r4, #8]
 8009eac:	4432      	add	r2, r6
 8009eae:	8122      	strh	r2, [r4, #8]
    q = q->next;
 8009eb0:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8009eb2:	2c00      	cmp	r4, #0
 8009eb4:	d1cf      	bne.n	8009e56 <pbuf_realloc+0x3e>
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	f240 220f 	movw	r2, #527	; 0x20f
 8009ebc:	490c      	ldr	r1, [pc, #48]	; (8009ef0 <pbuf_realloc+0xd8>)
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f007 fbb8 	bl	8011634 <iprintf>
 8009ec4:	e7c7      	b.n	8009e56 <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 8009ec6:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8009ec8:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8009eca:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8009ecc:	b108      	cbz	r0, 8009ed2 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8009ece:	f7ff fe69 	bl	8009ba4 <pbuf_free>
  q->next = NULL;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6023      	str	r3, [r4, #0]
}
 8009ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eda:	bf00      	nop
 8009edc:	08013a0c 	.word	0x08013a0c
 8009ee0:	08013b80 	.word	0x08013b80
 8009ee4:	08012feb 	.word	0x08012feb
 8009ee8:	08013b98 	.word	0x08013b98
 8009eec:	08013bdc 	.word	0x08013bdc
 8009ef0:	08013bc4 	.word	0x08013bc4
 8009ef4:	08013bb3 	.word	0x08013bb3

08009ef8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009ef8:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8009efa:	2200      	movs	r2, #0
 8009efc:	b290      	uxth	r0, r2
 8009efe:	3201      	adds	r2, #1
 8009f00:	b903      	cbnz	r3, 8009f04 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8009f02:	4770      	bx	lr
    p = p->next;
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	e7f9      	b.n	8009efc <pbuf_clen+0x4>

08009f08 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009f08:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	b188      	cbz	r0, 8009f32 <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 8009f0e:	f006 f901 	bl	8010114 <sys_arch_protect>
 8009f12:	89e3      	ldrh	r3, [r4, #14]
 8009f14:	3301      	adds	r3, #1
 8009f16:	81e3      	strh	r3, [r4, #14]
 8009f18:	f006 f908 	bl	801012c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009f1c:	89e3      	ldrh	r3, [r4, #14]
 8009f1e:	b943      	cbnz	r3, 8009f32 <pbuf_ref+0x2a>
 8009f20:	4b04      	ldr	r3, [pc, #16]	; (8009f34 <pbuf_ref+0x2c>)
 8009f22:	f240 3239 	movw	r2, #825	; 0x339
 8009f26:	4904      	ldr	r1, [pc, #16]	; (8009f38 <pbuf_ref+0x30>)
 8009f28:	4804      	ldr	r0, [pc, #16]	; (8009f3c <pbuf_ref+0x34>)
  }
}
 8009f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009f2e:	f007 bb81 	b.w	8011634 <iprintf>
}
 8009f32:	bd10      	pop	{r4, pc}
 8009f34:	08013a0c 	.word	0x08013a0c
 8009f38:	08013bf8 	.word	0x08013bf8
 8009f3c:	08012feb 	.word	0x08012feb

08009f40 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009f44:	4604      	mov	r4, r0
 8009f46:	b100      	cbz	r0, 8009f4a <pbuf_cat+0xa>
 8009f48:	b961      	cbnz	r1, 8009f64 <pbuf_cat+0x24>
 8009f4a:	4b15      	ldr	r3, [pc, #84]	; (8009fa0 <pbuf_cat+0x60>)
 8009f4c:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009f50:	4914      	ldr	r1, [pc, #80]	; (8009fa4 <pbuf_cat+0x64>)
 8009f52:	4815      	ldr	r0, [pc, #84]	; (8009fa8 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009f58:	f007 bb6c 	b.w	8011634 <iprintf>
    p->tot_len += t->tot_len;
 8009f5c:	8929      	ldrh	r1, [r5, #8]
 8009f5e:	440b      	add	r3, r1
 8009f60:	8123      	strh	r3, [r4, #8]
 8009f62:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 8009f64:	6822      	ldr	r2, [r4, #0]
 8009f66:	8923      	ldrh	r3, [r4, #8]
 8009f68:	2a00      	cmp	r2, #0
 8009f6a:	d1f7      	bne.n	8009f5c <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009f6c:	8962      	ldrh	r2, [r4, #10]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d00f      	beq.n	8009f92 <pbuf_cat+0x52>
 8009f72:	4b0b      	ldr	r3, [pc, #44]	; (8009fa0 <pbuf_cat+0x60>)
 8009f74:	f240 3255 	movw	r2, #853	; 0x355
 8009f78:	490c      	ldr	r1, [pc, #48]	; (8009fac <pbuf_cat+0x6c>)
 8009f7a:	480b      	ldr	r0, [pc, #44]	; (8009fa8 <pbuf_cat+0x68>)
 8009f7c:	f007 fb5a 	bl	8011634 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009f80:	6823      	ldr	r3, [r4, #0]
 8009f82:	b133      	cbz	r3, 8009f92 <pbuf_cat+0x52>
 8009f84:	4b06      	ldr	r3, [pc, #24]	; (8009fa0 <pbuf_cat+0x60>)
 8009f86:	f240 3256 	movw	r2, #854	; 0x356
 8009f8a:	4909      	ldr	r1, [pc, #36]	; (8009fb0 <pbuf_cat+0x70>)
 8009f8c:	4806      	ldr	r0, [pc, #24]	; (8009fa8 <pbuf_cat+0x68>)
 8009f8e:	f007 fb51 	bl	8011634 <iprintf>
  p->tot_len += t->tot_len;
 8009f92:	892a      	ldrh	r2, [r5, #8]
 8009f94:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 8009f96:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 8009f98:	4413      	add	r3, r2
 8009f9a:	8123      	strh	r3, [r4, #8]
}
 8009f9c:	bd70      	pop	{r4, r5, r6, pc}
 8009f9e:	bf00      	nop
 8009fa0:	08013a0c 	.word	0x08013a0c
 8009fa4:	08013c0a 	.word	0x08013c0a
 8009fa8:	08012feb 	.word	0x08012feb
 8009fac:	08013c3f 	.word	0x08013c3f
 8009fb0:	08013c6c 	.word	0x08013c6c

08009fb4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009fb4:	b510      	push	{r4, lr}
 8009fb6:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 8009fb8:	f7ff ffc2 	bl	8009f40 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009fbc:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8009fc2:	f7ff bfa1 	b.w	8009f08 <pbuf_ref>
	...

08009fc8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009fce:	4605      	mov	r5, r0
 8009fd0:	b120      	cbz	r0, 8009fdc <pbuf_copy+0x14>
 8009fd2:	b119      	cbz	r1, 8009fdc <pbuf_copy+0x14>
 8009fd4:	8902      	ldrh	r2, [r0, #8]
 8009fd6:	890b      	ldrh	r3, [r1, #8]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d20a      	bcs.n	8009ff2 <pbuf_copy+0x2a>
 8009fdc:	4b36      	ldr	r3, [pc, #216]	; (800a0b8 <pbuf_copy+0xf0>)
 8009fde:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8009fe2:	4936      	ldr	r1, [pc, #216]	; (800a0bc <pbuf_copy+0xf4>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8009fe4:	4836      	ldr	r0, [pc, #216]	; (800a0c0 <pbuf_copy+0xf8>)
 8009fe6:	f007 fb25 	bl	8011634 <iprintf>
 8009fea:	f06f 000f 	mvn.w	r0, #15
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8009fee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t offset_to=0, offset_from=0, len;
 8009ff2:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009ff6:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 800a0b8 <pbuf_copy+0xf0>
 8009ffa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a0d0 <pbuf_copy+0x108>
  u16_t offset_to=0, offset_from=0, len;
 8009ffe:	4647      	mov	r7, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a000:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800a0c0 <pbuf_copy+0xf8>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a004:	896e      	ldrh	r6, [r5, #10]
 800a006:	8962      	ldrh	r2, [r4, #10]
 800a008:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a00a:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a00c:	eba2 0208 	sub.w	r2, r2, r8
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a010:	6861      	ldr	r1, [r4, #4]
 800a012:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a014:	4296      	cmp	r6, r2
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a016:	4441      	add	r1, r8
      len = p_from->len - offset_from;
 800a018:	bfac      	ite	ge
 800a01a:	b296      	uxthge	r6, r2
      len = p_to->len - offset_to;
 800a01c:	b2b6      	uxthlt	r6, r6
    offset_to += len;
 800a01e:	4437      	add	r7, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a020:	4632      	mov	r2, r6
 800a022:	f007 fa47 	bl	80114b4 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a026:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800a028:	b2bf      	uxth	r7, r7
    offset_from += len;
 800a02a:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a02c:	42bb      	cmp	r3, r7
    offset_from += len;
 800a02e:	fa1f f886 	uxth.w	r8, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a032:	d206      	bcs.n	800a042 <pbuf_copy+0x7a>
 800a034:	465b      	mov	r3, fp
 800a036:	f240 32cd 	movw	r2, #973	; 0x3cd
 800a03a:	4651      	mov	r1, sl
 800a03c:	4648      	mov	r0, r9
 800a03e:	f007 faf9 	bl	8011634 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a042:	8963      	ldrh	r3, [r4, #10]
 800a044:	4543      	cmp	r3, r8
 800a046:	d206      	bcs.n	800a056 <pbuf_copy+0x8e>
 800a048:	465b      	mov	r3, fp
 800a04a:	f240 32ce 	movw	r2, #974	; 0x3ce
 800a04e:	491d      	ldr	r1, [pc, #116]	; (800a0c4 <pbuf_copy+0xfc>)
 800a050:	4648      	mov	r0, r9
 800a052:	f007 faef 	bl	8011634 <iprintf>
    if (offset_from >= p_from->len) {
 800a056:	8963      	ldrh	r3, [r4, #10]
 800a058:	4543      	cmp	r3, r8
    if (offset_to == p_to->len) {
 800a05a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800a05c:	bf9c      	itt	ls
 800a05e:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800a060:	f04f 0800 	movls.w	r8, #0
    if (offset_to == p_to->len) {
 800a064:	42bb      	cmp	r3, r7
 800a066:	d108      	bne.n	800a07a <pbuf_copy+0xb2>
      p_to = p_to->next;
 800a068:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a06a:	b92d      	cbnz	r5, 800a078 <pbuf_copy+0xb0>
 800a06c:	b314      	cbz	r4, 800a0b4 <pbuf_copy+0xec>
 800a06e:	4b12      	ldr	r3, [pc, #72]	; (800a0b8 <pbuf_copy+0xf0>)
 800a070:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a074:	4914      	ldr	r1, [pc, #80]	; (800a0c8 <pbuf_copy+0x100>)
 800a076:	e7b5      	b.n	8009fe4 <pbuf_copy+0x1c>
      offset_to = 0;
 800a078:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a07a:	b17c      	cbz	r4, 800a09c <pbuf_copy+0xd4>
 800a07c:	8962      	ldrh	r2, [r4, #10]
 800a07e:	8923      	ldrh	r3, [r4, #8]
 800a080:	429a      	cmp	r2, r3
 800a082:	d10b      	bne.n	800a09c <pbuf_copy+0xd4>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a084:	6823      	ldr	r3, [r4, #0]
 800a086:	b14b      	cbz	r3, 800a09c <pbuf_copy+0xd4>
 800a088:	4b0b      	ldr	r3, [pc, #44]	; (800a0b8 <pbuf_copy+0xf0>)
 800a08a:	f240 32dd 	movw	r2, #989	; 0x3dd
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a08e:	490f      	ldr	r1, [pc, #60]	; (800a0cc <pbuf_copy+0x104>)
 800a090:	480b      	ldr	r0, [pc, #44]	; (800a0c0 <pbuf_copy+0xf8>)
 800a092:	f007 facf 	bl	8011634 <iprintf>
 800a096:	f06f 0005 	mvn.w	r0, #5
 800a09a:	e7a8      	b.n	8009fee <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a09c:	896a      	ldrh	r2, [r5, #10]
 800a09e:	892b      	ldrh	r3, [r5, #8]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d105      	bne.n	800a0b0 <pbuf_copy+0xe8>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	b11b      	cbz	r3, 800a0b0 <pbuf_copy+0xe8>
 800a0a8:	4b03      	ldr	r3, [pc, #12]	; (800a0b8 <pbuf_copy+0xf0>)
 800a0aa:	f240 32e2 	movw	r2, #994	; 0x3e2
 800a0ae:	e7ee      	b.n	800a08e <pbuf_copy+0xc6>
  } while (p_from);
 800a0b0:	2c00      	cmp	r4, #0
 800a0b2:	d1a7      	bne.n	800a004 <pbuf_copy+0x3c>
  return ERR_OK;
 800a0b4:	4620      	mov	r0, r4
 800a0b6:	e79a      	b.n	8009fee <pbuf_copy+0x26>
 800a0b8:	08013a0c 	.word	0x08013a0c
 800a0bc:	08013c7c 	.word	0x08013c7c
 800a0c0:	08012feb 	.word	0x08012feb
 800a0c4:	08013cc3 	.word	0x08013cc3
 800a0c8:	08013cde 	.word	0x08013cde
 800a0cc:	08013ceb 	.word	0x08013ceb
 800a0d0:	08013cac 	.word	0x08013cac

0800a0d4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0d8:	4688      	mov	r8, r1
 800a0da:	4691      	mov	r9, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a0dc:	4606      	mov	r6, r0
 800a0de:	b950      	cbnz	r0, 800a0f6 <pbuf_copy_partial+0x22>
 800a0e0:	4637      	mov	r7, r6
 800a0e2:	4b1b      	ldr	r3, [pc, #108]	; (800a150 <pbuf_copy_partial+0x7c>)
 800a0e4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a0e8:	491a      	ldr	r1, [pc, #104]	; (800a154 <pbuf_copy_partial+0x80>)
 800a0ea:	481b      	ldr	r0, [pc, #108]	; (800a158 <pbuf_copy_partial+0x84>)
 800a0ec:	f007 faa2 	bl	8011634 <iprintf>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a0f6:	bb49      	cbnz	r1, 800a14c <pbuf_copy_partial+0x78>
 800a0f8:	4b15      	ldr	r3, [pc, #84]	; (800a150 <pbuf_copy_partial+0x7c>)
 800a0fa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a0fe:	4917      	ldr	r1, [pc, #92]	; (800a15c <pbuf_copy_partial+0x88>)
 800a100:	4647      	mov	r7, r8
 800a102:	4815      	ldr	r0, [pc, #84]	; (800a158 <pbuf_copy_partial+0x84>)
 800a104:	f007 fa96 	bl	8011634 <iprintf>
 800a108:	e7f2      	b.n	800a0f0 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800a10a:	8975      	ldrh	r5, [r6, #10]
 800a10c:	b153      	cbz	r3, 800a124 <pbuf_copy_partial+0x50>
 800a10e:	42ab      	cmp	r3, r5
 800a110:	d308      	bcc.n	800a124 <pbuf_copy_partial+0x50>
      offset -= p->len;
 800a112:	1b5b      	subs	r3, r3, r5
 800a114:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a116:	6836      	ldr	r6, [r6, #0]
 800a118:	f1b9 0f00 	cmp.w	r9, #0
 800a11c:	d0e8      	beq.n	800a0f0 <pbuf_copy_partial+0x1c>
 800a11e:	2e00      	cmp	r6, #0
 800a120:	d1f3      	bne.n	800a10a <pbuf_copy_partial+0x36>
 800a122:	e7e5      	b.n	800a0f0 <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 800a124:	1aec      	subs	r4, r5, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a126:	6871      	ldr	r1, [r6, #4]
 800a128:	eb08 0007 	add.w	r0, r8, r7
      buf_copy_len = p->len - offset;
 800a12c:	b2a4      	uxth	r4, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a12e:	4419      	add	r1, r3
 800a130:	454c      	cmp	r4, r9
 800a132:	bf28      	it	cs
 800a134:	464c      	movcs	r4, r9
 800a136:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 800a138:	4427      	add	r7, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a13a:	f007 f9bb 	bl	80114b4 <memcpy>
      len -= buf_copy_len;
 800a13e:	eba9 0204 	sub.w	r2, r9, r4
      copied_total += buf_copy_len;
 800a142:	b2bf      	uxth	r7, r7
      offset = 0;
 800a144:	2300      	movs	r3, #0
      len -= buf_copy_len;
 800a146:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
 800a14a:	e7e4      	b.n	800a116 <pbuf_copy_partial+0x42>
  left = 0;
 800a14c:	2700      	movs	r7, #0
 800a14e:	e7e3      	b.n	800a118 <pbuf_copy_partial+0x44>
 800a150:	08013a0c 	.word	0x08013a0c
 800a154:	08013d15 	.word	0x08013d15
 800a158:	08012feb 	.word	0x08012feb
 800a15c:	08013d34 	.word	0x08013d34

0800a160 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 800a160:	4a12      	ldr	r2, [pc, #72]	; (800a1ac <tcp_new_port+0x4c>)
{
 800a162:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a166:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a168:	8813      	ldrh	r3, [r2, #0]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800a16a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 800a16e:	42b3      	cmp	r3, r6
 800a170:	4d0f      	ldr	r5, [pc, #60]	; (800a1b0 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a172:	f04f 0104 	mov.w	r1, #4
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800a176:	bf16      	itet	ne
 800a178:	3301      	addne	r3, #1
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a17a:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800a17e:	b29b      	uxthne	r3, r3
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a180:	f855 4b04 	ldr.w	r4, [r5], #4
 800a184:	6824      	ldr	r4, [r4, #0]
 800a186:	b934      	cbnz	r4, 800a196 <tcp_new_port+0x36>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a188:	3901      	subs	r1, #1
 800a18a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800a18e:	d1f7      	bne.n	800a180 <tcp_new_port+0x20>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a190:	4618      	mov	r0, r3
 800a192:	8013      	strh	r3, [r2, #0]
 800a194:	e007      	b.n	800a1a6 <tcp_new_port+0x46>
      if (pcb->local_port == tcp_port) {
 800a196:	8ae7      	ldrh	r7, [r4, #22]
 800a198:	429f      	cmp	r7, r3
 800a19a:	d105      	bne.n	800a1a8 <tcp_new_port+0x48>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a19c:	3801      	subs	r0, #1
 800a19e:	b280      	uxth	r0, r0
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d1e4      	bne.n	800a16e <tcp_new_port+0xe>
 800a1a4:	8013      	strh	r3, [r2, #0]
}
 800a1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a1a8:	68e4      	ldr	r4, [r4, #12]
 800a1aa:	e7ec      	b.n	800a186 <tcp_new_port+0x26>
 800a1ac:	2000002c 	.word	0x2000002c
 800a1b0:	080140c8 	.word	0x080140c8

0800a1b4 <tcp_close_shutdown_fin>:
{
 800a1b4:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	b930      	cbnz	r0, 800a1c8 <tcp_close_shutdown_fin+0x14>
 800a1ba:	4b13      	ldr	r3, [pc, #76]	; (800a208 <tcp_close_shutdown_fin+0x54>)
 800a1bc:	f240 124d 	movw	r2, #333	; 0x14d
 800a1c0:	4912      	ldr	r1, [pc, #72]	; (800a20c <tcp_close_shutdown_fin+0x58>)
 800a1c2:	4813      	ldr	r0, [pc, #76]	; (800a210 <tcp_close_shutdown_fin+0x5c>)
 800a1c4:	f007 fa36 	bl	8011634 <iprintf>
  switch (pcb->state) {
 800a1c8:	7d23      	ldrb	r3, [r4, #20]
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d003      	beq.n	800a1d6 <tcp_close_shutdown_fin+0x22>
 800a1ce:	2b07      	cmp	r3, #7
 800a1d0:	d00c      	beq.n	800a1ec <tcp_close_shutdown_fin+0x38>
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d108      	bne.n	800a1e8 <tcp_close_shutdown_fin+0x34>
    err = tcp_send_fin(pcb);
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f002 fd9a 	bl	800cd10 <tcp_send_fin>
    if (err == ERR_OK) {
 800a1dc:	b960      	cbnz	r0, 800a1f8 <tcp_close_shutdown_fin+0x44>
      pcb->state = FIN_WAIT_1;
 800a1de:	2305      	movs	r3, #5
    tcp_output(pcb);
 800a1e0:	4620      	mov	r0, r4
      pcb->state = LAST_ACK;
 800a1e2:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 800a1e4:	f002 fdee 	bl	800cdc4 <tcp_output>
  switch (pcb->state) {
 800a1e8:	2000      	movs	r0, #0
}
 800a1ea:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 800a1ec:	4620      	mov	r0, r4
 800a1ee:	f002 fd8f 	bl	800cd10 <tcp_send_fin>
    if (err == ERR_OK) {
 800a1f2:	b908      	cbnz	r0, 800a1f8 <tcp_close_shutdown_fin+0x44>
      pcb->state = LAST_ACK;
 800a1f4:	2309      	movs	r3, #9
 800a1f6:	e7f3      	b.n	800a1e0 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d1f6      	bne.n	800a1ea <tcp_close_shutdown_fin+0x36>
    pcb->flags |= TF_CLOSEPEND;
 800a1fc:	7ea3      	ldrb	r3, [r4, #26]
 800a1fe:	f043 0308 	orr.w	r3, r3, #8
 800a202:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800a204:	e7f0      	b.n	800a1e8 <tcp_close_shutdown_fin+0x34>
 800a206:	bf00      	nop
 800a208:	08013d5c 	.word	0x08013d5c
 800a20c:	08013d8b 	.word	0x08013d8b
 800a210:	08012feb 	.word	0x08012feb

0800a214 <tcp_init>:
}
 800a214:	4770      	bx	lr
	...

0800a218 <tcp_bind>:
{
 800a218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 800a21a:	4d1e      	ldr	r5, [pc, #120]	; (800a294 <tcp_bind+0x7c>)
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a21c:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 800a21e:	2900      	cmp	r1, #0
 800a220:	bf18      	it	ne
 800a222:	460d      	movne	r5, r1
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a224:	b140      	cbz	r0, 800a238 <tcp_bind+0x20>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800a226:	7d03      	ldrb	r3, [r0, #20]
 800a228:	b14b      	cbz	r3, 800a23e <tcp_bind+0x26>
 800a22a:	4b1b      	ldr	r3, [pc, #108]	; (800a298 <tcp_bind+0x80>)
 800a22c:	f44f 7211 	mov.w	r2, #580	; 0x244
 800a230:	491a      	ldr	r1, [pc, #104]	; (800a29c <tcp_bind+0x84>)
 800a232:	481b      	ldr	r0, [pc, #108]	; (800a2a0 <tcp_bind+0x88>)
 800a234:	f007 f9fe 	bl	8011634 <iprintf>
    return ERR_VAL;
 800a238:	f06f 0005 	mvn.w	r0, #5
 800a23c:	e01a      	b.n	800a274 <tcp_bind+0x5c>
  if (port == 0) {
 800a23e:	b932      	cbnz	r2, 800a24e <tcp_bind+0x36>
    port = tcp_new_port();
 800a240:	f7ff ff8e 	bl	800a160 <tcp_new_port>
    if (port == 0) {
 800a244:	4602      	mov	r2, r0
 800a246:	b950      	cbnz	r0, 800a25e <tcp_bind+0x46>
      return ERR_BUF;
 800a248:	f06f 0001 	mvn.w	r0, #1
 800a24c:	e012      	b.n	800a274 <tcp_bind+0x5c>
 800a24e:	4815      	ldr	r0, [pc, #84]	; (800a2a4 <tcp_bind+0x8c>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a250:	f850 1b04 	ldr.w	r1, [r0], #4
 800a254:	6809      	ldr	r1, [r1, #0]
 800a256:	b971      	cbnz	r1, 800a276 <tcp_bind+0x5e>
    for (i = 0; i < max_pcb_list; i++) {
 800a258:	3301      	adds	r3, #1
 800a25a:	2b04      	cmp	r3, #4
 800a25c:	d1f8      	bne.n	800a250 <tcp_bind+0x38>
  if (!ip_addr_isany(ipaddr)) {
 800a25e:	682b      	ldr	r3, [r5, #0]
 800a260:	b103      	cbz	r3, 800a264 <tcp_bind+0x4c>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800a262:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a264:	4b10      	ldr	r3, [pc, #64]	; (800a2a8 <tcp_bind+0x90>)
  pcb->local_port = port;
 800a266:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	601c      	str	r4, [r3, #0]
 800a26c:	60e2      	str	r2, [r4, #12]
 800a26e:	f003 f8cd 	bl	800d40c <tcp_timer_needed>
  return ERR_OK;
 800a272:	2000      	movs	r0, #0
}
 800a274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (cpcb->local_port == port) {
 800a276:	8ace      	ldrh	r6, [r1, #22]
 800a278:	4296      	cmp	r6, r2
 800a27a:	d105      	bne.n	800a288 <tcp_bind+0x70>
                (ip_addr_isany(&cpcb->local_ip) ||
 800a27c:	680f      	ldr	r7, [r1, #0]
 800a27e:	b12f      	cbz	r7, 800a28c <tcp_bind+0x74>
                ip_addr_isany(ipaddr) ||
 800a280:	682e      	ldr	r6, [r5, #0]
 800a282:	b11e      	cbz	r6, 800a28c <tcp_bind+0x74>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800a284:	42b7      	cmp	r7, r6
 800a286:	d001      	beq.n	800a28c <tcp_bind+0x74>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800a288:	68c9      	ldr	r1, [r1, #12]
 800a28a:	e7e4      	b.n	800a256 <tcp_bind+0x3e>
              return ERR_USE;
 800a28c:	f06f 0007 	mvn.w	r0, #7
 800a290:	e7f0      	b.n	800a274 <tcp_bind+0x5c>
 800a292:	bf00      	nop
 800a294:	08015038 	.word	0x08015038
 800a298:	08013d5c 	.word	0x08013d5c
 800a29c:	08013d97 	.word	0x08013d97
 800a2a0:	08012feb 	.word	0x08012feb
 800a2a4:	080140c8 	.word	0x080140c8
 800a2a8:	2000bd64 	.word	0x2000bd64

0800a2ac <tcp_listen_with_backlog_and_err>:
{
 800a2ac:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a2ae:	7d03      	ldrb	r3, [r0, #20]
{
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a2b4:	b16b      	cbz	r3, 800a2d2 <tcp_listen_with_backlog_and_err+0x26>
 800a2b6:	4b23      	ldr	r3, [pc, #140]	; (800a344 <tcp_listen_with_backlog_and_err+0x98>)
 800a2b8:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800a2bc:	4922      	ldr	r1, [pc, #136]	; (800a348 <tcp_listen_with_backlog_and_err+0x9c>)
  struct tcp_pcb_listen *lpcb = NULL;
 800a2be:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800a2c0:	4822      	ldr	r0, [pc, #136]	; (800a34c <tcp_listen_with_backlog_and_err+0xa0>)
 800a2c2:	f007 f9b7 	bl	8011634 <iprintf>
 800a2c6:	f06f 030e 	mvn.w	r3, #14
  if (err != NULL) {
 800a2ca:	b106      	cbz	r6, 800a2ce <tcp_listen_with_backlog_and_err+0x22>
    *err = res;
 800a2cc:	7033      	strb	r3, [r6, #0]
}
 800a2ce:	4620      	mov	r0, r4
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800a2d2:	2002      	movs	r0, #2
 800a2d4:	f7ff fac6 	bl	8009864 <memp_malloc>
  if (lpcb == NULL) {
 800a2d8:	4604      	mov	r4, r0
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d02f      	beq.n	800a33e <tcp_listen_with_backlog_and_err+0x92>
  lpcb->callback_arg = pcb->callback_arg;
 800a2de:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 800a2e0:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 800a2e2:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 800a2e4:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 800a2e6:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 800a2e8:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 800a2ea:	7d6a      	ldrb	r2, [r5, #21]
 800a2ec:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 800a2ee:	7a2a      	ldrb	r2, [r5, #8]
 800a2f0:	7202      	strb	r2, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800a2f2:	7aaa      	ldrb	r2, [r5, #10]
 800a2f4:	7282      	strb	r2, [r0, #10]
  lpcb->tos = pcb->tos;
 800a2f6:	7a6a      	ldrb	r2, [r5, #9]
 800a2f8:	7242      	strb	r2, [r0, #9]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800a2fa:	682a      	ldr	r2, [r5, #0]
 800a2fc:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 800a2fe:	b13b      	cbz	r3, 800a310 <tcp_listen_with_backlog_and_err+0x64>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a300:	4a13      	ldr	r2, [pc, #76]	; (800a350 <tcp_listen_with_backlog_and_err+0xa4>)
 800a302:	6813      	ldr	r3, [r2, #0]
 800a304:	42ab      	cmp	r3, r5
 800a306:	d112      	bne.n	800a32e <tcp_listen_with_backlog_and_err+0x82>
 800a308:	68eb      	ldr	r3, [r5, #12]
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	2300      	movs	r3, #0
 800a30e:	60eb      	str	r3, [r5, #12]
  memp_free(MEMP_TCP_PCB, pcb);
 800a310:	4629      	mov	r1, r5
 800a312:	2001      	movs	r0, #1
 800a314:	f7ff fac2 	bl	800989c <memp_free>
  lpcb->accept = tcp_accept_null;
 800a318:	4b0e      	ldr	r3, [pc, #56]	; (800a354 <tcp_listen_with_backlog_and_err+0xa8>)
 800a31a:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800a31c:	4b0e      	ldr	r3, [pc, #56]	; (800a358 <tcp_listen_with_backlog_and_err+0xac>)
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	601c      	str	r4, [r3, #0]
 800a322:	60e2      	str	r2, [r4, #12]
 800a324:	f003 f872 	bl	800d40c <tcp_timer_needed>
  res = ERR_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	e7ce      	b.n	800a2ca <tcp_listen_with_backlog_and_err+0x1e>
 800a32c:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0ec      	beq.n	800a30c <tcp_listen_with_backlog_and_err+0x60>
 800a332:	68da      	ldr	r2, [r3, #12]
 800a334:	42aa      	cmp	r2, r5
 800a336:	d1f9      	bne.n	800a32c <tcp_listen_with_backlog_and_err+0x80>
 800a338:	68ea      	ldr	r2, [r5, #12]
 800a33a:	60da      	str	r2, [r3, #12]
 800a33c:	e7e6      	b.n	800a30c <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 800a33e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a342:	e7c2      	b.n	800a2ca <tcp_listen_with_backlog_and_err+0x1e>
 800a344:	08013d5c 	.word	0x08013d5c
 800a348:	08013dbf 	.word	0x08013dbf
 800a34c:	08012feb 	.word	0x08012feb
 800a350:	2000bd64 	.word	0x2000bd64
 800a354:	0800adc7 	.word	0x0800adc7
 800a358:	2000bd60 	.word	0x2000bd60

0800a35c <tcp_update_rcv_ann_wnd>:
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a35c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a35e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 800a360:	b538      	push	{r3, r4, r5, lr}
 800a362:	4604      	mov	r4, r0
 800a364:	1a8b      	subs	r3, r1, r2
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a366:	6a45      	ldr	r5, [r0, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a368:	1958      	adds	r0, r3, r5
 800a36a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a36c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a370:	bf94      	ite	ls
 800a372:	1ac3      	subls	r3, r0, r3
 800a374:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 800a378:	2b00      	cmp	r3, #0
 800a37a:	db01      	blt.n	800a380 <tcp_update_rcv_ann_wnd+0x24>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a37c:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 800a37e:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a380:	1aab      	subs	r3, r5, r2
 800a382:	2b00      	cmp	r3, #0
 800a384:	dd03      	ble.n	800a38e <tcp_update_rcv_ann_wnd+0x32>
      pcb->rcv_ann_wnd = 0;
 800a386:	2300      	movs	r3, #0
 800a388:	8563      	strh	r3, [r4, #42]	; 0x2a
    return 0;
 800a38a:	2000      	movs	r0, #0
 800a38c:	e7f7      	b.n	800a37e <tcp_update_rcv_ann_wnd+0x22>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a38e:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a390:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800a394:	d306      	bcc.n	800a3a4 <tcp_update_rcv_ann_wnd+0x48>
 800a396:	4b04      	ldr	r3, [pc, #16]	; (800a3a8 <tcp_update_rcv_ann_wnd+0x4c>)
 800a398:	f44f 7242 	mov.w	r2, #776	; 0x308
 800a39c:	4903      	ldr	r1, [pc, #12]	; (800a3ac <tcp_update_rcv_ann_wnd+0x50>)
 800a39e:	4804      	ldr	r0, [pc, #16]	; (800a3b0 <tcp_update_rcv_ann_wnd+0x54>)
 800a3a0:	f007 f948 	bl	8011634 <iprintf>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a3a4:	8565      	strh	r5, [r4, #42]	; 0x2a
 800a3a6:	e7f0      	b.n	800a38a <tcp_update_rcv_ann_wnd+0x2e>
 800a3a8:	08013d5c 	.word	0x08013d5c
 800a3ac:	08013de1 	.word	0x08013de1
 800a3b0:	08012feb 	.word	0x08012feb

0800a3b4 <tcp_recved>:
{
 800a3b4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a3b6:	7d03      	ldrb	r3, [r0, #20]
{
 800a3b8:	4604      	mov	r4, r0
 800a3ba:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d106      	bne.n	800a3ce <tcp_recved+0x1a>
 800a3c0:	4b17      	ldr	r3, [pc, #92]	; (800a420 <tcp_recved+0x6c>)
 800a3c2:	f240 321f 	movw	r2, #799	; 0x31f
 800a3c6:	4917      	ldr	r1, [pc, #92]	; (800a424 <tcp_recved+0x70>)
 800a3c8:	4817      	ldr	r0, [pc, #92]	; (800a428 <tcp_recved+0x74>)
 800a3ca:	f007 f933 	bl	8011634 <iprintf>
  pcb->rcv_wnd += len;
 800a3ce:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800a3d0:	4429      	add	r1, r5
 800a3d2:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800a3d4:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 800a3d8:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800a3da:	d911      	bls.n	800a400 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a3dc:	f44f 6306 	mov.w	r3, #2144	; 0x860
 800a3e0:	8523      	strh	r3, [r4, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7ff ffba 	bl	800a35c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a3e8:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 800a3ec:	db17      	blt.n	800a41e <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 800a3ee:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 800a3f0:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 800a3f2:	f043 0302 	orr.w	r3, r3, #2
 800a3f6:	76a3      	strb	r3, [r4, #26]
}
 800a3f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 800a3fc:	f002 bce2 	b.w	800cdc4 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 800a400:	2900      	cmp	r1, #0
 800a402:	d1ee      	bne.n	800a3e2 <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800a404:	7d23      	ldrb	r3, [r4, #20]
 800a406:	2b07      	cmp	r3, #7
 800a408:	d0e8      	beq.n	800a3dc <tcp_recved+0x28>
 800a40a:	2b09      	cmp	r3, #9
 800a40c:	d0e6      	beq.n	800a3dc <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800a40e:	4b04      	ldr	r3, [pc, #16]	; (800a420 <tcp_recved+0x6c>)
 800a410:	f240 322d 	movw	r2, #813	; 0x32d
 800a414:	4905      	ldr	r1, [pc, #20]	; (800a42c <tcp_recved+0x78>)
 800a416:	4804      	ldr	r0, [pc, #16]	; (800a428 <tcp_recved+0x74>)
 800a418:	f007 f90c 	bl	8011634 <iprintf>
 800a41c:	e7e1      	b.n	800a3e2 <tcp_recved+0x2e>
}
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	08013d5c 	.word	0x08013d5c
 800a424:	08013dfb 	.word	0x08013dfb
 800a428:	08012feb 	.word	0x08012feb
 800a42c:	08013e21 	.word	0x08013e21

0800a430 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a430:	b510      	push	{r4, lr}
  if (seg != NULL) {
 800a432:	4604      	mov	r4, r0
 800a434:	b148      	cbz	r0, 800a44a <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800a436:	6840      	ldr	r0, [r0, #4]
 800a438:	b108      	cbz	r0, 800a43e <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800a43a:	f7ff fbb3 	bl	8009ba4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a43e:	4621      	mov	r1, r4
 800a440:	2003      	movs	r0, #3
  }
}
 800a442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800a446:	f7ff ba29 	b.w	800989c <memp_free>
}
 800a44a:	bd10      	pop	{r4, pc}

0800a44c <tcp_segs_free>:
{
 800a44c:	b510      	push	{r4, lr}
  while (seg != NULL) {
 800a44e:	b900      	cbnz	r0, 800a452 <tcp_segs_free+0x6>
}
 800a450:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 800a452:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 800a454:	f7ff ffec 	bl	800a430 <tcp_seg_free>
    seg = next;
 800a458:	4620      	mov	r0, r4
 800a45a:	e7f8      	b.n	800a44e <tcp_segs_free+0x2>

0800a45c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a460:	2003      	movs	r0, #3
 800a462:	f7ff f9ff 	bl	8009864 <memp_malloc>
  if (cseg == NULL) {
 800a466:	4605      	mov	r5, r0
 800a468:	b160      	cbz	r0, 800a484 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a46a:	4623      	mov	r3, r4
 800a46c:	4602      	mov	r2, r0
 800a46e:	f104 0110 	add.w	r1, r4, #16
 800a472:	f853 0b04 	ldr.w	r0, [r3], #4
 800a476:	428b      	cmp	r3, r1
 800a478:	f842 0b04 	str.w	r0, [r2], #4
 800a47c:	d1f9      	bne.n	800a472 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 800a47e:	6868      	ldr	r0, [r5, #4]
 800a480:	f7ff fd42 	bl	8009f08 <pbuf_ref>
  return cseg;
}
 800a484:	4628      	mov	r0, r5
 800a486:	bd38      	pop	{r3, r4, r5, pc}

0800a488 <tcp_arg>:
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a488:	b100      	cbz	r0, 800a48c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 800a48a:	6101      	str	r1, [r0, #16]
  }
}
 800a48c:	4770      	bx	lr
	...

0800a490 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800a494:	4604      	mov	r4, r0
 800a496:	b158      	cbz	r0, 800a4b0 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a498:	7d03      	ldrb	r3, [r0, #20]
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d106      	bne.n	800a4ac <tcp_recv+0x1c>
 800a49e:	4b05      	ldr	r3, [pc, #20]	; (800a4b4 <tcp_recv+0x24>)
 800a4a0:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800a4a4:	4904      	ldr	r1, [pc, #16]	; (800a4b8 <tcp_recv+0x28>)
 800a4a6:	4805      	ldr	r0, [pc, #20]	; (800a4bc <tcp_recv+0x2c>)
 800a4a8:	f007 f8c4 	bl	8011634 <iprintf>
    pcb->recv = recv;
 800a4ac:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 800a4b0:	bd38      	pop	{r3, r4, r5, pc}
 800a4b2:	bf00      	nop
 800a4b4:	08013d5c 	.word	0x08013d5c
 800a4b8:	08013e42 	.word	0x08013e42
 800a4bc:	08012feb 	.word	0x08012feb

0800a4c0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a4c0:	b538      	push	{r3, r4, r5, lr}
 800a4c2:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	b150      	cbz	r0, 800a4de <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a4c8:	7d03      	ldrb	r3, [r0, #20]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d106      	bne.n	800a4dc <tcp_sent+0x1c>
 800a4ce:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <tcp_sent+0x20>)
 800a4d0:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800a4d4:	4903      	ldr	r1, [pc, #12]	; (800a4e4 <tcp_sent+0x24>)
 800a4d6:	4804      	ldr	r0, [pc, #16]	; (800a4e8 <tcp_sent+0x28>)
 800a4d8:	f007 f8ac 	bl	8011634 <iprintf>
    pcb->sent = sent;
 800a4dc:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	08013d5c 	.word	0x08013d5c
 800a4e4:	08013e69 	.word	0x08013e69
 800a4e8:	08012feb 	.word	0x08012feb

0800a4ec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	460d      	mov	r5, r1
  if (pcb != NULL) {
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	b158      	cbz	r0, 800a50c <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a4f4:	7d03      	ldrb	r3, [r0, #20]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d106      	bne.n	800a508 <tcp_err+0x1c>
 800a4fa:	4b05      	ldr	r3, [pc, #20]	; (800a510 <tcp_err+0x24>)
 800a4fc:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800a500:	4904      	ldr	r1, [pc, #16]	; (800a514 <tcp_err+0x28>)
 800a502:	4805      	ldr	r0, [pc, #20]	; (800a518 <tcp_err+0x2c>)
 800a504:	f007 f896 	bl	8011634 <iprintf>
    pcb->errf = err;
 800a508:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 800a50c:	bd38      	pop	{r3, r4, r5, pc}
 800a50e:	bf00      	nop
 800a510:	08013d5c 	.word	0x08013d5c
 800a514:	08013e90 	.word	0x08013e90
 800a518:	08012feb 	.word	0x08012feb

0800a51c <tcp_accept>:
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a51c:	b118      	cbz	r0, 800a526 <tcp_accept+0xa>
 800a51e:	7d03      	ldrb	r3, [r0, #20]
 800a520:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
    lpcb->accept = accept;
 800a522:	bf08      	it	eq
 800a524:	6181      	streq	r1, [r0, #24]
  }
}
 800a526:	4770      	bx	lr

0800a528 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a528:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a52a:	7d03      	ldrb	r3, [r0, #20]
{
 800a52c:	4604      	mov	r4, r0
 800a52e:	460e      	mov	r6, r1
 800a530:	4615      	mov	r5, r2
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a532:	2b01      	cmp	r3, #1
 800a534:	d106      	bne.n	800a544 <tcp_poll+0x1c>
 800a536:	4b05      	ldr	r3, [pc, #20]	; (800a54c <tcp_poll+0x24>)
 800a538:	f240 7203 	movw	r2, #1795	; 0x703
 800a53c:	4904      	ldr	r1, [pc, #16]	; (800a550 <tcp_poll+0x28>)
 800a53e:	4805      	ldr	r0, [pc, #20]	; (800a554 <tcp_poll+0x2c>)
 800a540:	f007 f878 	bl	8011634 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a544:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a548:	7725      	strb	r5, [r4, #28]
}
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
 800a54c:	08013d5c 	.word	0x08013d5c
 800a550:	08013eb6 	.word	0x08013eb6
 800a554:	08012feb 	.word	0x08012feb

0800a558 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a558:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800a55a:	7d03      	ldrb	r3, [r0, #20]
{
 800a55c:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d919      	bls.n	800a596 <tcp_pcb_purge+0x3e>
 800a562:	2b0a      	cmp	r3, #10
 800a564:	d017      	beq.n	800a596 <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a566:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800a568:	b118      	cbz	r0, 800a572 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a56a:	f7ff fb1b 	bl	8009ba4 <pbuf_free>
      pcb->refused_data = NULL;
 800a56e:	2300      	movs	r3, #0
 800a570:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800a572:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 800a574:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 800a576:	f7ff ff69 	bl	800a44c <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a57a:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 800a57e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 800a580:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 800a582:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 800a584:	f7ff ff62 	bl	800a44c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a588:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a58a:	f7ff ff5f 	bl	800a44c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a58e:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
    pcb->unacked = pcb->unsent = NULL;
 800a592:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a596:	bd38      	pop	{r3, r4, r5, pc}

0800a598 <tcp_slowtmr>:
{
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 800a59c:	4ebb      	ldr	r6, [pc, #748]	; (800a88c <tcp_slowtmr+0x2f4>)
{
 800a59e:	b085      	sub	sp, #20
 800a5a0:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 800a894 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 800a5a4:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a5a6:	f8df 8318 	ldr.w	r8, [pc, #792]	; 800a8c0 <tcp_slowtmr+0x328>
  ++tcp_ticks;
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800a5ae:	4bb8      	ldr	r3, [pc, #736]	; (800a890 <tcp_slowtmr+0x2f8>)
 800a5b0:	781a      	ldrb	r2, [r3, #0]
 800a5b2:	9302      	str	r3, [sp, #8]
 800a5b4:	3201      	adds	r2, #1
 800a5b6:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 800a5b8:	4bb6      	ldr	r3, [pc, #728]	; (800a894 <tcp_slowtmr+0x2fc>)
  prev = NULL;
 800a5ba:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a5bc:	f8df 9304 	ldr.w	r9, [pc, #772]	; 800a8c4 <tcp_slowtmr+0x32c>
  pcb = tcp_active_pcbs;
 800a5c0:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 800a5c2:	b96c      	cbnz	r4, 800a5e0 <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
 800a5c4:	4fb4      	ldr	r7, [pc, #720]	; (800a898 <tcp_slowtmr+0x300>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5c6:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 800a8c0 <tcp_slowtmr+0x328>
  pcb = tcp_tw_pcbs;
 800a5ca:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a5cc:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 800a8c8 <tcp_slowtmr+0x330>
 800a5d0:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 800a8c4 <tcp_slowtmr+0x32c>
  while (pcb != NULL) {
 800a5d4:	2d00      	cmp	r5, #0
 800a5d6:	f040 8183 	bne.w	800a8e0 <tcp_slowtmr+0x348>
}
 800a5da:	b005      	add	sp, #20
 800a5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a5e0:	7d23      	ldrb	r3, [r4, #20]
 800a5e2:	b933      	cbnz	r3, 800a5f2 <tcp_slowtmr+0x5a>
 800a5e4:	4643      	mov	r3, r8
 800a5e6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800a5ea:	49ac      	ldr	r1, [pc, #688]	; (800a89c <tcp_slowtmr+0x304>)
 800a5ec:	4648      	mov	r0, r9
 800a5ee:	f007 f821 	bl	8011634 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a5f2:	7d23      	ldrb	r3, [r4, #20]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d106      	bne.n	800a606 <tcp_slowtmr+0x6e>
 800a5f8:	4643      	mov	r3, r8
 800a5fa:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a5fe:	49a8      	ldr	r1, [pc, #672]	; (800a8a0 <tcp_slowtmr+0x308>)
 800a600:	4648      	mov	r0, r9
 800a602:	f007 f817 	bl	8011634 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a606:	7d23      	ldrb	r3, [r4, #20]
 800a608:	2b0a      	cmp	r3, #10
 800a60a:	d106      	bne.n	800a61a <tcp_slowtmr+0x82>
 800a60c:	4643      	mov	r3, r8
 800a60e:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800a612:	49a4      	ldr	r1, [pc, #656]	; (800a8a4 <tcp_slowtmr+0x30c>)
 800a614:	4648      	mov	r0, r9
 800a616:	f007 f80d 	bl	8011634 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a61a:	9b02      	ldr	r3, [sp, #8]
 800a61c:	7f62      	ldrb	r2, [r4, #29]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	429a      	cmp	r2, r3
 800a622:	d102      	bne.n	800a62a <tcp_slowtmr+0x92>
      pcb = pcb->next;
 800a624:	68e5      	ldr	r5, [r4, #12]
      continue;
 800a626:	462c      	mov	r4, r5
 800a628:	e7cb      	b.n	800a5c2 <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a62a:	7d21      	ldrb	r1, [r4, #20]
 800a62c:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800a630:	2902      	cmp	r1, #2
    pcb->last_timer = tcp_timer_ctr;
 800a632:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a634:	f040 809c 	bne.w	800a770 <tcp_slowtmr+0x1d8>
 800a638:	2a05      	cmp	r2, #5
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800a63a:	f200 80e5 	bhi.w	800a808 <tcp_slowtmr+0x270>
      if (pcb->persist_backoff > 0) {
 800a63e:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800a642:	f1bb 0f00 	cmp.w	fp, #0
 800a646:	f000 80a8 	beq.w	800a79a <tcp_slowtmr+0x202>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800a64a:	4897      	ldr	r0, [pc, #604]	; (800a8a8 <tcp_slowtmr+0x310>)
        if (pcb->persist_cnt < backoff_cnt) {
 800a64c:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800a650:	4483      	add	fp, r0
 800a652:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 800a656:	4293      	cmp	r3, r2
 800a658:	f0c0 808c 	bcc.w	800a774 <tcp_slowtmr+0x1dc>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800a65c:	4620      	mov	r0, r4
 800a65e:	f002 fe22 	bl	800d2a6 <tcp_zero_window_probe>
 800a662:	2800      	cmp	r0, #0
 800a664:	f000 808e 	beq.w	800a784 <tcp_slowtmr+0x1ec>
    pcb_remove = 0;
 800a668:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 800a66c:	7d23      	ldrb	r3, [r4, #20]
 800a66e:	2b06      	cmp	r3, #6
 800a670:	d10b      	bne.n	800a68a <tcp_slowtmr+0xf2>
      if (pcb->flags & TF_RXCLOSED) {
 800a672:	7ea2      	ldrb	r2, [r4, #26]
 800a674:	06d2      	lsls	r2, r2, #27
 800a676:	d508      	bpl.n	800a68a <tcp_slowtmr+0xf2>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a678:	6832      	ldr	r2, [r6, #0]
 800a67a:	6a21      	ldr	r1, [r4, #32]
 800a67c:	1a52      	subs	r2, r2, r1
 800a67e:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800a680:	bf84      	itt	hi
 800a682:	f10b 0b01 	addhi.w	fp, fp, #1
 800a686:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800a68a:	7a25      	ldrb	r5, [r4, #8]
 800a68c:	f015 0508 	ands.w	r5, r5, #8
 800a690:	d019      	beq.n	800a6c6 <tcp_slowtmr+0x12e>
 800a692:	2b04      	cmp	r3, #4
 800a694:	d002      	beq.n	800a69c <tcp_slowtmr+0x104>
       ((pcb->state == ESTABLISHED) ||
 800a696:	2b07      	cmp	r3, #7
 800a698:	f040 80cb 	bne.w	800a832 <tcp_slowtmr+0x29a>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a69c:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800a6a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6a4:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a6a6:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6aa:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a6ac:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6b0:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800a6b2:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6b6:	4291      	cmp	r1, r2
 800a6b8:	f240 80a9 	bls.w	800a80e <tcp_slowtmr+0x276>
        ++pcb_remove;
 800a6bc:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800a6c0:	2501      	movs	r5, #1
        ++pcb_remove;
 800a6c2:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 800a6c6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800a6c8:	b168      	cbz	r0, 800a6e6 <tcp_slowtmr+0x14e>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800a6ca:	6833      	ldr	r3, [r6, #0]
 800a6cc:	6a22      	ldr	r2, [r4, #32]
 800a6ce:	1a9a      	subs	r2, r3, r2
 800a6d0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800a6d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800a6d8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800a6dc:	d303      	bcc.n	800a6e6 <tcp_slowtmr+0x14e>
      tcp_segs_free(pcb->ooseq);
 800a6de:	f7ff feb5 	bl	800a44c <tcp_segs_free>
      pcb->ooseq = NULL;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 800a6e6:	7d23      	ldrb	r3, [r4, #20]
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	f040 80a4 	bne.w	800a836 <tcp_slowtmr+0x29e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a6ee:	6833      	ldr	r3, [r6, #0]
 800a6f0:	6a22      	ldr	r2, [r4, #32]
 800a6f2:	1a9b      	subs	r3, r3, r2
 800a6f4:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a6f6:	d803      	bhi.n	800a700 <tcp_slowtmr+0x168>
    if (pcb_remove) {
 800a6f8:	f1bb 0f00 	cmp.w	fp, #0
 800a6fc:	f000 80b0 	beq.w	800a860 <tcp_slowtmr+0x2c8>
      tcp_pcb_purge(pcb);
 800a700:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800a702:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 800a706:	f7ff ff27 	bl	800a558 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a70a:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
 800a70e:	2f00      	cmp	r7, #0
 800a710:	f000 8099 	beq.w	800a846 <tcp_slowtmr+0x2ae>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800a714:	42a3      	cmp	r3, r4
 800a716:	d106      	bne.n	800a726 <tcp_slowtmr+0x18e>
 800a718:	4643      	mov	r3, r8
 800a71a:	f240 4289 	movw	r2, #1161	; 0x489
 800a71e:	4963      	ldr	r1, [pc, #396]	; (800a8ac <tcp_slowtmr+0x314>)
 800a720:	4648      	mov	r0, r9
 800a722:	f006 ff87 	bl	8011634 <iprintf>
        prev->next = pcb->next;
 800a726:	68e3      	ldr	r3, [r4, #12]
 800a728:	60fb      	str	r3, [r7, #12]
      if (pcb_reset) {
 800a72a:	b14d      	cbz	r5, 800a740 <tcp_slowtmr+0x1a8>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a72c:	8b23      	ldrh	r3, [r4, #24]
 800a72e:	4622      	mov	r2, r4
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	8ae3      	ldrh	r3, [r4, #22]
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	1d23      	adds	r3, r4, #4
 800a738:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a73a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800a73c:	f002 fcc4 	bl	800d0c8 <tcp_rst>
      err_arg = pcb->callback_arg;
 800a740:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 800a742:	4621      	mov	r1, r4
 800a744:	2001      	movs	r0, #1
      pcb = pcb->next;
 800a746:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800a748:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800a74a:	f7ff f8a7 	bl	800989c <memp_free>
      tcp_active_pcbs_changed = 0;
 800a74e:	4c58      	ldr	r4, [pc, #352]	; (800a8b0 <tcp_slowtmr+0x318>)
 800a750:	2200      	movs	r2, #0
 800a752:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800a754:	f1bb 0f00 	cmp.w	fp, #0
 800a758:	f43f af65 	beq.w	800a626 <tcp_slowtmr+0x8e>
 800a75c:	9b03      	ldr	r3, [sp, #12]
 800a75e:	f06f 010c 	mvn.w	r1, #12
 800a762:	4618      	mov	r0, r3
 800a764:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 800a766:	7823      	ldrb	r3, [r4, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f43f af5c 	beq.w	800a626 <tcp_slowtmr+0x8e>
 800a76e:	e723      	b.n	800a5b8 <tcp_slowtmr+0x20>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800a770:	2a0b      	cmp	r2, #11
 800a772:	e762      	b.n	800a63a <tcp_slowtmr+0xa2>
          pcb->persist_cnt++;
 800a774:	3301      	adds	r3, #1
 800a776:	b2db      	uxtb	r3, r3
        if (pcb->persist_cnt >= backoff_cnt) {
 800a778:	4293      	cmp	r3, r2
          pcb->persist_cnt++;
 800a77a:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 800a77e:	f4ff af73 	bcc.w	800a668 <tcp_slowtmr+0xd0>
 800a782:	e76b      	b.n	800a65c <tcp_slowtmr+0xc4>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a784:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 800a788:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a78c:	2b06      	cmp	r3, #6
 800a78e:	f63f af6b 	bhi.w	800a668 <tcp_slowtmr+0xd0>
              pcb->persist_backoff++;
 800a792:	3301      	adds	r3, #1
 800a794:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800a798:	e766      	b.n	800a668 <tcp_slowtmr+0xd0>
        if (pcb->rtime >= 0) {
 800a79a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800a79e:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 800a7a0:	bfa4      	itt	ge
 800a7a2:	3301      	addge	r3, #1
 800a7a4:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800a7a6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f43f af5d 	beq.w	800a668 <tcp_slowtmr+0xd0>
 800a7ae:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 800a7b2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800a7b6:	4298      	cmp	r0, r3
 800a7b8:	f6ff af56 	blt.w	800a668 <tcp_slowtmr+0xd0>
          if (pcb->state != SYN_SENT) {
 800a7bc:	2902      	cmp	r1, #2
 800a7be:	d00a      	beq.n	800a7d6 <tcp_slowtmr+0x23e>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a7c0:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800a7c4:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800a7c8:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a7cc:	4939      	ldr	r1, [pc, #228]	; (800a8b4 <tcp_slowtmr+0x31c>)
 800a7ce:	5c8a      	ldrb	r2, [r1, r2]
 800a7d0:	4093      	lsls	r3, r2
 800a7d2:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 800a7d6:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a7d8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a7dc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          pcb->rtime = 0;
 800a7de:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a7e0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
          pcb->cwnd = pcb->mss;
 800a7e4:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	bf28      	it	cs
 800a7ec:	461a      	movcs	r2, r3
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a7ee:	004b      	lsls	r3, r1, #1
 800a7f0:	b29b      	uxth	r3, r3
          pcb->ssthresh = eff_wnd >> 1;
 800a7f2:	0850      	lsrs	r0, r2, #1
            pcb->ssthresh = (pcb->mss << 1);
 800a7f4:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800a7f8:	bf98      	it	ls
 800a7fa:	4603      	movls	r3, r0
          tcp_rexmit_rto(pcb);
 800a7fc:	4620      	mov	r0, r4
            pcb->ssthresh = (pcb->mss << 1);
 800a7fe:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 800a802:	f002 fcbb 	bl	800d17c <tcp_rexmit_rto>
 800a806:	e731      	b.n	800a66c <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800a808:	f04f 0b01 	mov.w	fp, #1
 800a80c:	e72e      	b.n	800a66c <tcp_slowtmr+0xd4>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800a80e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a812:	4a29      	ldr	r2, [pc, #164]	; (800a8b8 <tcp_slowtmr+0x320>)
 800a814:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 800a818:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800a81c:	4299      	cmp	r1, r3
 800a81e:	d908      	bls.n	800a832 <tcp_slowtmr+0x29a>
        err = tcp_keepalive(pcb);
 800a820:	4620      	mov	r0, r4
 800a822:	f002 fd14 	bl	800d24e <tcp_keepalive>
        if (err == ERR_OK) {
 800a826:	b920      	cbnz	r0, 800a832 <tcp_slowtmr+0x29a>
          pcb->keep_cnt_sent++;
 800a828:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 800a82c:	3301      	adds	r3, #1
 800a82e:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 800a832:	2500      	movs	r5, #0
 800a834:	e747      	b.n	800a6c6 <tcp_slowtmr+0x12e>
    if (pcb->state == LAST_ACK) {
 800a836:	2b09      	cmp	r3, #9
 800a838:	f47f af5e 	bne.w	800a6f8 <tcp_slowtmr+0x160>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a83c:	6833      	ldr	r3, [r6, #0]
 800a83e:	6a22      	ldr	r2, [r4, #32]
 800a840:	1a9b      	subs	r3, r3, r2
 800a842:	2bf0      	cmp	r3, #240	; 0xf0
 800a844:	e757      	b.n	800a6f6 <tcp_slowtmr+0x15e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800a846:	42a3      	cmp	r3, r4
 800a848:	d006      	beq.n	800a858 <tcp_slowtmr+0x2c0>
 800a84a:	4643      	mov	r3, r8
 800a84c:	f240 428d 	movw	r2, #1165	; 0x48d
 800a850:	491a      	ldr	r1, [pc, #104]	; (800a8bc <tcp_slowtmr+0x324>)
 800a852:	4648      	mov	r0, r9
 800a854:	f006 feee 	bl	8011634 <iprintf>
        tcp_active_pcbs = pcb->next;
 800a858:	68e3      	ldr	r3, [r4, #12]
 800a85a:	f8ca 3000 	str.w	r3, [sl]
 800a85e:	e764      	b.n	800a72a <tcp_slowtmr+0x192>
      ++prev->polltmr;
 800a860:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a862:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 800a864:	3301      	adds	r3, #1
      pcb = pcb->next;
 800a866:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800a868:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800a86a:	429a      	cmp	r2, r3
      ++prev->polltmr;
 800a86c:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800a86e:	d80a      	bhi.n	800a886 <tcp_slowtmr+0x2ee>
        tcp_active_pcbs_changed = 0;
 800a870:	4f0f      	ldr	r7, [pc, #60]	; (800a8b0 <tcp_slowtmr+0x318>)
        TCP_EVENT_POLL(prev, err);
 800a872:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800a876:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 800a87a:	f887 b000 	strb.w	fp, [r7]
        TCP_EVENT_POLL(prev, err);
 800a87e:	bb2b      	cbnz	r3, 800a8cc <tcp_slowtmr+0x334>
          tcp_output(prev);
 800a880:	4620      	mov	r0, r4
 800a882:	f002 fa9f 	bl	800cdc4 <tcp_output>
 800a886:	4627      	mov	r7, r4
 800a888:	e6cd      	b.n	800a626 <tcp_slowtmr+0x8e>
 800a88a:	bf00      	nop
 800a88c:	2000bd5c 	.word	0x2000bd5c
 800a890:	2000828a 	.word	0x2000828a
 800a894:	2000bd58 	.word	0x2000bd58
 800a898:	2000bd68 	.word	0x2000bd68
 800a89c:	08013ed4 	.word	0x08013ed4
 800a8a0:	08013efe 	.word	0x08013efe
 800a8a4:	08013f28 	.word	0x08013f28
 800a8a8:	080140d8 	.word	0x080140d8
 800a8ac:	08013f55 	.word	0x08013f55
 800a8b0:	2000bd54 	.word	0x2000bd54
 800a8b4:	080140b8 	.word	0x080140b8
 800a8b8:	000124f8 	.word	0x000124f8
 800a8bc:	08013f80 	.word	0x08013f80
 800a8c0:	08013d5c 	.word	0x08013d5c
 800a8c4:	08012feb 	.word	0x08012feb
 800a8c8:	08013faa 	.word	0x08013faa
        TCP_EVENT_POLL(prev, err);
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	6920      	ldr	r0, [r4, #16]
 800a8d0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800a8d2:	783b      	ldrb	r3, [r7, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f47f ae6f 	bne.w	800a5b8 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	d1d3      	bne.n	800a886 <tcp_slowtmr+0x2ee>
 800a8de:	e7cf      	b.n	800a880 <tcp_slowtmr+0x2e8>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a8e0:	7d2b      	ldrb	r3, [r5, #20]
 800a8e2:	2b0a      	cmp	r3, #10
 800a8e4:	d006      	beq.n	800a8f4 <tcp_slowtmr+0x35c>
 800a8e6:	4643      	mov	r3, r8
 800a8e8:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800a8ec:	4651      	mov	r1, sl
 800a8ee:	4648      	mov	r0, r9
 800a8f0:	f006 fea0 	bl	8011634 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800a8f4:	6833      	ldr	r3, [r6, #0]
 800a8f6:	6a2a      	ldr	r2, [r5, #32]
 800a8f8:	1a9b      	subs	r3, r3, r2
 800a8fa:	2bf0      	cmp	r3, #240	; 0xf0
 800a8fc:	d802      	bhi.n	800a904 <tcp_slowtmr+0x36c>
      pcb = pcb->next;
 800a8fe:	462c      	mov	r4, r5
 800a900:	68ed      	ldr	r5, [r5, #12]
 800a902:	e667      	b.n	800a5d4 <tcp_slowtmr+0x3c>
      tcp_pcb_purge(pcb);
 800a904:	4628      	mov	r0, r5
 800a906:	f7ff fe27 	bl	800a558 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a90a:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 800a90c:	b194      	cbz	r4, 800a934 <tcp_slowtmr+0x39c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800a90e:	42ab      	cmp	r3, r5
 800a910:	d106      	bne.n	800a920 <tcp_slowtmr+0x388>
 800a912:	4643      	mov	r3, r8
 800a914:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800a918:	490c      	ldr	r1, [pc, #48]	; (800a94c <tcp_slowtmr+0x3b4>)
 800a91a:	4648      	mov	r0, r9
 800a91c:	f006 fe8a 	bl	8011634 <iprintf>
        prev->next = pcb->next;
 800a920:	68eb      	ldr	r3, [r5, #12]
 800a922:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 800a924:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 800a928:	4629      	mov	r1, r5
 800a92a:	2001      	movs	r0, #1
      pcb = pcb->next;
 800a92c:	465d      	mov	r5, fp
      memp_free(MEMP_TCP_PCB, pcb2);
 800a92e:	f7fe ffb5 	bl	800989c <memp_free>
 800a932:	e64f      	b.n	800a5d4 <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800a934:	42ab      	cmp	r3, r5
 800a936:	d006      	beq.n	800a946 <tcp_slowtmr+0x3ae>
 800a938:	4643      	mov	r3, r8
 800a93a:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800a93e:	4904      	ldr	r1, [pc, #16]	; (800a950 <tcp_slowtmr+0x3b8>)
 800a940:	4648      	mov	r0, r9
 800a942:	f006 fe77 	bl	8011634 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800a946:	68eb      	ldr	r3, [r5, #12]
 800a948:	603b      	str	r3, [r7, #0]
 800a94a:	e7eb      	b.n	800a924 <tcp_slowtmr+0x38c>
 800a94c:	08013fd9 	.word	0x08013fd9
 800a950:	08014000 	.word	0x08014000

0800a954 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 800a954:	6803      	ldr	r3, [r0, #0]
 800a956:	428b      	cmp	r3, r1
{
 800a958:	b510      	push	{r4, lr}
 800a95a:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 800a95c:	d11f      	bne.n	800a99e <tcp_pcb_remove+0x4a>
 800a95e:	68cb      	ldr	r3, [r1, #12]
 800a960:	6003      	str	r3, [r0, #0]
 800a962:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 800a964:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 800a966:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 800a968:	f7ff fdf6 	bl	800a558 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800a96c:	7d23      	ldrb	r3, [r4, #20]
 800a96e:	2b0a      	cmp	r3, #10
 800a970:	d11d      	bne.n	800a9ae <tcp_pcb_remove+0x5a>
    pcb->flags |= TF_ACK_NOW;
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a972:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a974:	bb6b      	cbnz	r3, 800a9d2 <tcp_pcb_remove+0x7e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a976:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a978:	b133      	cbz	r3, 800a988 <tcp_pcb_remove+0x34>
 800a97a:	4b1a      	ldr	r3, [pc, #104]	; (800a9e4 <tcp_pcb_remove+0x90>)
 800a97c:	f240 7254 	movw	r2, #1876	; 0x754
 800a980:	4919      	ldr	r1, [pc, #100]	; (800a9e8 <tcp_pcb_remove+0x94>)
 800a982:	481a      	ldr	r0, [pc, #104]	; (800a9ec <tcp_pcb_remove+0x98>)
 800a984:	f006 fe56 	bl	8011634 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a988:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a98a:	b1f3      	cbz	r3, 800a9ca <tcp_pcb_remove+0x76>
 800a98c:	4b15      	ldr	r3, [pc, #84]	; (800a9e4 <tcp_pcb_remove+0x90>)
 800a98e:	f240 7256 	movw	r2, #1878	; 0x756
 800a992:	4917      	ldr	r1, [pc, #92]	; (800a9f0 <tcp_pcb_remove+0x9c>)
 800a994:	4815      	ldr	r0, [pc, #84]	; (800a9ec <tcp_pcb_remove+0x98>)
 800a996:	f006 fe4d 	bl	8011634 <iprintf>
 800a99a:	e016      	b.n	800a9ca <tcp_pcb_remove+0x76>
 800a99c:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0df      	beq.n	800a962 <tcp_pcb_remove+0xe>
 800a9a2:	68da      	ldr	r2, [r3, #12]
 800a9a4:	42a2      	cmp	r2, r4
 800a9a6:	d1f9      	bne.n	800a99c <tcp_pcb_remove+0x48>
 800a9a8:	68e2      	ldr	r2, [r4, #12]
 800a9aa:	60da      	str	r2, [r3, #12]
 800a9ac:	e7d9      	b.n	800a962 <tcp_pcb_remove+0xe>
  if (pcb->state != TIME_WAIT &&
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d00b      	beq.n	800a9ca <tcp_pcb_remove+0x76>
     pcb->flags & TF_ACK_DELAY) {
 800a9b2:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 800a9b4:	07da      	lsls	r2, r3, #31
 800a9b6:	d5dc      	bpl.n	800a972 <tcp_pcb_remove+0x1e>
    pcb->flags |= TF_ACK_NOW;
 800a9b8:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800a9bc:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 800a9be:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800a9c0:	f002 fa00 	bl	800cdc4 <tcp_output>
  if (pcb->state != LISTEN) {
 800a9c4:	7d23      	ldrb	r3, [r4, #20]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d1d3      	bne.n	800a972 <tcp_pcb_remove+0x1e>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a9ce:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a9d0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a9d2:	4b04      	ldr	r3, [pc, #16]	; (800a9e4 <tcp_pcb_remove+0x90>)
 800a9d4:	f240 7253 	movw	r2, #1875	; 0x753
 800a9d8:	4906      	ldr	r1, [pc, #24]	; (800a9f4 <tcp_pcb_remove+0xa0>)
 800a9da:	4804      	ldr	r0, [pc, #16]	; (800a9ec <tcp_pcb_remove+0x98>)
 800a9dc:	f006 fe2a 	bl	8011634 <iprintf>
 800a9e0:	e7c9      	b.n	800a976 <tcp_pcb_remove+0x22>
 800a9e2:	bf00      	nop
 800a9e4:	08013d5c 	.word	0x08013d5c
 800a9e8:	0801403e 	.word	0x0801403e
 800a9ec:	08012feb 	.word	0x08012feb
 800a9f0:	08014057 	.word	0x08014057
 800a9f4:	08014026 	.word	0x08014026

0800a9f8 <tcp_close_shutdown>:
{
 800a9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	7d03      	ldrb	r3, [r0, #20]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a9fe:	2900      	cmp	r1, #0
 800aa00:	d049      	beq.n	800aa96 <tcp_close_shutdown+0x9e>
 800aa02:	2b04      	cmp	r3, #4
 800aa04:	d001      	beq.n	800aa0a <tcp_close_shutdown+0x12>
 800aa06:	2b07      	cmp	r3, #7
 800aa08:	d145      	bne.n	800aa96 <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800aa0a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800aa0c:	b91a      	cbnz	r2, 800aa16 <tcp_close_shutdown+0x1e>
 800aa0e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800aa10:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 800aa14:	d03f      	beq.n	800aa96 <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800aa16:	7ea3      	ldrb	r3, [r4, #26]
 800aa18:	06db      	lsls	r3, r3, #27
 800aa1a:	d406      	bmi.n	800aa2a <tcp_close_shutdown+0x32>
 800aa1c:	4b3f      	ldr	r3, [pc, #252]	; (800ab1c <tcp_close_shutdown+0x124>)
 800aa1e:	f240 120f 	movw	r2, #271	; 0x10f
 800aa22:	493f      	ldr	r1, [pc, #252]	; (800ab20 <tcp_close_shutdown+0x128>)
 800aa24:	483f      	ldr	r0, [pc, #252]	; (800ab24 <tcp_close_shutdown+0x12c>)
 800aa26:	f006 fe05 	bl	8011634 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800aa2a:	8b23      	ldrh	r3, [r4, #24]
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	8ae3      	ldrh	r3, [r4, #22]
 800aa34:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	1d23      	adds	r3, r4, #4
 800aa3a:	f002 fb45 	bl	800d0c8 <tcp_rst>
      tcp_pcb_purge(pcb);
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f7ff fd8a 	bl	800a558 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800aa44:	4a38      	ldr	r2, [pc, #224]	; (800ab28 <tcp_close_shutdown+0x130>)
 800aa46:	6813      	ldr	r3, [r2, #0]
 800aa48:	42a3      	cmp	r3, r4
 800aa4a:	d115      	bne.n	800aa78 <tcp_close_shutdown+0x80>
 800aa4c:	68e3      	ldr	r3, [r4, #12]
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	2300      	movs	r3, #0
 800aa52:	2201      	movs	r2, #1
 800aa54:	60e3      	str	r3, [r4, #12]
 800aa56:	4b35      	ldr	r3, [pc, #212]	; (800ab2c <tcp_close_shutdown+0x134>)
 800aa58:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800aa5a:	7d23      	ldrb	r3, [r4, #20]
 800aa5c:	2b04      	cmp	r3, #4
 800aa5e:	d113      	bne.n	800aa88 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 800aa60:	230a      	movs	r3, #10
 800aa62:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aa64:	4b32      	ldr	r3, [pc, #200]	; (800ab30 <tcp_close_shutdown+0x138>)
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	601c      	str	r4, [r3, #0]
 800aa6a:	60e2      	str	r2, [r4, #12]
 800aa6c:	f002 fcce 	bl	800d40c <tcp_timer_needed>
}
 800aa70:	2000      	movs	r0, #0
 800aa72:	b003      	add	sp, #12
 800aa74:	bd30      	pop	{r4, r5, pc}
 800aa76:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d0e9      	beq.n	800aa50 <tcp_close_shutdown+0x58>
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	42a2      	cmp	r2, r4
 800aa80:	d1f9      	bne.n	800aa76 <tcp_close_shutdown+0x7e>
 800aa82:	68e2      	ldr	r2, [r4, #12]
 800aa84:	60da      	str	r2, [r3, #12]
 800aa86:	e7e3      	b.n	800aa50 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 800aa88:	4b2a      	ldr	r3, [pc, #168]	; (800ab34 <tcp_close_shutdown+0x13c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	42a3      	cmp	r3, r4
 800aa8e:	d112      	bne.n	800aab6 <tcp_close_shutdown+0xbe>
          tcp_trigger_input_pcb_close();
 800aa90:	f001 fd32 	bl	800c4f8 <tcp_trigger_input_pcb_close>
 800aa94:	e7ec      	b.n	800aa70 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 800aa96:	2b01      	cmp	r3, #1
 800aa98:	d01b      	beq.n	800aad2 <tcp_close_shutdown+0xda>
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d02f      	beq.n	800aafe <tcp_close_shutdown+0x106>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d136      	bne.n	800ab10 <tcp_close_shutdown+0x118>
    if (pcb->local_port != 0) {
 800aaa2:	8ae3      	ldrh	r3, [r4, #22]
 800aaa4:	b13b      	cbz	r3, 800aab6 <tcp_close_shutdown+0xbe>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800aaa6:	4a24      	ldr	r2, [pc, #144]	; (800ab38 <tcp_close_shutdown+0x140>)
 800aaa8:	6813      	ldr	r3, [r2, #0]
 800aaaa:	42a3      	cmp	r3, r4
 800aaac:	d109      	bne.n	800aac2 <tcp_close_shutdown+0xca>
 800aaae:	68e3      	ldr	r3, [r4, #12]
 800aab0:	6013      	str	r3, [r2, #0]
 800aab2:	2300      	movs	r3, #0
 800aab4:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 800aab6:	4621      	mov	r1, r4
 800aab8:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 800aaba:	f7fe feef 	bl	800989c <memp_free>
    break;
 800aabe:	e7d7      	b.n	800aa70 <tcp_close_shutdown+0x78>
 800aac0:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d0f5      	beq.n	800aab2 <tcp_close_shutdown+0xba>
 800aac6:	68da      	ldr	r2, [r3, #12]
 800aac8:	42a2      	cmp	r2, r4
 800aaca:	d1f9      	bne.n	800aac0 <tcp_close_shutdown+0xc8>
 800aacc:	68e2      	ldr	r2, [r4, #12]
 800aace:	60da      	str	r2, [r3, #12]
 800aad0:	e7ef      	b.n	800aab2 <tcp_close_shutdown+0xba>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800aad2:	491a      	ldr	r1, [pc, #104]	; (800ab3c <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 800aad4:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800aad6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800aada:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aadc:	b94a      	cbnz	r2, 800aaf2 <tcp_close_shutdown+0xfa>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800aade:	3301      	adds	r3, #1
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d1f8      	bne.n	800aad6 <tcp_close_shutdown+0xde>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800aae4:	4621      	mov	r1, r4
 800aae6:	4816      	ldr	r0, [pc, #88]	; (800ab40 <tcp_close_shutdown+0x148>)
 800aae8:	f7ff ff34 	bl	800a954 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800aaec:	4621      	mov	r1, r4
 800aaee:	2002      	movs	r0, #2
 800aaf0:	e7e3      	b.n	800aaba <tcp_close_shutdown+0xc2>
      if (pcb->listener == lpcb) {
 800aaf2:	6f95      	ldr	r5, [r2, #120]	; 0x78
 800aaf4:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 800aaf6:	bf08      	it	eq
 800aaf8:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800aafa:	68d2      	ldr	r2, [r2, #12]
 800aafc:	e7ee      	b.n	800aadc <tcp_close_shutdown+0xe4>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800aafe:	4621      	mov	r1, r4
 800ab00:	4809      	ldr	r0, [pc, #36]	; (800ab28 <tcp_close_shutdown+0x130>)
 800ab02:	f7ff ff27 	bl	800a954 <tcp_pcb_remove>
 800ab06:	2001      	movs	r0, #1
 800ab08:	4b08      	ldr	r3, [pc, #32]	; (800ab2c <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 800ab0a:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800ab0c:	7018      	strb	r0, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800ab0e:	e7d4      	b.n	800aaba <tcp_close_shutdown+0xc2>
    return tcp_close_shutdown_fin(pcb);
 800ab10:	4620      	mov	r0, r4
}
 800ab12:	b003      	add	sp, #12
 800ab14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 800ab18:	f7ff bb4c 	b.w	800a1b4 <tcp_close_shutdown_fin>
 800ab1c:	08013d5c 	.word	0x08013d5c
 800ab20:	0801406e 	.word	0x0801406e
 800ab24:	08012feb 	.word	0x08012feb
 800ab28:	2000bd58 	.word	0x2000bd58
 800ab2c:	2000bd54 	.word	0x2000bd54
 800ab30:	2000bd68 	.word	0x2000bd68
 800ab34:	2000bd6c 	.word	0x2000bd6c
 800ab38:	2000bd64 	.word	0x2000bd64
 800ab3c:	080140c8 	.word	0x080140c8
 800ab40:	2000bd60 	.word	0x2000bd60

0800ab44 <tcp_close>:
  if (pcb->state != LISTEN) {
 800ab44:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 800ab46:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 800ab48:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 800ab4a:	bf1e      	ittt	ne
 800ab4c:	7e83      	ldrbne	r3, [r0, #26]
 800ab4e:	f043 0310 	orrne.w	r3, r3, #16
 800ab52:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 800ab54:	f7ff bf50 	b.w	800a9f8 <tcp_close_shutdown>

0800ab58 <tcp_recv_null>:
{
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	4608      	mov	r0, r1
  if (p != NULL) {
 800ab5c:	4614      	mov	r4, r2
 800ab5e:	b13a      	cbz	r2, 800ab70 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 800ab60:	8911      	ldrh	r1, [r2, #8]
 800ab62:	f7ff fc27 	bl	800a3b4 <tcp_recved>
    pbuf_free(p);
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7ff f81c 	bl	8009ba4 <pbuf_free>
}
 800ab6c:	2000      	movs	r0, #0
 800ab6e:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1fb      	bne.n	800ab6c <tcp_recv_null+0x14>
}
 800ab74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 800ab78:	f7ff bfe4 	b.w	800ab44 <tcp_close>

0800ab7c <tcp_process_refused_data>:
{
 800ab7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 800ab7e:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 800ab80:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ab82:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 800ab86:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800ab88:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800ab8a:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ab8c:	b1dd      	cbz	r5, 800abc6 <tcp_process_refused_data+0x4a>
 800ab8e:	4601      	mov	r1, r0
 800ab90:	4632      	mov	r2, r6
 800ab92:	6900      	ldr	r0, [r0, #16]
 800ab94:	47a8      	blx	r5
 800ab96:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800ab98:	b9e0      	cbnz	r0, 800abd4 <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ab9a:	06bb      	lsls	r3, r7, #26
 800ab9c:	d511      	bpl.n	800abc2 <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ab9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800aba0:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aba4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 800aba8:	bf1c      	itt	ne
 800abaa:	3301      	addne	r3, #1
 800abac:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800abae:	b146      	cbz	r6, 800abc2 <tcp_process_refused_data+0x46>
 800abb0:	2300      	movs	r3, #0
 800abb2:	4621      	mov	r1, r4
 800abb4:	6920      	ldr	r0, [r4, #16]
 800abb6:	461a      	mov	r2, r3
 800abb8:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 800abba:	300d      	adds	r0, #13
 800abbc:	d101      	bne.n	800abc2 <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 800abbe:	f06f 050c 	mvn.w	r5, #12
}
 800abc2:	4628      	mov	r0, r5
 800abc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800abc6:	4601      	mov	r1, r0
 800abc8:	462b      	mov	r3, r5
 800abca:	4632      	mov	r2, r6
 800abcc:	4628      	mov	r0, r5
 800abce:	f7ff ffc3 	bl	800ab58 <tcp_recv_null>
 800abd2:	e7e0      	b.n	800ab96 <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 800abd4:	350d      	adds	r5, #13
 800abd6:	d0f2      	beq.n	800abbe <tcp_process_refused_data+0x42>
      return ERR_INPROGRESS;
 800abd8:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 800abdc:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 800abde:	e7f0      	b.n	800abc2 <tcp_process_refused_data+0x46>

0800abe0 <tcp_fasttmr>:
{
 800abe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800abe4:	4d1b      	ldr	r5, [pc, #108]	; (800ac54 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 800abe6:	4f1c      	ldr	r7, [pc, #112]	; (800ac58 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 800abe8:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 800abea:	4e1c      	ldr	r6, [pc, #112]	; (800ac5c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 800abec:	3301      	adds	r3, #1
 800abee:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800abf0:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800abf2:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 800abf6:	b90c      	cbnz	r4, 800abfc <tcp_fasttmr+0x1c>
}
 800abf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 800abfc:	782b      	ldrb	r3, [r5, #0]
 800abfe:	7f62      	ldrb	r2, [r4, #29]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d024      	beq.n	800ac4e <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 800ac04:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 800ac06:	7ea3      	ldrb	r3, [r4, #26]
 800ac08:	07d9      	lsls	r1, r3, #31
 800ac0a:	d509      	bpl.n	800ac20 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 800ac0c:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800ac10:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800ac12:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 800ac14:	f002 f8d6 	bl	800cdc4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ac18:	7ea3      	ldrb	r3, [r4, #26]
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800ac20:	7ea3      	ldrb	r3, [r4, #26]
 800ac22:	071a      	lsls	r2, r3, #28
 800ac24:	d505      	bpl.n	800ac32 <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 800ac26:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800ac2a:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 800ac2c:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800ac2e:	f7ff fac1 	bl	800a1b4 <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800ac32:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 800ac34:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800ac38:	b13b      	cbz	r3, 800ac4a <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800ac3a:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 800ac3c:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800ac40:	f7ff ff9c 	bl	800ab7c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ac44:	7833      	ldrb	r3, [r6, #0]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1d2      	bne.n	800abf0 <tcp_fasttmr+0x10>
{
 800ac4a:	464c      	mov	r4, r9
 800ac4c:	e7d3      	b.n	800abf6 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800ac4e:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800ac52:	e7fa      	b.n	800ac4a <tcp_fasttmr+0x6a>
 800ac54:	2000828a 	.word	0x2000828a
 800ac58:	2000bd58 	.word	0x2000bd58
 800ac5c:	2000bd54 	.word	0x2000bd54

0800ac60 <tcp_tmr>:
{
 800ac60:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800ac62:	f7ff ffbd 	bl	800abe0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800ac66:	4a06      	ldr	r2, [pc, #24]	; (800ac80 <tcp_tmr+0x20>)
 800ac68:	7813      	ldrb	r3, [r2, #0]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	7013      	strb	r3, [r2, #0]
 800ac70:	07db      	lsls	r3, r3, #31
 800ac72:	d503      	bpl.n	800ac7c <tcp_tmr+0x1c>
}
 800ac74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800ac78:	f7ff bc8e 	b.w	800a598 <tcp_slowtmr>
}
 800ac7c:	bd08      	pop	{r3, pc}
 800ac7e:	bf00      	nop
 800ac80:	20008289 	.word	0x20008289

0800ac84 <tcp_shutdown>:
{
 800ac84:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state == LISTEN) {
 800ac86:	7d03      	ldrb	r3, [r0, #20]
{
 800ac88:	4605      	mov	r5, r0
 800ac8a:	4614      	mov	r4, r2
  if (pcb->state == LISTEN) {
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d018      	beq.n	800acc2 <tcp_shutdown+0x3e>
  if (shut_rx) {
 800ac90:	b189      	cbz	r1, 800acb6 <tcp_shutdown+0x32>
    pcb->flags |= TF_RXCLOSED;
 800ac92:	7e83      	ldrb	r3, [r0, #26]
 800ac94:	f043 0310 	orr.w	r3, r3, #16
 800ac98:	7683      	strb	r3, [r0, #26]
    if (shut_tx) {
 800ac9a:	b122      	cbz	r2, 800aca6 <tcp_shutdown+0x22>
      return tcp_close_shutdown(pcb, 1);
 800ac9c:	2101      	movs	r1, #1
}
 800ac9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800aca2:	f7ff bea9 	b.w	800a9f8 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 800aca6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800aca8:	b908      	cbnz	r0, 800acae <tcp_shutdown+0x2a>
  return ERR_OK;
 800acaa:	2000      	movs	r0, #0
}
 800acac:	bd38      	pop	{r3, r4, r5, pc}
      pbuf_free(pcb->refused_data);
 800acae:	f7fe ff79 	bl	8009ba4 <pbuf_free>
      pcb->refused_data = NULL;
 800acb2:	676c      	str	r4, [r5, #116]	; 0x74
 800acb4:	e7f9      	b.n	800acaa <tcp_shutdown+0x26>
  if (shut_tx) {
 800acb6:	2a00      	cmp	r2, #0
 800acb8:	d0f7      	beq.n	800acaa <tcp_shutdown+0x26>
    switch (pcb->state) {
 800acba:	2b04      	cmp	r3, #4
 800acbc:	d804      	bhi.n	800acc8 <tcp_shutdown+0x44>
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d804      	bhi.n	800accc <tcp_shutdown+0x48>
 800acc2:	f06f 000a 	mvn.w	r0, #10
 800acc6:	e7f1      	b.n	800acac <tcp_shutdown+0x28>
 800acc8:	2b07      	cmp	r3, #7
 800acca:	d1fa      	bne.n	800acc2 <tcp_shutdown+0x3e>
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800accc:	2100      	movs	r1, #0
 800acce:	4628      	mov	r0, r5
 800acd0:	e7e5      	b.n	800ac9e <tcp_shutdown+0x1a>
	...

0800acd4 <tcp_abandon>:
{
 800acd4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800acd8:	7d03      	ldrb	r3, [r0, #20]
{
 800acda:	4604      	mov	r4, r0
 800acdc:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d106      	bne.n	800acf0 <tcp_abandon+0x1c>
 800ace2:	4b30      	ldr	r3, [pc, #192]	; (800ada4 <tcp_abandon+0xd0>)
 800ace4:	f240 12df 	movw	r2, #479	; 0x1df
 800ace8:	492f      	ldr	r1, [pc, #188]	; (800ada8 <tcp_abandon+0xd4>)
 800acea:	4830      	ldr	r0, [pc, #192]	; (800adac <tcp_abandon+0xd8>)
 800acec:	f006 fca2 	bl	8011634 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800acf0:	7d23      	ldrb	r3, [r4, #20]
 800acf2:	2b0a      	cmp	r3, #10
 800acf4:	d10a      	bne.n	800ad0c <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800acf6:	4621      	mov	r1, r4
 800acf8:	482d      	ldr	r0, [pc, #180]	; (800adb0 <tcp_abandon+0xdc>)
 800acfa:	f7ff fe2b 	bl	800a954 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800acfe:	4621      	mov	r1, r4
 800ad00:	2001      	movs	r0, #1
}
 800ad02:	b002      	add	sp, #8
 800ad04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 800ad08:	f7fe bdc8 	b.w	800989c <memp_free>
    seqno = pcb->snd_nxt;
 800ad0c:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 800ad10:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800ad14:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 800ad18:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (pcb->state == CLOSED) {
 800ad1c:	8ae5      	ldrh	r5, [r4, #22]
 800ad1e:	b99b      	cbnz	r3, 800ad48 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 800ad20:	b13d      	cbz	r5, 800ad32 <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ad22:	4a24      	ldr	r2, [pc, #144]	; (800adb4 <tcp_abandon+0xe0>)
 800ad24:	6813      	ldr	r3, [r2, #0]
 800ad26:	42a3      	cmp	r3, r4
 800ad28:	d106      	bne.n	800ad38 <tcp_abandon+0x64>
 800ad2a:	68e3      	ldr	r3, [r4, #12]
 800ad2c:	6013      	str	r3, [r2, #0]
 800ad2e:	2500      	movs	r5, #0
 800ad30:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800ad32:	462e      	mov	r6, r5
 800ad34:	e00f      	b.n	800ad56 <tcp_abandon+0x82>
 800ad36:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d0f8      	beq.n	800ad2e <tcp_abandon+0x5a>
 800ad3c:	68da      	ldr	r2, [r3, #12]
 800ad3e:	42a2      	cmp	r2, r4
 800ad40:	d1f9      	bne.n	800ad36 <tcp_abandon+0x62>
 800ad42:	68e2      	ldr	r2, [r4, #12]
 800ad44:	60da      	str	r2, [r3, #12]
 800ad46:	e7f2      	b.n	800ad2e <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ad48:	4621      	mov	r1, r4
 800ad4a:	481b      	ldr	r0, [pc, #108]	; (800adb8 <tcp_abandon+0xe4>)
 800ad4c:	f7ff fe02 	bl	800a954 <tcp_pcb_remove>
 800ad50:	4b1a      	ldr	r3, [pc, #104]	; (800adbc <tcp_abandon+0xe8>)
 800ad52:	2201      	movs	r2, #1
 800ad54:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800ad56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800ad58:	b108      	cbz	r0, 800ad5e <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 800ad5a:	f7ff fb77 	bl	800a44c <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800ad5e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800ad60:	b108      	cbz	r0, 800ad66 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 800ad62:	f7ff fb73 	bl	800a44c <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800ad66:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800ad68:	b108      	cbz	r0, 800ad6e <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 800ad6a:	f7ff fb6f 	bl	800a44c <tcp_segs_free>
    if (send_rst) {
 800ad6e:	b146      	cbz	r6, 800ad82 <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ad70:	8b23      	ldrh	r3, [r4, #24]
 800ad72:	4622      	mov	r2, r4
 800ad74:	4651      	mov	r1, sl
 800ad76:	4648      	mov	r0, r9
 800ad78:	e9cd 5300 	strd	r5, r3, [sp]
 800ad7c:	1d23      	adds	r3, r4, #4
 800ad7e:	f002 f9a3 	bl	800d0c8 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 800ad82:	4621      	mov	r1, r4
 800ad84:	2001      	movs	r0, #1
 800ad86:	f7fe fd89 	bl	800989c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ad8a:	b13f      	cbz	r7, 800ad9c <tcp_abandon+0xc8>
 800ad8c:	f06f 010c 	mvn.w	r1, #12
 800ad90:	4640      	mov	r0, r8
 800ad92:	463b      	mov	r3, r7
}
 800ad94:	b002      	add	sp, #8
 800ad96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ad9a:	4718      	bx	r3
}
 800ad9c:	b002      	add	sp, #8
 800ad9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada2:	bf00      	nop
 800ada4:	08013d5c 	.word	0x08013d5c
 800ada8:	08014087 	.word	0x08014087
 800adac:	08012feb 	.word	0x08012feb
 800adb0:	2000bd68 	.word	0x2000bd68
 800adb4:	2000bd64 	.word	0x2000bd64
 800adb8:	2000bd58 	.word	0x2000bd58
 800adbc:	2000bd54 	.word	0x2000bd54

0800adc0 <tcp_abort>:
  tcp_abandon(pcb, 1);
 800adc0:	2101      	movs	r1, #1
 800adc2:	f7ff bf87 	b.w	800acd4 <tcp_abandon>

0800adc6 <tcp_accept_null>:
  tcp_abort(pcb);
 800adc6:	4608      	mov	r0, r1
{
 800adc8:	b508      	push	{r3, lr}
  tcp_abort(pcb);
 800adca:	f7ff fff9 	bl	800adc0 <tcp_abort>
}
 800adce:	f06f 000c 	mvn.w	r0, #12
 800add2:	bd08      	pop	{r3, pc}

0800add4 <tcp_netif_ip_addr_changed_pcblist.isra.0>:
}
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
{
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 800adda:	b900      	cbnz	r0, 800adde <tcp_netif_ip_addr_changed_pcblist.isra.0+0xa>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 800addc:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800adde:	6802      	ldr	r2, [r0, #0]
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	68c5      	ldr	r5, [r0, #12]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d101      	bne.n	800adec <tcp_netif_ip_addr_changed_pcblist.isra.0+0x18>
      tcp_abort(pcb);
 800ade8:	f7ff ffea 	bl	800adc0 <tcp_abort>
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
 800adec:	4628      	mov	r0, r5
 800adee:	e7f4      	b.n	800adda <tcp_netif_ip_addr_changed_pcblist.isra.0+0x6>

0800adf0 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800adf0:	4b0c      	ldr	r3, [pc, #48]	; (800ae24 <tcp_kill_state+0x34>)
  inactivity = 0;
 800adf2:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800adf4:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800adf6:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <tcp_kill_state+0x38>)
{
 800adf8:	b430      	push	{r4, r5}
 800adfa:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800adfc:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 800adfe:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae00:	b919      	cbnz	r1, 800ae0a <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 800ae02:	b168      	cbz	r0, 800ae20 <tcp_kill_state+0x30>
}
 800ae04:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800ae06:	f7ff bf65 	b.w	800acd4 <tcp_abandon>
    if (pcb->state == state) {
 800ae0a:	7d0b      	ldrb	r3, [r1, #20]
 800ae0c:	42a3      	cmp	r3, r4
 800ae0e:	d105      	bne.n	800ae1c <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ae10:	6a0b      	ldr	r3, [r1, #32]
 800ae12:	1aeb      	subs	r3, r5, r3
 800ae14:	4293      	cmp	r3, r2
 800ae16:	bf24      	itt	cs
 800ae18:	461a      	movcs	r2, r3
 800ae1a:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae1c:	68c9      	ldr	r1, [r1, #12]
 800ae1e:	e7ef      	b.n	800ae00 <tcp_kill_state+0x10>
}
 800ae20:	bc30      	pop	{r4, r5}
 800ae22:	4770      	bx	lr
 800ae24:	2000bd58 	.word	0x2000bd58
 800ae28:	2000bd5c 	.word	0x2000bd5c

0800ae2c <tcp_alloc>:
{
 800ae2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2e:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae30:	2001      	movs	r0, #1
 800ae32:	f7fe fd17 	bl	8009864 <memp_malloc>
  if (pcb == NULL) {
 800ae36:	4d37      	ldr	r5, [pc, #220]	; (800af14 <tcp_alloc+0xe8>)
 800ae38:	4603      	mov	r3, r0
 800ae3a:	bb90      	cbnz	r0, 800aea2 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae3c:	4a36      	ldr	r2, [pc, #216]	; (800af18 <tcp_alloc+0xec>)
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ae3e:	682e      	ldr	r6, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae40:	6812      	ldr	r2, [r2, #0]
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d151      	bne.n	800aeea <tcp_alloc+0xbe>
  if (inactive != NULL) {
 800ae46:	b113      	cbz	r3, 800ae4e <tcp_alloc+0x22>
    tcp_abort(inactive);
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff ffb9 	bl	800adc0 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae4e:	2001      	movs	r0, #1
 800ae50:	f7fe fd08 	bl	8009864 <memp_malloc>
    if (pcb == NULL) {
 800ae54:	4603      	mov	r3, r0
 800ae56:	bb20      	cbnz	r0, 800aea2 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 800ae58:	2009      	movs	r0, #9
 800ae5a:	f7ff ffc9 	bl	800adf0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae5e:	2001      	movs	r0, #1
 800ae60:	f7fe fd00 	bl	8009864 <memp_malloc>
      if (pcb == NULL) {
 800ae64:	4603      	mov	r3, r0
 800ae66:	b9e0      	cbnz	r0, 800aea2 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 800ae68:	2008      	movs	r0, #8
 800ae6a:	f7ff ffc1 	bl	800adf0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae6e:	2001      	movs	r0, #1
 800ae70:	f7fe fcf8 	bl	8009864 <memp_malloc>
        if (pcb == NULL) {
 800ae74:	4603      	mov	r3, r0
 800ae76:	b9a0      	cbnz	r0, 800aea2 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ae78:	f014 0f80 	tst.w	r4, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae7c:	4a27      	ldr	r2, [pc, #156]	; (800af1c <tcp_alloc+0xf0>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ae7e:	f8d5 c000 	ldr.w	ip, [r5]
  inactivity = 0;
 800ae82:	461e      	mov	r6, r3
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ae84:	bf0c      	ite	eq
 800ae86:	4620      	moveq	r0, r4
 800ae88:	207f      	movne	r0, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ae8a:	6812      	ldr	r2, [r2, #0]
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	d134      	bne.n	800aefa <tcp_alloc+0xce>
  if (inactive != NULL) {
 800ae90:	b113      	cbz	r3, 800ae98 <tcp_alloc+0x6c>
    tcp_abort(inactive);
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff ff94 	bl	800adc0 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ae98:	2001      	movs	r0, #1
 800ae9a:	f7fe fce3 	bl	8009864 <memp_malloc>
  if (pcb != NULL) {
 800ae9e:	4603      	mov	r3, r0
 800aea0:	b308      	cbz	r0, 800aee6 <tcp_alloc+0xba>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800aea2:	2298      	movs	r2, #152	; 0x98
 800aea4:	4618      	mov	r0, r3
 800aea6:	2100      	movs	r1, #0
 800aea8:	f006 fb12 	bl	80114d0 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 800aeac:	f44f 6286 	mov.w	r2, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800aeb0:	4603      	mov	r3, r0
    pcb->prio = prio;
 800aeb2:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800aeb4:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800aeb8:	4a19      	ldr	r2, [pc, #100]	; (800af20 <tcp_alloc+0xf4>)
 800aeba:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800aebc:	22ff      	movs	r2, #255	; 0xff
 800aebe:	7282      	strb	r2, [r0, #10]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800aec0:	2206      	movs	r2, #6
 800aec2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800aec6:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 800aec8:	4a16      	ldr	r2, [pc, #88]	; (800af24 <tcp_alloc+0xf8>)
 800aeca:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 800aecc:	682a      	ldr	r2, [r5, #0]
 800aece:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800aed0:	4a15      	ldr	r2, [pc, #84]	; (800af28 <tcp_alloc+0xfc>)
 800aed2:	7812      	ldrb	r2, [r2, #0]
 800aed4:	7742      	strb	r2, [r0, #29]
    pcb->cwnd = 1;
 800aed6:	4a15      	ldr	r2, [pc, #84]	; (800af2c <tcp_alloc+0x100>)
 800aed8:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 800aeda:	4a15      	ldr	r2, [pc, #84]	; (800af30 <tcp_alloc+0x104>)
 800aedc:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800aee0:	4a14      	ldr	r2, [pc, #80]	; (800af34 <tcp_alloc+0x108>)
 800aee2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800aeea:	6a11      	ldr	r1, [r2, #32]
 800aeec:	1a71      	subs	r1, r6, r1
 800aeee:	4281      	cmp	r1, r0
 800aef0:	bf24      	itt	cs
 800aef2:	4613      	movcs	r3, r2
 800aef4:	4608      	movcs	r0, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800aef6:	68d2      	ldr	r2, [r2, #12]
 800aef8:	e7a3      	b.n	800ae42 <tcp_alloc+0x16>
    if (pcb->prio <= mprio &&
 800aefa:	7d57      	ldrb	r7, [r2, #21]
 800aefc:	4287      	cmp	r7, r0
 800aefe:	d807      	bhi.n	800af10 <tcp_alloc+0xe4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800af00:	6a11      	ldr	r1, [r2, #32]
 800af02:	ebac 0101 	sub.w	r1, ip, r1
    if (pcb->prio <= mprio &&
 800af06:	42b1      	cmp	r1, r6
 800af08:	bf22      	ittt	cs
 800af0a:	4638      	movcs	r0, r7
 800af0c:	460e      	movcs	r6, r1
 800af0e:	4613      	movcs	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800af10:	68d2      	ldr	r2, [r2, #12]
 800af12:	e7bb      	b.n	800ae8c <tcp_alloc+0x60>
 800af14:	2000bd5c 	.word	0x2000bd5c
 800af18:	2000bd68 	.word	0x2000bd68
 800af1c:	2000bd58 	.word	0x2000bd58
 800af20:	08600860 	.word	0x08600860
 800af24:	0218ffff 	.word	0x0218ffff
 800af28:	2000828a 	.word	0x2000828a
 800af2c:	04300001 	.word	0x04300001
 800af30:	0800ab59 	.word	0x0800ab59
 800af34:	006ddd00 	.word	0x006ddd00

0800af38 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800af38:	2040      	movs	r0, #64	; 0x40
 800af3a:	f7ff bf77 	b.w	800ae2c <tcp_alloc>
	...

0800af40 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 800af40:	4b03      	ldr	r3, [pc, #12]	; (800af50 <tcp_next_iss+0x10>)
 800af42:	4a04      	ldr	r2, [pc, #16]	; (800af54 <tcp_next_iss+0x14>)
 800af44:	6818      	ldr	r0, [r3, #0]
 800af46:	6812      	ldr	r2, [r2, #0]
 800af48:	4410      	add	r0, r2
 800af4a:	6018      	str	r0, [r3, #0]
}
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop
 800af50:	20000028 	.word	0x20000028
 800af54:	2000bd5c 	.word	0x2000bd5c

0800af58 <tcp_eff_send_mss_impl>:
{
 800af58:	b510      	push	{r4, lr}
 800af5a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 800af5c:	4608      	mov	r0, r1
 800af5e:	f004 fa29 	bl	800f3b4 <ip4_route>
    if (outif == NULL) {
 800af62:	b130      	cbz	r0, 800af72 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 800af64:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 800af66:	b123      	cbz	r3, 800af72 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800af68:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	429c      	cmp	r4, r3
 800af6e:	bf28      	it	cs
 800af70:	461c      	movcs	r4, r3
}
 800af72:	4620      	mov	r0, r4
 800af74:	bd10      	pop	{r4, pc}
	...

0800af78 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800af7c:	4604      	mov	r4, r0
 800af7e:	b180      	cbz	r0, 800afa2 <tcp_netif_ip_addr_changed+0x2a>
 800af80:	6803      	ldr	r3, [r0, #0]
 800af82:	b173      	cbz	r3, 800afa2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800af84:	4b0c      	ldr	r3, [pc, #48]	; (800afb8 <tcp_netif_ip_addr_changed+0x40>)
 800af86:	6819      	ldr	r1, [r3, #0]
 800af88:	f7ff ff24 	bl	800add4 <tcp_netif_ip_addr_changed_pcblist.isra.0>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800af8c:	4b0b      	ldr	r3, [pc, #44]	; (800afbc <tcp_netif_ip_addr_changed+0x44>)
 800af8e:	4620      	mov	r0, r4
 800af90:	6819      	ldr	r1, [r3, #0]
 800af92:	f7ff ff1f 	bl	800add4 <tcp_netif_ip_addr_changed_pcblist.isra.0>

    if (!ip_addr_isany(new_addr)) {
 800af96:	b125      	cbz	r5, 800afa2 <tcp_netif_ip_addr_changed+0x2a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b113      	cbz	r3, 800afa2 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800af9c:	4b08      	ldr	r3, [pc, #32]	; (800afc0 <tcp_netif_ip_addr_changed+0x48>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	b903      	cbnz	r3, 800afa4 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800afa4:	6818      	ldr	r0, [r3, #0]
 800afa6:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 800afa8:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800afaa:	4288      	cmp	r0, r1
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800afac:	bf04      	itt	eq
 800afae:	6829      	ldreq	r1, [r5, #0]
 800afb0:	6019      	streq	r1, [r3, #0]
{
 800afb2:	4613      	mov	r3, r2
 800afb4:	e7f4      	b.n	800afa0 <tcp_netif_ip_addr_changed+0x28>
 800afb6:	bf00      	nop
 800afb8:	2000bd58 	.word	0x2000bd58
 800afbc:	2000bd64 	.word	0x2000bd64
 800afc0:	2000bd60 	.word	0x2000bd60

0800afc4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800afc6:	68c3      	ldr	r3, [r0, #12]
{
 800afc8:	4605      	mov	r5, r0
 800afca:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800afcc:	8998      	ldrh	r0, [r3, #12]
 800afce:	f7fe f9b3 	bl	8009338 <lwip_htons>
 800afd2:	07c2      	lsls	r2, r0, #31
 800afd4:	d414      	bmi.n	800b000 <tcp_oos_insert_segment+0x3c>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 800afd6:	4e18      	ldr	r6, [pc, #96]	; (800b038 <tcp_oos_insert_segment+0x74>)
 800afd8:	68e7      	ldr	r7, [r4, #12]
 800afda:	6830      	ldr	r0, [r6, #0]
 800afdc:	892b      	ldrh	r3, [r5, #8]
 800afde:	6879      	ldr	r1, [r7, #4]
 800afe0:	8922      	ldrh	r2, [r4, #8]
 800afe2:	4403      	add	r3, r0
 800afe4:	440a      	add	r2, r1
 800afe6:	1a9a      	subs	r2, r3, r2
    while (next &&
 800afe8:	2a00      	cmp	r2, #0
 800afea:	da0f      	bge.n	800b00c <tcp_oos_insert_segment+0x48>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800afec:	1a5b      	subs	r3, r3, r1
    if (next &&
 800afee:	2b00      	cmp	r3, #0
 800aff0:	dd0a      	ble.n	800b008 <tcp_oos_insert_segment+0x44>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aff2:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 800aff4:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800aff6:	b289      	uxth	r1, r1
 800aff8:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800affa:	f7fe ff0d 	bl	8009e18 <pbuf_realloc>
 800affe:	e003      	b.n	800b008 <tcp_oos_insert_segment+0x44>
    tcp_segs_free(next);
 800b000:	4620      	mov	r0, r4
    next = NULL;
 800b002:	2400      	movs	r4, #0
    tcp_segs_free(next);
 800b004:	f7ff fa22 	bl	800a44c <tcp_segs_free>
    }
  }
  cseg->next = next;
 800b008:	602c      	str	r4, [r5, #0]
}
 800b00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b00c:	89b8      	ldrh	r0, [r7, #12]
 800b00e:	f7fe f993 	bl	8009338 <lwip_htons>
 800b012:	07c3      	lsls	r3, r0, #31
 800b014:	d507      	bpl.n	800b026 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800b016:	68eb      	ldr	r3, [r5, #12]
 800b018:	2001      	movs	r0, #1
 800b01a:	899f      	ldrh	r7, [r3, #12]
 800b01c:	f7fe f98c 	bl	8009338 <lwip_htons>
 800b020:	68eb      	ldr	r3, [r5, #12]
 800b022:	4338      	orrs	r0, r7
 800b024:	8198      	strh	r0, [r3, #12]
      next = next->next;
 800b026:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800b028:	4620      	mov	r0, r4
 800b02a:	f7ff fa01 	bl	800a430 <tcp_seg_free>
    while (next &&
 800b02e:	463c      	mov	r4, r7
 800b030:	2f00      	cmp	r7, #0
 800b032:	d1d1      	bne.n	800afd8 <tcp_oos_insert_segment+0x14>
 800b034:	e7e8      	b.n	800b008 <tcp_oos_insert_segment+0x44>
 800b036:	bf00      	nop
 800b038:	200082b0 	.word	0x200082b0

0800b03c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800b03c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b040:	7d03      	ldrb	r3, [r0, #20]
{
 800b042:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800b044:	2b03      	cmp	r3, #3
 800b046:	d806      	bhi.n	800b056 <tcp_receive+0x1a>
 800b048:	4b86      	ldr	r3, [pc, #536]	; (800b264 <tcp_receive+0x228>)
 800b04a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800b04e:	4986      	ldr	r1, [pc, #536]	; (800b268 <tcp_receive+0x22c>)
 800b050:	4886      	ldr	r0, [pc, #536]	; (800b26c <tcp_receive+0x230>)
 800b052:	f006 faef 	bl	8011634 <iprintf>

  if (flags & TCP_ACK) {
 800b056:	4b86      	ldr	r3, [pc, #536]	; (800b270 <tcp_receive+0x234>)
 800b058:	4e86      	ldr	r6, [pc, #536]	; (800b274 <tcp_receive+0x238>)
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	f013 0f10 	tst.w	r3, #16
 800b060:	f000 817c 	beq.w	800b35c <tcp_receive+0x320>
 800b064:	6831      	ldr	r1, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b066:	4d84      	ldr	r5, [pc, #528]	; (800b278 <tcp_receive+0x23c>)
 800b068:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800b06c:	682b      	ldr	r3, [r5, #0]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800b06e:	e9d4 0c14 	ldrd	r0, ip, [r4, #80]	; 0x50
 800b072:	1a47      	subs	r7, r0, r1
 800b074:	2f00      	cmp	r7, #0
 800b076:	db0c      	blt.n	800b092 <tcp_receive+0x56>
 800b078:	4288      	cmp	r0, r1
 800b07a:	d103      	bne.n	800b084 <tcp_receive+0x48>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800b07c:	ebac 0003 	sub.w	r0, ip, r3
 800b080:	2800      	cmp	r0, #0
 800b082:	db06      	blt.n	800b092 <tcp_receive+0x56>
 800b084:	459c      	cmp	ip, r3
 800b086:	d11a      	bne.n	800b0be <tcp_receive+0x82>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800b088:	487c      	ldr	r0, [pc, #496]	; (800b27c <tcp_receive+0x240>)
 800b08a:	6800      	ldr	r0, [r0, #0]
 800b08c:	89c0      	ldrh	r0, [r0, #14]
 800b08e:	4290      	cmp	r0, r2
 800b090:	d915      	bls.n	800b0be <tcp_receive+0x82>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b092:	487a      	ldr	r0, [pc, #488]	; (800b27c <tcp_receive+0x240>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b094:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800b098:	6800      	ldr	r0, [r0, #0]
 800b09a:	89c0      	ldrh	r0, [r0, #14]
 800b09c:	b287      	uxth	r7, r0
 800b09e:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800b0a2:	45be      	cmp	lr, r7
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
      pcb->snd_wl2 = ackno;
 800b0a4:	e9c4 1314 	strd	r1, r3, [r4, #80]	; 0x50
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b0a8:	bf38      	it	cc
 800b0aa:	f8a4 005e 	strhcc.w	r0, [r4, #94]	; 0x5e
      if (pcb->snd_wnd == 0) {
 800b0ae:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
 800b0b2:	bba7      	cbnz	r7, 800b11e <tcp_receive+0xe2>
        if (pcb->persist_backoff == 0) {
 800b0b4:	b919      	cbnz	r1, 800b0be <tcp_receive+0x82>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800b0b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b0ba:	f8a4 1094 	strh.w	r1, [r4, #148]	; 0x94
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800b0be:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800b0c0:	4f6f      	ldr	r7, [pc, #444]	; (800b280 <tcp_receive+0x244>)
 800b0c2:	1a19      	subs	r1, r3, r0
 800b0c4:	2900      	cmp	r1, #0
 800b0c6:	dc39      	bgt.n	800b13c <tcp_receive+0x100>
      /* Clause 2 */
      if (tcplen == 0) {
 800b0c8:	496e      	ldr	r1, [pc, #440]	; (800b284 <tcp_receive+0x248>)
 800b0ca:	8809      	ldrh	r1, [r1, #0]
 800b0cc:	bb91      	cbnz	r1, 800b134 <tcp_receive+0xf8>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b0ce:	f8b4 e05c 	ldrh.w	lr, [r4, #92]	; 0x5c
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800b0d2:	4462      	add	r2, ip
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800b0d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b0d6:	4471      	add	r1, lr
 800b0d8:	4291      	cmp	r1, r2
 800b0da:	d12b      	bne.n	800b134 <tcp_receive+0xf8>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800b0dc:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800b0e0:	2a00      	cmp	r2, #0
 800b0e2:	db27      	blt.n	800b134 <tcp_receive+0xf8>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800b0e4:	4298      	cmp	r0, r3
 800b0e6:	d125      	bne.n	800b134 <tcp_receive+0xf8>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800b0e8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b0ec:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 800b0ee:	bf1c      	itt	ne
 800b0f0:	3301      	addne	r3, #1
 800b0f2:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800b0f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d915      	bls.n	800b12a <tcp_receive+0xee>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800b0fe:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b102:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b104:	4413      	add	r3, r2
 800b106:	b29b      	uxth	r3, r3
 800b108:	429a      	cmp	r2, r3
 800b10a:	d201      	bcs.n	800b110 <tcp_receive+0xd4>
                  pcb->cwnd += pcb->mss;
 800b10c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b110:	f8df 9150 	ldr.w	r9, [pc, #336]	; 800b264 <tcp_receive+0x228>
 800b114:	f8df b174 	ldr.w	fp, [pc, #372]	; 800b28c <tcp_receive+0x250>
 800b118:	f8df a150 	ldr.w	sl, [pc, #336]	; 800b26c <tcp_receive+0x230>
 800b11c:	e111      	b.n	800b342 <tcp_receive+0x306>
      } else if (pcb->persist_backoff > 0) {
 800b11e:	2900      	cmp	r1, #0
 800b120:	d0cd      	beq.n	800b0be <tcp_receive+0x82>
          pcb->persist_backoff = 0;
 800b122:	2100      	movs	r1, #0
 800b124:	f884 1095 	strb.w	r1, [r4, #149]	; 0x95
 800b128:	e7c9      	b.n	800b0be <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 800b12a:	d1f1      	bne.n	800b110 <tcp_receive+0xd4>
                tcp_rexmit_fast(pcb);
 800b12c:	4620      	mov	r0, r4
 800b12e:	f002 f86a 	bl	800d206 <tcp_rexmit_fast>
      if (!found_dupack) {
 800b132:	e7ed      	b.n	800b110 <tcp_receive+0xd4>
        pcb->dupacks = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b13a:	e7e9      	b.n	800b110 <tcp_receive+0xd4>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800b13c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b13e:	1a9a      	subs	r2, r3, r2
 800b140:	2a00      	cmp	r2, #0
 800b142:	f300 808a 	bgt.w	800b25a <tcp_receive+0x21e>
      if (pcb->flags & TF_INFR) {
 800b146:	7ea2      	ldrb	r2, [r4, #26]
      pcb->lastack = ackno;
 800b148:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->flags & TF_INFR) {
 800b14a:	0751      	lsls	r1, r2, #29
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b14c:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
      if (pcb->state >= ESTABLISHED) {
 800b150:	7d23      	ldrb	r3, [r4, #20]
        pcb->flags &= ~TF_INFR;
 800b152:	bf41      	itttt	mi
 800b154:	f022 0204 	bicmi.w	r2, r2, #4
 800b158:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800b15a:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
 800b15e:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 800b162:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b164:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800b166:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 800b16a:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->nrtx = 0;
 800b16e:	f04f 0200 	mov.w	r2, #0
 800b172:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 800b176:	d90f      	bls.n	800b198 <tcp_receive+0x15c>
        if (pcb->cwnd < pcb->ssthresh) {
 800b178:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800b17c:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800b180:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b182:	4291      	cmp	r1, r2
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800b184:	bf9c      	itt	ls
 800b186:	435b      	mulls	r3, r3
 800b188:	fbb3 f3f2 	udivls	r3, r3, r2
 800b18c:	4413      	add	r3, r2
 800b18e:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 800b190:	429a      	cmp	r2, r3
 800b192:	d201      	bcs.n	800b198 <tcp_receive+0x15c>
            pcb->cwnd = new_cwnd;
 800b194:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b198:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 800b264 <tcp_receive+0x228>
 800b19c:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 800b28c <tcp_receive+0x250>
 800b1a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b26c <tcp_receive+0x230>
 800b1a4:	e04d      	b.n	800b242 <tcp_receive+0x206>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	6858      	ldr	r0, [r3, #4]
 800b1aa:	f7fe f8c8 	bl	800933e <lwip_htonl>
 800b1ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b1b0:	4680      	mov	r8, r0
 800b1b2:	891a      	ldrh	r2, [r3, #8]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	9200      	str	r2, [sp, #0]
 800b1b8:	8998      	ldrh	r0, [r3, #12]
 800b1ba:	f7fe f8bd 	bl	8009338 <lwip_htons>
 800b1be:	682b      	ldr	r3, [r5, #0]
 800b1c0:	9a00      	ldr	r2, [sp, #0]
 800b1c2:	f010 0003 	ands.w	r0, r0, #3
 800b1c6:	eba2 0303 	sub.w	r3, r2, r3
 800b1ca:	bf18      	it	ne
 800b1cc:	2001      	movne	r0, #1
 800b1ce:	4498      	add	r8, r3
 800b1d0:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 800b1d2:	f1b8 0f00 	cmp.w	r8, #0
 800b1d6:	dc37      	bgt.n	800b248 <tcp_receive+0x20c>
        next = pcb->unacked;
 800b1d8:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        pcb->unacked = pcb->unacked->next;
 800b1dc:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b1e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 800b1e4:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b1e6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b1ea:	9300      	str	r3, [sp, #0]
 800b1ec:	f7fe fe84 	bl	8009ef8 <pbuf_clen>
 800b1f0:	9b00      	ldr	r3, [sp, #0]
 800b1f2:	4283      	cmp	r3, r0
 800b1f4:	d206      	bcs.n	800b204 <tcp_receive+0x1c8>
 800b1f6:	464b      	mov	r3, r9
 800b1f8:	f240 429e 	movw	r2, #1182	; 0x49e
 800b1fc:	4659      	mov	r1, fp
 800b1fe:	4650      	mov	r0, sl
 800b200:	f006 fa18 	bl	8011634 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b204:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b208:	f7fe fe76 	bl	8009ef8 <pbuf_clen>
 800b20c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 800b210:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b212:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 800b214:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b218:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800b21a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 800b21e:	4640      	mov	r0, r8
        recv_acked += next->len;
 800b220:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 800b222:	f7ff f905 	bl	800a430 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 800b226:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b22a:	b153      	cbz	r3, 800b242 <tcp_receive+0x206>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800b22c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b22e:	b943      	cbnz	r3, 800b242 <tcp_receive+0x206>
 800b230:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b232:	b933      	cbnz	r3, 800b242 <tcp_receive+0x206>
 800b234:	464b      	mov	r3, r9
 800b236:	f240 42a6 	movw	r2, #1190	; 0x4a6
 800b23a:	4913      	ldr	r1, [pc, #76]	; (800b288 <tcp_receive+0x24c>)
 800b23c:	4650      	mov	r0, sl
 800b23e:	f006 f9f9 	bl	8011634 <iprintf>
      while (pcb->unacked != NULL &&
 800b242:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1ae      	bne.n	800b1a6 <tcp_receive+0x16a>
      if (pcb->unacked == NULL) {
 800b248:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b24a:	fab3 f383 	clz	r3, r3
 800b24e:	095b      	lsrs	r3, r3, #5
 800b250:	425b      	negs	r3, r3
 800b252:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	76e3      	strb	r3, [r4, #27]
 800b258:	e75a      	b.n	800b110 <tcp_receive+0xd4>
      tcp_send_empty_ack(pcb);
 800b25a:	4620      	mov	r0, r4
 800b25c:	f001 fd7a 	bl	800cd54 <tcp_send_empty_ack>
 800b260:	e756      	b.n	800b110 <tcp_receive+0xd4>
 800b262:	bf00      	nop
 800b264:	080140df 	.word	0x080140df
 800b268:	08014111 	.word	0x08014111
 800b26c:	08012feb 	.word	0x08012feb
 800b270:	20008290 	.word	0x20008290
 800b274:	200082b0 	.word	0x200082b0
 800b278:	2000828c 	.word	0x2000828c
 800b27c:	200082b8 	.word	0x200082b8
 800b280:	200082a4 	.word	0x200082a4
 800b284:	200082c6 	.word	0x200082c6
 800b288:	08014152 	.word	0x08014152
 800b28c:	0801412a 	.word	0x0801412a
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b290:	682a      	ldr	r2, [r5, #0]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	9201      	str	r2, [sp, #4]
 800b296:	6858      	ldr	r0, [r3, #4]
 800b298:	f7fe f851 	bl	800933e <lwip_htonl>
 800b29c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800b29e:	4680      	mov	r8, r0
 800b2a0:	890b      	ldrh	r3, [r1, #8]
 800b2a2:	68c9      	ldr	r1, [r1, #12]
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	8988      	ldrh	r0, [r1, #12]
 800b2a8:	f7fe f846 	bl	8009338 <lwip_htons>
 800b2ac:	f010 0003 	ands.w	r0, r0, #3
 800b2b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b2b4:	bf18      	it	ne
 800b2b6:	2001      	movne	r0, #1
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	eba3 0808 	sub.w	r8, r3, r8
 800b2be:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 800b2c2:	f1b8 0f00 	cmp.w	r8, #0
 800b2c6:	db3f      	blt.n	800b348 <tcp_receive+0x30c>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800b2cc:	1a9b      	subs	r3, r3, r2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	dc3a      	bgt.n	800b348 <tcp_receive+0x30c>
      next = pcb->unsent;
 800b2d2:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 800b2d6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2da:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 800b2dc:	b90b      	cbnz	r3, 800b2e2 <tcp_receive+0x2a6>
        pcb->unsent_oversize = 0;
 800b2de:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800b2e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b2e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	f7fe fe04 	bl	8009ef8 <pbuf_clen>
 800b2f0:	9b00      	ldr	r3, [sp, #0]
 800b2f2:	4283      	cmp	r3, r0
 800b2f4:	d206      	bcs.n	800b304 <tcp_receive+0x2c8>
 800b2f6:	464b      	mov	r3, r9
 800b2f8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800b2fc:	4659      	mov	r1, fp
 800b2fe:	4650      	mov	r0, sl
 800b300:	f006 f998 	bl	8011634 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b304:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b308:	f7fe fdf6 	bl	8009ef8 <pbuf_clen>
 800b30c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 800b310:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b312:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 800b314:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b318:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800b31a:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 800b31e:	4640      	mov	r0, r8
      recv_acked += next->len;
 800b320:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 800b322:	f7ff f885 	bl	800a430 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800b326:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b32a:	b153      	cbz	r3, 800b342 <tcp_receive+0x306>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800b32c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b32e:	b943      	cbnz	r3, 800b342 <tcp_receive+0x306>
 800b330:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b332:	b933      	cbnz	r3, 800b342 <tcp_receive+0x306>
 800b334:	464b      	mov	r3, r9
 800b336:	f240 42dc 	movw	r2, #1244	; 0x4dc
 800b33a:	49b6      	ldr	r1, [pc, #728]	; (800b614 <tcp_receive+0x5d8>)
 800b33c:	4650      	mov	r0, sl
 800b33e:	f006 f979 	bl	8011634 <iprintf>
    while (pcb->unsent != NULL &&
 800b342:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1a3      	bne.n	800b290 <tcp_receive+0x254>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800b348:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800b34c:	883a      	ldrh	r2, [r7, #0]
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b34e:	6b60      	ldr	r0, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 800b350:	4413      	add	r3, r2
 800b352:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b356:	2800      	cmp	r0, #0
 800b358:	f040 8116 	bne.w	800b588 <tcp_receive+0x54c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800b35c:	4fae      	ldr	r7, [pc, #696]	; (800b618 <tcp_receive+0x5dc>)
 800b35e:	6833      	ldr	r3, [r6, #0]
 800b360:	8838      	ldrh	r0, [r7, #0]
 800b362:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b364:	2800      	cmp	r0, #0
 800b366:	f000 831b 	beq.w	800b9a0 <tcp_receive+0x964>
 800b36a:	7d21      	ldrb	r1, [r4, #20]
 800b36c:	2906      	cmp	r1, #6
 800b36e:	f200 8317 	bhi.w	800b9a0 <tcp_receive+0x964>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800b372:	eba2 0a03 	sub.w	sl, r2, r3
 800b376:	f1ba 0f01 	cmp.w	sl, #1
 800b37a:	f100 8143 	bmi.w	800b604 <tcp_receive+0x5c8>
 800b37e:	f1c3 0101 	rsb	r1, r3, #1
 800b382:	1a09      	subs	r1, r1, r0
 800b384:	4411      	add	r1, r2
 800b386:	2900      	cmp	r1, #0
 800b388:	f300 813c 	bgt.w	800b604 <tcp_receive+0x5c8>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800b38c:	4da3      	ldr	r5, [pc, #652]	; (800b61c <tcp_receive+0x5e0>)
      off = pcb->rcv_nxt - seqno;
 800b38e:	46d1      	mov	r9, sl
      struct pbuf *p = inseg.p;
 800b390:	f8d5 8004 	ldr.w	r8, [r5, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800b394:	f1b8 0f00 	cmp.w	r8, #0
 800b398:	d106      	bne.n	800b3a8 <tcp_receive+0x36c>
 800b39a:	4ba1      	ldr	r3, [pc, #644]	; (800b620 <tcp_receive+0x5e4>)
 800b39c:	f240 523c 	movw	r2, #1340	; 0x53c
 800b3a0:	49a0      	ldr	r1, [pc, #640]	; (800b624 <tcp_receive+0x5e8>)
 800b3a2:	48a1      	ldr	r0, [pc, #644]	; (800b628 <tcp_receive+0x5ec>)
 800b3a4:	f006 f946 	bl	8011634 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800b3a8:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 800b3ac:	459a      	cmp	sl, r3
 800b3ae:	dd06      	ble.n	800b3be <tcp_receive+0x382>
 800b3b0:	4b9b      	ldr	r3, [pc, #620]	; (800b620 <tcp_receive+0x5e4>)
 800b3b2:	f240 523d 	movw	r2, #1341	; 0x53d
 800b3b6:	499d      	ldr	r1, [pc, #628]	; (800b62c <tcp_receive+0x5f0>)
 800b3b8:	489b      	ldr	r0, [pc, #620]	; (800b628 <tcp_receive+0x5ec>)
 800b3ba:	f006 f93b 	bl	8011634 <iprintf>
      if (inseg.p->len < off) {
 800b3be:	6868      	ldr	r0, [r5, #4]
 800b3c0:	fa1f fb8a 	uxth.w	fp, sl
 800b3c4:	8943      	ldrh	r3, [r0, #10]
 800b3c6:	4553      	cmp	r3, sl
 800b3c8:	f280 8110 	bge.w	800b5ec <tcp_receive+0x5b0>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800b3cc:	8903      	ldrh	r3, [r0, #8]
 800b3ce:	4553      	cmp	r3, sl
 800b3d0:	da06      	bge.n	800b3e0 <tcp_receive+0x3a4>
 800b3d2:	4b93      	ldr	r3, [pc, #588]	; (800b620 <tcp_receive+0x5e4>)
 800b3d4:	f240 523f 	movw	r2, #1343	; 0x53f
 800b3d8:	4995      	ldr	r1, [pc, #596]	; (800b630 <tcp_receive+0x5f4>)
 800b3da:	4893      	ldr	r0, [pc, #588]	; (800b628 <tcp_receive+0x5ec>)
 800b3dc:	f006 f92a 	bl	8011634 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b3e0:	686b      	ldr	r3, [r5, #4]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800b3e2:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800b3e4:	8919      	ldrh	r1, [r3, #8]
 800b3e6:	eba1 010b 	sub.w	r1, r1, fp
 800b3ea:	b289      	uxth	r1, r1
        while (p->len < off) {
 800b3ec:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800b3f0:	454b      	cmp	r3, r9
 800b3f2:	f2c0 80f2 	blt.w	800b5da <tcp_receive+0x59e>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800b3f6:	f1c9 0100 	rsb	r1, r9, #0
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	b209      	sxth	r1, r1
 800b3fe:	f7fe fbcb 	bl	8009b98 <pbuf_header>
 800b402:	b130      	cbz	r0, 800b412 <tcp_receive+0x3d6>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b404:	4b86      	ldr	r3, [pc, #536]	; (800b620 <tcp_receive+0x5e4>)
 800b406:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800b40a:	498a      	ldr	r1, [pc, #552]	; (800b634 <tcp_receive+0x5f8>)
 800b40c:	4886      	ldr	r0, [pc, #536]	; (800b628 <tcp_receive+0x5ec>)
 800b40e:	f006 f911 	bl	8011634 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800b412:	8929      	ldrh	r1, [r5, #8]
 800b414:	6833      	ldr	r3, [r6, #0]
 800b416:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b418:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b41a:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800b41c:	1a9b      	subs	r3, r3, r2
 800b41e:	812b      	strh	r3, [r5, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800b420:	68eb      	ldr	r3, [r5, #12]
 800b422:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b424:	6831      	ldr	r1, [r6, #0]
 800b426:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b428:	1a8b      	subs	r3, r1, r2
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f2c0 82b2 	blt.w	800b994 <tcp_receive+0x958>
 800b430:	1c4b      	adds	r3, r1, #1
 800b432:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 800b434:	1a9b      	subs	r3, r3, r2
 800b436:	1a1b      	subs	r3, r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f300 82ab 	bgt.w	800b994 <tcp_receive+0x958>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800b43e:	4291      	cmp	r1, r2
 800b440:	f040 81c7 	bne.w	800b7d2 <tcp_receive+0x796>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800b444:	4d75      	ldr	r5, [pc, #468]	; (800b61c <tcp_receive+0x5e0>)
 800b446:	68eb      	ldr	r3, [r5, #12]
 800b448:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800b44c:	8998      	ldrh	r0, [r3, #12]
 800b44e:	f7fd ff73 	bl	8009338 <lwip_htons>
 800b452:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 800b456:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 800b458:	bf18      	it	ne
 800b45a:	2001      	movne	r0, #1
 800b45c:	4440      	add	r0, r8
 800b45e:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800b460:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 800b462:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 800b464:	d241      	bcs.n	800b4ea <tcp_receive+0x4ae>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b466:	68eb      	ldr	r3, [r5, #12]
 800b468:	8998      	ldrh	r0, [r3, #12]
 800b46a:	f7fd ff65 	bl	8009338 <lwip_htons>
 800b46e:	07c2      	lsls	r2, r0, #31
 800b470:	d510      	bpl.n	800b494 <tcp_receive+0x458>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800b472:	68eb      	ldr	r3, [r5, #12]
 800b474:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800b478:	4640      	mov	r0, r8
 800b47a:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800b47e:	f7fd ff5b 	bl	8009338 <lwip_htons>
 800b482:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b486:	f7fd ff57 	bl	8009338 <lwip_htons>
 800b48a:	68eb      	ldr	r3, [r5, #12]
 800b48c:	ea40 0808 	orr.w	r8, r0, r8
 800b490:	f8a3 800c 	strh.w	r8, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800b494:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b496:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b498:	68eb      	ldr	r3, [r5, #12]
 800b49a:	8998      	ldrh	r0, [r3, #12]
 800b49c:	f7fd ff4c 	bl	8009338 <lwip_htons>
 800b4a0:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 800b4a2:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 800b4a4:	bf42      	ittt	mi
 800b4a6:	892b      	ldrhmi	r3, [r5, #8]
 800b4a8:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800b4ac:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800b4ae:	8929      	ldrh	r1, [r5, #8]
 800b4b0:	f7fe fcb2 	bl	8009e18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800b4b4:	68eb      	ldr	r3, [r5, #12]
 800b4b6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800b4ba:	8998      	ldrh	r0, [r3, #12]
 800b4bc:	f7fd ff3c 	bl	8009338 <lwip_htons>
 800b4c0:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4c4:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 800b4c6:	bf18      	it	ne
 800b4c8:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800b4cc:	4440      	add	r0, r8
 800b4ce:	b280      	uxth	r0, r0
 800b4d0:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b4d2:	4418      	add	r0, r3
 800b4d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b4d6:	4413      	add	r3, r2
 800b4d8:	4298      	cmp	r0, r3
 800b4da:	d006      	beq.n	800b4ea <tcp_receive+0x4ae>
 800b4dc:	4b50      	ldr	r3, [pc, #320]	; (800b620 <tcp_receive+0x5e4>)
 800b4de:	f240 527e 	movw	r2, #1406	; 0x57e
 800b4e2:	4955      	ldr	r1, [pc, #340]	; (800b638 <tcp_receive+0x5fc>)
 800b4e4:	4850      	ldr	r0, [pc, #320]	; (800b628 <tcp_receive+0x5ec>)
 800b4e6:	f006 f8a5 	bl	8011634 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800b4ea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 80b0 	beq.w	800b652 <tcp_receive+0x616>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b4f2:	68eb      	ldr	r3, [r5, #12]
 800b4f4:	8998      	ldrh	r0, [r3, #12]
 800b4f6:	f7fd ff1f 	bl	8009338 <lwip_htons>
 800b4fa:	07c0      	lsls	r0, r0, #31
 800b4fc:	f100 80a6 	bmi.w	800b64c <tcp_receive+0x610>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 800b500:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800b504:	6830      	ldr	r0, [r6, #0]
 800b506:	883b      	ldrh	r3, [r7, #0]
 800b508:	4403      	add	r3, r0
 800b50a:	f1b8 0f00 	cmp.w	r8, #0
 800b50e:	d038      	beq.n	800b582 <tcp_receive+0x546>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800b510:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 800b514:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800b518:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800b51c:	4411      	add	r1, r2
 800b51e:	1a59      	subs	r1, r3, r1
            while (next &&
 800b520:	2900      	cmp	r1, #0
 800b522:	f280 80c3 	bge.w	800b6ac <tcp_receive+0x670>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 800b526:	1a9b      	subs	r3, r3, r2
            if (next &&
 800b528:	2b00      	cmp	r3, #0
 800b52a:	dd2a      	ble.n	800b582 <tcp_receive+0x546>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b52c:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800b52e:	1a12      	subs	r2, r2, r0
 800b530:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800b532:	8998      	ldrh	r0, [r3, #12]
 800b534:	f7fd ff00 	bl	8009338 <lwip_htons>
 800b538:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 800b53a:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 800b53c:	bf42      	ittt	mi
 800b53e:	892b      	ldrhmi	r3, [r5, #8]
 800b540:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800b544:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800b546:	8929      	ldrh	r1, [r5, #8]
 800b548:	f7fe fc66 	bl	8009e18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800b54c:	68eb      	ldr	r3, [r5, #12]
 800b54e:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800b552:	8998      	ldrh	r0, [r3, #12]
 800b554:	f7fd fef0 	bl	8009338 <lwip_htons>
 800b558:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b55c:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800b55e:	bf18      	it	ne
 800b560:	2001      	movne	r0, #1
 800b562:	4448      	add	r0, r9
 800b564:	b280      	uxth	r0, r0
 800b566:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800b568:	4418      	add	r0, r3
 800b56a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b56e:	685b      	ldr	r3, [r3, #4]
 800b570:	4298      	cmp	r0, r3
 800b572:	d006      	beq.n	800b582 <tcp_receive+0x546>
 800b574:	4b2a      	ldr	r3, [pc, #168]	; (800b620 <tcp_receive+0x5e4>)
 800b576:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800b57a:	4930      	ldr	r1, [pc, #192]	; (800b63c <tcp_receive+0x600>)
 800b57c:	482a      	ldr	r0, [pc, #168]	; (800b628 <tcp_receive+0x5ec>)
 800b57e:	f006 f859 	bl	8011634 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800b582:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 800b586:	e064      	b.n	800b652 <tcp_receive+0x616>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800b588:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b58a:	682a      	ldr	r2, [r5, #0]
 800b58c:	1a9b      	subs	r3, r3, r2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	f6bf aee4 	bge.w	800b35c <tcp_receive+0x320>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b594:	4b2a      	ldr	r3, [pc, #168]	; (800b640 <tcp_receive+0x604>)
 800b596:	b280      	uxth	r0, r0
      m = m - (pcb->sa >> 3);
 800b598:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b59c:	881a      	ldrh	r2, [r3, #0]
      m = m - (pcb->sa >> 3);
 800b59e:	f3c7 05cf 	ubfx	r5, r7, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800b5a2:	1a11      	subs	r1, r2, r0
      m = m - (pcb->sa >> 3);
 800b5a4:	1b49      	subs	r1, r1, r5
 800b5a6:	b20b      	sxth	r3, r1
      pcb->sa += m;
 800b5a8:	fa17 f181 	uxtah	r1, r7, r1
      if (m < 0) {
 800b5ac:	2b00      	cmp	r3, #0
      pcb->sa += m;
 800b5ae:	b209      	sxth	r1, r1
        m = -m;
 800b5b0:	bfb8      	it	lt
 800b5b2:	1a80      	sublt	r0, r0, r2
      m = m - (pcb->sv >> 2);
 800b5b4:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa += m;
 800b5b8:	87a1      	strh	r1, [r4, #60]	; 0x3c
        m = -m;
 800b5ba:	bfb8      	it	lt
 800b5bc:	1940      	addlt	r0, r0, r5
      pcb->sv += m;
 800b5be:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
        m = -m;
 800b5c2:	bfb8      	it	lt
 800b5c4:	b203      	sxthlt	r3, r0
      pcb->sv += m;
 800b5c6:	4413      	add	r3, r2
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800b5cc:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800b5d0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	6363      	str	r3, [r4, #52]	; 0x34
 800b5d8:	e6c0      	b.n	800b35c <tcp_receive+0x320>
          p->tot_len = new_tot_len;
 800b5da:	f8a8 1008 	strh.w	r1, [r8, #8]
          off -= p->len;
 800b5de:	eba9 0903 	sub.w	r9, r9, r3
          p->len = 0;
 800b5e2:	f8a8 200a 	strh.w	r2, [r8, #10]
          p = p->next;
 800b5e6:	f8d8 8000 	ldr.w	r8, [r8]
 800b5ea:	e6ff      	b.n	800b3ec <tcp_receive+0x3b0>
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800b5ec:	f1cb 0100 	rsb	r1, fp, #0
 800b5f0:	b209      	sxth	r1, r1
 800b5f2:	f7fe fad1 	bl	8009b98 <pbuf_header>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f43f af0b 	beq.w	800b412 <tcp_receive+0x3d6>
          LWIP_ASSERT("pbuf_header failed", 0);
 800b5fc:	4b08      	ldr	r3, [pc, #32]	; (800b620 <tcp_receive+0x5e4>)
 800b5fe:	f240 5251 	movw	r2, #1361	; 0x551
 800b602:	e702      	b.n	800b40a <tcp_receive+0x3ce>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800b604:	1a9b      	subs	r3, r3, r2
 800b606:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800b608:	bfbe      	ittt	lt
 800b60a:	7ea3      	ldrblt	r3, [r4, #26]
 800b60c:	f043 0302 	orrlt.w	r3, r3, #2
 800b610:	76a3      	strblt	r3, [r4, #26]
 800b612:	e707      	b.n	800b424 <tcp_receive+0x3e8>
 800b614:	08014152 	.word	0x08014152
 800b618:	200082c6 	.word	0x200082c6
 800b61c:	20008294 	.word	0x20008294
 800b620:	080140df 	.word	0x080140df
 800b624:	08014172 	.word	0x08014172
 800b628:	08012feb 	.word	0x08012feb
 800b62c:	08014182 	.word	0x08014182
 800b630:	08014191 	.word	0x08014191
 800b634:	080141a1 	.word	0x080141a1
 800b638:	080141b4 	.word	0x080141b4
 800b63c:	080141eb 	.word	0x080141eb
 800b640:	2000bd5c 	.word	0x2000bd5c
              pcb->ooseq = pcb->ooseq->next;
 800b644:	6803      	ldr	r3, [r0, #0]
 800b646:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800b648:	f7fe fef2 	bl	800a430 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800b64c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b64e:	2800      	cmp	r0, #0
 800b650:	d1f8      	bne.n	800b644 <tcp_receive+0x608>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800b652:	883a      	ldrh	r2, [r7, #0]
 800b654:	6833      	ldr	r3, [r6, #0]
 800b656:	4413      	add	r3, r2
 800b658:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800b65a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d206      	bcs.n	800b66e <tcp_receive+0x632>
 800b660:	4b8d      	ldr	r3, [pc, #564]	; (800b898 <tcp_receive+0x85c>)
 800b662:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b666:	498d      	ldr	r1, [pc, #564]	; (800b89c <tcp_receive+0x860>)
 800b668:	488d      	ldr	r0, [pc, #564]	; (800b8a0 <tcp_receive+0x864>)
 800b66a:	f005 ffe3 	bl	8011634 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800b66e:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800b670:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 800b672:	883a      	ldrh	r2, [r7, #0]
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800b678:	f7fe fe70 	bl	800a35c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800b67c:	686b      	ldr	r3, [r5, #4]
 800b67e:	891a      	ldrh	r2, [r3, #8]
 800b680:	b11a      	cbz	r2, 800b68a <tcp_receive+0x64e>
          recv_data = inseg.p;
 800b682:	4a88      	ldr	r2, [pc, #544]	; (800b8a4 <tcp_receive+0x868>)
 800b684:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800b686:	2300      	movs	r3, #0
 800b688:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800b68a:	68eb      	ldr	r3, [r5, #12]
 800b68c:	8998      	ldrh	r0, [r3, #12]
 800b68e:	f7fd fe53 	bl	8009338 <lwip_htons>
 800b692:	07c5      	lsls	r5, r0, #31
 800b694:	d504      	bpl.n	800b6a0 <tcp_receive+0x664>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800b696:	4a84      	ldr	r2, [pc, #528]	; (800b8a8 <tcp_receive+0x86c>)
 800b698:	7813      	ldrb	r3, [r2, #0]
 800b69a:	f043 0320 	orr.w	r3, r3, #32
 800b69e:	7013      	strb	r3, [r2, #0]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b6a0:	4f7d      	ldr	r7, [pc, #500]	; (800b898 <tcp_receive+0x85c>)
 800b6a2:	f8df 820c 	ldr.w	r8, [pc, #524]	; 800b8b0 <tcp_receive+0x874>
 800b6a6:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 800b8a0 <tcp_receive+0x864>
 800b6aa:	e07b      	b.n	800b7a4 <tcp_receive+0x768>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b6ac:	f8bc 000c 	ldrh.w	r0, [ip, #12]
 800b6b0:	f7fd fe42 	bl	8009338 <lwip_htons>
 800b6b4:	07c1      	lsls	r1, r0, #31
 800b6b6:	d51a      	bpl.n	800b6ee <tcp_receive+0x6b2>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800b6b8:	68eb      	ldr	r3, [r5, #12]
 800b6ba:	8998      	ldrh	r0, [r3, #12]
 800b6bc:	f7fd fe3c 	bl	8009338 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800b6c0:	0782      	lsls	r2, r0, #30
 800b6c2:	d414      	bmi.n	800b6ee <tcp_receive+0x6b2>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b6c4:	68eb      	ldr	r3, [r5, #12]
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800b6cc:	f7fd fe34 	bl	8009338 <lwip_htons>
 800b6d0:	68eb      	ldr	r3, [r5, #12]
 800b6d2:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 800b6d6:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800b6da:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800b6dc:	b280      	uxth	r0, r0
 800b6de:	f7fd fe2b 	bl	8009338 <lwip_htons>
 800b6e2:	f010 0003 	ands.w	r0, r0, #3
 800b6e6:	bf18      	it	ne
 800b6e8:	2001      	movne	r0, #1
 800b6ea:	4448      	add	r0, r9
 800b6ec:	8038      	strh	r0, [r7, #0]
              next = next->next;
 800b6ee:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	f7fe fe9c 	bl	800a430 <tcp_seg_free>
              next = next->next;
 800b6f8:	46c8      	mov	r8, r9
 800b6fa:	e703      	b.n	800b504 <tcp_receive+0x4c8>
          seqno = pcb->ooseq->tcphdr->seqno;
 800b6fc:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b6fe:	8990      	ldrh	r0, [r2, #12]
 800b700:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b704:	f7fd fe18 	bl	8009338 <lwip_htons>
 800b708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b70a:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b70e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b712:	449a      	add	sl, r3
 800b714:	bf18      	it	ne
 800b716:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b718:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b71a:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b71c:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800b720:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800b722:	8998      	ldrh	r0, [r3, #12]
 800b724:	f7fd fe08 	bl	8009338 <lwip_htons>
 800b728:	f010 0003 	ands.w	r0, r0, #3
 800b72c:	bf18      	it	ne
 800b72e:	2001      	movne	r0, #1
 800b730:	4458      	add	r0, fp
 800b732:	4582      	cmp	sl, r0
 800b734:	d206      	bcs.n	800b744 <tcp_receive+0x708>
 800b736:	463b      	mov	r3, r7
 800b738:	f240 52dd 	movw	r2, #1501	; 0x5dd
 800b73c:	4641      	mov	r1, r8
 800b73e:	4648      	mov	r0, r9
 800b740:	f005 ff78 	bl	8011634 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800b744:	68eb      	ldr	r3, [r5, #12]
 800b746:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b74a:	8998      	ldrh	r0, [r3, #12]
 800b74c:	f7fd fdf4 	bl	8009338 <lwip_htons>
 800b750:	f010 0003 	ands.w	r0, r0, #3
 800b754:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b756:	bf18      	it	ne
 800b758:	2001      	movne	r0, #1
 800b75a:	4450      	add	r0, sl
 800b75c:	1a18      	subs	r0, r3, r0
 800b75e:	8520      	strh	r0, [r4, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800b760:	4620      	mov	r0, r4
 800b762:	f7fe fdfb 	bl	800a35c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800b766:	6869      	ldr	r1, [r5, #4]
 800b768:	890b      	ldrh	r3, [r1, #8]
 800b76a:	b133      	cbz	r3, 800b77a <tcp_receive+0x73e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800b76c:	4b4d      	ldr	r3, [pc, #308]	; (800b8a4 <tcp_receive+0x868>)
 800b76e:	6818      	ldr	r0, [r3, #0]
 800b770:	b338      	cbz	r0, 800b7c2 <tcp_receive+0x786>
              pbuf_cat(recv_data, cseg->p);
 800b772:	f7fe fbe5 	bl	8009f40 <pbuf_cat>
            } else {
              recv_data = cseg->p;
            }
            cseg->p = NULL;
 800b776:	2300      	movs	r3, #0
 800b778:	606b      	str	r3, [r5, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800b77a:	68eb      	ldr	r3, [r5, #12]
 800b77c:	8998      	ldrh	r0, [r3, #12]
 800b77e:	f7fd fddb 	bl	8009338 <lwip_htons>
 800b782:	07c0      	lsls	r0, r0, #31
 800b784:	d509      	bpl.n	800b79a <tcp_receive+0x75e>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800b786:	4a48      	ldr	r2, [pc, #288]	; (800b8a8 <tcp_receive+0x86c>)
 800b788:	7813      	ldrb	r3, [r2, #0]
 800b78a:	f043 0320 	orr.w	r3, r3, #32
 800b78e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800b790:	7d23      	ldrb	r3, [r4, #20]
 800b792:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800b794:	bf04      	itt	eq
 800b796:	2307      	moveq	r3, #7
 800b798:	7523      	strbeq	r3, [r4, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800b79a:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800b79c:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800b79e:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 800b7a0:	f7fe fe46 	bl	800a430 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800b7a4:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800b7a6:	b125      	cbz	r5, 800b7b2 <tcp_receive+0x776>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b7a8:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800b7aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800b7ac:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800b7ae:	428b      	cmp	r3, r1
 800b7b0:	d0a4      	beq.n	800b6fc <tcp_receive+0x6c0>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800b7b2:	7ea3      	ldrb	r3, [r4, #26]
 800b7b4:	07d9      	lsls	r1, r3, #31
 800b7b6:	d506      	bpl.n	800b7c6 <tcp_receive+0x78a>
 800b7b8:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 800b7bc:	f043 0302 	orr.w	r3, r3, #2
 800b7c0:	e003      	b.n	800b7ca <tcp_receive+0x78e>
              recv_data = cseg->p;
 800b7c2:	6019      	str	r1, [r3, #0]
 800b7c4:	e7d7      	b.n	800b776 <tcp_receive+0x73a>
        tcp_ack(pcb);
 800b7c6:	f043 0301 	orr.w	r3, r3, #1
 800b7ca:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 800b7cc:	b003      	add	sp, #12
 800b7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f001 fabe 	bl	800cd54 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 800b7d8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800b7da:	b925      	cbnz	r5, 800b7e6 <tcp_receive+0x7aa>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800b7dc:	4833      	ldr	r0, [pc, #204]	; (800b8ac <tcp_receive+0x870>)
 800b7de:	f7fe fe3d 	bl	800a45c <tcp_seg_copy>
 800b7e2:	6720      	str	r0, [r4, #112]	; 0x70
 800b7e4:	e7f2      	b.n	800b7cc <tcp_receive+0x790>
            if (seqno == next->tcphdr->seqno) {
 800b7e6:	6833      	ldr	r3, [r6, #0]
          prev = NULL;
 800b7e8:	f04f 0800 	mov.w	r8, #0
 800b7ec:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800b7f0:	f103 0e01 	add.w	lr, r3, #1
            if (seqno == next->tcphdr->seqno) {
 800b7f4:	68e8      	ldr	r0, [r5, #12]
 800b7f6:	6842      	ldr	r2, [r0, #4]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d117      	bne.n	800b82c <tcp_receive+0x7f0>
              if (inseg.len > next->len) {
 800b7fc:	482b      	ldr	r0, [pc, #172]	; (800b8ac <tcp_receive+0x870>)
 800b7fe:	892b      	ldrh	r3, [r5, #8]
 800b800:	8902      	ldrh	r2, [r0, #8]
 800b802:	429a      	cmp	r2, r3
 800b804:	d9e2      	bls.n	800b7cc <tcp_receive+0x790>
                cseg = tcp_seg_copy(&inseg);
 800b806:	f7fe fe29 	bl	800a45c <tcp_seg_copy>
                if (cseg != NULL) {
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d0de      	beq.n	800b7cc <tcp_receive+0x790>
                  if (prev != NULL) {
 800b80e:	f1b8 0f00 	cmp.w	r8, #0
 800b812:	d009      	beq.n	800b828 <tcp_receive+0x7ec>
                    prev->next = cseg;
 800b814:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800b818:	4629      	mov	r1, r5
}
 800b81a:	b003      	add	sp, #12
 800b81c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 800b820:	f7ff bbd0 	b.w	800afc4 <tcp_oos_insert_segment>
 800b824:	460d      	mov	r5, r1
 800b826:	e7e5      	b.n	800b7f4 <tcp_receive+0x7b8>
                    pcb->ooseq = cseg;
 800b828:	6720      	str	r0, [r4, #112]	; 0x70
                  tcp_oos_insert_segment(cseg, next);
 800b82a:	e7f5      	b.n	800b818 <tcp_receive+0x7dc>
              if (prev == NULL) {
 800b82c:	f1b8 0f00 	cmp.w	r8, #0
 800b830:	d109      	bne.n	800b846 <tcp_receive+0x80a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800b832:	1a99      	subs	r1, r3, r2
 800b834:	2900      	cmp	r1, #0
 800b836:	da3d      	bge.n	800b8b4 <tcp_receive+0x878>
                  cseg = tcp_seg_copy(&inseg);
 800b838:	481c      	ldr	r0, [pc, #112]	; (800b8ac <tcp_receive+0x870>)
 800b83a:	f7fe fe0f 	bl	800a45c <tcp_seg_copy>
                  if (cseg != NULL) {
 800b83e:	2800      	cmp	r0, #0
 800b840:	d0c4      	beq.n	800b7cc <tcp_receive+0x790>
                    pcb->ooseq = cseg;
 800b842:	6720      	str	r0, [r4, #112]	; 0x70
 800b844:	e7e8      	b.n	800b818 <tcp_receive+0x7dc>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800b846:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b84a:	6849      	ldr	r1, [r1, #4]
 800b84c:	ebac 0101 	sub.w	r1, ip, r1
 800b850:	2900      	cmp	r1, #0
 800b852:	db2f      	blt.n	800b8b4 <tcp_receive+0x878>
 800b854:	ebae 0102 	sub.w	r1, lr, r2
 800b858:	2900      	cmp	r1, #0
 800b85a:	dc2b      	bgt.n	800b8b4 <tcp_receive+0x878>
                  cseg = tcp_seg_copy(&inseg);
 800b85c:	4813      	ldr	r0, [pc, #76]	; (800b8ac <tcp_receive+0x870>)
 800b85e:	f7fe fdfd 	bl	800a45c <tcp_seg_copy>
                  if (cseg != NULL) {
 800b862:	4604      	mov	r4, r0
 800b864:	2800      	cmp	r0, #0
 800b866:	d0b1      	beq.n	800b7cc <tcp_receive+0x790>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800b868:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b86c:	6831      	ldr	r1, [r6, #0]
 800b86e:	685a      	ldr	r2, [r3, #4]
 800b870:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b874:	4413      	add	r3, r2
 800b876:	1a5b      	subs	r3, r3, r1
 800b878:	2b00      	cmp	r3, #0
 800b87a:	dd07      	ble.n	800b88c <tcp_receive+0x850>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b87c:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 800b87e:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800b882:	b289      	uxth	r1, r1
 800b884:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 800b888:	f7fe fac6 	bl	8009e18 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 800b88c:	4629      	mov	r1, r5
 800b88e:	4620      	mov	r0, r4
                    prev->next = cseg;
 800b890:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800b894:	e7c1      	b.n	800b81a <tcp_receive+0x7de>
 800b896:	bf00      	nop
 800b898:	080140df 	.word	0x080140df
 800b89c:	08014226 	.word	0x08014226
 800b8a0:	08012feb 	.word	0x08012feb
 800b8a4:	200082a8 	.word	0x200082a8
 800b8a8:	200082ac 	.word	0x200082ac
 800b8ac:	20008294 	.word	0x20008294
 800b8b0:	08014245 	.word	0x08014245
              if (next->next == NULL &&
 800b8b4:	6829      	ldr	r1, [r5, #0]
 800b8b6:	46a8      	mov	r8, r5
 800b8b8:	2900      	cmp	r1, #0
 800b8ba:	d1b3      	bne.n	800b824 <tcp_receive+0x7e8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800b8bc:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	dd84      	ble.n	800b7cc <tcp_receive+0x790>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800b8c2:	8980      	ldrh	r0, [r0, #12]
 800b8c4:	f7fd fd38 	bl	8009338 <lwip_htons>
 800b8c8:	07c2      	lsls	r2, r0, #31
 800b8ca:	f53f af7f 	bmi.w	800b7cc <tcp_receive+0x790>
                next->next = tcp_seg_copy(&inseg);
 800b8ce:	483a      	ldr	r0, [pc, #232]	; (800b9b8 <tcp_receive+0x97c>)
 800b8d0:	f7fe fdc4 	bl	800a45c <tcp_seg_copy>
 800b8d4:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	f43f af78 	beq.w	800b7cc <tcp_receive+0x790>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800b8dc:	68eb      	ldr	r3, [r5, #12]
 800b8de:	6831      	ldr	r1, [r6, #0]
 800b8e0:	685a      	ldr	r2, [r3, #4]
 800b8e2:	892b      	ldrh	r3, [r5, #8]
 800b8e4:	4413      	add	r3, r2
 800b8e6:	1a5b      	subs	r3, r3, r1
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	dd05      	ble.n	800b8f8 <tcp_receive+0x8bc>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b8ec:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 800b8ee:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800b8f0:	b289      	uxth	r1, r1
 800b8f2:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800b8f4:	f7fe fa90 	bl	8009e18 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800b8f8:	6832      	ldr	r2, [r6, #0]
 800b8fa:	883b      	ldrh	r3, [r7, #0]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b900:	1a9b      	subs	r3, r3, r2
 800b902:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	2b00      	cmp	r3, #0
 800b908:	f77f af60 	ble.w	800b7cc <tcp_receive+0x790>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800b90c:	682b      	ldr	r3, [r5, #0]
 800b90e:	68db      	ldr	r3, [r3, #12]
 800b910:	8998      	ldrh	r0, [r3, #12]
 800b912:	f7fd fd11 	bl	8009338 <lwip_htons>
 800b916:	07c3      	lsls	r3, r0, #31
 800b918:	d512      	bpl.n	800b940 <tcp_receive+0x904>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800b91a:	682b      	ldr	r3, [r5, #0]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800b922:	4640      	mov	r0, r8
 800b924:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800b928:	f7fd fd06 	bl	8009338 <lwip_htons>
 800b92c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800b930:	f7fd fd02 	bl	8009338 <lwip_htons>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	ea40 0808 	orr.w	r8, r0, r8
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f8a3 800c 	strh.w	r8, [r3, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b940:	6832      	ldr	r2, [r6, #0]
 800b942:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	1a89      	subs	r1, r1, r2
 800b948:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 800b94a:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800b94c:	4411      	add	r1, r2
 800b94e:	b289      	uxth	r1, r1
 800b950:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800b952:	f7fe fa61 	bl	8009e18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800b956:	682b      	ldr	r3, [r5, #0]
 800b958:	891d      	ldrh	r5, [r3, #8]
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	8998      	ldrh	r0, [r3, #12]
 800b95e:	f7fd fceb 	bl	8009338 <lwip_htons>
 800b962:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b966:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 800b968:	bf18      	it	ne
 800b96a:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b96c:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 800b96e:	4428      	add	r0, r5
 800b970:	b280      	uxth	r0, r0
 800b972:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b974:	4418      	add	r0, r3
 800b976:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b978:	4413      	add	r3, r2
 800b97a:	4298      	cmp	r0, r3
 800b97c:	f43f af26 	beq.w	800b7cc <tcp_receive+0x790>
 800b980:	4b0e      	ldr	r3, [pc, #56]	; (800b9bc <tcp_receive+0x980>)
 800b982:	f240 627a 	movw	r2, #1658	; 0x67a
 800b986:	490e      	ldr	r1, [pc, #56]	; (800b9c0 <tcp_receive+0x984>)
 800b988:	480e      	ldr	r0, [pc, #56]	; (800b9c4 <tcp_receive+0x988>)
}
 800b98a:	b003      	add	sp, #12
 800b98c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800b990:	f005 be50 	b.w	8011634 <iprintf>
      tcp_send_empty_ack(pcb);
 800b994:	4620      	mov	r0, r4
}
 800b996:	b003      	add	sp, #12
 800b998:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 800b99c:	f001 b9da 	b.w	800cd54 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800b9a0:	1a99      	subs	r1, r3, r2
 800b9a2:	2900      	cmp	r1, #0
 800b9a4:	db06      	blt.n	800b9b4 <tcp_receive+0x978>
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	1a9b      	subs	r3, r3, r2
 800b9aa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800b9ac:	1a9b      	subs	r3, r3, r2
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f77f af0c 	ble.w	800b7cc <tcp_receive+0x790>
      tcp_ack_now(pcb);
 800b9b4:	7ea3      	ldrb	r3, [r4, #26]
 800b9b6:	e701      	b.n	800b7bc <tcp_receive+0x780>
 800b9b8:	20008294 	.word	0x20008294
 800b9bc:	080140df 	.word	0x080140df
 800b9c0:	080141b4 	.word	0x080141b4
 800b9c4:	08012feb 	.word	0x08012feb

0800b9c8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b9c8:	4b0b      	ldr	r3, [pc, #44]	; (800b9f8 <tcp_getoptbyte+0x30>)
 800b9ca:	490c      	ldr	r1, [pc, #48]	; (800b9fc <tcp_getoptbyte+0x34>)
 800b9cc:	6818      	ldr	r0, [r3, #0]
 800b9ce:	880b      	ldrh	r3, [r1, #0]
 800b9d0:	1c5a      	adds	r2, r3, #1
{
 800b9d2:	b530      	push	{r4, r5, lr}
 800b9d4:	b292      	uxth	r2, r2
 800b9d6:	460d      	mov	r5, r1
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800b9d8:	b118      	cbz	r0, 800b9e2 <tcp_getoptbyte+0x1a>
 800b9da:	4c09      	ldr	r4, [pc, #36]	; (800ba00 <tcp_getoptbyte+0x38>)
 800b9dc:	8824      	ldrh	r4, [r4, #0]
 800b9de:	429c      	cmp	r4, r3
 800b9e0:	d905      	bls.n	800b9ee <tcp_getoptbyte+0x26>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b9e2:	4908      	ldr	r1, [pc, #32]	; (800ba04 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 800b9e4:	802a      	strh	r2, [r5, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800b9e6:	6809      	ldr	r1, [r1, #0]
    return opts[tcp_optidx++];
 800b9e8:	440b      	add	r3, r1
 800b9ea:	7d18      	ldrb	r0, [r3, #20]
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
    return tcphdr_opt2[idx];
  }
}
 800b9ec:	bd30      	pop	{r4, r5, pc}
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800b9ee:	1b1b      	subs	r3, r3, r4
 800b9f0:	800a      	strh	r2, [r1, #0]
    return tcphdr_opt2[idx];
 800b9f2:	b2db      	uxtb	r3, r3
 800b9f4:	5cc0      	ldrb	r0, [r0, r3]
 800b9f6:	e7f9      	b.n	800b9ec <tcp_getoptbyte+0x24>
 800b9f8:	200082c0 	.word	0x200082c0
 800b9fc:	200082b4 	.word	0x200082b4
 800ba00:	200082bc 	.word	0x200082bc
 800ba04:	200082b8 	.word	0x200082b8

0800ba08 <tcp_parseopt.isra.0>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 800ba08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ba0a:	4b1a      	ldr	r3, [pc, #104]	; (800ba74 <tcp_parseopt.isra.0+0x6c>)
tcp_parseopt(struct tcp_pcb *pcb)
 800ba0c:	4607      	mov	r7, r0
  if (tcphdr_optlen != 0) {
 800ba0e:	881e      	ldrh	r6, [r3, #0]
 800ba10:	b166      	cbz	r6, 800ba2c <tcp_parseopt.isra.0+0x24>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ba12:	4d19      	ldr	r5, [pc, #100]	; (800ba78 <tcp_parseopt.isra.0+0x70>)
 800ba14:	2300      	movs	r3, #0
 800ba16:	802b      	strh	r3, [r5, #0]
 800ba18:	882b      	ldrh	r3, [r5, #0]
 800ba1a:	42b3      	cmp	r3, r6
 800ba1c:	d206      	bcs.n	800ba2c <tcp_parseopt.isra.0+0x24>
      u8_t opt = tcp_getoptbyte();
 800ba1e:	f7ff ffd3 	bl	800b9c8 <tcp_getoptbyte>
      switch (opt) {
 800ba22:	2801      	cmp	r0, #1
 800ba24:	d0f8      	beq.n	800ba18 <tcp_parseopt.isra.0+0x10>
 800ba26:	2802      	cmp	r0, #2
 800ba28:	d001      	beq.n	800ba2e <tcp_parseopt.isra.0+0x26>
 800ba2a:	b9c8      	cbnz	r0, 800ba60 <tcp_parseopt.isra.0+0x58>
           can skip past them. */
        tcp_optidx += data - 2;
      }
    }
  }
}
 800ba2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ba2e:	f7ff ffcb 	bl	800b9c8 <tcp_getoptbyte>
 800ba32:	2804      	cmp	r0, #4
 800ba34:	d1fa      	bne.n	800ba2c <tcp_parseopt.isra.0+0x24>
 800ba36:	882b      	ldrh	r3, [r5, #0]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	42b3      	cmp	r3, r6
 800ba3c:	daf6      	bge.n	800ba2c <tcp_parseopt.isra.0+0x24>
        mss = (tcp_getoptbyte() << 8);
 800ba3e:	f7ff ffc3 	bl	800b9c8 <tcp_getoptbyte>
 800ba42:	0204      	lsls	r4, r0, #8
        mss |= tcp_getoptbyte();
 800ba44:	f7ff ffc0 	bl	800b9c8 <tcp_getoptbyte>
        mss = (tcp_getoptbyte() << 8);
 800ba48:	b2a4      	uxth	r4, r4
        mss |= tcp_getoptbyte();
 800ba4a:	ea44 0300 	orr.w	r3, r4, r0
 800ba4e:	b29b      	uxth	r3, r3
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ba50:	1e5a      	subs	r2, r3, #1
 800ba52:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 800ba56:	bf28      	it	cs
 800ba58:	f44f 7306 	movcs.w	r3, #536	; 0x218
 800ba5c:	803b      	strh	r3, [r7, #0]
        break;
 800ba5e:	e7db      	b.n	800ba18 <tcp_parseopt.isra.0+0x10>
        data = tcp_getoptbyte();
 800ba60:	f7ff ffb2 	bl	800b9c8 <tcp_getoptbyte>
        if (data < 2) {
 800ba64:	2801      	cmp	r0, #1
 800ba66:	d9e1      	bls.n	800ba2c <tcp_parseopt.isra.0+0x24>
        tcp_optidx += data - 2;
 800ba68:	882b      	ldrh	r3, [r5, #0]
 800ba6a:	3b02      	subs	r3, #2
 800ba6c:	4418      	add	r0, r3
 800ba6e:	8028      	strh	r0, [r5, #0]
 800ba70:	e7d2      	b.n	800ba18 <tcp_parseopt.isra.0+0x10>
 800ba72:	bf00      	nop
 800ba74:	200082c4 	.word	0x200082c4
 800ba78:	200082b4 	.word	0x200082b4

0800ba7c <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 800ba7c:	4b0e      	ldr	r3, [pc, #56]	; (800bab8 <tcp_input_delayed_close+0x3c>)
{
 800ba7e:	b510      	push	{r4, lr}
  if (recv_flags & TF_CLOSED) {
 800ba80:	781b      	ldrb	r3, [r3, #0]
{
 800ba82:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 800ba84:	f013 0310 	ands.w	r3, r3, #16
 800ba88:	d013      	beq.n	800bab2 <tcp_input_delayed_close+0x36>
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ba8a:	7e83      	ldrb	r3, [r0, #26]
 800ba8c:	06db      	lsls	r3, r3, #27
 800ba8e:	d406      	bmi.n	800ba9e <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ba90:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800ba94:	b11b      	cbz	r3, 800ba9e <tcp_input_delayed_close+0x22>
 800ba96:	f06f 010e 	mvn.w	r1, #14
 800ba9a:	6900      	ldr	r0, [r0, #16]
 800ba9c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ba9e:	4621      	mov	r1, r4
 800baa0:	4806      	ldr	r0, [pc, #24]	; (800babc <tcp_input_delayed_close+0x40>)
 800baa2:	f7fe ff57 	bl	800a954 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800baa6:	2001      	movs	r0, #1
 800baa8:	4621      	mov	r1, r4
 800baaa:	f7fd fef7 	bl	800989c <memp_free>
 800baae:	2001      	movs	r0, #1
}
 800bab0:	bd10      	pop	{r4, pc}
  return 0;
 800bab2:	4618      	mov	r0, r3
 800bab4:	e7fc      	b.n	800bab0 <tcp_input_delayed_close+0x34>
 800bab6:	bf00      	nop
 800bab8:	200082ac 	.word	0x200082ac
 800babc:	2000bd58 	.word	0x2000bd58

0800bac0 <tcp_input>:
{
 800bac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 800bac4:	6843      	ldr	r3, [r0, #4]
{
 800bac6:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 800bac8:	4ea3      	ldr	r6, [pc, #652]	; (800bd58 <tcp_input+0x298>)
{
 800baca:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 800bacc:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 800bace:	8943      	ldrh	r3, [r0, #10]
 800bad0:	2b13      	cmp	r3, #19
 800bad2:	f240 81bf 	bls.w	800be54 <tcp_input+0x394>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bad6:	4fa1      	ldr	r7, [pc, #644]	; (800bd5c <tcp_input+0x29c>)
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	46b8      	mov	r8, r7
 800badc:	6978      	ldr	r0, [r7, #20]
 800bade:	f003 fdf6 	bl	800f6ce <ip4_addr_isbroadcast_u32>
 800bae2:	4604      	mov	r4, r0
 800bae4:	2800      	cmp	r0, #0
 800bae6:	f040 81b5 	bne.w	800be54 <tcp_input+0x394>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800baf0:	2be0      	cmp	r3, #224	; 0xe0
 800baf2:	f000 81af 	beq.w	800be54 <tcp_input+0x394>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800baf6:	6833      	ldr	r3, [r6, #0]
 800baf8:	8998      	ldrh	r0, [r3, #12]
 800bafa:	f7fd fc1d 	bl	8009338 <lwip_htons>
 800bafe:	0a83      	lsrs	r3, r0, #10
 800bb00:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bb04:	2b13      	cmp	r3, #19
 800bb06:	f240 81a5 	bls.w	800be54 <tcp_input+0x394>
 800bb0a:	892a      	ldrh	r2, [r5, #8]
 800bb0c:	b299      	uxth	r1, r3
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	f0c0 81a0 	bcc.w	800be54 <tcp_input+0x394>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800bb14:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 800bb18:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800bb1a:	4a91      	ldr	r2, [pc, #580]	; (800bd60 <tcp_input+0x2a0>)
 800bb1c:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 800bb1e:	4f91      	ldr	r7, [pc, #580]	; (800bd64 <tcp_input+0x2a4>)
  if (p->len >= hdrlen_bytes) {
 800bb20:	4288      	cmp	r0, r1
 800bb22:	4691      	mov	r9, r2
 800bb24:	f8df a28c 	ldr.w	sl, [pc, #652]	; 800bdb4 <tcp_input+0x2f4>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800bb28:	8013      	strh	r3, [r2, #0]
  tcphdr_opt2 = NULL;
 800bb2a:	603c      	str	r4, [r7, #0]
  if (p->len >= hdrlen_bytes) {
 800bb2c:	d348      	bcc.n	800bbc0 <tcp_input+0x100>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800bb2e:	4249      	negs	r1, r1
 800bb30:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 800bb32:	f8aa 3000 	strh.w	r3, [sl]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800bb36:	f7fe f82f 	bl	8009b98 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bb3a:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bb3c:	f8df b278 	ldr.w	fp, [pc, #632]	; 800bdb8 <tcp_input+0x2f8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800bb40:	8820      	ldrh	r0, [r4, #0]
 800bb42:	f7fd fbf9 	bl	8009338 <lwip_htons>
 800bb46:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bb48:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bb4a:	4f87      	ldr	r7, [pc, #540]	; (800bd68 <tcp_input+0x2a8>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bb4c:	8860      	ldrh	r0, [r4, #2]
 800bb4e:	f7fd fbf3 	bl	8009338 <lwip_htons>
 800bb52:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bb54:	6834      	ldr	r4, [r6, #0]
 800bb56:	46ba      	mov	sl, r7
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bb58:	f8df 9228 	ldr.w	r9, [pc, #552]	; 800bd84 <tcp_input+0x2c4>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bb5c:	6860      	ldr	r0, [r4, #4]
 800bb5e:	f7fd fbee 	bl	800933e <lwip_htonl>
 800bb62:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bb64:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bb66:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bb6a:	68a0      	ldr	r0, [r4, #8]
 800bb6c:	f7fd fbe7 	bl	800933e <lwip_htonl>
 800bb70:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bb72:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800bb74:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bb76:	89e0      	ldrh	r0, [r4, #14]
 800bb78:	f7fd fbde 	bl	8009338 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800bb7c:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bb7e:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800bb80:	8998      	ldrh	r0, [r3, #12]
 800bb82:	f7fd fbd9 	bl	8009338 <lwip_htons>
 800bb86:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800bb8a:	f010 0003 	ands.w	r0, r0, #3
  flags = TCPH_FLAGS(tcphdr);
 800bb8e:	4a77      	ldr	r2, [pc, #476]	; (800bd6c <tcp_input+0x2ac>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800bb90:	8929      	ldrh	r1, [r5, #8]
 800bb92:	bf18      	it	ne
 800bb94:	2001      	movne	r0, #1
  flags = TCPH_FLAGS(tcphdr);
 800bb96:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800bb98:	4b75      	ldr	r3, [pc, #468]	; (800bd70 <tcp_input+0x2b0>)
 800bb9a:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb9c:	4975      	ldr	r1, [pc, #468]	; (800bd74 <tcp_input+0x2b4>)
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800bb9e:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bba0:	460f      	mov	r7, r1
  prev = NULL;
 800bba2:	2000      	movs	r0, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bba4:	680c      	ldr	r4, [r1, #0]
 800bba6:	e9cd 2303 	strd	r2, r3, [sp, #12]
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bbaa:	4b73      	ldr	r3, [pc, #460]	; (800bd78 <tcp_input+0x2b8>)
  prev = NULL;
 800bbac:	9005      	str	r0, [sp, #20]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbae:	2c00      	cmp	r4, #0
 800bbb0:	d145      	bne.n	800bc3e <tcp_input+0x17e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbb2:	4b72      	ldr	r3, [pc, #456]	; (800bd7c <tcp_input+0x2bc>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bbb4:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800bd78 <tcp_input+0x2b8>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbb8:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bbba:	f8df c200 	ldr.w	ip, [pc, #512]	; 800bdbc <tcp_input+0x2fc>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bbbe:	e150      	b.n	800be62 <tcp_input+0x3a2>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bbc0:	682b      	ldr	r3, [r5, #0]
 800bbc2:	b92b      	cbnz	r3, 800bbd0 <tcp_input+0x110>
 800bbc4:	4b6c      	ldr	r3, [pc, #432]	; (800bd78 <tcp_input+0x2b8>)
 800bbc6:	22b2      	movs	r2, #178	; 0xb2
 800bbc8:	496d      	ldr	r1, [pc, #436]	; (800bd80 <tcp_input+0x2c0>)
 800bbca:	486e      	ldr	r0, [pc, #440]	; (800bd84 <tcp_input+0x2c4>)
 800bbcc:	f005 fd32 	bl	8011634 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 800bbd0:	f06f 0113 	mvn.w	r1, #19
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f7fd ffdf 	bl	8009b98 <pbuf_header>
    tcphdr_opt1len = p->len;
 800bbda:	896c      	ldrh	r4, [r5, #10]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800bbdc:	4628      	mov	r0, r5
 800bbde:	4261      	negs	r1, r4
    tcphdr_opt1len = p->len;
 800bbe0:	f8aa 4000 	strh.w	r4, [sl]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800bbe4:	f8b9 a000 	ldrh.w	sl, [r9]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800bbe8:	b209      	sxth	r1, r1
 800bbea:	f7fd ffd5 	bl	8009b98 <pbuf_header>
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800bbee:	ebaa 0904 	sub.w	r9, sl, r4
    if (opt2len > p->next->len) {
 800bbf2:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800bbf4:	fa1f f989 	uxth.w	r9, r9
    if (opt2len > p->next->len) {
 800bbf8:	8943      	ldrh	r3, [r0, #10]
 800bbfa:	454b      	cmp	r3, r9
 800bbfc:	f0c0 812a 	bcc.w	800be54 <tcp_input+0x394>
    pbuf_header(p->next, -(s16_t)opt2len);
 800bc00:	eba4 010a 	sub.w	r1, r4, sl
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800bc04:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 800bc06:	b28c      	uxth	r4, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800bc08:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 800bc0a:	b209      	sxth	r1, r1
 800bc0c:	f7fd ffc4 	bl	8009b98 <pbuf_header>
    p->tot_len -= opt2len;
 800bc10:	892b      	ldrh	r3, [r5, #8]
 800bc12:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bc14:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 800bc16:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bc18:	b12b      	cbz	r3, 800bc26 <tcp_input+0x166>
 800bc1a:	4b57      	ldr	r3, [pc, #348]	; (800bd78 <tcp_input+0x2b8>)
 800bc1c:	22cf      	movs	r2, #207	; 0xcf
 800bc1e:	495a      	ldr	r1, [pc, #360]	; (800bd88 <tcp_input+0x2c8>)
 800bc20:	4858      	ldr	r0, [pc, #352]	; (800bd84 <tcp_input+0x2c4>)
 800bc22:	f005 fd07 	bl	8011634 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800bc26:	682b      	ldr	r3, [r5, #0]
 800bc28:	892a      	ldrh	r2, [r5, #8]
 800bc2a:	891b      	ldrh	r3, [r3, #8]
 800bc2c:	429a      	cmp	r2, r3
 800bc2e:	d084      	beq.n	800bb3a <tcp_input+0x7a>
 800bc30:	4b51      	ldr	r3, [pc, #324]	; (800bd78 <tcp_input+0x2b8>)
 800bc32:	22d0      	movs	r2, #208	; 0xd0
 800bc34:	4955      	ldr	r1, [pc, #340]	; (800bd8c <tcp_input+0x2cc>)
 800bc36:	4853      	ldr	r0, [pc, #332]	; (800bd84 <tcp_input+0x2c4>)
 800bc38:	f005 fcfc 	bl	8011634 <iprintf>
 800bc3c:	e77d      	b.n	800bb3a <tcp_input+0x7a>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bc3e:	7d22      	ldrb	r2, [r4, #20]
 800bc40:	b92a      	cbnz	r2, 800bc4e <tcp_input+0x18e>
 800bc42:	22e2      	movs	r2, #226	; 0xe2
 800bc44:	4952      	ldr	r1, [pc, #328]	; (800bd90 <tcp_input+0x2d0>)
 800bc46:	4648      	mov	r0, r9
 800bc48:	f005 fcf4 	bl	8011634 <iprintf>
 800bc4c:	4b4a      	ldr	r3, [pc, #296]	; (800bd78 <tcp_input+0x2b8>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bc4e:	7d22      	ldrb	r2, [r4, #20]
 800bc50:	2a0a      	cmp	r2, #10
 800bc52:	d105      	bne.n	800bc60 <tcp_input+0x1a0>
 800bc54:	22e3      	movs	r2, #227	; 0xe3
 800bc56:	494f      	ldr	r1, [pc, #316]	; (800bd94 <tcp_input+0x2d4>)
 800bc58:	4648      	mov	r0, r9
 800bc5a:	f005 fceb 	bl	8011634 <iprintf>
 800bc5e:	4b46      	ldr	r3, [pc, #280]	; (800bd78 <tcp_input+0x2b8>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bc60:	7d22      	ldrb	r2, [r4, #20]
 800bc62:	2a01      	cmp	r2, #1
 800bc64:	d105      	bne.n	800bc72 <tcp_input+0x1b2>
 800bc66:	22e4      	movs	r2, #228	; 0xe4
 800bc68:	494b      	ldr	r1, [pc, #300]	; (800bd98 <tcp_input+0x2d8>)
 800bc6a:	4648      	mov	r0, r9
 800bc6c:	f005 fce2 	bl	8011634 <iprintf>
 800bc70:	4b41      	ldr	r3, [pc, #260]	; (800bd78 <tcp_input+0x2b8>)
    if (pcb->remote_port == tcphdr->src &&
 800bc72:	6831      	ldr	r1, [r6, #0]
 800bc74:	8b20      	ldrh	r0, [r4, #24]
 800bc76:	880a      	ldrh	r2, [r1, #0]
 800bc78:	4290      	cmp	r0, r2
 800bc7a:	68e2      	ldr	r2, [r4, #12]
 800bc7c:	d169      	bne.n	800bd52 <tcp_input+0x292>
 800bc7e:	8ae0      	ldrh	r0, [r4, #22]
 800bc80:	8849      	ldrh	r1, [r1, #2]
 800bc82:	4288      	cmp	r0, r1
 800bc84:	d165      	bne.n	800bd52 <tcp_input+0x292>
        pcb->local_port == tcphdr->dest &&
 800bc86:	6860      	ldr	r0, [r4, #4]
 800bc88:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800bc8c:	4288      	cmp	r0, r1
 800bc8e:	d160      	bne.n	800bd52 <tcp_input+0x292>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800bc96:	4288      	cmp	r0, r1
 800bc98:	d15b      	bne.n	800bd52 <tcp_input+0x292>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bc9a:	42a2      	cmp	r2, r4
 800bc9c:	f040 841a 	bne.w	800c4d4 <tcp_input+0xa14>
 800bca0:	4b35      	ldr	r3, [pc, #212]	; (800bd78 <tcp_input+0x2b8>)
 800bca2:	22ec      	movs	r2, #236	; 0xec
 800bca4:	493d      	ldr	r1, [pc, #244]	; (800bd9c <tcp_input+0x2dc>)
 800bca6:	4837      	ldr	r0, [pc, #220]	; (800bd84 <tcp_input+0x2c4>)
 800bca8:	f005 fcc4 	bl	8011634 <iprintf>
      if (prev != NULL) {
 800bcac:	9b05      	ldr	r3, [sp, #20]
 800bcae:	b12b      	cbz	r3, 800bcbc <tcp_input+0x1fc>
        prev->next = pcb->next;
 800bcb0:	68e3      	ldr	r3, [r4, #12]
 800bcb2:	9a05      	ldr	r2, [sp, #20]
 800bcb4:	60d3      	str	r3, [r2, #12]
        pcb->next = tcp_active_pcbs;
 800bcb6:	683b      	ldr	r3, [r7, #0]
        tcp_active_pcbs = pcb;
 800bcb8:	603c      	str	r4, [r7, #0]
        pcb->next = tcp_active_pcbs;
 800bcba:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bcbc:	68e3      	ldr	r3, [r4, #12]
 800bcbe:	42a3      	cmp	r3, r4
 800bcc0:	d105      	bne.n	800bcce <tcp_input+0x20e>
 800bcc2:	4b2d      	ldr	r3, [pc, #180]	; (800bd78 <tcp_input+0x2b8>)
 800bcc4:	22f4      	movs	r2, #244	; 0xf4
 800bcc6:	4936      	ldr	r1, [pc, #216]	; (800bda0 <tcp_input+0x2e0>)
 800bcc8:	482e      	ldr	r0, [pc, #184]	; (800bd84 <tcp_input+0x2c4>)
 800bcca:	f005 fcb3 	bl	8011634 <iprintf>
    inseg.next = NULL;
 800bcce:	4b35      	ldr	r3, [pc, #212]	; (800bda4 <tcp_input+0x2e4>)
 800bcd0:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 800bcd2:	8929      	ldrh	r1, [r5, #8]
    recv_acked = 0;
 800bcd4:	4834      	ldr	r0, [pc, #208]	; (800bda8 <tcp_input+0x2e8>)
    inseg.len = p->tot_len;
 800bcd6:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 800bcd8:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 800bcda:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800bdc0 <tcp_input+0x300>
    inseg.tcphdr = tcphdr;
 800bcde:	60d9      	str	r1, [r3, #12]
    recv_data = NULL;
 800bce0:	4932      	ldr	r1, [pc, #200]	; (800bdac <tcp_input+0x2ec>)
    inseg.next = NULL;
 800bce2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bce4:	600a      	str	r2, [r1, #0]
 800bce6:	4689      	mov	r9, r1
    recv_flags = 0;
 800bce8:	f888 2000 	strb.w	r2, [r8]
    recv_acked = 0;
 800bcec:	8002      	strh	r2, [r0, #0]
    if (flags & TCP_PSH) {
 800bcee:	9a03      	ldr	r2, [sp, #12]
    inseg.p = p;
 800bcf0:	605d      	str	r5, [r3, #4]
    if (flags & TCP_PSH) {
 800bcf2:	7812      	ldrb	r2, [r2, #0]
 800bcf4:	9005      	str	r0, [sp, #20]
 800bcf6:	f012 0f08 	tst.w	r2, #8
 800bcfa:	9306      	str	r3, [sp, #24]
 800bcfc:	d003      	beq.n	800bd06 <tcp_input+0x246>
      p->flags |= PBUF_FLAG_PUSH;
 800bcfe:	7b6b      	ldrb	r3, [r5, #13]
 800bd00:	f043 0301 	orr.w	r3, r3, #1
 800bd04:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 800bd06:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 8144 	beq.w	800bf96 <tcp_input+0x4d6>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f7fe ff34 	bl	800ab7c <tcp_process_refused_data>
 800bd14:	300d      	adds	r0, #13
 800bd16:	d008      	beq.n	800bd2a <tcp_input+0x26a>
 800bd18:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	f000 813b 	beq.w	800bf96 <tcp_input+0x4d6>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800bd20:	9b04      	ldr	r3, [sp, #16]
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 8136 	beq.w	800bf96 <tcp_input+0x4d6>
        if (pcb->rcv_ann_wnd == 0) {
 800bd2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bd2c:	b913      	cbnz	r3, 800bd34 <tcp_input+0x274>
          tcp_send_empty_ack(pcb);
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f001 f810 	bl	800cd54 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800bd34:	2400      	movs	r4, #0
 800bd36:	4b1e      	ldr	r3, [pc, #120]	; (800bdb0 <tcp_input+0x2f0>)
 800bd38:	601c      	str	r4, [r3, #0]
    if (inseg.p != NULL)
 800bd3a:	9b06      	ldr	r3, [sp, #24]
    recv_data = NULL;
 800bd3c:	f8c9 4000 	str.w	r4, [r9]
    if (inseg.p != NULL)
 800bd40:	6858      	ldr	r0, [r3, #4]
 800bd42:	b118      	cbz	r0, 800bd4c <tcp_input+0x28c>
      pbuf_free(inseg.p);
 800bd44:	f7fd ff2e 	bl	8009ba4 <pbuf_free>
      inseg.p = NULL;
 800bd48:	9b06      	ldr	r3, [sp, #24]
 800bd4a:	605c      	str	r4, [r3, #4]
}
 800bd4c:	b009      	add	sp, #36	; 0x24
 800bd4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd52:	9405      	str	r4, [sp, #20]
 800bd54:	4614      	mov	r4, r2
 800bd56:	e72a      	b.n	800bbae <tcp_input+0xee>
 800bd58:	200082b8 	.word	0x200082b8
 800bd5c:	20008634 	.word	0x20008634
 800bd60:	200082c4 	.word	0x200082c4
 800bd64:	200082c0 	.word	0x200082c0
 800bd68:	2000828c 	.word	0x2000828c
 800bd6c:	20008290 	.word	0x20008290
 800bd70:	200082c6 	.word	0x200082c6
 800bd74:	2000bd58 	.word	0x2000bd58
 800bd78:	080140df 	.word	0x080140df
 800bd7c:	2000bd68 	.word	0x2000bd68
 800bd80:	0801426a 	.word	0x0801426a
 800bd84:	08012feb 	.word	0x08012feb
 800bd88:	0801427a 	.word	0x0801427a
 800bd8c:	08014286 	.word	0x08014286
 800bd90:	080142a5 	.word	0x080142a5
 800bd94:	080142cc 	.word	0x080142cc
 800bd98:	080142f6 	.word	0x080142f6
 800bd9c:	0801431d 	.word	0x0801431d
 800bda0:	08014348 	.word	0x08014348
 800bda4:	20008294 	.word	0x20008294
 800bda8:	200082a4 	.word	0x200082a4
 800bdac:	200082a8 	.word	0x200082a8
 800bdb0:	2000bd6c 	.word	0x2000bd6c
 800bdb4:	200082bc 	.word	0x200082bc
 800bdb8:	200082b0 	.word	0x200082b0
 800bdbc:	08014372 	.word	0x08014372
 800bdc0:	200082ac 	.word	0x200082ac
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bdc4:	7d23      	ldrb	r3, [r4, #20]
 800bdc6:	2b0a      	cmp	r3, #10
 800bdc8:	d007      	beq.n	800bdda <tcp_input+0x31a>
 800bdca:	4661      	mov	r1, ip
 800bdcc:	464b      	mov	r3, r9
 800bdce:	22fe      	movs	r2, #254	; 0xfe
 800bdd0:	48a6      	ldr	r0, [pc, #664]	; (800c06c <tcp_input+0x5ac>)
 800bdd2:	f005 fc2f 	bl	8011634 <iprintf>
 800bdd6:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 800c090 <tcp_input+0x5d0>
      if (pcb->remote_port == tcphdr->src &&
 800bdda:	6833      	ldr	r3, [r6, #0]
 800bddc:	8b20      	ldrh	r0, [r4, #24]
 800bdde:	881a      	ldrh	r2, [r3, #0]
 800bde0:	4290      	cmp	r0, r2
 800bde2:	d13d      	bne.n	800be60 <tcp_input+0x3a0>
          pcb->local_port == tcphdr->dest &&
 800bde4:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800bde6:	8ae2      	ldrh	r2, [r4, #22]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d139      	bne.n	800be60 <tcp_input+0x3a0>
          pcb->local_port == tcphdr->dest &&
 800bdec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	6863      	ldr	r3, [r4, #4]
 800bdf4:	428b      	cmp	r3, r1
 800bdf6:	d133      	bne.n	800be60 <tcp_input+0x3a0>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bdf8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	428b      	cmp	r3, r1
 800be02:	d12d      	bne.n	800be60 <tcp_input+0x3a0>
  if (flags & TCP_RST) {
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	781b      	ldrb	r3, [r3, #0]
 800be08:	075e      	lsls	r6, r3, #29
 800be0a:	d423      	bmi.n	800be54 <tcp_input+0x394>
  if (flags & TCP_SYN) {
 800be0c:	9904      	ldr	r1, [sp, #16]
 800be0e:	880e      	ldrh	r6, [r1, #0]
 800be10:	0799      	lsls	r1, r3, #30
 800be12:	d512      	bpl.n	800be3a <tcp_input+0x37a>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800be14:	f8db 1000 	ldr.w	r1, [fp]
 800be18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be1a:	1acb      	subs	r3, r1, r3
 800be1c:	d412      	bmi.n	800be44 <tcp_input+0x384>
 800be1e:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 800be20:	1bdb      	subs	r3, r3, r7
 800be22:	2b00      	cmp	r3, #0
 800be24:	dc0e      	bgt.n	800be44 <tcp_input+0x384>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800be26:	4b92      	ldr	r3, [pc, #584]	; (800c070 <tcp_input+0x5b0>)
 800be28:	4431      	add	r1, r6
 800be2a:	e9cd 2000 	strd	r2, r0, [sp]
 800be2e:	1d1a      	adds	r2, r3, #4
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800be30:	f8da 0000 	ldr.w	r0, [sl]
 800be34:	f001 f948 	bl	800d0c8 <tcp_rst>
 800be38:	e00c      	b.n	800be54 <tcp_input+0x394>
  } else if (flags & TCP_FIN) {
 800be3a:	07df      	lsls	r7, r3, #31
    pcb->tmr = tcp_ticks;
 800be3c:	bf42      	ittt	mi
 800be3e:	4b8d      	ldrmi	r3, [pc, #564]	; (800c074 <tcp_input+0x5b4>)
 800be40:	681b      	ldrmi	r3, [r3, #0]
 800be42:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800be44:	b136      	cbz	r6, 800be54 <tcp_input+0x394>
    pcb->flags |= TF_ACK_NOW;
 800be46:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 800be48:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 800be4a:	f043 0302 	orr.w	r3, r3, #2
 800be4e:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800be50:	f000 ffb8 	bl	800cdc4 <tcp_output>
  pbuf_free(p);
 800be54:	4628      	mov	r0, r5
}
 800be56:	b009      	add	sp, #36	; 0x24
 800be58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800be5c:	f7fd bea2 	b.w	8009ba4 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800be60:	68e4      	ldr	r4, [r4, #12]
 800be62:	2c00      	cmp	r4, #0
 800be64:	d1ae      	bne.n	800bdc4 <tcp_input+0x304>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800be66:	4b84      	ldr	r3, [pc, #528]	; (800c078 <tcp_input+0x5b8>)
      if (lpcb->local_port == tcphdr->dest) {
 800be68:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800be6a:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800be6c:	f8d8 c014 	ldr.w	ip, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800be70:	4689      	mov	r9, r1
 800be72:	f1b9 0f00 	cmp.w	r9, #0
 800be76:	d111      	bne.n	800be9c <tcp_input+0x3dc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800be78:	8990      	ldrh	r0, [r2, #12]
 800be7a:	f7fd fa5d 	bl	8009338 <lwip_htons>
 800be7e:	0743      	lsls	r3, r0, #29
 800be80:	d4e8      	bmi.n	800be54 <tcp_input+0x394>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800be82:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800be84:	9a04      	ldr	r2, [sp, #16]
 800be86:	f8db 1000 	ldr.w	r1, [fp]
 800be8a:	8810      	ldrh	r0, [r2, #0]
 800be8c:	881a      	ldrh	r2, [r3, #0]
 800be8e:	4401      	add	r1, r0
 800be90:	9201      	str	r2, [sp, #4]
 800be92:	885b      	ldrh	r3, [r3, #2]
 800be94:	9300      	str	r3, [sp, #0]
 800be96:	4b76      	ldr	r3, [pc, #472]	; (800c070 <tcp_input+0x5b0>)
 800be98:	1d1a      	adds	r2, r3, #4
 800be9a:	e7c9      	b.n	800be30 <tcp_input+0x370>
      if (lpcb->local_port == tcphdr->dest) {
 800be9c:	8850      	ldrh	r0, [r2, #2]
 800be9e:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800bea2:	4283      	cmp	r3, r0
 800bea4:	d107      	bne.n	800beb6 <tcp_input+0x3f6>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bea6:	f8d9 3000 	ldr.w	r3, [r9]
 800beaa:	4563      	cmp	r3, ip
 800beac:	f000 82f5 	beq.w	800c49a <tcp_input+0x9da>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 82f2 	beq.w	800c49a <tcp_input+0x9da>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800beb6:	464c      	mov	r4, r9
 800beb8:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800bebc:	e7d9      	b.n	800be72 <tcp_input+0x3b2>
  } else if (flags & TCP_SYN) {
 800bebe:	0799      	lsls	r1, r3, #30
 800bec0:	d5c8      	bpl.n	800be54 <tcp_input+0x394>
    npcb = tcp_alloc(pcb->prio);
 800bec2:	f899 0015 	ldrb.w	r0, [r9, #21]
 800bec6:	f7fe ffb1 	bl	800ae2c <tcp_alloc>
    if (npcb == NULL) {
 800beca:	4682      	mov	sl, r0
 800becc:	b950      	cbnz	r0, 800bee4 <tcp_input+0x424>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bece:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0be      	beq.n	800be54 <tcp_input+0x394>
 800bed6:	4601      	mov	r1, r0
 800bed8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bedc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800bee0:	4798      	blx	r3
 800bee2:	e7b7      	b.n	800be54 <tcp_input+0x394>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bee4:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800bee8:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800beea:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800beec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bef0:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800bef2:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 800bef6:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800bef8:	7813      	ldrb	r3, [r2, #0]
 800befa:	7852      	ldrb	r2, [r2, #1]
 800befc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800bf00:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800bf02:	2303      	movs	r3, #3
 800bf04:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800bf06:	f8db 3000 	ldr.w	r3, [fp]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bf0e:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bf10:	f7ff f816 	bl	800af40 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bf14:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 800bf18:	f8ca 0054 	str.w	r0, [sl, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bf1c:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800bf1e:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
    npcb->lastack = iss;
 800bf22:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bf26:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800bf2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 800bf2e:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 800bf32:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->listener = pcb;
 800bf36:	f8ca 9078 	str.w	r9, [sl, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800bf3a:	f899 3008 	ldrb.w	r3, [r9, #8]
 800bf3e:	f003 030c 	and.w	r3, r3, #12
 800bf42:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	f8c7 a000 	str.w	sl, [r7]
 800bf4c:	f8ca 300c 	str.w	r3, [sl, #12]
 800bf50:	f001 fa5c 	bl	800d40c <tcp_timer_needed>
 800bf54:	4b49      	ldr	r3, [pc, #292]	; (800c07c <tcp_input+0x5bc>)
 800bf56:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800bf58:	f10a 0032 	add.w	r0, sl, #50	; 0x32
    TCP_REG_ACTIVE(npcb);
 800bf5c:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800bf5e:	f7ff fd53 	bl	800ba08 <tcp_parseopt.isra.0>
    npcb->snd_wnd = tcphdr->wnd;
 800bf62:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bf64:	f10a 0104 	add.w	r1, sl, #4
 800bf68:	f8ba 0032 	ldrh.w	r0, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800bf6c:	89db      	ldrh	r3, [r3, #14]
 800bf6e:	f8aa 305c 	strh.w	r3, [sl, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800bf72:	f8aa 305e 	strh.w	r3, [sl, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bf76:	f7fe ffef 	bl	800af58 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bf7a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800bf7c:	f8aa 0032 	strh.w	r0, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800bf80:	4650      	mov	r0, sl
 800bf82:	f000 fe35 	bl	800cbf0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800bf86:	b120      	cbz	r0, 800bf92 <tcp_input+0x4d2>
      tcp_abandon(npcb, 0);
 800bf88:	4621      	mov	r1, r4
 800bf8a:	4650      	mov	r0, sl
 800bf8c:	f7fe fea2 	bl	800acd4 <tcp_abandon>
      return;
 800bf90:	e760      	b.n	800be54 <tcp_input+0x394>
    tcp_output(npcb);
 800bf92:	4650      	mov	r0, sl
 800bf94:	e75c      	b.n	800be50 <tcp_input+0x390>
    tcp_input_pcb = pcb;
 800bf96:	4b3a      	ldr	r3, [pc, #232]	; (800c080 <tcp_input+0x5c0>)
 800bf98:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800bf9a:	9b03      	ldr	r3, [sp, #12]
 800bf9c:	781d      	ldrb	r5, [r3, #0]
 800bf9e:	076a      	lsls	r2, r5, #29
 800bfa0:	d53d      	bpl.n	800c01e <tcp_input+0x55e>
    if (pcb->state == SYN_SENT) {
 800bfa2:	7d21      	ldrb	r1, [r4, #20]
 800bfa4:	2902      	cmp	r1, #2
 800bfa6:	d123      	bne.n	800bff0 <tcp_input+0x530>
      if (ackno == pcb->snd_nxt) {
 800bfa8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800bfaa:	f8da 3000 	ldr.w	r3, [sl]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d109      	bne.n	800bfc6 <tcp_input+0x506>
      recv_flags |= TF_RESET;
 800bfb2:	f898 3000 	ldrb.w	r3, [r8]
 800bfb6:	f043 0308 	orr.w	r3, r3, #8
 800bfba:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 800bfbe:	7ea3      	ldrb	r3, [r4, #26]
 800bfc0:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 800bfc4:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800bfc6:	f898 3000 	ldrb.w	r3, [r8]
 800bfca:	0719      	lsls	r1, r3, #28
 800bfcc:	f140 81fe 	bpl.w	800c3cc <tcp_input+0x90c>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bfd0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800bfd4:	b11b      	cbz	r3, 800bfde <tcp_input+0x51e>
 800bfd6:	f06f 010d 	mvn.w	r1, #13
 800bfda:	6920      	ldr	r0, [r4, #16]
 800bfdc:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bfde:	4621      	mov	r1, r4
 800bfe0:	4828      	ldr	r0, [pc, #160]	; (800c084 <tcp_input+0x5c4>)
 800bfe2:	f7fe fcb7 	bl	800a954 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800bfe6:	4621      	mov	r1, r4
 800bfe8:	2001      	movs	r0, #1
 800bfea:	f7fd fc57 	bl	800989c <memp_free>
 800bfee:	e6a1      	b.n	800bd34 <tcp_input+0x274>
      if (seqno == pcb->rcv_nxt) {
 800bff0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bff2:	f8db 3000 	ldr.w	r3, [fp]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d007      	beq.n	800c00a <tcp_input+0x54a>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bffa:	1a9b      	subs	r3, r3, r2
 800bffc:	d4e3      	bmi.n	800bfc6 <tcp_input+0x506>
 800bffe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800c000:	1a9b      	subs	r3, r3, r2
 800c002:	2b00      	cmp	r3, #0
 800c004:	dcdf      	bgt.n	800bfc6 <tcp_input+0x506>
      tcp_ack_now(pcb);
 800c006:	7ea3      	ldrb	r3, [r4, #26]
 800c008:	e011      	b.n	800c02e <tcp_input+0x56e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c00a:	2900      	cmp	r1, #0
 800c00c:	d1d1      	bne.n	800bfb2 <tcp_input+0x4f2>
 800c00e:	4b1e      	ldr	r3, [pc, #120]	; (800c088 <tcp_input+0x5c8>)
 800c010:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c014:	491d      	ldr	r1, [pc, #116]	; (800c08c <tcp_input+0x5cc>)
 800c016:	4815      	ldr	r0, [pc, #84]	; (800c06c <tcp_input+0x5ac>)
 800c018:	f005 fb0c 	bl	8011634 <iprintf>
 800c01c:	e7c9      	b.n	800bfb2 <tcp_input+0x4f2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c01e:	f015 0202 	ands.w	r2, r5, #2
 800c022:	7ea3      	ldrb	r3, [r4, #26]
 800c024:	d006      	beq.n	800c034 <tcp_input+0x574>
 800c026:	7d21      	ldrb	r1, [r4, #20]
 800c028:	3902      	subs	r1, #2
 800c02a:	2901      	cmp	r1, #1
 800c02c:	d902      	bls.n	800c034 <tcp_input+0x574>
      tcp_ack_now(pcb);
 800c02e:	f043 0302 	orr.w	r3, r3, #2
 800c032:	e7c7      	b.n	800bfc4 <tcp_input+0x504>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c034:	06db      	lsls	r3, r3, #27
  tcp_parseopt(pcb);
 800c036:	f104 0032 	add.w	r0, r4, #50	; 0x32
 800c03a:	9207      	str	r2, [sp, #28]
    pcb->tmr = tcp_ticks;
 800c03c:	bf5e      	ittt	pl
 800c03e:	4b0d      	ldrpl	r3, [pc, #52]	; (800c074 <tcp_input+0x5b4>)
 800c040:	681b      	ldrpl	r3, [r3, #0]
 800c042:	6223      	strpl	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800c044:	2300      	movs	r3, #0
 800c046:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800c04a:	f7ff fcdd 	bl	800ba08 <tcp_parseopt.isra.0>
  switch (pcb->state) {
 800c04e:	7d23      	ldrb	r3, [r4, #20]
 800c050:	9a07      	ldr	r2, [sp, #28]
 800c052:	3b02      	subs	r3, #2
 800c054:	2b07      	cmp	r3, #7
 800c056:	d8b6      	bhi.n	800bfc6 <tcp_input+0x506>
 800c058:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c05c:	009e001c 	.word	0x009e001c
 800c060:	010c0108 	.word	0x010c0108
 800c064:	01080156 	.word	0x01080156
 800c068:	018e016f 	.word	0x018e016f
 800c06c:	08012feb 	.word	0x08012feb
 800c070:	20008644 	.word	0x20008644
 800c074:	2000bd5c 	.word	0x2000bd5c
 800c078:	2000bd60 	.word	0x2000bd60
 800c07c:	2000bd54 	.word	0x2000bd54
 800c080:	2000bd6c 	.word	0x2000bd6c
 800c084:	2000bd58 	.word	0x2000bd58
 800c088:	080140df 	.word	0x080140df
 800c08c:	0801439f 	.word	0x0801439f
 800c090:	08014372 	.word	0x08014372
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c094:	f005 0312 	and.w	r3, r5, #18
 800c098:	2b12      	cmp	r3, #18
 800c09a:	d15f      	bne.n	800c15c <tcp_input+0x69c>
        && (ackno == pcb->lastack + 1)) {
 800c09c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c09e:	f8da 3000 	ldr.w	r3, [sl]
 800c0a2:	3201      	adds	r2, #1
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d159      	bne.n	800c15c <tcp_input+0x69c>
      pcb->rcv_nxt = seqno + 1;
 800c0a8:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 800c0ac:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 800c0ae:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800c0b0:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c0b2:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c0b4:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 800c0b6:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c0b8:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 800c0ba:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c0bc:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800c0be:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 800c0c0:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c0c4:	18e1      	adds	r1, r4, r3
      pcb->snd_wnd_max = pcb->snd_wnd;
 800c0c6:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->state = ESTABLISHED;
 800c0ca:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c0cc:	f7fe ff44 	bl	800af58 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c0d0:	f241 121c 	movw	r2, #4380	; 0x111c
 800c0d4:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c0d6:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c0d8:	0080      	lsls	r0, r0, #2
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	bf38      	it	cc
 800c0de:	4613      	movcc	r3, r2
 800c0e0:	4298      	cmp	r0, r3
 800c0e2:	bf28      	it	cs
 800c0e4:	4618      	movcs	r0, r3
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c0e6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c0ea:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c0ee:	b933      	cbnz	r3, 800c0fe <tcp_input+0x63e>
 800c0f0:	4bae      	ldr	r3, [pc, #696]	; (800c3ac <tcp_input+0x8ec>)
 800c0f2:	f240 321a 	movw	r2, #794	; 0x31a
 800c0f6:	49ae      	ldr	r1, [pc, #696]	; (800c3b0 <tcp_input+0x8f0>)
 800c0f8:	48ae      	ldr	r0, [pc, #696]	; (800c3b4 <tcp_input+0x8f4>)
 800c0fa:	f005 fa9b 	bl	8011634 <iprintf>
      --pcb->snd_queuelen;
 800c0fe:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 800c102:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 800c104:	3b01      	subs	r3, #1
 800c106:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 800c10a:	b9fd      	cbnz	r5, 800c14c <tcp_input+0x68c>
        rseg = pcb->unsent;
 800c10c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800c10e:	b935      	cbnz	r5, 800c11e <tcp_input+0x65e>
 800c110:	4ba6      	ldr	r3, [pc, #664]	; (800c3ac <tcp_input+0x8ec>)
 800c112:	f240 3222 	movw	r2, #802	; 0x322
 800c116:	49a8      	ldr	r1, [pc, #672]	; (800c3b8 <tcp_input+0x8f8>)
 800c118:	48a6      	ldr	r0, [pc, #664]	; (800c3b4 <tcp_input+0x8f4>)
 800c11a:	f005 fa8b 	bl	8011634 <iprintf>
        pcb->unsent = rseg->next;
 800c11e:	682b      	ldr	r3, [r5, #0]
 800c120:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 800c122:	4628      	mov	r0, r5
 800c124:	f7fe f984 	bl	800a430 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 800c128:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c12a:	b993      	cbnz	r3, 800c152 <tcp_input+0x692>
        pcb->rtime = -1;
 800c12c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c130:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c132:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c136:	2b00      	cmp	r3, #0
 800c138:	f43f af65 	beq.w	800c006 <tcp_input+0x546>
 800c13c:	2200      	movs	r2, #0
 800c13e:	4621      	mov	r1, r4
 800c140:	6920      	ldr	r0, [r4, #16]
 800c142:	4798      	blx	r3
      if (err == ERR_ABRT) {
 800c144:	300d      	adds	r0, #13
 800c146:	f47f af5e 	bne.w	800c006 <tcp_input+0x546>
 800c14a:	e5f3      	b.n	800bd34 <tcp_input+0x274>
        pcb->unacked = rseg->next;
 800c14c:	682b      	ldr	r3, [r5, #0]
 800c14e:	66e3      	str	r3, [r4, #108]	; 0x6c
 800c150:	e7e7      	b.n	800c122 <tcp_input+0x662>
        pcb->rtime = 0;
 800c152:	2300      	movs	r3, #0
 800c154:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 800c156:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c15a:	e7ea      	b.n	800c132 <tcp_input+0x672>
    else if (flags & TCP_ACK) {
 800c15c:	06e8      	lsls	r0, r5, #27
 800c15e:	f57f af32 	bpl.w	800bfc6 <tcp_input+0x506>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c162:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c164:	9a04      	ldr	r2, [sp, #16]
 800c166:	f8db 1000 	ldr.w	r1, [fp]
 800c16a:	8810      	ldrh	r0, [r2, #0]
 800c16c:	881a      	ldrh	r2, [r3, #0]
 800c16e:	4401      	add	r1, r0
 800c170:	9201      	str	r2, [sp, #4]
 800c172:	885b      	ldrh	r3, [r3, #2]
 800c174:	9300      	str	r3, [sp, #0]
 800c176:	4b91      	ldr	r3, [pc, #580]	; (800c3bc <tcp_input+0x8fc>)
 800c178:	f8da 0000 	ldr.w	r0, [sl]
 800c17c:	1d1a      	adds	r2, r3, #4
 800c17e:	f000 ffa3 	bl	800d0c8 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c182:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c186:	2b05      	cmp	r3, #5
 800c188:	f63f af1d 	bhi.w	800bfc6 <tcp_input+0x506>
        pcb->rtime = 0;
 800c18c:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 800c18e:	4620      	mov	r0, r4
        pcb->rtime = 0;
 800c190:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800c192:	f000 fff3 	bl	800d17c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800c196:	e716      	b.n	800bfc6 <tcp_input+0x506>
    if (flags & TCP_ACK) {
 800c198:	06e9      	lsls	r1, r5, #27
 800c19a:	d559      	bpl.n	800c250 <tcp_input+0x790>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c19c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c19e:	f8da 0000 	ldr.w	r0, [sl]
 800c1a2:	43db      	mvns	r3, r3
 800c1a4:	42c3      	cmn	r3, r0
 800c1a6:	d444      	bmi.n	800c232 <tcp_input+0x772>
 800c1a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c1aa:	1ac3      	subs	r3, r0, r3
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	dc40      	bgt.n	800c232 <tcp_input+0x772>
        pcb->state = ESTABLISHED;
 800c1b0:	2304      	movs	r3, #4
 800c1b2:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800c1b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c1b6:	b143      	cbz	r3, 800c1ca <tcp_input+0x70a>
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	b933      	cbnz	r3, 800c1ca <tcp_input+0x70a>
 800c1bc:	4b7b      	ldr	r3, [pc, #492]	; (800c3ac <tcp_input+0x8ec>)
 800c1be:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c1c2:	497f      	ldr	r1, [pc, #508]	; (800c3c0 <tcp_input+0x900>)
 800c1c4:	487b      	ldr	r0, [pc, #492]	; (800c3b4 <tcp_input+0x8f4>)
 800c1c6:	f005 fa35 	bl	8011634 <iprintf>
        if (pcb->listener == NULL) {
 800c1ca:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c1cc:	b91b      	cbnz	r3, 800c1d6 <tcp_input+0x716>
            tcp_abort(pcb);
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f7fe fdf6 	bl	800adc0 <tcp_abort>
            goto aborted;
 800c1d4:	e5ae      	b.n	800bd34 <tcp_input+0x274>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0f8      	beq.n	800c1ce <tcp_input+0x70e>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4621      	mov	r1, r4
 800c1e0:	6920      	ldr	r0, [r4, #16]
 800c1e2:	4798      	blx	r3
        if (err != ERR_OK) {
 800c1e4:	b118      	cbz	r0, 800c1ee <tcp_input+0x72e>
          if (err != ERR_ABRT) {
 800c1e6:	300d      	adds	r0, #13
 800c1e8:	f43f ada4 	beq.w	800bd34 <tcp_input+0x274>
 800c1ec:	e7ef      	b.n	800c1ce <tcp_input+0x70e>
        tcp_receive(pcb);
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f7fe ff24 	bl	800b03c <tcp_receive>
        if (recv_acked != 0) {
 800c1f4:	9b05      	ldr	r3, [sp, #20]
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	b113      	cbz	r3, 800c200 <tcp_input+0x740>
          recv_acked--;
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	9a05      	ldr	r2, [sp, #20]
 800c1fe:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c200:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800c202:	f241 111c 	movw	r1, #4380	; 0x111c
 800c206:	0053      	lsls	r3, r2, #1
 800c208:	0092      	lsls	r2, r2, #2
 800c20a:	428b      	cmp	r3, r1
 800c20c:	bf38      	it	cc
 800c20e:	460b      	movcc	r3, r1
 800c210:	4293      	cmp	r3, r2
 800c212:	bf28      	it	cs
 800c214:	4613      	movcs	r3, r2
 800c216:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c21a:	f898 3000 	ldrb.w	r3, [r8]
 800c21e:	069b      	lsls	r3, r3, #26
 800c220:	f57f aed1 	bpl.w	800bfc6 <tcp_input+0x506>
      tcp_ack_now(pcb);
 800c224:	7ea3      	ldrb	r3, [r4, #26]
 800c226:	f043 0302 	orr.w	r3, r3, #2
 800c22a:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 800c22c:	2307      	movs	r3, #7
      pcb->state = FIN_WAIT_2;
 800c22e:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800c230:	e6c9      	b.n	800bfc6 <tcp_input+0x506>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c232:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c234:	9a04      	ldr	r2, [sp, #16]
 800c236:	f8db 1000 	ldr.w	r1, [fp]
 800c23a:	8815      	ldrh	r5, [r2, #0]
 800c23c:	881a      	ldrh	r2, [r3, #0]
 800c23e:	4429      	add	r1, r5
 800c240:	9201      	str	r2, [sp, #4]
 800c242:	885b      	ldrh	r3, [r3, #2]
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	4b5d      	ldr	r3, [pc, #372]	; (800c3bc <tcp_input+0x8fc>)
 800c248:	1d1a      	adds	r2, r3, #4
 800c24a:	f000 ff3d 	bl	800d0c8 <tcp_rst>
    if (err != ERR_ABRT) {
 800c24e:	e6ba      	b.n	800bfc6 <tcp_input+0x506>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c250:	2a00      	cmp	r2, #0
 800c252:	f43f aeb8 	beq.w	800bfc6 <tcp_input+0x506>
 800c256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c258:	f8db 2000 	ldr.w	r2, [fp]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4293      	cmp	r3, r2
 800c260:	f47f aeb1 	bne.w	800bfc6 <tcp_input+0x506>
      tcp_rexmit(pcb);
 800c264:	4620      	mov	r0, r4
 800c266:	f000 ffa5 	bl	800d1b4 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800c26a:	e6ac      	b.n	800bfc6 <tcp_input+0x506>
    tcp_receive(pcb);
 800c26c:	4620      	mov	r0, r4
 800c26e:	f7fe fee5 	bl	800b03c <tcp_receive>
 800c272:	e7d2      	b.n	800c21a <tcp_input+0x75a>
    tcp_receive(pcb);
 800c274:	4620      	mov	r0, r4
 800c276:	f7fe fee1 	bl	800b03c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c27a:	f898 3000 	ldrb.w	r3, [r8]
 800c27e:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 800c286:	d030      	beq.n	800c2ea <tcp_input+0x82a>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c288:	f013 0f10 	tst.w	r3, #16
 800c28c:	7ea3      	ldrb	r3, [r4, #26]
 800c28e:	d027      	beq.n	800c2e0 <tcp_input+0x820>
 800c290:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c292:	f8da 2000 	ldr.w	r2, [sl]
 800c296:	4291      	cmp	r1, r2
 800c298:	d122      	bne.n	800c2e0 <tcp_input+0x820>
 800c29a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800c29c:	bb02      	cbnz	r2, 800c2e0 <tcp_input+0x820>
        tcp_ack_now(pcb);
 800c29e:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 800c2a2:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800c2a4:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800c2a6:	f7fe f957 	bl	800a558 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	429c      	cmp	r4, r3
 800c2ae:	d109      	bne.n	800c2c4 <tcp_input+0x804>
      TCP_RMV_ACTIVE(pcb);
 800c2b0:	68e3      	ldr	r3, [r4, #12]
 800c2b2:	603b      	str	r3, [r7, #0]
 800c2b4:	e008      	b.n	800c2c8 <tcp_input+0x808>
        TCP_RMV_ACTIVE(pcb);
 800c2b6:	68da      	ldr	r2, [r3, #12]
 800c2b8:	4294      	cmp	r4, r2
 800c2ba:	d102      	bne.n	800c2c2 <tcp_input+0x802>
      TCP_RMV_ACTIVE(pcb);
 800c2bc:	68e2      	ldr	r2, [r4, #12]
 800c2be:	60da      	str	r2, [r3, #12]
 800c2c0:	e002      	b.n	800c2c8 <tcp_input+0x808>
 800c2c2:	4613      	mov	r3, r2
        TCP_RMV_ACTIVE(pcb);
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1f6      	bne.n	800c2b6 <tcp_input+0x7f6>
      TCP_RMV_ACTIVE(pcb);
 800c2c8:	4b3e      	ldr	r3, [pc, #248]	; (800c3c4 <tcp_input+0x904>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c2ce:	230a      	movs	r3, #10
 800c2d0:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c2d2:	4b3d      	ldr	r3, [pc, #244]	; (800c3c8 <tcp_input+0x908>)
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	601c      	str	r4, [r3, #0]
 800c2d8:	60e2      	str	r2, [r4, #12]
 800c2da:	f001 f897 	bl	800d40c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800c2de:	e672      	b.n	800bfc6 <tcp_input+0x506>
        tcp_ack_now(pcb);
 800c2e0:	f043 0302 	orr.w	r3, r3, #2
 800c2e4:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 800c2e6:	2308      	movs	r3, #8
 800c2e8:	e7a1      	b.n	800c22e <tcp_input+0x76e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c2ea:	06df      	lsls	r7, r3, #27
 800c2ec:	f57f ae6b 	bpl.w	800bfc6 <tcp_input+0x506>
 800c2f0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c2f2:	f8da 3000 	ldr.w	r3, [sl]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	f47f ae65 	bne.w	800bfc6 <tcp_input+0x506>
 800c2fc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f47f ae61 	bne.w	800bfc6 <tcp_input+0x506>
      pcb->state = FIN_WAIT_2;
 800c304:	2306      	movs	r3, #6
 800c306:	e792      	b.n	800c22e <tcp_input+0x76e>
    tcp_receive(pcb);
 800c308:	4620      	mov	r0, r4
 800c30a:	f7fe fe97 	bl	800b03c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c30e:	f898 3000 	ldrb.w	r3, [r8]
 800c312:	069e      	lsls	r6, r3, #26
 800c314:	f57f ae57 	bpl.w	800bfc6 <tcp_input+0x506>
      tcp_ack_now(pcb);
 800c318:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800c31a:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 800c31c:	f043 0302 	orr.w	r3, r3, #2
 800c320:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800c322:	f7fe f919 	bl	800a558 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	429c      	cmp	r4, r3
 800c32a:	d0c1      	beq.n	800c2b0 <tcp_input+0x7f0>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d0cb      	beq.n	800c2c8 <tcp_input+0x808>
 800c330:	68da      	ldr	r2, [r3, #12]
 800c332:	4294      	cmp	r4, r2
 800c334:	d0c2      	beq.n	800c2bc <tcp_input+0x7fc>
 800c336:	4613      	mov	r3, r2
 800c338:	e7f8      	b.n	800c32c <tcp_input+0x86c>
    tcp_receive(pcb);
 800c33a:	4620      	mov	r0, r4
 800c33c:	f7fe fe7e 	bl	800b03c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c340:	9b03      	ldr	r3, [sp, #12]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	06dd      	lsls	r5, r3, #27
 800c346:	f57f ae3e 	bpl.w	800bfc6 <tcp_input+0x506>
 800c34a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c34c:	f8da 3000 	ldr.w	r3, [sl]
 800c350:	429a      	cmp	r2, r3
 800c352:	f47f ae38 	bne.w	800bfc6 <tcp_input+0x506>
 800c356:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f47f ae34 	bne.w	800bfc6 <tcp_input+0x506>
      tcp_pcb_purge(pcb);
 800c35e:	4620      	mov	r0, r4
 800c360:	f7fe f8fa 	bl	800a558 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	429c      	cmp	r4, r3
 800c368:	d0a2      	beq.n	800c2b0 <tcp_input+0x7f0>
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d0ac      	beq.n	800c2c8 <tcp_input+0x808>
 800c36e:	68da      	ldr	r2, [r3, #12]
 800c370:	4294      	cmp	r4, r2
 800c372:	d0a3      	beq.n	800c2bc <tcp_input+0x7fc>
 800c374:	4613      	mov	r3, r2
 800c376:	e7f8      	b.n	800c36a <tcp_input+0x8aa>
    tcp_receive(pcb);
 800c378:	4620      	mov	r0, r4
 800c37a:	f7fe fe5f 	bl	800b03c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c37e:	9b03      	ldr	r3, [sp, #12]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	06d8      	lsls	r0, r3, #27
 800c384:	f57f ae1f 	bpl.w	800bfc6 <tcp_input+0x506>
 800c388:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800c38a:	f8da 3000 	ldr.w	r3, [sl]
 800c38e:	429a      	cmp	r2, r3
 800c390:	f47f ae19 	bne.w	800bfc6 <tcp_input+0x506>
 800c394:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c396:	2b00      	cmp	r3, #0
 800c398:	f47f ae15 	bne.w	800bfc6 <tcp_input+0x506>
      recv_flags |= TF_CLOSED;
 800c39c:	f898 3000 	ldrb.w	r3, [r8]
 800c3a0:	f043 0310 	orr.w	r3, r3, #16
 800c3a4:	f888 3000 	strb.w	r3, [r8]
    if (err != ERR_ABRT) {
 800c3a8:	e60d      	b.n	800bfc6 <tcp_input+0x506>
 800c3aa:	bf00      	nop
 800c3ac:	080140df 	.word	0x080140df
 800c3b0:	080143bf 	.word	0x080143bf
 800c3b4:	08012feb 	.word	0x08012feb
 800c3b8:	080143d5 	.word	0x080143d5
 800c3bc:	20008644 	.word	0x20008644
 800c3c0:	080143e8 	.word	0x080143e8
 800c3c4:	2000bd54 	.word	0x2000bd54
 800c3c8:	2000bd68 	.word	0x2000bd68
        if (recv_acked > 0) {
 800c3cc:	9b05      	ldr	r3, [sp, #20]
 800c3ce:	881a      	ldrh	r2, [r3, #0]
 800c3d0:	b122      	cbz	r2, 800c3dc <tcp_input+0x91c>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c3d2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800c3d4:	b9f3      	cbnz	r3, 800c414 <tcp_input+0x954>
          recv_acked = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	9a05      	ldr	r2, [sp, #20]
 800c3da:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c3dc:	4620      	mov	r0, r4
 800c3de:	f7ff fb4d 	bl	800ba7c <tcp_input_delayed_close>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	f47f aca6 	bne.w	800bd34 <tcp_input+0x274>
        if (recv_data != NULL) {
 800c3e8:	f8d9 3000 	ldr.w	r3, [r9]
 800c3ec:	b333      	cbz	r3, 800c43c <tcp_input+0x97c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c3ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c3f0:	b133      	cbz	r3, 800c400 <tcp_input+0x940>
 800c3f2:	4b3b      	ldr	r3, [pc, #236]	; (800c4e0 <tcp_input+0xa20>)
 800c3f4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c3f8:	493a      	ldr	r1, [pc, #232]	; (800c4e4 <tcp_input+0xa24>)
 800c3fa:	483b      	ldr	r0, [pc, #236]	; (800c4e8 <tcp_input+0xa28>)
 800c3fc:	f005 f91a 	bl	8011634 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c400:	7ea3      	ldrb	r3, [r4, #26]
 800c402:	f8d9 2000 	ldr.w	r2, [r9]
 800c406:	f013 0310 	ands.w	r3, r3, #16
 800c40a:	d009      	beq.n	800c420 <tcp_input+0x960>
            pbuf_free(recv_data);
 800c40c:	4610      	mov	r0, r2
 800c40e:	f7fd fbc9 	bl	8009ba4 <pbuf_free>
 800c412:	e6dc      	b.n	800c1ce <tcp_input+0x70e>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c414:	4621      	mov	r1, r4
 800c416:	6920      	ldr	r0, [r4, #16]
 800c418:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800c41a:	300d      	adds	r0, #13
 800c41c:	d1db      	bne.n	800c3d6 <tcp_input+0x916>
 800c41e:	e489      	b.n	800bd34 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c420:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800c424:	b30d      	cbz	r5, 800c46a <tcp_input+0x9aa>
 800c426:	4621      	mov	r1, r4
 800c428:	6920      	ldr	r0, [r4, #16]
 800c42a:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800c42c:	f110 0f0d 	cmn.w	r0, #13
 800c430:	f43f ac80 	beq.w	800bd34 <tcp_input+0x274>
          if (err != ERR_OK) {
 800c434:	b110      	cbz	r0, 800c43c <tcp_input+0x97c>
            pcb->refused_data = recv_data;
 800c436:	f8d9 3000 	ldr.w	r3, [r9]
 800c43a:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800c43c:	f898 3000 	ldrb.w	r3, [r8]
 800c440:	069a      	lsls	r2, r3, #26
 800c442:	d505      	bpl.n	800c450 <tcp_input+0x990>
          if (pcb->refused_data != NULL) {
 800c444:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800c446:	b1b3      	cbz	r3, 800c476 <tcp_input+0x9b6>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c448:	7b5a      	ldrb	r2, [r3, #13]
 800c44a:	f042 0220 	orr.w	r2, r2, #32
 800c44e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800c450:	4b26      	ldr	r3, [pc, #152]	; (800c4ec <tcp_input+0xa2c>)
 800c452:	2200      	movs	r2, #0
        if (tcp_input_delayed_close(pcb)) {
 800c454:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800c456:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c458:	f7ff fb10 	bl	800ba7c <tcp_input_delayed_close>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	f47f ac69 	bne.w	800bd34 <tcp_input+0x274>
        tcp_output(pcb);
 800c462:	4620      	mov	r0, r4
 800c464:	f000 fcae 	bl	800cdc4 <tcp_output>
 800c468:	e464      	b.n	800bd34 <tcp_input+0x274>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c46a:	462b      	mov	r3, r5
 800c46c:	4621      	mov	r1, r4
 800c46e:	4628      	mov	r0, r5
 800c470:	f7fe fb72 	bl	800ab58 <tcp_recv_null>
 800c474:	e7da      	b.n	800c42c <tcp_input+0x96c>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c476:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800c478:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c47c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800c480:	bf1c      	itt	ne
 800c482:	3301      	addne	r3, #1
 800c484:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800c486:	2d00      	cmp	r5, #0
 800c488:	d0e2      	beq.n	800c450 <tcp_input+0x990>
 800c48a:	2300      	movs	r3, #0
 800c48c:	4621      	mov	r1, r4
 800c48e:	6920      	ldr	r0, [r4, #16]
 800c490:	461a      	mov	r2, r3
 800c492:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800c494:	300d      	adds	r0, #13
 800c496:	d1db      	bne.n	800c450 <tcp_input+0x990>
 800c498:	e44c      	b.n	800bd34 <tcp_input+0x274>
      if (prev != NULL) {
 800c49a:	b13c      	cbz	r4, 800c4ac <tcp_input+0x9ec>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c49c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800c4a0:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c4a2:	4b13      	ldr	r3, [pc, #76]	; (800c4f0 <tcp_input+0xa30>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c4a4:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c4a8:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 800c4ac:	9b03      	ldr	r3, [sp, #12]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	075c      	lsls	r4, r3, #29
 800c4b2:	f53f accf 	bmi.w	800be54 <tcp_input+0x394>
  if (flags & TCP_ACK) {
 800c4b6:	f013 0410 	ands.w	r4, r3, #16
 800c4ba:	f43f ad00 	beq.w	800bebe <tcp_input+0x3fe>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c4be:	9b04      	ldr	r3, [sp, #16]
 800c4c0:	f8db 1000 	ldr.w	r1, [fp]
 800c4c4:	881c      	ldrh	r4, [r3, #0]
 800c4c6:	8813      	ldrh	r3, [r2, #0]
 800c4c8:	4421      	add	r1, r4
 800c4ca:	e9cd 0300 	strd	r0, r3, [sp]
 800c4ce:	4b09      	ldr	r3, [pc, #36]	; (800c4f4 <tcp_input+0xa34>)
 800c4d0:	1d1a      	adds	r2, r3, #4
 800c4d2:	e4ad      	b.n	800be30 <tcp_input+0x370>
      if (prev != NULL) {
 800c4d4:	9b05      	ldr	r3, [sp, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f47f abea 	bne.w	800bcb0 <tcp_input+0x1f0>
 800c4dc:	f7ff bbf7 	b.w	800bcce <tcp_input+0x20e>
 800c4e0:	080140df 	.word	0x080140df
 800c4e4:	08014406 	.word	0x08014406
 800c4e8:	08012feb 	.word	0x08012feb
 800c4ec:	2000bd6c 	.word	0x2000bd6c
 800c4f0:	2000bd60 	.word	0x2000bd60
 800c4f4:	20008644 	.word	0x20008644

0800c4f8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800c4f8:	4a02      	ldr	r2, [pc, #8]	; (800c504 <tcp_trigger_input_pcb_close+0xc>)
 800c4fa:	7813      	ldrb	r3, [r2, #0]
 800c4fc:	f043 0310 	orr.w	r3, r3, #16
 800c500:	7013      	strb	r3, [r2, #0]
}
 800c502:	4770      	bx	lr
 800c504:	200082ac 	.word	0x200082ac

0800c508 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	460c      	mov	r4, r1
 800c50c:	461e      	mov	r6, r3
 800c50e:	f89d 1018 	ldrb.w	r1, [sp, #24]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800c512:	4294      	cmp	r4, r2
{
 800c514:	9b04      	ldr	r3, [sp, #16]
  if (length < max_length) {
 800c516:	d228      	bcs.n	800c56a <tcp_pbuf_prealloc+0x62>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800c518:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800c51c:	07ad      	lsls	r5, r5, #30
 800c51e:	d407      	bmi.n	800c530 <tcp_pbuf_prealloc+0x28>
 800c520:	7e9d      	ldrb	r5, [r3, #26]
 800c522:	066d      	lsls	r5, r5, #25
 800c524:	d421      	bmi.n	800c56a <tcp_pbuf_prealloc+0x62>
        (!(pcb->flags & TF_NODELAY) &&
 800c526:	b119      	cbz	r1, 800c530 <tcp_pbuf_prealloc+0x28>
         (!first_seg ||
 800c528:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800c52a:	b909      	cbnz	r1, 800c530 <tcp_pbuf_prealloc+0x28>
          pcb->unsent != NULL ||
 800c52c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c52e:	b1e3      	cbz	r3, 800c56a <tcp_pbuf_prealloc+0x62>
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800c530:	f204 251b 	addw	r5, r4, #539	; 0x21b
 800c534:	f025 0103 	bic.w	r1, r5, #3
 800c538:	428a      	cmp	r2, r1
 800c53a:	bf28      	it	cs
 800c53c:	460a      	movcs	r2, r1
 800c53e:	b291      	uxth	r1, r2
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800c540:	2200      	movs	r2, #0
 800c542:	f7fd fb99 	bl	8009c78 <pbuf_alloc>
  if (p == NULL) {
 800c546:	4605      	mov	r5, r0
 800c548:	b168      	cbz	r0, 800c566 <tcp_pbuf_prealloc+0x5e>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800c54a:	6803      	ldr	r3, [r0, #0]
 800c54c:	b133      	cbz	r3, 800c55c <tcp_pbuf_prealloc+0x54>
 800c54e:	4b08      	ldr	r3, [pc, #32]	; (800c570 <tcp_pbuf_prealloc+0x68>)
 800c550:	f44f 7288 	mov.w	r2, #272	; 0x110
 800c554:	4907      	ldr	r1, [pc, #28]	; (800c574 <tcp_pbuf_prealloc+0x6c>)
 800c556:	4808      	ldr	r0, [pc, #32]	; (800c578 <tcp_pbuf_prealloc+0x70>)
 800c558:	f005 f86c 	bl	8011634 <iprintf>
  *oversize = p->len - length;
 800c55c:	896b      	ldrh	r3, [r5, #10]
 800c55e:	1b1b      	subs	r3, r3, r4
 800c560:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800c562:	812c      	strh	r4, [r5, #8]
 800c564:	816c      	strh	r4, [r5, #10]
  return p;
}
 800c566:	4628      	mov	r0, r5
 800c568:	bd70      	pop	{r4, r5, r6, pc}
 800c56a:	4621      	mov	r1, r4
 800c56c:	e7e8      	b.n	800c540 <tcp_pbuf_prealloc+0x38>
 800c56e:	bf00      	nop
 800c570:	08014420 	.word	0x08014420
 800c574:	08014453 	.word	0x08014453
 800c578:	08012feb 	.word	0x08012feb

0800c57c <tcp_create_segment>:
{
 800c57c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c580:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 800c584:	4680      	mov	r8, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c586:	2003      	movs	r0, #3
{
 800c588:	460e      	mov	r6, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c58a:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
{
 800c58e:	4617      	mov	r7, r2
 800c590:	4699      	mov	r9, r3
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c592:	f7fd f967 	bl	8009864 <memp_malloc>
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c596:	fa5f f58b 	uxtb.w	r5, fp
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800c59a:	4604      	mov	r4, r0
 800c59c:	b928      	cbnz	r0, 800c5aa <tcp_create_segment+0x2e>
    pbuf_free(p);
 800c59e:	4630      	mov	r0, r6
 800c5a0:	f7fd fb00 	bl	8009ba4 <pbuf_free>
}
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  seg->next = NULL;
 800c5aa:	2300      	movs	r3, #0
  seg->flags = optflags;
 800c5ac:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c5b0:	fa1f fa8b 	uxth.w	sl, fp
  seg->p = p;
 800c5b4:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800c5b8:	8933      	ldrh	r3, [r6, #8]
 800c5ba:	455b      	cmp	r3, fp
 800c5bc:	d205      	bcs.n	800c5ca <tcp_create_segment+0x4e>
 800c5be:	4b20      	ldr	r3, [pc, #128]	; (800c640 <tcp_create_segment+0xc4>)
 800c5c0:	22ba      	movs	r2, #186	; 0xba
 800c5c2:	4920      	ldr	r1, [pc, #128]	; (800c644 <tcp_create_segment+0xc8>)
 800c5c4:	4820      	ldr	r0, [pc, #128]	; (800c648 <tcp_create_segment+0xcc>)
 800c5c6:	f005 f835 	bl	8011634 <iprintf>
  seg->len = p->tot_len - optlen;
 800c5ca:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800c5d0:	eba3 030a 	sub.w	r3, r3, sl
 800c5d4:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 800c5d6:	f7fd fadf 	bl	8009b98 <pbuf_header>
 800c5da:	4606      	mov	r6, r0
 800c5dc:	b120      	cbz	r0, 800c5e8 <tcp_create_segment+0x6c>
    tcp_seg_free(seg);
 800c5de:	4620      	mov	r0, r4
    return NULL;
 800c5e0:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800c5e2:	f7fd ff25 	bl	800a430 <tcp_seg_free>
    return NULL;
 800c5e6:	e7dd      	b.n	800c5a4 <tcp_create_segment+0x28>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c5e8:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c5ea:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c5ec:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c5f0:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c5f4:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800c5f8:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c5fc:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800c600:	f7fc fe9a 	bl	8009338 <lwip_htons>
 800c604:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c608:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800c60c:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 800c610:	f7fc fe92 	bl	8009338 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c614:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800c618:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800c61c:	4648      	mov	r0, r9
 800c61e:	f7fc fe8e 	bl	800933e <lwip_htonl>
 800c622:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c626:	ea45 0007 	orr.w	r0, r5, r7
 800c62a:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800c62e:	f7fc fe83 	bl	8009338 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800c632:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800c634:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 800c638:	749e      	strb	r6, [r3, #18]
 800c63a:	74de      	strb	r6, [r3, #19]
  return seg;
 800c63c:	e7b2      	b.n	800c5a4 <tcp_create_segment+0x28>
 800c63e:	bf00      	nop
 800c640:	08014420 	.word	0x08014420
 800c644:	08014467 	.word	0x08014467
 800c648:	08012feb 	.word	0x08012feb

0800c64c <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c64c:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800c64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c650:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800c652:	4605      	mov	r5, r0
 800c654:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c656:	2001      	movs	r0, #1
 800c658:	2200      	movs	r2, #0
 800c65a:	f7fd fb0d 	bl	8009c78 <pbuf_alloc>
  if (p != NULL) {
 800c65e:	4606      	mov	r6, r0
 800c660:	b340      	cbz	r0, 800c6b4 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c662:	8943      	ldrh	r3, [r0, #10]
 800c664:	2b13      	cmp	r3, #19
 800c666:	d805      	bhi.n	800c674 <tcp_output_alloc_header.constprop.0+0x28>
 800c668:	4b13      	ldr	r3, [pc, #76]	; (800c6b8 <tcp_output_alloc_header.constprop.0+0x6c>)
 800c66a:	2272      	movs	r2, #114	; 0x72
 800c66c:	4913      	ldr	r1, [pc, #76]	; (800c6bc <tcp_output_alloc_header.constprop.0+0x70>)
 800c66e:	4814      	ldr	r0, [pc, #80]	; (800c6c0 <tcp_output_alloc_header.constprop.0+0x74>)
 800c670:	f004 ffe0 	bl	8011634 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 800c674:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800c676:	8ae8      	ldrh	r0, [r5, #22]
 800c678:	f7fc fe5e 	bl	8009338 <lwip_htons>
 800c67c:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c67e:	8b28      	ldrh	r0, [r5, #24]
 800c680:	f7fc fe5a 	bl	8009338 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800c684:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800c686:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c688:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c68a:	f7fc fe58 	bl	800933e <lwip_htonl>
 800c68e:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800c690:	f245 0010 	movw	r0, #20496	; 0x5010
 800c694:	f7fc fe50 	bl	8009338 <lwip_htons>
 800c698:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c69a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800c69c:	f7fc fe4c 	bl	8009338 <lwip_htons>
    tcphdr->chksum = 0;
 800c6a0:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c6a2:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 800c6a4:	7423      	strb	r3, [r4, #16]
 800c6a6:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800c6a8:	74a3      	strb	r3, [r4, #18]
 800c6aa:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c6ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c6ae:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c6b0:	4413      	add	r3, r2
 800c6b2:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b8:	08014420 	.word	0x08014420
 800c6bc:	0801447c 	.word	0x0801447c
 800c6c0:	08012feb 	.word	0x08012feb

0800c6c4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800c6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c8:	ed2d 8b02 	vpush	{d8}
 800c6cc:	b08f      	sub	sp, #60	; 0x3c
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	9308      	str	r3, [sp, #32]
  u16_t pos = 0; /* position in 'arg' data */
  u16_t queuelen;
  u8_t optlen = 0;
  u8_t optflags = 0;
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800c6d2:	2300      	movs	r3, #0
{
 800c6d4:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800c6d6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800c6da:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800c6de:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800c6e0:	085b      	lsrs	r3, r3, #1
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	bf28      	it	cs
 800c6e6:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bf08      	it	eq
 800c6ec:	4613      	moveq	r3, r2
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800c6ee:	e9cd 3106 	strd	r3, r1, [sp, #24]
 800c6f2:	b969      	cbnz	r1, 800c710 <tcp_write+0x4c>
 800c6f4:	4ba1      	ldr	r3, [pc, #644]	; (800c97c <tcp_write+0x2b8>)
 800c6f6:	f240 1291 	movw	r2, #401	; 0x191
 800c6fa:	49a1      	ldr	r1, [pc, #644]	; (800c980 <tcp_write+0x2bc>)
 800c6fc:	48a1      	ldr	r0, [pc, #644]	; (800c984 <tcp_write+0x2c0>)
 800c6fe:	f004 ff99 	bl	8011634 <iprintf>
 800c702:	f06f 000f 	mvn.w	r0, #15
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
}
 800c706:	b00f      	add	sp, #60	; 0x3c
 800c708:	ecbd 8b02 	vpop	{d8}
 800c70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((pcb->state != ESTABLISHED) &&
 800c710:	7d23      	ldrb	r3, [r4, #20]
 800c712:	2b07      	cmp	r3, #7
 800c714:	d003      	beq.n	800c71e <tcp_write+0x5a>
      (pcb->state != CLOSE_WAIT) &&
 800c716:	3b02      	subs	r3, #2
 800c718:	2b02      	cmp	r3, #2
 800c71a:	f200 8257 	bhi.w	800cbcc <tcp_write+0x508>
  } else if (len == 0) {
 800c71e:	9b04      	ldr	r3, [sp, #16]
 800c720:	b1db      	cbz	r3, 800c75a <tcp_write+0x96>
  if (len > pcb->snd_buf) {
 800c722:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800c726:	9a04      	ldr	r2, [sp, #16]
 800c728:	4293      	cmp	r3, r2
 800c72a:	d206      	bcs.n	800c73a <tcp_write+0x76>
    pcb->flags |= TF_NAGLEMEMERR;
 800c72c:	7ea3      	ldrb	r3, [r4, #26]
 800c72e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c732:	76a3      	strb	r3, [r4, #26]
  return ERR_MEM;
 800c734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c738:	e7e5      	b.n	800c706 <tcp_write+0x42>
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800c73a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800c73e:	2a08      	cmp	r2, #8
 800c740:	d8f4      	bhi.n	800c72c <tcp_write+0x68>
  if (pcb->snd_queuelen != 0) {
 800c742:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c744:	b302      	cbz	r2, 800c788 <tcp_write+0xc4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800c746:	b943      	cbnz	r3, 800c75a <tcp_write+0x96>
 800c748:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c74a:	b933      	cbnz	r3, 800c75a <tcp_write+0x96>
 800c74c:	4b8b      	ldr	r3, [pc, #556]	; (800c97c <tcp_write+0x2b8>)
 800c74e:	f240 1255 	movw	r2, #341	; 0x155
 800c752:	498d      	ldr	r1, [pc, #564]	; (800c988 <tcp_write+0x2c4>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c754:	488b      	ldr	r0, [pc, #556]	; (800c984 <tcp_write+0x2c0>)
 800c756:	f004 ff6d 	bl	8011634 <iprintf>
  queuelen = pcb->snd_queuelen;
 800c75a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (pcb->unsent != NULL) {
 800c75e:	6ea6      	ldr	r6, [r4, #104]	; 0x68
  queuelen = pcb->snd_queuelen;
 800c760:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800c762:	b9de      	cbnz	r6, 800c79c <tcp_write+0xd8>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c764:	f8b4 7064 	ldrh.w	r7, [r4, #100]	; 0x64
 800c768:	2f00      	cmp	r7, #0
 800c76a:	f000 81b8 	beq.w	800cade <tcp_write+0x41a>
 800c76e:	4b83      	ldr	r3, [pc, #524]	; (800c97c <tcp_write+0x2b8>)
 800c770:	f44f 7209 	mov.w	r2, #548	; 0x224
 800c774:	4985      	ldr	r1, [pc, #532]	; (800c98c <tcp_write+0x2c8>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c776:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c778:	4882      	ldr	r0, [pc, #520]	; (800c984 <tcp_write+0x2c0>)
  struct pbuf *concat_p = NULL;
 800c77a:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800c77c:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800c77e:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800c780:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800c782:	f004 ff57 	bl	8011634 <iprintf>
 800c786:	e089      	b.n	800c89c <tcp_write+0x1d8>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800c788:	b913      	cbnz	r3, 800c790 <tcp_write+0xcc>
 800c78a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d0e4      	beq.n	800c75a <tcp_write+0x96>
 800c790:	4b7a      	ldr	r3, [pc, #488]	; (800c97c <tcp_write+0x2b8>)
 800c792:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800c796:	497e      	ldr	r1, [pc, #504]	; (800c990 <tcp_write+0x2cc>)
 800c798:	e7dc      	b.n	800c754 <tcp_write+0x90>
 800c79a:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c79c:	f8d6 a000 	ldr.w	sl, [r6]
 800c7a0:	46b0      	mov	r8, r6
 800c7a2:	f1ba 0f00 	cmp.w	sl, #0
 800c7a6:	d1f8      	bne.n	800c79a <tcp_write+0xd6>
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800c7a8:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c7aa:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800c7ac:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c7ae:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800c7b0:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800c7b4:	442b      	add	r3, r5
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	da06      	bge.n	800c7c8 <tcp_write+0x104>
 800c7ba:	4b70      	ldr	r3, [pc, #448]	; (800c97c <tcp_write+0x2b8>)
 800c7bc:	f240 12c7 	movw	r2, #455	; 0x1c7
 800c7c0:	4974      	ldr	r1, [pc, #464]	; (800c994 <tcp_write+0x2d0>)
 800c7c2:	4870      	ldr	r0, [pc, #448]	; (800c984 <tcp_write+0x2c0>)
 800c7c4:	f004 ff36 	bl	8011634 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c7c8:	8937      	ldrh	r7, [r6, #8]
 800c7ca:	9b06      	ldr	r3, [sp, #24]
 800c7cc:	1bdf      	subs	r7, r3, r7
 800c7ce:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800c7d0:	f8b4 5064 	ldrh.w	r5, [r4, #100]	; 0x64
    space = mss_local - (last_unsent->len + unsent_optlen);
 800c7d4:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800c7d6:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800c7da:	2d00      	cmp	r5, #0
 800c7dc:	d067      	beq.n	800c8ae <tcp_write+0x1ea>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800c7de:	42bd      	cmp	r5, r7
 800c7e0:	d906      	bls.n	800c7f0 <tcp_write+0x12c>
 800c7e2:	4b66      	ldr	r3, [pc, #408]	; (800c97c <tcp_write+0x2b8>)
 800c7e4:	f240 12d9 	movw	r2, #473	; 0x1d9
 800c7e8:	496b      	ldr	r1, [pc, #428]	; (800c998 <tcp_write+0x2d4>)
 800c7ea:	4866      	ldr	r0, [pc, #408]	; (800c984 <tcp_write+0x2c0>)
 800c7ec:	f004 ff22 	bl	8011634 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800c7f0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800c7f4:	9a04      	ldr	r2, [sp, #16]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	bf28      	it	cs
 800c7fa:	461a      	movcs	r2, r3
 800c7fc:	42ba      	cmp	r2, r7
 800c7fe:	4615      	mov	r5, r2
 800c800:	bf28      	it	cs
 800c802:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800c804:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800c806:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800c808:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800c80a:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800c80c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800c810:	b153      	cbz	r3, 800c828 <tcp_write+0x164>
 800c812:	9b04      	ldr	r3, [sp, #16]
 800c814:	42ab      	cmp	r3, r5
 800c816:	f000 8167 	beq.w	800cae8 <tcp_write+0x424>
 800c81a:	4b58      	ldr	r3, [pc, #352]	; (800c97c <tcp_write+0x2b8>)
 800c81c:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c820:	495e      	ldr	r1, [pc, #376]	; (800c99c <tcp_write+0x2d8>)
 800c822:	4858      	ldr	r0, [pc, #352]	; (800c984 <tcp_write+0x2c0>)
 800c824:	f004 ff06 	bl	8011634 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800c828:	9b04      	ldr	r3, [sp, #16]
 800c82a:	429d      	cmp	r5, r3
 800c82c:	f080 815c 	bcs.w	800cae8 <tcp_write+0x424>
 800c830:	2f00      	cmp	r7, #0
 800c832:	f000 8151 	beq.w	800cad8 <tcp_write+0x414>
 800c836:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800c83a:	f1b9 0f00 	cmp.w	r9, #0
 800c83e:	f000 814c 	beq.w	800cada <tcp_write+0x416>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c842:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c846:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c848:	45b9      	cmp	r9, r7
 800c84a:	bfa8      	it	ge
 800c84c:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c84e:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800c850:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c854:	d52d      	bpl.n	800c8b2 <tcp_write+0x1ee>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800c856:	2301      	movs	r3, #1
 800c858:	463a      	mov	r2, r7
 800c85a:	4631      	mov	r1, r6
 800c85c:	2004      	movs	r0, #4
 800c85e:	9302      	str	r3, [sp, #8]
 800c860:	9b08      	ldr	r3, [sp, #32]
 800c862:	e9cd 4300 	strd	r4, r3, [sp]
 800c866:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800c86a:	f7ff fe4d 	bl	800c508 <tcp_pbuf_prealloc>
 800c86e:	4683      	mov	fp, r0
 800c870:	2800      	cmp	r0, #0
 800c872:	f000 81a8 	beq.w	800cbc6 <tcp_write+0x502>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800c876:	9b07      	ldr	r3, [sp, #28]
 800c878:	4632      	mov	r2, r6
 800c87a:	6840      	ldr	r0, [r0, #4]
 800c87c:	1959      	adds	r1, r3, r5
 800c87e:	f004 fe19 	bl	80114b4 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800c882:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800c884:	f7fd fb38 	bl	8009ef8 <pbuf_clen>
 800c888:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800c88a:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800c88e:	4403      	add	r3, r0
 800c890:	b29b      	uxth	r3, r3
 800c892:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800c894:	19af      	adds	r7, r5, r6
 800c896:	46da      	mov	sl, fp
 800c898:	4646      	mov	r6, r8
 800c89a:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c89c:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800c89e:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c8a2:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800c8a6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c8aa:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ac:	e0e3      	b.n	800ca76 <tcp_write+0x3b2>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800c8ae:	462e      	mov	r6, r5
 800c8b0:	e7ba      	b.n	800c828 <tcp_write+0x164>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800c8b2:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800c8b6:	465a      	mov	r2, fp
 800c8b8:	f8db b000 	ldr.w	fp, [fp]
 800c8bc:	f1bb 0f00 	cmp.w	fp, #0
 800c8c0:	d1f9      	bne.n	800c8b6 <tcp_write+0x1f2>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800c8c2:	7b13      	ldrb	r3, [r2, #12]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d10f      	bne.n	800c8e8 <tcp_write+0x224>
 800c8c8:	8951      	ldrh	r1, [r2, #10]
 800c8ca:	6853      	ldr	r3, [r2, #4]
 800c8cc:	9a07      	ldr	r2, [sp, #28]
 800c8ce:	440b      	add	r3, r1
 800c8d0:	429a      	cmp	r2, r3
 800c8d2:	d109      	bne.n	800c8e8 <tcp_write+0x224>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800c8d4:	b135      	cbz	r5, 800c8e4 <tcp_write+0x220>
 800c8d6:	4b29      	ldr	r3, [pc, #164]	; (800c97c <tcp_write+0x2b8>)
 800c8d8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800c8dc:	4930      	ldr	r1, [pc, #192]	; (800c9a0 <tcp_write+0x2dc>)
 800c8de:	4829      	ldr	r0, [pc, #164]	; (800c984 <tcp_write+0x2c0>)
 800c8e0:	f004 fea8 	bl	8011634 <iprintf>
          extendlen = seglen;
 800c8e4:	46b1      	mov	r9, r6
 800c8e6:	e7d5      	b.n	800c894 <tcp_write+0x1d0>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	2004      	movs	r0, #4
 800c8ee:	f7fd f9c3 	bl	8009c78 <pbuf_alloc>
 800c8f2:	4683      	mov	fp, r0
 800c8f4:	2800      	cmp	r0, #0
 800c8f6:	f000 8166 	beq.w	800cbc6 <tcp_write+0x502>
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800c8fa:	9b07      	ldr	r3, [sp, #28]
 800c8fc:	442b      	add	r3, r5
 800c8fe:	6043      	str	r3, [r0, #4]
 800c900:	e7c0      	b.n	800c884 <tcp_write+0x1c0>
    u16_t left = len - pos;
 800c902:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800c904:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800c906:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800c908:	b29b      	uxth	r3, r3
 800c90a:	4293      	cmp	r3, r2
 800c90c:	bf28      	it	cs
 800c90e:	4613      	movcs	r3, r2
 800c910:	b29b      	uxth	r3, r3
 800c912:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800c916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d045      	beq.n	800c9a8 <tcp_write+0x2e4>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800c91c:	fabb f38b 	clz	r3, fp
 800c920:	ee18 1a10 	vmov	r1, s16
 800c924:	2000      	movs	r0, #0
 800c926:	095b      	lsrs	r3, r3, #5
 800c928:	9302      	str	r3, [sp, #8]
 800c92a:	9b08      	ldr	r3, [sp, #32]
 800c92c:	e9cd 4300 	strd	r4, r3, [sp]
 800c930:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800c934:	f7ff fde8 	bl	800c508 <tcp_pbuf_prealloc>
 800c938:	4606      	mov	r6, r0
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d054      	beq.n	800c9e8 <tcp_write+0x324>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800c93e:	8943      	ldrh	r3, [r0, #10]
 800c940:	ee18 2a10 	vmov	r2, s16
 800c944:	4293      	cmp	r3, r2
 800c946:	d206      	bcs.n	800c956 <tcp_write+0x292>
 800c948:	4b0c      	ldr	r3, [pc, #48]	; (800c97c <tcp_write+0x2b8>)
 800c94a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c94e:	4915      	ldr	r1, [pc, #84]	; (800c9a4 <tcp_write+0x2e0>)
 800c950:	480c      	ldr	r0, [pc, #48]	; (800c984 <tcp_write+0x2c0>)
 800c952:	f004 fe6f 	bl	8011634 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800c956:	9b07      	ldr	r3, [sp, #28]
 800c958:	ee18 2a10 	vmov	r2, s16
 800c95c:	6870      	ldr	r0, [r6, #4]
 800c95e:	19d9      	adds	r1, r3, r7
 800c960:	f004 fda8 	bl	80114b4 <memcpy>
    queuelen += pbuf_clen(p);
 800c964:	4630      	mov	r0, r6
 800c966:	f7fd fac7 	bl	8009ef8 <pbuf_clen>
 800c96a:	9b05      	ldr	r3, [sp, #20]
 800c96c:	4403      	add	r3, r0
 800c96e:	b29b      	uxth	r3, r3
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800c970:	2b09      	cmp	r3, #9
    queuelen += pbuf_clen(p);
 800c972:	9305      	str	r3, [sp, #20]
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800c974:	d961      	bls.n	800ca3a <tcp_write+0x376>
      pbuf_free(p);
 800c976:	4630      	mov	r0, r6
 800c978:	e034      	b.n	800c9e4 <tcp_write+0x320>
 800c97a:	bf00      	nop
 800c97c:	08014420 	.word	0x08014420
 800c980:	080144aa 	.word	0x080144aa
 800c984:	08012feb 	.word	0x08012feb
 800c988:	080144db 	.word	0x080144db
 800c98c:	080145c5 	.word	0x080145c5
 800c990:	08014515 	.word	0x08014515
 800c994:	08014547 	.word	0x08014547
 800c998:	0801455e 	.word	0x0801455e
 800c99c:	0801457e 	.word	0x0801457e
 800c9a0:	0801459c 	.word	0x0801459c
 800c9a4:	080145f4 	.word	0x080145f4
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800c9a8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800c9ac:	b133      	cbz	r3, 800c9bc <tcp_write+0x2f8>
 800c9ae:	4b89      	ldr	r3, [pc, #548]	; (800cbd4 <tcp_write+0x510>)
 800c9b0:	f240 224b 	movw	r2, #587	; 0x24b
 800c9b4:	4988      	ldr	r1, [pc, #544]	; (800cbd8 <tcp_write+0x514>)
 800c9b6:	4889      	ldr	r0, [pc, #548]	; (800cbdc <tcp_write+0x518>)
 800c9b8:	f004 fe3c 	bl	8011634 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800c9bc:	2201      	movs	r2, #1
 800c9be:	ee18 1a10 	vmov	r1, s16
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	f7fd f958 	bl	8009c78 <pbuf_alloc>
 800c9c8:	b170      	cbz	r0, 800c9e8 <tcp_write+0x324>
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800c9ca:	9a07      	ldr	r2, [sp, #28]
 800c9cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800c9ce:	443a      	add	r2, r7
 800c9d0:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4610      	mov	r0, r2
 800c9d8:	f7fd f94e 	bl	8009c78 <pbuf_alloc>
 800c9dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9de:	4606      	mov	r6, r0
 800c9e0:	bb38      	cbnz	r0, 800ca32 <tcp_write+0x36e>
        pbuf_free(p2);
 800c9e2:	4618      	mov	r0, r3
      pbuf_free(p);
 800c9e4:	f7fd f8de 	bl	8009ba4 <pbuf_free>
  pcb->flags |= TF_NAGLEMEMERR;
 800c9e8:	7ea3      	ldrb	r3, [r4, #26]
 800c9ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c9ee:	76a3      	strb	r3, [r4, #26]
  if (concat_p != NULL) {
 800c9f0:	f1ba 0f00 	cmp.w	sl, #0
 800c9f4:	d002      	beq.n	800c9fc <tcp_write+0x338>
    pbuf_free(concat_p);
 800c9f6:	4650      	mov	r0, sl
 800c9f8:	f7fd f8d4 	bl	8009ba4 <pbuf_free>
  if (queue != NULL) {
 800c9fc:	f1bb 0f00 	cmp.w	fp, #0
 800ca00:	d002      	beq.n	800ca08 <tcp_write+0x344>
    tcp_segs_free(queue);
 800ca02:	4658      	mov	r0, fp
 800ca04:	f7fd fd22 	bl	800a44c <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800ca08:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	f43f ae91 	beq.w	800c734 <tcp_write+0x70>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800ca12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	f47f ae8d 	bne.w	800c734 <tcp_write+0x70>
 800ca1a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f47f ae89 	bne.w	800c734 <tcp_write+0x70>
 800ca22:	4b6c      	ldr	r3, [pc, #432]	; (800cbd4 <tcp_write+0x510>)
 800ca24:	f240 3201 	movw	r2, #769	; 0x301
 800ca28:	496d      	ldr	r1, [pc, #436]	; (800cbe0 <tcp_write+0x51c>)
 800ca2a:	486c      	ldr	r0, [pc, #432]	; (800cbdc <tcp_write+0x518>)
 800ca2c:	f004 fe02 	bl	8011634 <iprintf>
 800ca30:	e680      	b.n	800c734 <tcp_write+0x70>
      pbuf_cat(p/*header*/, p2/*data*/);
 800ca32:	4619      	mov	r1, r3
 800ca34:	f7fd fa84 	bl	8009f40 <pbuf_cat>
 800ca38:	e794      	b.n	800c964 <tcp_write+0x2a0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800ca3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	4631      	mov	r1, r6
 800ca40:	4620      	mov	r0, r4
 800ca42:	443b      	add	r3, r7
 800ca44:	9200      	str	r2, [sp, #0]
 800ca46:	f7ff fd99 	bl	800c57c <tcp_create_segment>
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d0cb      	beq.n	800c9e8 <tcp_write+0x324>
    if (queue == NULL) {
 800ca50:	f1bb 0f00 	cmp.w	fp, #0
 800ca54:	d03e      	beq.n	800cad4 <tcp_write+0x410>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800ca56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca58:	b933      	cbnz	r3, 800ca68 <tcp_write+0x3a4>
 800ca5a:	4b5e      	ldr	r3, [pc, #376]	; (800cbd4 <tcp_write+0x510>)
 800ca5c:	f240 2285 	movw	r2, #645	; 0x285
 800ca60:	4960      	ldr	r1, [pc, #384]	; (800cbe4 <tcp_write+0x520>)
 800ca62:	485e      	ldr	r0, [pc, #376]	; (800cbdc <tcp_write+0x518>)
 800ca64:	f004 fde6 	bl	8011634 <iprintf>
      prev_seg->next = seg;
 800ca68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6a:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800ca6c:	ee18 3a10 	vmov	r3, s16
 800ca70:	9609      	str	r6, [sp, #36]	; 0x24
 800ca72:	441f      	add	r7, r3
 800ca74:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800ca76:	9b04      	ldr	r3, [sp, #16]
 800ca78:	429f      	cmp	r7, r3
 800ca7a:	f4ff af42 	bcc.w	800c902 <tcp_write+0x23e>
 800ca7e:	4657      	mov	r7, sl
 800ca80:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800ca82:	b14d      	cbz	r5, 800ca98 <tcp_write+0x3d4>
    for (p = last_unsent->p; p; p = p->next) {
 800ca84:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800ca88:	f1bb 0f00 	cmp.w	fp, #0
 800ca8c:	d12f      	bne.n	800caee <tcp_write+0x42a>
    last_unsent->len += oversize_used;
 800ca8e:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800ca92:	441d      	add	r5, r3
 800ca94:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800ca98:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800ca9c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if (concat_p != NULL) {
 800caa0:	2f00      	cmp	r7, #0
 800caa2:	d03d      	beq.n	800cb20 <tcp_write+0x45c>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800caa4:	f1b8 0f00 	cmp.w	r8, #0
 800caa8:	d106      	bne.n	800cab8 <tcp_write+0x3f4>
 800caaa:	4b4a      	ldr	r3, [pc, #296]	; (800cbd4 <tcp_write+0x510>)
 800caac:	f240 22ba 	movw	r2, #698	; 0x2ba
 800cab0:	494d      	ldr	r1, [pc, #308]	; (800cbe8 <tcp_write+0x524>)
 800cab2:	484a      	ldr	r0, [pc, #296]	; (800cbdc <tcp_write+0x518>)
 800cab4:	f004 fdbe 	bl	8011634 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800cab8:	4639      	mov	r1, r7
 800caba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cabe:	f7fd fa3f 	bl	8009f40 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800cac2:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cac6:	893a      	ldrh	r2, [r7, #8]
 800cac8:	4413      	add	r3, r2
 800caca:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800cace:	f8c8 a000 	str.w	sl, [r8]
 800cad2:	e04d      	b.n	800cb70 <tcp_write+0x4ac>
 800cad4:	4683      	mov	fp, r0
 800cad6:	e7c9      	b.n	800ca6c <tcp_write+0x3a8>
  u16_t extendlen = 0;
 800cad8:	46b9      	mov	r9, r7
 800cada:	462f      	mov	r7, r5
 800cadc:	e6de      	b.n	800c89c <tcp_write+0x1d8>
 800cade:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800cae0:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cae2:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800cae4:	46ba      	mov	sl, r7
 800cae6:	e6d9      	b.n	800c89c <tcp_write+0x1d8>
 800cae8:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800caea:	46b9      	mov	r9, r7
 800caec:	e7c9      	b.n	800ca82 <tcp_write+0x3be>
      p->tot_len += oversize_used;
 800caee:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800caf2:	442b      	add	r3, r5
 800caf4:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800caf8:	f8db 3000 	ldr.w	r3, [fp]
 800cafc:	b96b      	cbnz	r3, 800cb1a <tcp_write+0x456>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800cafe:	f8db 3004 	ldr.w	r3, [fp, #4]
 800cb02:	462a      	mov	r2, r5
 800cb04:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800cb08:	9907      	ldr	r1, [sp, #28]
 800cb0a:	4418      	add	r0, r3
 800cb0c:	f004 fcd2 	bl	80114b4 <memcpy>
        p->len += oversize_used;
 800cb10:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800cb14:	442b      	add	r3, r5
 800cb16:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800cb1a:	f8db b000 	ldr.w	fp, [fp]
 800cb1e:	e7b3      	b.n	800ca88 <tcp_write+0x3c4>
  } else if (extendlen > 0) {
 800cb20:	f1b9 0f00 	cmp.w	r9, #0
 800cb24:	d01f      	beq.n	800cb66 <tcp_write+0x4a2>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800cb26:	f1b8 0f00 	cmp.w	r8, #0
 800cb2a:	d002      	beq.n	800cb32 <tcp_write+0x46e>
 800cb2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb30:	b933      	cbnz	r3, 800cb40 <tcp_write+0x47c>
 800cb32:	4b28      	ldr	r3, [pc, #160]	; (800cbd4 <tcp_write+0x510>)
 800cb34:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800cb38:	492c      	ldr	r1, [pc, #176]	; (800cbec <tcp_write+0x528>)
 800cb3a:	4828      	ldr	r0, [pc, #160]	; (800cbdc <tcp_write+0x518>)
 800cb3c:	f004 fd7a 	bl	8011634 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cb40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb44:	891a      	ldrh	r2, [r3, #8]
 800cb46:	6819      	ldr	r1, [r3, #0]
 800cb48:	444a      	add	r2, r9
 800cb4a:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 800cb4c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800cb4e:	b941      	cbnz	r1, 800cb62 <tcp_write+0x49e>
    p->len += extendlen;
 800cb50:	895a      	ldrh	r2, [r3, #10]
 800cb52:	444a      	add	r2, r9
 800cb54:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800cb56:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800cb5a:	4499      	add	r9, r3
 800cb5c:	f8a8 9008 	strh.w	r9, [r8, #8]
 800cb60:	e7b5      	b.n	800cace <tcp_write+0x40a>
      p->tot_len += extendlen;
 800cb62:	460b      	mov	r3, r1
 800cb64:	e7ee      	b.n	800cb44 <tcp_write+0x480>
  if (last_unsent == NULL) {
 800cb66:	f1b8 0f00 	cmp.w	r8, #0
 800cb6a:	d1b0      	bne.n	800cace <tcp_write+0x40a>
    pcb->unsent = queue;
 800cb6c:	f8c4 a068 	str.w	sl, [r4, #104]	; 0x68
  pcb->snd_lbb += len;
 800cb70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb72:	9a04      	ldr	r2, [sp, #16]
 800cb74:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800cb76:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  pcb->snd_lbb += len;
 800cb7a:	65a3      	str	r3, [r4, #88]	; 0x58
  pcb->snd_buf -= len;
 800cb7c:	9b04      	ldr	r3, [sp, #16]
 800cb7e:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800cb80:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800cb82:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 800cb86:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800cb8a:	b153      	cbz	r3, 800cba2 <tcp_write+0x4de>
    LWIP_ASSERT("tcp_write: valid queue length",
 800cb8c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cb8e:	b943      	cbnz	r3, 800cba2 <tcp_write+0x4de>
 800cb90:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800cb92:	b933      	cbnz	r3, 800cba2 <tcp_write+0x4de>
 800cb94:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <tcp_write+0x510>)
 800cb96:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800cb9a:	4911      	ldr	r1, [pc, #68]	; (800cbe0 <tcp_write+0x51c>)
 800cb9c:	480f      	ldr	r0, [pc, #60]	; (800cbdc <tcp_write+0x518>)
 800cb9e:	f004 fd49 	bl	8011634 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 800cba2:	b176      	cbz	r6, 800cbc2 <tcp_write+0x4fe>
 800cba4:	68f0      	ldr	r0, [r6, #12]
 800cba6:	2800      	cmp	r0, #0
 800cba8:	f43f adad 	beq.w	800c706 <tcp_write+0x42>
 800cbac:	9b08      	ldr	r3, [sp, #32]
 800cbae:	f013 0402 	ands.w	r4, r3, #2
 800cbb2:	d106      	bne.n	800cbc2 <tcp_write+0x4fe>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800cbb4:	8985      	ldrh	r5, [r0, #12]
 800cbb6:	2008      	movs	r0, #8
 800cbb8:	f7fc fbbe 	bl	8009338 <lwip_htons>
 800cbbc:	68f3      	ldr	r3, [r6, #12]
 800cbbe:	4328      	orrs	r0, r5
 800cbc0:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800cbc2:	2000      	movs	r0, #0
 800cbc4:	e59f      	b.n	800c706 <tcp_write+0x42>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800cbc6:	f04f 0b00 	mov.w	fp, #0
 800cbca:	e70d      	b.n	800c9e8 <tcp_write+0x324>
    return ERR_CONN;
 800cbcc:	f06f 000a 	mvn.w	r0, #10
 800cbd0:	e599      	b.n	800c706 <tcp_write+0x42>
 800cbd2:	bf00      	nop
 800cbd4:	08014420 	.word	0x08014420
 800cbd8:	08014632 	.word	0x08014632
 800cbdc:	08012feb 	.word	0x08012feb
 800cbe0:	080146be 	.word	0x080146be
 800cbe4:	08014640 	.word	0x08014640
 800cbe8:	08014651 	.word	0x08014651
 800cbec:	08014689 	.word	0x08014689

0800cbf0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800cbf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cbf4:	f011 0803 	ands.w	r8, r1, #3
{
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800cbfc:	d106      	bne.n	800cc0c <tcp_enqueue_flags+0x1c>
 800cbfe:	4b3d      	ldr	r3, [pc, #244]	; (800ccf4 <tcp_enqueue_flags+0x104>)
 800cc00:	f240 321a 	movw	r2, #794	; 0x31a
 800cc04:	493c      	ldr	r1, [pc, #240]	; (800ccf8 <tcp_enqueue_flags+0x108>)
 800cc06:	483d      	ldr	r0, [pc, #244]	; (800ccfc <tcp_enqueue_flags+0x10c>)
 800cc08:	f004 fd14 	bl	8011634 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800cc0c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800cc10:	2b08      	cmp	r3, #8
 800cc12:	d90a      	bls.n	800cc2a <tcp_enqueue_flags+0x3a>
 800cc14:	07f1      	lsls	r1, r6, #31
 800cc16:	d408      	bmi.n	800cc2a <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 800cc18:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800cc1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    pcb->flags |= TF_NAGLEMEMERR;
 800cc1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cc22:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 800cc24:	b003      	add	sp, #12
 800cc26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (flags & TCP_SYN) {
 800cc2a:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800cc2e:	2200      	movs	r2, #0
 800cc30:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800cc34:	4610      	mov	r0, r2
 800cc36:	4649      	mov	r1, r9
 800cc38:	f7fd f81e 	bl	8009c78 <pbuf_alloc>
 800cc3c:	4605      	mov	r5, r0
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	d0ea      	beq.n	800cc18 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800cc42:	8943      	ldrh	r3, [r0, #10]
 800cc44:	454b      	cmp	r3, r9
 800cc46:	d206      	bcs.n	800cc56 <tcp_enqueue_flags+0x66>
 800cc48:	4b2a      	ldr	r3, [pc, #168]	; (800ccf4 <tcp_enqueue_flags+0x104>)
 800cc4a:	f44f 7250 	mov.w	r2, #832	; 0x340
 800cc4e:	492c      	ldr	r1, [pc, #176]	; (800cd00 <tcp_enqueue_flags+0x110>)
 800cc50:	482a      	ldr	r0, [pc, #168]	; (800ccfc <tcp_enqueue_flags+0x10c>)
 800cc52:	f004 fcef 	bl	8011634 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800cc56:	4629      	mov	r1, r5
 800cc58:	9700      	str	r7, [sp, #0]
 800cc5a:	4632      	mov	r2, r6
 800cc5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc5e:	4620      	mov	r0, r4
 800cc60:	f7ff fc8c 	bl	800c57c <tcp_create_segment>
 800cc64:	4605      	mov	r5, r0
 800cc66:	2800      	cmp	r0, #0
 800cc68:	d0d6      	beq.n	800cc18 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800cc6a:	68c3      	ldr	r3, [r0, #12]
 800cc6c:	079a      	lsls	r2, r3, #30
 800cc6e:	d006      	beq.n	800cc7e <tcp_enqueue_flags+0x8e>
 800cc70:	4b20      	ldr	r3, [pc, #128]	; (800ccf4 <tcp_enqueue_flags+0x104>)
 800cc72:	f240 3249 	movw	r2, #841	; 0x349
 800cc76:	4923      	ldr	r1, [pc, #140]	; (800cd04 <tcp_enqueue_flags+0x114>)
 800cc78:	4820      	ldr	r0, [pc, #128]	; (800ccfc <tcp_enqueue_flags+0x10c>)
 800cc7a:	f004 fcdb 	bl	8011634 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800cc7e:	892b      	ldrh	r3, [r5, #8]
 800cc80:	b133      	cbz	r3, 800cc90 <tcp_enqueue_flags+0xa0>
 800cc82:	4b1c      	ldr	r3, [pc, #112]	; (800ccf4 <tcp_enqueue_flags+0x104>)
 800cc84:	f240 324a 	movw	r2, #842	; 0x34a
 800cc88:	491f      	ldr	r1, [pc, #124]	; (800cd08 <tcp_enqueue_flags+0x118>)
 800cc8a:	481c      	ldr	r0, [pc, #112]	; (800ccfc <tcp_enqueue_flags+0x10c>)
 800cc8c:	f004 fcd2 	bl	8011634 <iprintf>
  if (pcb->unsent == NULL) {
 800cc90:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800cc92:	bb43      	cbnz	r3, 800cce6 <tcp_enqueue_flags+0xf6>
    pcb->unsent = seg;
 800cc94:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800cc9c:	f1b8 0f00 	cmp.w	r8, #0
 800cca0:	d002      	beq.n	800cca8 <tcp_enqueue_flags+0xb8>
    pcb->snd_lbb++;
 800cca2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cca4:	3301      	adds	r3, #1
 800cca6:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800cca8:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 800ccaa:	bf42      	ittt	mi
 800ccac:	7ea3      	ldrbmi	r3, [r4, #26]
 800ccae:	f043 0320 	orrmi.w	r3, r3, #32
 800ccb2:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ccb4:	6868      	ldr	r0, [r5, #4]
 800ccb6:	f7fd f91f 	bl	8009ef8 <pbuf_clen>
 800ccba:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800ccbe:	4418      	add	r0, r3
 800ccc0:	b280      	uxth	r0, r0
 800ccc2:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d0ac      	beq.n	800cc24 <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ccca:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800cccc:	b948      	cbnz	r0, 800cce2 <tcp_enqueue_flags+0xf2>
 800ccce:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 800ccd0:	2c00      	cmp	r4, #0
 800ccd2:	d1a7      	bne.n	800cc24 <tcp_enqueue_flags+0x34>
 800ccd4:	4b07      	ldr	r3, [pc, #28]	; (800ccf4 <tcp_enqueue_flags+0x104>)
 800ccd6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ccda:	490c      	ldr	r1, [pc, #48]	; (800cd0c <tcp_enqueue_flags+0x11c>)
 800ccdc:	4807      	ldr	r0, [pc, #28]	; (800ccfc <tcp_enqueue_flags+0x10c>)
 800ccde:	f004 fca9 	bl	8011634 <iprintf>
  return ERR_OK;
 800cce2:	2000      	movs	r0, #0
 800cce4:	e79e      	b.n	800cc24 <tcp_enqueue_flags+0x34>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800cce6:	461a      	mov	r2, r3
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1fb      	bne.n	800cce6 <tcp_enqueue_flags+0xf6>
    useg->next = seg;
 800ccee:	6015      	str	r5, [r2, #0]
 800ccf0:	e7d1      	b.n	800cc96 <tcp_enqueue_flags+0xa6>
 800ccf2:	bf00      	nop
 800ccf4:	08014420 	.word	0x08014420
 800ccf8:	080146dc 	.word	0x080146dc
 800ccfc:	08012feb 	.word	0x08012feb
 800cd00:	08014731 	.word	0x08014731
 800cd04:	0801476a 	.word	0x0801476a
 800cd08:	08014782 	.word	0x08014782
 800cd0c:	080147ac 	.word	0x080147ac

0800cd10 <tcp_send_fin>:
{
 800cd10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 800cd12:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 800cd14:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 800cd16:	b14c      	cbz	r4, 800cd2c <tcp_send_fin+0x1c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800cd18:	4627      	mov	r7, r4
 800cd1a:	6824      	ldr	r4, [r4, #0]
 800cd1c:	2c00      	cmp	r4, #0
 800cd1e:	d1fb      	bne.n	800cd18 <tcp_send_fin+0x8>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	8998      	ldrh	r0, [r3, #12]
 800cd24:	f7fc fb08 	bl	8009338 <lwip_htons>
 800cd28:	0743      	lsls	r3, r0, #29
 800cd2a:	d005      	beq.n	800cd38 <tcp_send_fin+0x28>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	2101      	movs	r1, #1
}
 800cd30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800cd34:	f7ff bf5c 	b.w	800cbf0 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2001      	movs	r0, #1
 800cd3c:	899e      	ldrh	r6, [r3, #12]
 800cd3e:	f7fc fafb 	bl	8009338 <lwip_htons>
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	4330      	orrs	r0, r6
 800cd46:	8198      	strh	r0, [r3, #12]
}
 800cd48:	4620      	mov	r0, r4
      pcb->flags |= TF_FIN;
 800cd4a:	7eab      	ldrb	r3, [r5, #26]
 800cd4c:	f043 0320 	orr.w	r3, r3, #32
 800cd50:	76ab      	strb	r3, [r5, #26]
}
 800cd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cd54:	b570      	push	{r4, r5, r6, lr}
 800cd56:	4604      	mov	r4, r0
 800cd58:	b086      	sub	sp, #24
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cd5a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800cd5c:	f7fc faef 	bl	800933e <lwip_htonl>
 800cd60:	2100      	movs	r1, #0
 800cd62:	4602      	mov	r2, r0
 800cd64:	4620      	mov	r0, r4
 800cd66:	f7ff fc71 	bl	800c64c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800cd6a:	4606      	mov	r6, r0
 800cd6c:	b940      	cbnz	r0, 800cd80 <tcp_send_empty_ack+0x2c>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800cd6e:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cd70:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800cd74:	f043 0303 	orr.w	r3, r3, #3
 800cd78:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800cd7a:	4628      	mov	r0, r5
 800cd7c:	b006      	add	sp, #24
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800cd80:	1d22      	adds	r2, r4, #4
 800cd82:	4610      	mov	r0, r2
 800cd84:	9205      	str	r2, [sp, #20]
 800cd86:	f002 fb15 	bl	800f3b4 <ip4_route>
  if (netif == NULL) {
 800cd8a:	b1a0      	cbz	r0, 800cdb6 <tcp_send_empty_ack+0x62>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800cd8c:	2306      	movs	r3, #6
 800cd8e:	9002      	str	r0, [sp, #8]
 800cd90:	9a05      	ldr	r2, [sp, #20]
 800cd92:	4621      	mov	r1, r4
 800cd94:	9301      	str	r3, [sp, #4]
 800cd96:	4630      	mov	r0, r6
 800cd98:	7a63      	ldrb	r3, [r4, #9]
 800cd9a:	9300      	str	r3, [sp, #0]
 800cd9c:	7aa3      	ldrb	r3, [r4, #10]
 800cd9e:	f002 fc85 	bl	800f6ac <ip4_output_if>
 800cda2:	4605      	mov	r5, r0
  pbuf_free(p);
 800cda4:	4630      	mov	r0, r6
 800cda6:	f7fc fefd 	bl	8009ba4 <pbuf_free>
  if (err != ERR_OK) {
 800cdaa:	7ea3      	ldrb	r3, [r4, #26]
 800cdac:	b135      	cbz	r5, 800cdbc <tcp_send_empty_ack+0x68>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800cdae:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800cdb2:	76a3      	strb	r3, [r4, #26]
 800cdb4:	e7e1      	b.n	800cd7a <tcp_send_empty_ack+0x26>
    err = ERR_RTE;
 800cdb6:	f06f 0503 	mvn.w	r5, #3
 800cdba:	e7f3      	b.n	800cda4 <tcp_send_empty_ack+0x50>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800cdbc:	f023 0303 	bic.w	r3, r3, #3
 800cdc0:	e7f7      	b.n	800cdb2 <tcp_send_empty_ack+0x5e>
	...

0800cdc4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800cdc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cdc8:	7d03      	ldrb	r3, [r0, #20]
{
 800cdca:	b087      	sub	sp, #28
 800cdcc:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d106      	bne.n	800cde0 <tcp_output+0x1c>
 800cdd2:	4ba6      	ldr	r3, [pc, #664]	; (800d06c <tcp_output+0x2a8>)
 800cdd4:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800cdd8:	49a5      	ldr	r1, [pc, #660]	; (800d070 <tcp_output+0x2ac>)
 800cdda:	48a6      	ldr	r0, [pc, #664]	; (800d074 <tcp_output+0x2b0>)
 800cddc:	f004 fc2a 	bl	8011634 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800cde0:	4ba5      	ldr	r3, [pc, #660]	; (800d078 <tcp_output+0x2b4>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	42a3      	cmp	r3, r4
 800cde6:	d056      	beq.n	800ce96 <tcp_output+0xd2>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cde8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800cdec:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48

  seg = pcb->unsent;
 800cdf0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800cdf2:	429f      	cmp	r7, r3
 800cdf4:	bf28      	it	cs
 800cdf6:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800cdf8:	7ea3      	ldrb	r3, [r4, #26]
 800cdfa:	0799      	lsls	r1, r3, #30
 800cdfc:	d510      	bpl.n	800ce20 <tcp_output+0x5c>
 800cdfe:	b92d      	cbnz	r5, 800ce0c <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 800ce00:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 800ce02:	b007      	add	sp, #28
 800ce04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 800ce08:	f7ff bfa4 	b.w	800cd54 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800ce0c:	68eb      	ldr	r3, [r5, #12]
 800ce0e:	6858      	ldr	r0, [r3, #4]
 800ce10:	f7fc fa95 	bl	800933e <lwip_htonl>
 800ce14:	892b      	ldrh	r3, [r5, #8]
 800ce16:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ce18:	1a9b      	subs	r3, r3, r2
 800ce1a:	4418      	add	r0, r3
     (seg == NULL ||
 800ce1c:	42b8      	cmp	r0, r7
 800ce1e:	d8ef      	bhi.n	800ce00 <tcp_output+0x3c>
  useg = pcb->unacked;
 800ce20:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 800ce22:	b126      	cbz	r6, 800ce2e <tcp_output+0x6a>
    for (; useg->next != NULL; useg = useg->next);
 800ce24:	4633      	mov	r3, r6
 800ce26:	6836      	ldr	r6, [r6, #0]
 800ce28:	2e00      	cmp	r6, #0
 800ce2a:	d1fb      	bne.n	800ce24 <tcp_output+0x60>
 800ce2c:	461e      	mov	r6, r3
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800ce2e:	f104 0904 	add.w	r9, r4, #4
 800ce32:	4648      	mov	r0, r9
 800ce34:	f002 fabe 	bl	800f3b4 <ip4_route>
  if (netif == NULL) {
 800ce38:	4680      	mov	r8, r0
 800ce3a:	2800      	cmp	r0, #0
 800ce3c:	f000 813d 	beq.w	800d0ba <tcp_output+0x2f6>
  if (ip_addr_isany(&pcb->local_ip)) {
 800ce40:	6823      	ldr	r3, [r4, #0]
 800ce42:	b90b      	cbnz	r3, 800ce48 <tcp_output+0x84>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ce44:	6843      	ldr	r3, [r0, #4]
 800ce46:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 800ce48:	b1ed      	cbz	r5, 800ce86 <tcp_output+0xc2>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800ce4a:	68eb      	ldr	r3, [r5, #12]
 800ce4c:	6858      	ldr	r0, [r3, #4]
 800ce4e:	f7fc fa76 	bl	800933e <lwip_htonl>
 800ce52:	892b      	ldrh	r3, [r5, #8]
 800ce54:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ce56:	1a9b      	subs	r3, r3, r2
 800ce58:	4418      	add	r0, r3
  if (seg != NULL &&
 800ce5a:	42b8      	cmp	r0, r7
 800ce5c:	f240 8128 	bls.w	800d0b0 <tcp_output+0x2ec>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800ce60:	2f00      	cmp	r7, #0
 800ce62:	f000 8125 	beq.w	800d0b0 <tcp_output+0x2ec>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800ce66:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 800ce6a:	42bb      	cmp	r3, r7
 800ce6c:	f040 8120 	bne.w	800d0b0 <tcp_output+0x2ec>
 800ce70:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	f040 811c 	bne.w	800d0b0 <tcp_output+0x2ec>
    if (pcb->persist_backoff == 0) {
 800ce78:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800ce7c:	b91b      	cbnz	r3, 800ce86 <tcp_output+0xc2>
      pcb->persist_cnt = 0;
 800ce7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce82:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
  if (pcb->unsent == NULL) {
 800ce86:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800ce88:	b90b      	cbnz	r3, 800ce8e <tcp_output+0xca>
    pcb->unsent_oversize = 0;
 800ce8a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 800ce8e:	7ea3      	ldrb	r3, [r4, #26]
 800ce90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce94:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800ce96:	2000      	movs	r0, #0
 800ce98:	e0e4      	b.n	800d064 <tcp_output+0x2a0>
    pcb->unsent = seg->next;
 800ce9a:	682b      	ldr	r3, [r5, #0]
 800ce9c:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800ce9e:	7d23      	ldrb	r3, [r4, #20]
 800cea0:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800cea2:	bf1e      	ittt	ne
 800cea4:	7ea3      	ldrbne	r3, [r4, #26]
 800cea6:	f023 0303 	bicne.w	r3, r3, #3
 800ceaa:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ceac:	68eb      	ldr	r3, [r5, #12]
 800ceae:	6858      	ldr	r0, [r3, #4]
 800ceb0:	f7fc fa45 	bl	800933e <lwip_htonl>
 800ceb4:	8929      	ldrh	r1, [r5, #8]
 800ceb6:	68eb      	ldr	r3, [r5, #12]
 800ceb8:	9104      	str	r1, [sp, #16]
 800ceba:	9005      	str	r0, [sp, #20]
 800cebc:	8998      	ldrh	r0, [r3, #12]
 800cebe:	f7fc fa3b 	bl	8009338 <lwip_htons>
 800cec2:	f010 0303 	ands.w	r3, r0, #3
 800cec6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ceca:	bf18      	it	ne
 800cecc:	2301      	movne	r3, #1
 800cece:	440a      	add	r2, r1
 800ced0:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ced2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800ced4:	1ad2      	subs	r2, r2, r3
 800ced6:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800ced8:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800ceda:	bfb8      	it	lt
 800cedc:	64e3      	strlt	r3, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 800cede:	892b      	ldrh	r3, [r5, #8]
 800cee0:	9304      	str	r3, [sp, #16]
 800cee2:	8990      	ldrh	r0, [r2, #12]
 800cee4:	f7fc fa28 	bl	8009338 <lwip_htons>
 800cee8:	f010 0003 	ands.w	r0, r0, #3
 800ceec:	9b04      	ldr	r3, [sp, #16]
 800ceee:	bf18      	it	ne
 800cef0:	2001      	movne	r0, #1
 800cef2:	42d8      	cmn	r0, r3
 800cef4:	f000 80d8 	beq.w	800d0a8 <tcp_output+0x2e4>
      seg->next = NULL;
 800cef8:	2300      	movs	r3, #0
 800cefa:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800cefc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cefe:	b913      	cbnz	r3, 800cf06 <tcp_output+0x142>
        pcb->unacked = seg;
 800cf00:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 800cf02:	462e      	mov	r6, r5
 800cf04:	e016      	b.n	800cf34 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800cf06:	68eb      	ldr	r3, [r5, #12]
 800cf08:	6858      	ldr	r0, [r3, #4]
 800cf0a:	f7fc fa18 	bl	800933e <lwip_htonl>
 800cf0e:	68f2      	ldr	r2, [r6, #12]
 800cf10:	9004      	str	r0, [sp, #16]
 800cf12:	6850      	ldr	r0, [r2, #4]
 800cf14:	f7fc fa13 	bl	800933e <lwip_htonl>
 800cf18:	9b04      	ldr	r3, [sp, #16]
 800cf1a:	1a18      	subs	r0, r3, r0
 800cf1c:	2800      	cmp	r0, #0
 800cf1e:	f280 80c1 	bge.w	800d0a4 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800cf22:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	2a00      	cmp	r2, #0
 800cf2a:	f040 80a9 	bne.w	800d080 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800cf32:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800cf34:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 800cf36:	2d00      	cmp	r5, #0
 800cf38:	d0a5      	beq.n	800ce86 <tcp_output+0xc2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800cf3a:	68eb      	ldr	r3, [r5, #12]
 800cf3c:	6858      	ldr	r0, [r3, #4]
 800cf3e:	f7fc f9fe 	bl	800933e <lwip_htonl>
 800cf42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800cf44:	1ac0      	subs	r0, r0, r3
 800cf46:	892b      	ldrh	r3, [r5, #8]
 800cf48:	4418      	add	r0, r3
  while (seg != NULL &&
 800cf4a:	42b8      	cmp	r0, r7
 800cf4c:	d89b      	bhi.n	800ce86 <tcp_output+0xc2>
    LWIP_ASSERT("RST not expected here!",
 800cf4e:	68eb      	ldr	r3, [r5, #12]
 800cf50:	8998      	ldrh	r0, [r3, #12]
 800cf52:	f7fc f9f1 	bl	8009338 <lwip_htons>
 800cf56:	0742      	lsls	r2, r0, #29
 800cf58:	d506      	bpl.n	800cf68 <tcp_output+0x1a4>
 800cf5a:	4b44      	ldr	r3, [pc, #272]	; (800d06c <tcp_output+0x2a8>)
 800cf5c:	f240 4245 	movw	r2, #1093	; 0x445
 800cf60:	4651      	mov	r1, sl
 800cf62:	4658      	mov	r0, fp
 800cf64:	f004 fb66 	bl	8011634 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800cf68:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800cf6a:	b1b3      	cbz	r3, 800cf9a <tcp_output+0x1d6>
 800cf6c:	7ea2      	ldrb	r2, [r4, #26]
 800cf6e:	f012 0f44 	tst.w	r2, #68	; 0x44
 800cf72:	d112      	bne.n	800cf9a <tcp_output+0x1d6>
 800cf74:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800cf76:	b12b      	cbz	r3, 800cf84 <tcp_output+0x1c0>
 800cf78:	6819      	ldr	r1, [r3, #0]
 800cf7a:	b971      	cbnz	r1, 800cf9a <tcp_output+0x1d6>
 800cf7c:	8919      	ldrh	r1, [r3, #8]
 800cf7e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800cf80:	4299      	cmp	r1, r3
 800cf82:	d20a      	bcs.n	800cf9a <tcp_output+0x1d6>
 800cf84:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800cf88:	b13b      	cbz	r3, 800cf9a <tcp_output+0x1d6>
 800cf8a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800cf8e:	2b08      	cmp	r3, #8
 800cf90:	d803      	bhi.n	800cf9a <tcp_output+0x1d6>
 800cf92:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800cf96:	f43f af76 	beq.w	800ce86 <tcp_output+0xc2>
    if (pcb->state != SYN_SENT) {
 800cf9a:	7d23      	ldrb	r3, [r4, #20]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d009      	beq.n	800cfb4 <tcp_output+0x1f0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800cfa0:	68eb      	ldr	r3, [r5, #12]
 800cfa2:	2010      	movs	r0, #16
 800cfa4:	899b      	ldrh	r3, [r3, #12]
 800cfa6:	9304      	str	r3, [sp, #16]
 800cfa8:	f7fc f9c6 	bl	8009338 <lwip_htons>
 800cfac:	9b04      	ldr	r3, [sp, #16]
 800cfae:	68ea      	ldr	r2, [r5, #12]
 800cfb0:	4318      	orrs	r0, r3
 800cfb2:	8190      	strh	r0, [r2, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800cfb4:	686b      	ldr	r3, [r5, #4]
 800cfb6:	89db      	ldrh	r3, [r3, #14]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	f47f af6e 	bne.w	800ce9a <tcp_output+0xd6>
 800cfbe:	68eb      	ldr	r3, [r5, #12]
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800cfc0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cfc2:	9304      	str	r3, [sp, #16]
 800cfc4:	f7fc f9bb 	bl	800933e <lwip_htonl>
 800cfc8:	9b04      	ldr	r3, [sp, #16]
 800cfca:	6098      	str	r0, [r3, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cfcc:	68eb      	ldr	r3, [r5, #12]
 800cfce:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800cfd0:	9304      	str	r3, [sp, #16]
 800cfd2:	f7fc f9b1 	bl	8009338 <lwip_htons>
 800cfd6:	9b04      	ldr	r3, [sp, #16]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cfd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800cfda:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cfdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfde:	4413      	add	r3, r2
 800cfe0:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800cfe2:	7aab      	ldrb	r3, [r5, #10]
 800cfe4:	07db      	lsls	r3, r3, #31
 800cfe6:	d50c      	bpl.n	800d002 <tcp_output+0x23e>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cfe8:	68eb      	ldr	r3, [r5, #12]
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800cfea:	4649      	mov	r1, r9
 800cfec:	f44f 7006 	mov.w	r0, #536	; 0x218
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800cff0:	9304      	str	r3, [sp, #16]
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800cff2:	f7fd ffb1 	bl	800af58 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800cff6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800cffa:	f7fc f9a0 	bl	800933e <lwip_htonl>
 800cffe:	9b04      	ldr	r3, [sp, #16]
 800d000:	6158      	str	r0, [r3, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800d002:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800d006:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800d008:	bfbc      	itt	lt
 800d00a:	2300      	movlt	r3, #0
 800d00c:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800d00e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d010:	b93b      	cbnz	r3, 800d022 <tcp_output+0x25e>
    pcb->rttest = tcp_ticks;
 800d012:	4a1a      	ldr	r2, [pc, #104]	; (800d07c <tcp_output+0x2b8>)
 800d014:	68eb      	ldr	r3, [r5, #12]
 800d016:	6812      	ldr	r2, [r2, #0]
 800d018:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800d01a:	6858      	ldr	r0, [r3, #4]
 800d01c:	f7fc f98f 	bl	800933e <lwip_htonl>
 800d020:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d022:	6868      	ldr	r0, [r5, #4]
 800d024:	68ea      	ldr	r2, [r5, #12]
 800d026:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800d028:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d02a:	1ad3      	subs	r3, r2, r3
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 800d02c:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800d02e:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800d030:	1ac9      	subs	r1, r1, r3
 800d032:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 800d034:	8901      	ldrh	r1, [r0, #8]
 800d036:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d038:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 800d03a:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	7413      	strb	r3, [r2, #16]
 800d040:	7453      	strb	r3, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d042:	2306      	movs	r3, #6
 800d044:	464a      	mov	r2, r9
 800d046:	f8cd 8008 	str.w	r8, [sp, #8]
 800d04a:	9301      	str	r3, [sp, #4]
 800d04c:	7a63      	ldrb	r3, [r4, #9]
 800d04e:	9300      	str	r3, [sp, #0]
 800d050:	7aa3      	ldrb	r3, [r4, #10]
 800d052:	f002 fb2b 	bl	800f6ac <ip4_output_if>
    if (err != ERR_OK) {
 800d056:	2800      	cmp	r0, #0
 800d058:	f43f af1f 	beq.w	800ce9a <tcp_output+0xd6>
      pcb->flags |= TF_NAGLEMEMERR;
 800d05c:	7ea3      	ldrb	r3, [r4, #26]
 800d05e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d062:	76a3      	strb	r3, [r4, #26]
}
 800d064:	b007      	add	sp, #28
 800d066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d06a:	bf00      	nop
 800d06c:	08014420 	.word	0x08014420
 800d070:	080147d4 	.word	0x080147d4
 800d074:	08012feb 	.word	0x08012feb
 800d078:	2000bd6c 	.word	0x2000bd6c
 800d07c:	2000bd5c 	.word	0x2000bd5c
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d080:	68d2      	ldr	r2, [r2, #12]
 800d082:	9305      	str	r3, [sp, #20]
 800d084:	6850      	ldr	r0, [r2, #4]
 800d086:	f7fc f95a 	bl	800933e <lwip_htonl>
 800d08a:	68e9      	ldr	r1, [r5, #12]
 800d08c:	9004      	str	r0, [sp, #16]
 800d08e:	6848      	ldr	r0, [r1, #4]
 800d090:	f7fc f955 	bl	800933e <lwip_htonl>
 800d094:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800d096:	9b05      	ldr	r3, [sp, #20]
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d098:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800d09a:	2800      	cmp	r0, #0
 800d09c:	f6bf af47 	bge.w	800cf2e <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	e740      	b.n	800cf26 <tcp_output+0x162>
          useg->next = seg;
 800d0a4:	6035      	str	r5, [r6, #0]
 800d0a6:	e72c      	b.n	800cf02 <tcp_output+0x13e>
      tcp_seg_free(seg);
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	f7fd f9c1 	bl	800a430 <tcp_seg_free>
 800d0ae:	e741      	b.n	800cf34 <tcp_output+0x170>
    LWIP_ASSERT("RST not expected here!",
 800d0b0:	f8df a00c 	ldr.w	sl, [pc, #12]	; 800d0c0 <tcp_output+0x2fc>
 800d0b4:	f8df b00c 	ldr.w	fp, [pc, #12]	; 800d0c4 <tcp_output+0x300>
 800d0b8:	e73f      	b.n	800cf3a <tcp_output+0x176>
    return ERR_RTE;
 800d0ba:	f06f 0003 	mvn.w	r0, #3
 800d0be:	e7d1      	b.n	800d064 <tcp_output+0x2a0>
 800d0c0:	080147fa 	.word	0x080147fa
 800d0c4:	08012feb 	.word	0x08012feb

0800d0c8 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800d0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0cc:	b085      	sub	sp, #20
 800d0ce:	4681      	mov	r9, r0
 800d0d0:	460e      	mov	r6, r1
 800d0d2:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d0d4:	2114      	movs	r1, #20
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	2001      	movs	r0, #1
{
 800d0da:	461f      	mov	r7, r3
 800d0dc:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 800d0e0:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800d0e4:	f7fc fdc8 	bl	8009c78 <pbuf_alloc>
  if (p == NULL) {
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	2800      	cmp	r0, #0
 800d0ec:	d03c      	beq.n	800d168 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d0ee:	8943      	ldrh	r3, [r0, #10]
 800d0f0:	2b13      	cmp	r3, #19
 800d0f2:	d806      	bhi.n	800d102 <tcp_rst+0x3a>
 800d0f4:	4b1e      	ldr	r3, [pc, #120]	; (800d170 <tcp_rst+0xa8>)
 800d0f6:	f240 524c 	movw	r2, #1356	; 0x54c
 800d0fa:	491e      	ldr	r1, [pc, #120]	; (800d174 <tcp_rst+0xac>)
 800d0fc:	481e      	ldr	r0, [pc, #120]	; (800d178 <tcp_rst+0xb0>)
 800d0fe:	f004 fa99 	bl	8011634 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800d102:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 800d104:	4658      	mov	r0, fp
 800d106:	f7fc f917 	bl	8009338 <lwip_htons>
 800d10a:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800d10c:	4650      	mov	r0, sl
 800d10e:	f7fc f913 	bl	8009338 <lwip_htons>
 800d112:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800d114:	4648      	mov	r0, r9
 800d116:	f7fc f912 	bl	800933e <lwip_htonl>
 800d11a:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800d11c:	4630      	mov	r0, r6
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d11e:	2600      	movs	r6, #0
  tcphdr->ackno = lwip_htonl(ackno);
 800d120:	f7fc f90d 	bl	800933e <lwip_htonl>
 800d124:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d126:	f245 0014 	movw	r0, #20500	; 0x5014
 800d12a:	f7fc f905 	bl	8009338 <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d12e:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800d130:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800d132:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d134:	73a3      	strb	r3, [r4, #14]
 800d136:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 800d138:	7426      	strb	r6, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800d13a:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 800d13c:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 800d13e:	74a6      	strb	r6, [r4, #18]
 800d140:	74e6      	strb	r6, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 800d142:	f002 f937 	bl	800f3b4 <ip4_route>
  if (netif != NULL) {
 800d146:	b148      	cbz	r0, 800d15c <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800d148:	2306      	movs	r3, #6
 800d14a:	9002      	str	r0, [sp, #8]
 800d14c:	463a      	mov	r2, r7
 800d14e:	4641      	mov	r1, r8
 800d150:	4628      	mov	r0, r5
 800d152:	e9cd 6300 	strd	r6, r3, [sp]
 800d156:	23ff      	movs	r3, #255	; 0xff
 800d158:	f002 faa8 	bl	800f6ac <ip4_output_if>
  }
  pbuf_free(p);
 800d15c:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800d15e:	b005      	add	sp, #20
 800d160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800d164:	f7fc bd1e 	b.w	8009ba4 <pbuf_free>
}
 800d168:	b005      	add	sp, #20
 800d16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16e:	bf00      	nop
 800d170:	08014420 	.word	0x08014420
 800d174:	0801447c 	.word	0x0801447c
 800d178:	08012feb 	.word	0x08012feb

0800d17c <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800d17c:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 800d17e:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 800d180:	b1aa      	cbz	r2, 800d1ae <tcp_rexmit_rto+0x32>
 800d182:	4613      	mov	r3, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800d184:	4619      	mov	r1, r3
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1fb      	bne.n	800d184 <tcp_rexmit_rto+0x8>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800d18c:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800d18e:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800d190:	e9c0 231a 	strd	r2, r3, [r0, #104]	; 0x68

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800d194:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800d198:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800d19a:	bf1c      	itt	ne
 800d19c:	3301      	addne	r3, #1
 800d19e:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800d1a2:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 800d1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 800d1a8:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 800d1aa:	f7ff be0b 	b.w	800cdc4 <tcp_output>
}
 800d1ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1b2:	4770      	bx	lr

0800d1b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800d1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800d1b6:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 800d1b8:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 800d1ba:	b1ad      	cbz	r5, 800d1e8 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 800d1bc:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 800d1be:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 800d1c2:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 800d1c4:	6833      	ldr	r3, [r6, #0]
 800d1c6:	b983      	cbnz	r3, 800d1ea <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 800d1c8:	6833      	ldr	r3, [r6, #0]
 800d1ca:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800d1cc:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800d1ce:	682b      	ldr	r3, [r5, #0]
 800d1d0:	b90b      	cbnz	r3, 800d1d6 <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d1d2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800d1d6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800d1da:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800d1dc:	bf1c      	itt	ne
 800d1de:	3301      	addne	r3, #1
 800d1e0:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	6363      	str	r3, [r4, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800d1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d1ea:	68db      	ldr	r3, [r3, #12]
 800d1ec:	6858      	ldr	r0, [r3, #4]
 800d1ee:	f7fc f8a6 	bl	800933e <lwip_htonl>
 800d1f2:	68eb      	ldr	r3, [r5, #12]
 800d1f4:	4607      	mov	r7, r0
 800d1f6:	6858      	ldr	r0, [r3, #4]
 800d1f8:	f7fc f8a1 	bl	800933e <lwip_htonl>
 800d1fc:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800d1fe:	2800      	cmp	r0, #0
 800d200:	dae2      	bge.n	800d1c8 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800d202:	6836      	ldr	r6, [r6, #0]
 800d204:	e7de      	b.n	800d1c4 <tcp_rexmit+0x10>

0800d206 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800d206:	b538      	push	{r3, r4, r5, lr}
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d208:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800d20a:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800d20c:	b1f3      	cbz	r3, 800d24c <tcp_rexmit_fast+0x46>
 800d20e:	7e85      	ldrb	r5, [r0, #26]
 800d210:	f015 0504 	ands.w	r5, r5, #4
 800d214:	d11a      	bne.n	800d24c <tcp_rexmit_fast+0x46>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800d216:	f7ff ffcd 	bl	800d1b4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d21a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800d21e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
    pcb->flags |= TF_INFR;

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800d222:	8625      	strh	r5, [r4, #48]	; 0x30
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d224:	4299      	cmp	r1, r3
 800d226:	bf28      	it	cs
 800d228:	4619      	movcs	r1, r3
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800d22a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800d22c:	0058      	lsls	r0, r3, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800d22e:	104a      	asrs	r2, r1, #1
      pcb->ssthresh = 2*pcb->mss;
 800d230:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d234:	4403      	add	r3, r0
      pcb->ssthresh = 2*pcb->mss;
 800d236:	bf88      	it	hi
 800d238:	4602      	movhi	r2, r0
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d23a:	4413      	add	r3, r2
      pcb->ssthresh = 2*pcb->mss;
 800d23c:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800d240:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800d244:	7ea3      	ldrb	r3, [r4, #26]
 800d246:	f043 0304 	orr.w	r3, r3, #4
 800d24a:	76a3      	strb	r3, [r4, #26]
  }
}
 800d24c:	bd38      	pop	{r3, r4, r5, pc}

0800d24e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800d24e:	b530      	push	{r4, r5, lr}
 800d250:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d252:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
 800d254:	b087      	sub	sp, #28
  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800d256:	3801      	subs	r0, #1
 800d258:	f7fc f871 	bl	800933e <lwip_htonl>
 800d25c:	2100      	movs	r1, #0
 800d25e:	4602      	mov	r2, r0
 800d260:	4620      	mov	r0, r4
 800d262:	f7ff f9f3 	bl	800c64c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d266:	4605      	mov	r5, r0
 800d268:	b1d0      	cbz	r0, 800d2a0 <tcp_keepalive+0x52>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d26a:	1d22      	adds	r2, r4, #4
 800d26c:	4610      	mov	r0, r2
 800d26e:	9205      	str	r2, [sp, #20]
 800d270:	f002 f8a0 	bl	800f3b4 <ip4_route>
  if (netif == NULL) {
 800d274:	b188      	cbz	r0, 800d29a <tcp_keepalive+0x4c>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800d276:	2300      	movs	r3, #0
 800d278:	2206      	movs	r2, #6
 800d27a:	9002      	str	r0, [sp, #8]
 800d27c:	4621      	mov	r1, r4
 800d27e:	4628      	mov	r0, r5
 800d280:	e9cd 3200 	strd	r3, r2, [sp]
 800d284:	9a05      	ldr	r2, [sp, #20]
 800d286:	7aa3      	ldrb	r3, [r4, #10]
 800d288:	f002 fa10 	bl	800f6ac <ip4_output_if>
 800d28c:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800d28e:	4628      	mov	r0, r5
 800d290:	f7fc fc88 	bl	8009ba4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d294:	4620      	mov	r0, r4
 800d296:	b007      	add	sp, #28
 800d298:	bd30      	pop	{r4, r5, pc}
    err = ERR_RTE;
 800d29a:	f06f 0403 	mvn.w	r4, #3
 800d29e:	e7f6      	b.n	800d28e <tcp_keepalive+0x40>
    return ERR_MEM;
 800d2a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d2a4:	e7f6      	b.n	800d294 <tcp_keepalive+0x46>

0800d2a6 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800d2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800d2aa:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800d2ac:	b086      	sub	sp, #24
 800d2ae:	4606      	mov	r6, r0

  if (seg == NULL) {
 800d2b0:	b914      	cbnz	r4, 800d2b8 <tcp_zero_window_probe+0x12>
    seg = pcb->unsent;
 800d2b2:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800d2b4:	2c00      	cmp	r4, #0
 800d2b6:	d042      	beq.n	800d33e <tcp_zero_window_probe+0x98>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d2b8:	68e3      	ldr	r3, [r4, #12]
 800d2ba:	8998      	ldrh	r0, [r3, #12]
 800d2bc:	f7fc f83c 	bl	8009338 <lwip_htons>
 800d2c0:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d2c4:	68e3      	ldr	r3, [r4, #12]
 800d2c6:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d2c8:	bf18      	it	ne
 800d2ca:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d2cc:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800d2ce:	bf1c      	itt	ne
 800d2d0:	fab5 f585 	clzne	r5, r5
 800d2d4:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800d2d6:	f085 0101 	eor.w	r1, r5, #1
 800d2da:	f7ff f9b7 	bl	800c64c <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800d2de:	4607      	mov	r7, r0
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d03e      	beq.n	800d362 <tcp_zero_window_probe+0xbc>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800d2e4:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800d2e8:	b36d      	cbz	r5, 800d346 <tcp_zero_window_probe+0xa0>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800d2ea:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800d2ee:	2011      	movs	r0, #17
 800d2f0:	f7fc f822 	bl	8009338 <lwip_htons>
 800d2f4:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800d2f8:	b2ad      	uxth	r5, r5
 800d2fa:	4305      	orrs	r5, r0
 800d2fc:	f8a8 500c 	strh.w	r5, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d300:	68e3      	ldr	r3, [r4, #12]
 800d302:	6858      	ldr	r0, [r3, #4]
 800d304:	f7fc f81b 	bl	800933e <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d308:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800d30a:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d30c:	1d32      	adds	r2, r6, #4
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d30e:	1a1b      	subs	r3, r3, r0
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d310:	9205      	str	r2, [sp, #20]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d312:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800d314:	bfb8      	it	lt
 800d316:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d318:	4610      	mov	r0, r2
 800d31a:	f002 f84b 	bl	800f3b4 <ip4_route>
  if (netif == NULL) {
 800d31e:	b1e8      	cbz	r0, 800d35c <tcp_zero_window_probe+0xb6>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800d320:	2300      	movs	r3, #0
 800d322:	2206      	movs	r2, #6
 800d324:	9002      	str	r0, [sp, #8]
 800d326:	4631      	mov	r1, r6
 800d328:	4638      	mov	r0, r7
 800d32a:	e9cd 3200 	strd	r3, r2, [sp]
 800d32e:	7ab3      	ldrb	r3, [r6, #10]
 800d330:	9a05      	ldr	r2, [sp, #20]
 800d332:	f002 f9bb 	bl	800f6ac <ip4_output_if>
 800d336:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800d338:	4638      	mov	r0, r7
 800d33a:	f7fc fc33 	bl	8009ba4 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800d33e:	4620      	mov	r0, r4
 800d340:	b006      	add	sp, #24
 800d342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800d346:	6860      	ldr	r0, [r4, #4]
 800d348:	f108 0114 	add.w	r1, r8, #20
 800d34c:	8922      	ldrh	r2, [r4, #8]
 800d34e:	8903      	ldrh	r3, [r0, #8]
 800d350:	1a9b      	subs	r3, r3, r2
 800d352:	2201      	movs	r2, #1
 800d354:	b29b      	uxth	r3, r3
 800d356:	f7fc febd 	bl	800a0d4 <pbuf_copy_partial>
 800d35a:	e7d1      	b.n	800d300 <tcp_zero_window_probe+0x5a>
    err = ERR_RTE;
 800d35c:	f06f 0403 	mvn.w	r4, #3
 800d360:	e7ea      	b.n	800d338 <tcp_zero_window_probe+0x92>
    return ERR_MEM;
 800d362:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d366:	e7ea      	b.n	800d33e <tcp_zero_window_probe+0x98>

0800d368 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d36c:	4606      	mov	r6, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d36e:	200a      	movs	r0, #10
{
 800d370:	4688      	mov	r8, r1
 800d372:	4617      	mov	r7, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800d374:	f7fc fa76 	bl	8009864 <memp_malloc>
  if (timeout == NULL) {
 800d378:	4604      	mov	r4, r0
 800d37a:	b938      	cbnz	r0, 800d38c <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d37c:	4b1e      	ldr	r3, [pc, #120]	; (800d3f8 <sys_timeout+0x90>)
 800d37e:	22d4      	movs	r2, #212	; 0xd4
 800d380:	491e      	ldr	r1, [pc, #120]	; (800d3fc <sys_timeout+0x94>)
 800d382:	481f      	ldr	r0, [pc, #124]	; (800d400 <sys_timeout+0x98>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800d384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800d388:	f004 b954 	b.w	8011634 <iprintf>
  now = sys_now();
 800d38c:	f003 f968 	bl	8010660 <sys_now>
  if (next_timeout == NULL) {
 800d390:	4a1c      	ldr	r2, [pc, #112]	; (800d404 <sys_timeout+0x9c>)
  now = sys_now();
 800d392:	4603      	mov	r3, r0
  if (next_timeout == NULL) {
 800d394:	491c      	ldr	r1, [pc, #112]	; (800d408 <sys_timeout+0xa0>)
 800d396:	6815      	ldr	r5, [r2, #0]
 800d398:	b95d      	cbnz	r5, 800d3b2 <sys_timeout+0x4a>
    diff = 0;
 800d39a:	462b      	mov	r3, r5
    timeouts_last_time = now;
 800d39c:	6008      	str	r0, [r1, #0]
  timeout->next = NULL;
 800d39e:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800d3a0:	4433      	add	r3, r6
  timeout->next = NULL;
 800d3a2:	6021      	str	r1, [r4, #0]
  timeout->time = msecs + diff;
 800d3a4:	6063      	str	r3, [r4, #4]
  timeout->arg = arg;
 800d3a6:	e9c4 8702 	strd	r8, r7, [r4, #8]
  if (next_timeout == NULL) {
 800d3aa:	b92d      	cbnz	r5, 800d3b8 <sys_timeout+0x50>
    next_timeout = timeout;
 800d3ac:	6014      	str	r4, [r2, #0]
}
 800d3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 800d3b2:	6808      	ldr	r0, [r1, #0]
 800d3b4:	1a1b      	subs	r3, r3, r0
 800d3b6:	e7f2      	b.n	800d39e <sys_timeout+0x36>
  if (next_timeout->time > msecs) {
 800d3b8:	6868      	ldr	r0, [r5, #4]
 800d3ba:	42b0      	cmp	r0, r6
 800d3bc:	d903      	bls.n	800d3c6 <sys_timeout+0x5e>
    next_timeout->time -= msecs;
 800d3be:	1b80      	subs	r0, r0, r6
 800d3c0:	6068      	str	r0, [r5, #4]
    timeout->next = next_timeout;
 800d3c2:	6025      	str	r5, [r4, #0]
 800d3c4:	e7f2      	b.n	800d3ac <sys_timeout+0x44>
 800d3c6:	462b      	mov	r3, r5
      timeout->time -= t->time;
 800d3c8:	685a      	ldr	r2, [r3, #4]
 800d3ca:	469c      	mov	ip, r3
 800d3cc:	6860      	ldr	r0, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800d3ce:	681b      	ldr	r3, [r3, #0]
      timeout->time -= t->time;
 800d3d0:	1a81      	subs	r1, r0, r2
 800d3d2:	6061      	str	r1, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800d3d4:	b133      	cbz	r3, 800d3e4 <sys_timeout+0x7c>
 800d3d6:	685f      	ldr	r7, [r3, #4]
 800d3d8:	42b9      	cmp	r1, r7
 800d3da:	d2f5      	bcs.n	800d3c8 <sys_timeout+0x60>
          t->next->time -= timeout->time;
 800d3dc:	443a      	add	r2, r7
 800d3de:	1a12      	subs	r2, r2, r0
 800d3e0:	605a      	str	r2, [r3, #4]
 800d3e2:	e004      	b.n	800d3ee <sys_timeout+0x86>
        } else if (timeout->time > msecs) {
 800d3e4:	42b1      	cmp	r1, r6
 800d3e6:	d902      	bls.n	800d3ee <sys_timeout+0x86>
          timeout->time = msecs + next_timeout->time;
 800d3e8:	6868      	ldr	r0, [r5, #4]
 800d3ea:	4406      	add	r6, r0
 800d3ec:	6066      	str	r6, [r4, #4]
        timeout->next = t->next;
 800d3ee:	6023      	str	r3, [r4, #0]
        t->next = timeout;
 800d3f0:	f8cc 4000 	str.w	r4, [ip]
        break;
 800d3f4:	e7db      	b.n	800d3ae <sys_timeout+0x46>
 800d3f6:	bf00      	nop
 800d3f8:	08014811 	.word	0x08014811
 800d3fc:	08014845 	.word	0x08014845
 800d400:	08012feb 	.word	0x08012feb
 800d404:	200082c8 	.word	0x200082c8
 800d408:	200082d0 	.word	0x200082d0

0800d40c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800d40c:	4b08      	ldr	r3, [pc, #32]	; (800d430 <tcp_timer_needed+0x24>)
 800d40e:	681a      	ldr	r2, [r3, #0]
 800d410:	b962      	cbnz	r2, 800d42c <tcp_timer_needed+0x20>
 800d412:	4a08      	ldr	r2, [pc, #32]	; (800d434 <tcp_timer_needed+0x28>)
 800d414:	6812      	ldr	r2, [r2, #0]
 800d416:	b912      	cbnz	r2, 800d41e <tcp_timer_needed+0x12>
 800d418:	4a07      	ldr	r2, [pc, #28]	; (800d438 <tcp_timer_needed+0x2c>)
 800d41a:	6812      	ldr	r2, [r2, #0]
 800d41c:	b132      	cbz	r2, 800d42c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800d41e:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d420:	4906      	ldr	r1, [pc, #24]	; (800d43c <tcp_timer_needed+0x30>)
 800d422:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800d424:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d426:	2200      	movs	r2, #0
 800d428:	f7ff bf9e 	b.w	800d368 <sys_timeout>
}
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop
 800d430:	200082cc 	.word	0x200082cc
 800d434:	2000bd58 	.word	0x2000bd58
 800d438:	2000bd68 	.word	0x2000bd68
 800d43c:	0800d441 	.word	0x0800d441

0800d440 <tcpip_tcp_timer>:
{
 800d440:	b508      	push	{r3, lr}
  tcp_tmr();
 800d442:	f7fd fc0d 	bl	800ac60 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800d446:	4b08      	ldr	r3, [pc, #32]	; (800d468 <tcpip_tcp_timer+0x28>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	b913      	cbnz	r3, 800d452 <tcpip_tcp_timer+0x12>
 800d44c:	4b07      	ldr	r3, [pc, #28]	; (800d46c <tcpip_tcp_timer+0x2c>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	b133      	cbz	r3, 800d460 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d452:	2200      	movs	r2, #0
 800d454:	4906      	ldr	r1, [pc, #24]	; (800d470 <tcpip_tcp_timer+0x30>)
 800d456:	20fa      	movs	r0, #250	; 0xfa
}
 800d458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800d45c:	f7ff bf84 	b.w	800d368 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800d460:	4a04      	ldr	r2, [pc, #16]	; (800d474 <tcpip_tcp_timer+0x34>)
 800d462:	6013      	str	r3, [r2, #0]
}
 800d464:	bd08      	pop	{r3, pc}
 800d466:	bf00      	nop
 800d468:	2000bd58 	.word	0x2000bd58
 800d46c:	2000bd68 	.word	0x2000bd68
 800d470:	0800d441 	.word	0x0800d441
 800d474:	200082cc 	.word	0x200082cc

0800d478 <sys_timeouts_init>:
{
 800d478:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800d47a:	4c11      	ldr	r4, [pc, #68]	; (800d4c0 <sys_timeouts_init+0x48>)
 800d47c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d480:	4910      	ldr	r1, [pc, #64]	; (800d4c4 <sys_timeouts_init+0x4c>)
 800d482:	f104 0208 	add.w	r2, r4, #8
 800d486:	f7ff ff6f 	bl	800d368 <sys_timeout>
 800d48a:	f104 0210 	add.w	r2, r4, #16
 800d48e:	490d      	ldr	r1, [pc, #52]	; (800d4c4 <sys_timeouts_init+0x4c>)
 800d490:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d494:	f7ff ff68 	bl	800d368 <sys_timeout>
 800d498:	f104 0218 	add.w	r2, r4, #24
 800d49c:	4909      	ldr	r1, [pc, #36]	; (800d4c4 <sys_timeouts_init+0x4c>)
 800d49e:	f64e 2060 	movw	r0, #60000	; 0xea60
 800d4a2:	f7ff ff61 	bl	800d368 <sys_timeout>
 800d4a6:	f104 0220 	add.w	r2, r4, #32
 800d4aa:	4906      	ldr	r1, [pc, #24]	; (800d4c4 <sys_timeouts_init+0x4c>)
 800d4ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d4b0:	f7ff ff5a 	bl	800d368 <sys_timeout>
  timeouts_last_time = sys_now();
 800d4b4:	f003 f8d4 	bl	8010660 <sys_now>
 800d4b8:	4b03      	ldr	r3, [pc, #12]	; (800d4c8 <sys_timeouts_init+0x50>)
 800d4ba:	6018      	str	r0, [r3, #0]
}
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	bf00      	nop
 800d4c0:	08014884 	.word	0x08014884
 800d4c4:	0800d4cd 	.word	0x0800d4cd
 800d4c8:	200082d0 	.word	0x200082d0

0800d4cc <cyclic_timer>:
{
 800d4cc:	b510      	push	{r4, lr}
 800d4ce:	4604      	mov	r4, r0
  cyclic->handler();
 800d4d0:	6843      	ldr	r3, [r0, #4]
 800d4d2:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800d4d4:	4903      	ldr	r1, [pc, #12]	; (800d4e4 <cyclic_timer+0x18>)
 800d4d6:	4622      	mov	r2, r4
 800d4d8:	6820      	ldr	r0, [r4, #0]
}
 800d4da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800d4de:	f7ff bf43 	b.w	800d368 <sys_timeout>
 800d4e2:	bf00      	nop
 800d4e4:	0800d4cd 	.word	0x0800d4cd

0800d4e8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800d4e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800d4ec:	4e29      	ldr	r6, [pc, #164]	; (800d594 <sys_timeouts_mbox_fetch+0xac>)
{
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	460d      	mov	r5, r1
  diff = sys_now() - timeouts_last_time;
 800d4f2:	4f29      	ldr	r7, [pc, #164]	; (800d598 <sys_timeouts_mbox_fetch+0xb0>)
 800d4f4:	46b0      	mov	r8, r6
{
 800d4f6:	ed2d 8b02 	vpush	{d8}
  if (!next_timeout) {
 800d4fa:	6832      	ldr	r2, [r6, #0]
 800d4fc:	b93a      	cbnz	r2, 800d50e <sys_timeouts_mbox_fetch+0x26>
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800d4fe:	ecbd 8b02 	vpop	{d8}
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d502:	4629      	mov	r1, r5
 800d504:	4620      	mov	r0, r4
}
 800d506:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 800d50a:	f002 bd55 	b.w	800ffb8 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 800d50e:	f003 f8a7 	bl	8010660 <sys_now>
 800d512:	683b      	ldr	r3, [r7, #0]
  if (diff > next_timeout->time) {
 800d514:	6832      	ldr	r2, [r6, #0]
  diff = sys_now() - timeouts_last_time;
 800d516:	1ac1      	subs	r1, r0, r3
  if (diff > next_timeout->time) {
 800d518:	6852      	ldr	r2, [r2, #4]
 800d51a:	4291      	cmp	r1, r2
 800d51c:	d80b      	bhi.n	800d536 <sys_timeouts_mbox_fetch+0x4e>
    return next_timeout->time - diff;
 800d51e:	441a      	add	r2, r3
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800d520:	1a12      	subs	r2, r2, r0
 800d522:	d008      	beq.n	800d536 <sys_timeouts_mbox_fetch+0x4e>
 800d524:	4629      	mov	r1, r5
 800d526:	4620      	mov	r0, r4
 800d528:	f002 fd46 	bl	800ffb8 <sys_arch_mbox_fetch>
 800d52c:	3001      	adds	r0, #1
 800d52e:	d12c      	bne.n	800d58a <sys_timeouts_mbox_fetch+0xa2>
  if (next_timeout) {
 800d530:	6833      	ldr	r3, [r6, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0e1      	beq.n	800d4fa <sys_timeouts_mbox_fetch+0x12>
    now = sys_now();
 800d536:	f003 f893 	bl	8010660 <sys_now>
    diff = now - timeouts_last_time;
 800d53a:	683a      	ldr	r2, [r7, #0]
          LOCK_TCPIP_CORE();
 800d53c:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800d59c <sys_timeouts_mbox_fetch+0xb4>
    diff = now - timeouts_last_time;
 800d540:	eba0 0b02 	sub.w	fp, r0, r2
      tmptimeout = next_timeout;
 800d544:	f8d8 1000 	ldr.w	r1, [r8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800d548:	2900      	cmp	r1, #0
 800d54a:	d0d6      	beq.n	800d4fa <sys_timeouts_mbox_fetch+0x12>
 800d54c:	684a      	ldr	r2, [r1, #4]
 800d54e:	455a      	cmp	r2, fp
 800d550:	d8d3      	bhi.n	800d4fa <sys_timeouts_mbox_fetch+0x12>
        timeouts_last_time += tmptimeout->time;
 800d552:	6838      	ldr	r0, [r7, #0]
        diff -= tmptimeout->time;
 800d554:	ebab 0b02 	sub.w	fp, fp, r2
        timeouts_last_time += tmptimeout->time;
 800d558:	4410      	add	r0, r2
        next_timeout = tmptimeout->next;
 800d55a:	680a      	ldr	r2, [r1, #0]
        arg = tmptimeout->arg;
 800d55c:	e9d1 a302 	ldrd	sl, r3, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 800d560:	6038      	str	r0, [r7, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d562:	200a      	movs	r0, #10
        arg = tmptimeout->arg;
 800d564:	ee08 3a10 	vmov	s16, r3
        next_timeout = tmptimeout->next;
 800d568:	f8c8 2000 	str.w	r2, [r8]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d56c:	f7fc f996 	bl	800989c <memp_free>
        if (handler != NULL) {
 800d570:	f1ba 0f00 	cmp.w	sl, #0
 800d574:	d0e6      	beq.n	800d544 <sys_timeouts_mbox_fetch+0x5c>
          LOCK_TCPIP_CORE();
 800d576:	4648      	mov	r0, r9
 800d578:	f002 fdb4 	bl	80100e4 <sys_mutex_lock>
          handler(arg);
 800d57c:	ee18 0a10 	vmov	r0, s16
 800d580:	47d0      	blx	sl
          UNLOCK_TCPIP_CORE();
 800d582:	4648      	mov	r0, r9
 800d584:	f002 fdb3 	bl	80100ee <sys_mutex_unlock>
    } while (had_one);
 800d588:	e7dc      	b.n	800d544 <sys_timeouts_mbox_fetch+0x5c>
}
 800d58a:	ecbd 8b02 	vpop	{d8}
 800d58e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d592:	bf00      	nop
 800d594:	200082c8 	.word	0x200082c8
 800d598:	200082d0 	.word	0x200082d0
 800d59c:	20008630 	.word	0x20008630

0800d5a0 <udp_init>:
udp_init(void)
{
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d5a0:	4770      	bx	lr
	...

0800d5a4 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d5a4:	8943      	ldrh	r3, [r0, #10]
 800d5a6:	2b07      	cmp	r3, #7
{
 800d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800d5b2:	d805      	bhi.n	800d5c0 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d5b4:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d5b6:	b005      	add	sp, #20
 800d5b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800d5bc:	f7fc baf2 	b.w	8009ba4 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d5c0:	4e3d      	ldr	r6, [pc, #244]	; (800d6b8 <udp_input+0x114>)
  udphdr = (struct udp_hdr *)p->payload;
 800d5c2:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d5c4:	6831      	ldr	r1, [r6, #0]
 800d5c6:	6970      	ldr	r0, [r6, #20]
 800d5c8:	f002 f881 	bl	800f6ce <ip4_addr_isbroadcast_u32>
 800d5cc:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800d5ce:	8820      	ldrh	r0, [r4, #0]
 800d5d0:	f7fb feb2 	bl	8009338 <lwip_htons>
 800d5d4:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800d5d6:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 800d5d8:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 800d5da:	f7fb fead 	bl	8009338 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5de:	4a37      	ldr	r2, [pc, #220]	; (800d6bc <udp_input+0x118>)
  prev = NULL;
 800d5e0:	46a4      	mov	ip, r4
  dest = lwip_ntohs(udphdr->dest);
 800d5e2:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5e4:	f8d2 e000 	ldr.w	lr, [r2]
 800d5e8:	4692      	mov	sl, r2
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d5ea:	e9d6 b104 	ldrd	fp, r1, [r6, #16]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5ee:	4673      	mov	r3, lr
 800d5f0:	b99b      	cbnz	r3, 800d61a <udp_input+0x76>
  if (pcb != NULL) {
 800d5f2:	b91c      	cbnz	r4, 800d5fc <udp_input+0x58>
  if (for_us) {
 800d5f4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d5f8:	428b      	cmp	r3, r1
 800d5fa:	d1db      	bne.n	800d5b4 <udp_input+0x10>
    if (pbuf_header(p, -UDP_HLEN)) {
 800d5fc:	f06f 0107 	mvn.w	r1, #7
 800d600:	4628      	mov	r0, r5
 800d602:	f7fc fac9 	bl	8009b98 <pbuf_header>
 800d606:	2800      	cmp	r0, #0
 800d608:	d036      	beq.n	800d678 <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800d60a:	4b2d      	ldr	r3, [pc, #180]	; (800d6c0 <udp_input+0x11c>)
 800d60c:	f240 1255 	movw	r2, #341	; 0x155
 800d610:	492c      	ldr	r1, [pc, #176]	; (800d6c4 <udp_input+0x120>)
 800d612:	482d      	ldr	r0, [pc, #180]	; (800d6c8 <udp_input+0x124>)
 800d614:	f004 f80e 	bl	8011634 <iprintf>
 800d618:	e7cc      	b.n	800d5b4 <udp_input+0x10>
    if ((pcb->local_port == dest) &&
 800d61a:	8a5a      	ldrh	r2, [r3, #18]
 800d61c:	9803      	ldr	r0, [sp, #12]
 800d61e:	4282      	cmp	r2, r0
 800d620:	d127      	bne.n	800d672 <udp_input+0xce>
    if (broadcast != 0) {
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	b30f      	cbz	r7, 800d66a <udp_input+0xc6>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d626:	b13a      	cbz	r2, 800d638 <udp_input+0x94>
 800d628:	1c48      	adds	r0, r1, #1
 800d62a:	d005      	beq.n	800d638 <udp_input+0x94>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d62c:	404a      	eors	r2, r1
 800d62e:	4610      	mov	r0, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d630:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800d634:	4210      	tst	r0, r2
 800d636:	d11c      	bne.n	800d672 <udp_input+0xce>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800d638:	7c1a      	ldrb	r2, [r3, #16]
 800d63a:	0752      	lsls	r2, r2, #29
 800d63c:	d402      	bmi.n	800d644 <udp_input+0xa0>
 800d63e:	2c00      	cmp	r4, #0
 800d640:	bf08      	it	eq
 800d642:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 800d644:	8a9a      	ldrh	r2, [r3, #20]
 800d646:	4542      	cmp	r2, r8
 800d648:	d113      	bne.n	800d672 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d64a:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d64c:	b10a      	cbz	r2, 800d652 <udp_input+0xae>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d64e:	455a      	cmp	r2, fp
 800d650:	d10f      	bne.n	800d672 <udp_input+0xce>
        if (prev != NULL) {
 800d652:	f1bc 0f00 	cmp.w	ip, #0
 800d656:	d006      	beq.n	800d666 <udp_input+0xc2>
          prev->next = pcb->next;
 800d658:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 800d65a:	f8ca 3000 	str.w	r3, [sl]
          prev->next = pcb->next;
 800d65e:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 800d662:	f8c3 e00c 	str.w	lr, [r3, #12]
          udp_pcbs = pcb;
 800d666:	461c      	mov	r4, r3
 800d668:	e7c8      	b.n	800d5fc <udp_input+0x58>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d66a:	2a00      	cmp	r2, #0
 800d66c:	d0e4      	beq.n	800d638 <udp_input+0x94>
 800d66e:	428a      	cmp	r2, r1
 800d670:	d0e2      	beq.n	800d638 <udp_input+0x94>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d672:	469c      	mov	ip, r3
 800d674:	68db      	ldr	r3, [r3, #12]
 800d676:	e7bb      	b.n	800d5f0 <udp_input+0x4c>
    if (pcb != NULL) {
 800d678:	b164      	cbz	r4, 800d694 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 800d67a:	69a6      	ldr	r6, [r4, #24]
 800d67c:	2e00      	cmp	r6, #0
 800d67e:	d099      	beq.n	800d5b4 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d680:	f8cd 8000 	str.w	r8, [sp]
 800d684:	462a      	mov	r2, r5
 800d686:	4b11      	ldr	r3, [pc, #68]	; (800d6cc <udp_input+0x128>)
 800d688:	4621      	mov	r1, r4
 800d68a:	69e0      	ldr	r0, [r4, #28]
 800d68c:	47b0      	blx	r6
}
 800d68e:	b005      	add	sp, #20
 800d690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d694:	2f00      	cmp	r7, #0
 800d696:	d18d      	bne.n	800d5b4 <udp_input+0x10>
 800d698:	6973      	ldr	r3, [r6, #20]
 800d69a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d69e:	2be0      	cmp	r3, #224	; 0xe0
 800d6a0:	d088      	beq.n	800d5b4 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d6a2:	89b1      	ldrh	r1, [r6, #12]
 800d6a4:	4628      	mov	r0, r5
 800d6a6:	3108      	adds	r1, #8
 800d6a8:	b209      	sxth	r1, r1
 800d6aa:	f7fc fa78 	bl	8009b9e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d6ae:	2103      	movs	r1, #3
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	f001 fe75 	bl	800f3a0 <icmp_dest_unreach>
 800d6b6:	e77d      	b.n	800d5b4 <udp_input+0x10>
 800d6b8:	20008634 	.word	0x20008634
 800d6bc:	2000bd70 	.word	0x2000bd70
 800d6c0:	080148ac 	.word	0x080148ac
 800d6c4:	080148db 	.word	0x080148db
 800d6c8:	08012feb 	.word	0x08012feb
 800d6cc:	20008644 	.word	0x20008644

0800d6d0 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800d6d0:	4b26      	ldr	r3, [pc, #152]	; (800d76c <udp_bind+0x9c>)
{
 800d6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800d6d6:	2900      	cmp	r1, #0
 800d6d8:	bf08      	it	eq
 800d6da:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d042      	beq.n	800d766 <udp_bind+0x96>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d6e0:	4e23      	ldr	r6, [pc, #140]	; (800d770 <udp_bind+0xa0>)
 800d6e2:	f8d6 c000 	ldr.w	ip, [r6]
 800d6e6:	4665      	mov	r5, ip
 800d6e8:	b9cd      	cbnz	r5, 800d71e <udp_bind+0x4e>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800d6ea:	2a00      	cmp	r2, #0
 800d6ec:	d139      	bne.n	800d762 <udp_bind+0x92>
 800d6ee:	4b21      	ldr	r3, [pc, #132]	; (800d774 <udp_bind+0xa4>)
 800d6f0:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d6f4:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800d6f8:	881a      	ldrh	r2, [r3, #0]
 800d6fa:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d6fc:	4667      	mov	r7, ip
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d6fe:	bf16      	itet	ne
 800d700:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d702:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d706:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d708:	b97f      	cbnz	r7, 800d72a <udp_bind+0x5a>
 800d70a:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d70c:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 800d70e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d710:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d712:	b915      	cbnz	r5, 800d71a <udp_bind+0x4a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800d714:	f8c0 c00c 	str.w	ip, [r0, #12]
    udp_pcbs = pcb;
 800d718:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d71a:	2000      	movs	r0, #0
 800d71c:	e010      	b.n	800d740 <udp_bind+0x70>
    if (pcb == ipcb) {
 800d71e:	4285      	cmp	r5, r0
 800d720:	d001      	beq.n	800d726 <udp_bind+0x56>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d722:	68ed      	ldr	r5, [r5, #12]
 800d724:	e7e0      	b.n	800d6e8 <udp_bind+0x18>
      rebind = 1;
 800d726:	2501      	movs	r5, #1
 800d728:	e7df      	b.n	800d6ea <udp_bind+0x1a>
    if (pcb->local_port == udp_port) {
 800d72a:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 800d72e:	4590      	cmp	r8, r2
 800d730:	d108      	bne.n	800d744 <udp_bind+0x74>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d732:	3c01      	subs	r4, #1
 800d734:	b2a4      	uxth	r4, r4
 800d736:	2c00      	cmp	r4, #0
 800d738:	d1df      	bne.n	800d6fa <udp_bind+0x2a>
 800d73a:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800d73c:	f06f 0007 	mvn.w	r0, #7
}
 800d740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d744:	68ff      	ldr	r7, [r7, #12]
 800d746:	e7df      	b.n	800d708 <udp_bind+0x38>
      if (pcb != ipcb) {
 800d748:	4283      	cmp	r3, r0
 800d74a:	d006      	beq.n	800d75a <udp_bind+0x8a>
          if ((ipcb->local_port == port) &&
 800d74c:	8a5c      	ldrh	r4, [r3, #18]
 800d74e:	4294      	cmp	r4, r2
 800d750:	d103      	bne.n	800d75a <udp_bind+0x8a>
 800d752:	681f      	ldr	r7, [r3, #0]
 800d754:	680c      	ldr	r4, [r1, #0]
 800d756:	42a7      	cmp	r7, r4
 800d758:	d0f0      	beq.n	800d73c <udp_bind+0x6c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1f3      	bne.n	800d748 <udp_bind+0x78>
 800d760:	e7d4      	b.n	800d70c <udp_bind+0x3c>
 800d762:	4663      	mov	r3, ip
 800d764:	e7fa      	b.n	800d75c <udp_bind+0x8c>
    return ERR_VAL;
 800d766:	f06f 0005 	mvn.w	r0, #5
 800d76a:	e7e9      	b.n	800d740 <udp_bind+0x70>
 800d76c:	08015038 	.word	0x08015038
 800d770:	2000bd70 	.word	0x2000bd70
 800d774:	2000002e 	.word	0x2000002e

0800d778 <udp_sendto_if_src>:
{
 800d778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d77c:	460f      	mov	r7, r1
 800d77e:	b085      	sub	sp, #20
 800d780:	4690      	mov	r8, r2
 800d782:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800d784:	4606      	mov	r6, r0
 800d786:	2800      	cmp	r0, #0
 800d788:	d050      	beq.n	800d82c <udp_sendto_if_src+0xb4>
 800d78a:	2a00      	cmp	r2, #0
 800d78c:	d04e      	beq.n	800d82c <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 800d78e:	8a42      	ldrh	r2, [r0, #18]
 800d790:	2a00      	cmp	r2, #0
 800d792:	d033      	beq.n	800d7fc <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 800d794:	2108      	movs	r1, #8
 800d796:	4638      	mov	r0, r7
 800d798:	f7fc f9fe 	bl	8009b98 <pbuf_header>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d137      	bne.n	800d810 <udp_sendto_if_src+0x98>
 800d7a0:	463d      	mov	r5, r7
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800d7a2:	896b      	ldrh	r3, [r5, #10]
 800d7a4:	2b07      	cmp	r3, #7
 800d7a6:	d806      	bhi.n	800d7b6 <udp_sendto_if_src+0x3e>
 800d7a8:	4b23      	ldr	r3, [pc, #140]	; (800d838 <udp_sendto_if_src+0xc0>)
 800d7aa:	f240 22db 	movw	r2, #731	; 0x2db
 800d7ae:	4923      	ldr	r1, [pc, #140]	; (800d83c <udp_sendto_if_src+0xc4>)
 800d7b0:	4823      	ldr	r0, [pc, #140]	; (800d840 <udp_sendto_if_src+0xc8>)
 800d7b2:	f003 ff3f 	bl	8011634 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800d7b6:	686c      	ldr	r4, [r5, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800d7b8:	8a70      	ldrh	r0, [r6, #18]
 800d7ba:	f7fb fdbd 	bl	8009338 <lwip_htons>
 800d7be:	8020      	strh	r0, [r4, #0]
  udphdr->dest = lwip_htons(dst_port);
 800d7c0:	4648      	mov	r0, r9
 800d7c2:	f7fb fdb9 	bl	8009338 <lwip_htons>
  udphdr->chksum = 0x0000;
 800d7c6:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800d7c8:	8060      	strh	r0, [r4, #2]
  udphdr->chksum = 0x0000;
 800d7ca:	71a3      	strb	r3, [r4, #6]
 800d7cc:	71e3      	strb	r3, [r4, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800d7ce:	8928      	ldrh	r0, [r5, #8]
 800d7d0:	f7fb fdb2 	bl	8009338 <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d7d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 800d7d6:	80a0      	strh	r0, [r4, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d7d8:	4642      	mov	r2, r8
 800d7da:	9302      	str	r3, [sp, #8]
 800d7dc:	2311      	movs	r3, #17
 800d7de:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	9301      	str	r3, [sp, #4]
 800d7e4:	7a73      	ldrb	r3, [r6, #9]
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	7ab3      	ldrb	r3, [r6, #10]
 800d7ea:	f001 fee7 	bl	800f5bc <ip4_output_if_src>
  if (q != p) {
 800d7ee:	42bd      	cmp	r5, r7
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800d7f0:	4604      	mov	r4, r0
  if (q != p) {
 800d7f2:	d009      	beq.n	800d808 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	f7fc f9d5 	bl	8009ba4 <pbuf_free>
    q = NULL;
 800d7fa:	e005      	b.n	800d808 <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d7fc:	4601      	mov	r1, r0
 800d7fe:	f7ff ff67 	bl	800d6d0 <udp_bind>
    if (err != ERR_OK) {
 800d802:	4604      	mov	r4, r0
 800d804:	2800      	cmp	r0, #0
 800d806:	d0c5      	beq.n	800d794 <udp_sendto_if_src+0x1c>
}
 800d808:	4620      	mov	r0, r4
 800d80a:	b005      	add	sp, #20
 800d80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800d810:	2200      	movs	r2, #0
 800d812:	2108      	movs	r1, #8
 800d814:	2001      	movs	r0, #1
 800d816:	f7fc fa2f 	bl	8009c78 <pbuf_alloc>
    if (q == NULL) {
 800d81a:	4605      	mov	r5, r0
 800d81c:	b148      	cbz	r0, 800d832 <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 800d81e:	893b      	ldrh	r3, [r7, #8]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d0be      	beq.n	800d7a2 <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 800d824:	4639      	mov	r1, r7
 800d826:	f7fc fbc5 	bl	8009fb4 <pbuf_chain>
 800d82a:	e7ba      	b.n	800d7a2 <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 800d82c:	f06f 0405 	mvn.w	r4, #5
 800d830:	e7ea      	b.n	800d808 <udp_sendto_if_src+0x90>
      return ERR_MEM;
 800d832:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d836:	e7e7      	b.n	800d808 <udp_sendto_if_src+0x90>
 800d838:	080148ac 	.word	0x080148ac
 800d83c:	080148ef 	.word	0x080148ef
 800d840:	08012feb 	.word	0x08012feb

0800d844 <udp_sendto_if>:
{
 800d844:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d846:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800d848:	b190      	cbz	r0, 800d870 <udp_sendto_if+0x2c>
 800d84a:	b18a      	cbz	r2, 800d870 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d84c:	6805      	ldr	r5, [r0, #0]
 800d84e:	b11d      	cbz	r5, 800d858 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800d850:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d854:	2ee0      	cmp	r6, #224	; 0xe0
 800d856:	d106      	bne.n	800d866 <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 800d858:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800d85a:	e9cd 4500 	strd	r4, r5, [sp]
 800d85e:	f7ff ff8b 	bl	800d778 <udp_sendto_if_src>
}
 800d862:	b002      	add	sp, #8
 800d864:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800d866:	6866      	ldr	r6, [r4, #4]
 800d868:	42b5      	cmp	r5, r6
 800d86a:	d104      	bne.n	800d876 <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d86c:	4605      	mov	r5, r0
 800d86e:	e7f4      	b.n	800d85a <udp_sendto_if+0x16>
    return ERR_VAL;
 800d870:	f06f 0005 	mvn.w	r0, #5
 800d874:	e7f5      	b.n	800d862 <udp_sendto_if+0x1e>
      return ERR_RTE;
 800d876:	f06f 0003 	mvn.w	r0, #3
 800d87a:	e7f2      	b.n	800d862 <udp_sendto_if+0x1e>

0800d87c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d87c:	b570      	push	{r4, r5, r6, lr}
 800d87e:	460d      	mov	r5, r1
 800d880:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d882:	4604      	mov	r4, r0
 800d884:	b1d0      	cbz	r0, 800d8bc <udp_connect+0x40>
 800d886:	b1c9      	cbz	r1, 800d8bc <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800d888:	8a42      	ldrh	r2, [r0, #18]
 800d88a:	b16a      	cbz	r2, 800d8a8 <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d88c:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800d88e:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800d890:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800d892:	7c23      	ldrb	r3, [r4, #16]
 800d894:	f043 0304 	orr.w	r3, r3, #4
 800d898:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d89a:	4b0b      	ldr	r3, [pc, #44]	; (800d8c8 <udp_connect+0x4c>)
 800d89c:	681a      	ldr	r2, [r3, #0]
 800d89e:	4610      	mov	r0, r2
 800d8a0:	b940      	cbnz	r0, 800d8b4 <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800d8a2:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800d8a4:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d8a6:	e004      	b.n	800d8b2 <udp_connect+0x36>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800d8a8:	4601      	mov	r1, r0
 800d8aa:	f7ff ff11 	bl	800d6d0 <udp_bind>
    if (err != ERR_OK) {
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d0ec      	beq.n	800d88c <udp_connect+0x10>
}
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 800d8b4:	42a0      	cmp	r0, r4
 800d8b6:	d004      	beq.n	800d8c2 <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d8b8:	68c0      	ldr	r0, [r0, #12]
 800d8ba:	e7f1      	b.n	800d8a0 <udp_connect+0x24>
    return ERR_VAL;
 800d8bc:	f06f 0005 	mvn.w	r0, #5
 800d8c0:	e7f7      	b.n	800d8b2 <udp_connect+0x36>
      return ERR_OK;
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	e7f5      	b.n	800d8b2 <udp_connect+0x36>
 800d8c6:	bf00      	nop
 800d8c8:	2000bd70 	.word	0x2000bd70

0800d8cc <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800d8cc:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800d8d0:	4770      	bx	lr
	...

0800d8d4 <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d8d4:	4a0a      	ldr	r2, [pc, #40]	; (800d900 <udp_remove+0x2c>)
{
 800d8d6:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 800d8d8:	6813      	ldr	r3, [r2, #0]
 800d8da:	4283      	cmp	r3, r0
 800d8dc:	d105      	bne.n	800d8ea <udp_remove+0x16>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800d8de:	68c3      	ldr	r3, [r0, #12]
 800d8e0:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	f7fb bfda 	b.w	800989c <memp_free>
 800d8e8:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d0f9      	beq.n	800d8e2 <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d8ee:	68da      	ldr	r2, [r3, #12]
 800d8f0:	2a00      	cmp	r2, #0
 800d8f2:	d0f6      	beq.n	800d8e2 <udp_remove+0xe>
 800d8f4:	428a      	cmp	r2, r1
 800d8f6:	d1f7      	bne.n	800d8e8 <udp_remove+0x14>
        pcb2->next = pcb->next;
 800d8f8:	68ca      	ldr	r2, [r1, #12]
 800d8fa:	60da      	str	r2, [r3, #12]
        break;
 800d8fc:	e7f1      	b.n	800d8e2 <udp_remove+0xe>
 800d8fe:	bf00      	nop
 800d900:	2000bd70 	.word	0x2000bd70

0800d904 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d904:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d906:	2000      	movs	r0, #0
 800d908:	f7fb ffac 	bl	8009864 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d90c:	4604      	mov	r4, r0
 800d90e:	b128      	cbz	r0, 800d91c <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d910:	2220      	movs	r2, #32
 800d912:	2100      	movs	r1, #0
 800d914:	f003 fddc 	bl	80114d0 <memset>
    pcb->ttl = UDP_TTL;
 800d918:	23ff      	movs	r3, #255	; 0xff
 800d91a:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800d91c:	4620      	mov	r0, r4
 800d91e:	bd10      	pop	{r4, pc}

0800d920 <udp_new_ip_type>:
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
  struct udp_pcb *pcb;
  pcb = udp_new();
 800d920:	f7ff bff0 	b.w	800d904 <udp_new>

0800d924 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800d924:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d926:	b138      	cbz	r0, 800d938 <udp_netif_ip_addr_changed+0x14>
 800d928:	6803      	ldr	r3, [r0, #0]
 800d92a:	b12b      	cbz	r3, 800d938 <udp_netif_ip_addr_changed+0x14>
 800d92c:	b121      	cbz	r1, 800d938 <udp_netif_ip_addr_changed+0x14>
 800d92e:	680b      	ldr	r3, [r1, #0]
 800d930:	b113      	cbz	r3, 800d938 <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d932:	4b06      	ldr	r3, [pc, #24]	; (800d94c <udp_netif_ip_addr_changed+0x28>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	b903      	cbnz	r3, 800d93a <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800d938:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d93a:	681c      	ldr	r4, [r3, #0]
 800d93c:	6802      	ldr	r2, [r0, #0]
 800d93e:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d940:	bf04      	itt	eq
 800d942:	680a      	ldreq	r2, [r1, #0]
 800d944:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	e7f5      	b.n	800d936 <udp_netif_ip_addr_changed+0x12>
 800d94a:	bf00      	nop
 800d94c:	2000bd70 	.word	0x2000bd70

0800d950 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 800d950:	7a43      	ldrb	r3, [r0, #9]
 800d952:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 800d954:	bf1f      	itttt	ne
 800d956:	2300      	movne	r3, #0
    dhcp->state = new_state;
 800d958:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 800d95a:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 800d95c:	82c3      	strhne	r3, [r0, #22]
  }
}
 800d95e:	4770      	bx	lr

0800d960 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800d960:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d962:	8a83      	ldrh	r3, [r0, #20]
{
 800d964:	4604      	mov	r4, r0
 800d966:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800d968:	3302      	adds	r3, #2
 800d96a:	2b44      	cmp	r3, #68	; 0x44
 800d96c:	d906      	bls.n	800d97c <dhcp_option_short+0x1c>
 800d96e:	4b0a      	ldr	r3, [pc, #40]	; (800d998 <dhcp_option_short+0x38>)
 800d970:	f240 5282 	movw	r2, #1410	; 0x582
 800d974:	4909      	ldr	r1, [pc, #36]	; (800d99c <dhcp_option_short+0x3c>)
 800d976:	480a      	ldr	r0, [pc, #40]	; (800d9a0 <dhcp_option_short+0x40>)
 800d978:	f003 fe5c 	bl	8011634 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d97c:	8aa3      	ldrh	r3, [r4, #20]
 800d97e:	0a28      	lsrs	r0, r5, #8
 800d980:	6922      	ldr	r2, [r4, #16]
 800d982:	18d1      	adds	r1, r2, r3
 800d984:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800d988:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800d98a:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800d98c:	82a1      	strh	r1, [r4, #20]
 800d98e:	fa12 f383 	uxtah	r3, r2, r3
 800d992:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 800d996:	bd38      	pop	{r3, r4, r5, pc}
 800d998:	0801491d 	.word	0x0801491d
 800d99c:	08014952 	.word	0x08014952
 800d9a0:	08012feb 	.word	0x08012feb

0800d9a4 <dhcp_option>:
{
 800d9a4:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d9a6:	8a83      	ldrh	r3, [r0, #20]
{
 800d9a8:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d9aa:	3202      	adds	r2, #2
{
 800d9ac:	4604      	mov	r4, r0
 800d9ae:	460e      	mov	r6, r1
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800d9b0:	4413      	add	r3, r2
 800d9b2:	2b44      	cmp	r3, #68	; 0x44
 800d9b4:	d906      	bls.n	800d9c4 <dhcp_option+0x20>
 800d9b6:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <dhcp_option+0x3c>)
 800d9b8:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800d9bc:	4909      	ldr	r1, [pc, #36]	; (800d9e4 <dhcp_option+0x40>)
 800d9be:	480a      	ldr	r0, [pc, #40]	; (800d9e8 <dhcp_option+0x44>)
 800d9c0:	f003 fe38 	bl	8011634 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800d9c4:	8aa3      	ldrh	r3, [r4, #20]
 800d9c6:	6922      	ldr	r2, [r4, #16]
 800d9c8:	18d1      	adds	r1, r2, r3
 800d9ca:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800d9ce:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800d9d0:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800d9d2:	82a1      	strh	r1, [r4, #20]
 800d9d4:	fa12 f383 	uxtah	r3, r2, r3
 800d9d8:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 800d9dc:	bd70      	pop	{r4, r5, r6, pc}
 800d9de:	bf00      	nop
 800d9e0:	0801491d 	.word	0x0801491d
 800d9e4:	08014993 	.word	0x08014993
 800d9e8:	08012feb 	.word	0x08012feb

0800d9ec <dhcp_option_byte>:
{
 800d9ec:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800d9ee:	8a83      	ldrh	r3, [r0, #20]
{
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800d9f4:	2b43      	cmp	r3, #67	; 0x43
 800d9f6:	d906      	bls.n	800da06 <dhcp_option_byte+0x1a>
 800d9f8:	4b07      	ldr	r3, [pc, #28]	; (800da18 <dhcp_option_byte+0x2c>)
 800d9fa:	f240 527b 	movw	r2, #1403	; 0x57b
 800d9fe:	4907      	ldr	r1, [pc, #28]	; (800da1c <dhcp_option_byte+0x30>)
 800da00:	4807      	ldr	r0, [pc, #28]	; (800da20 <dhcp_option_byte+0x34>)
 800da02:	f003 fe17 	bl	8011634 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800da06:	8aa2      	ldrh	r2, [r4, #20]
 800da08:	6923      	ldr	r3, [r4, #16]
 800da0a:	1c51      	adds	r1, r2, #1
 800da0c:	4413      	add	r3, r2
 800da0e:	82a1      	strh	r1, [r4, #20]
 800da10:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
}
 800da14:	bd38      	pop	{r3, r4, r5, pc}
 800da16:	bf00      	nop
 800da18:	0801491d 	.word	0x0801491d
 800da1c:	080149db 	.word	0x080149db
 800da20:	08012feb 	.word	0x08012feb

0800da24 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800da24:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800da26:	8a83      	ldrh	r3, [r0, #20]
{
 800da28:	4605      	mov	r5, r0
 800da2a:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800da2c:	3304      	adds	r3, #4
 800da2e:	2b44      	cmp	r3, #68	; 0x44
 800da30:	d906      	bls.n	800da40 <dhcp_option_long+0x1c>
 800da32:	4b10      	ldr	r3, [pc, #64]	; (800da74 <dhcp_option_long+0x50>)
 800da34:	f240 528a 	movw	r2, #1418	; 0x58a
 800da38:	490f      	ldr	r1, [pc, #60]	; (800da78 <dhcp_option_long+0x54>)
 800da3a:	4810      	ldr	r0, [pc, #64]	; (800da7c <dhcp_option_long+0x58>)
 800da3c:	f003 fdfa 	bl	8011634 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800da40:	8aab      	ldrh	r3, [r5, #20]
 800da42:	0e20      	lsrs	r0, r4, #24
 800da44:	692a      	ldr	r2, [r5, #16]
 800da46:	18d1      	adds	r1, r2, r3
 800da48:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 800da4c:	1c59      	adds	r1, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800da4e:	0c20      	lsrs	r0, r4, #16
 800da50:	fa12 f181 	uxtah	r1, r2, r1
 800da54:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 800da58:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800da5a:	0a20      	lsrs	r0, r4, #8
 800da5c:	fa12 f181 	uxtah	r1, r2, r1
 800da60:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800da64:	1d19      	adds	r1, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800da66:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800da68:	82a9      	strh	r1, [r5, #20]
 800da6a:	fa12 f383 	uxtah	r3, r2, r3
 800da6e:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
}
 800da72:	bd38      	pop	{r3, r4, r5, pc}
 800da74:	0801491d 	.word	0x0801491d
 800da78:	08014a16 	.word	0x08014a16
 800da7c:	08012feb 	.word	0x08012feb

0800da80 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800da80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da84:	460d      	mov	r5, r1
 800da86:	4617      	mov	r7, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800da88:	4606      	mov	r6, r0
 800da8a:	b950      	cbnz	r0, 800daa2 <dhcp_create_msg+0x22>
 800da8c:	4b63      	ldr	r3, [pc, #396]	; (800dc1c <dhcp_create_msg+0x19c>)
 800da8e:	f240 721d 	movw	r2, #1821	; 0x71d
 800da92:	4963      	ldr	r1, [pc, #396]	; (800dc20 <dhcp_create_msg+0x1a0>)
 800da94:	4863      	ldr	r0, [pc, #396]	; (800dc24 <dhcp_create_msg+0x1a4>)
 800da96:	f003 fdcd 	bl	8011634 <iprintf>
 800da9a:	f06f 000f 	mvn.w	r0, #15
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  dhcp_option_byte(dhcp, message_type);
  return ERR_OK;
}
 800da9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800daa2:	b949      	cbnz	r1, 800dab8 <dhcp_create_msg+0x38>
 800daa4:	4b5d      	ldr	r3, [pc, #372]	; (800dc1c <dhcp_create_msg+0x19c>)
 800daa6:	f240 721e 	movw	r2, #1822	; 0x71e
 800daaa:	495f      	ldr	r1, [pc, #380]	; (800dc28 <dhcp_create_msg+0x1a8>)
 800daac:	485d      	ldr	r0, [pc, #372]	; (800dc24 <dhcp_create_msg+0x1a4>)
 800daae:	f003 fdc1 	bl	8011634 <iprintf>
 800dab2:	f06f 0005 	mvn.w	r0, #5
 800dab6:	e7f2      	b.n	800da9e <dhcp_create_msg+0x1e>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800dab8:	68cb      	ldr	r3, [r1, #12]
 800daba:	b133      	cbz	r3, 800daca <dhcp_create_msg+0x4a>
 800dabc:	4b57      	ldr	r3, [pc, #348]	; (800dc1c <dhcp_create_msg+0x19c>)
 800dabe:	f240 721f 	movw	r2, #1823	; 0x71f
 800dac2:	495a      	ldr	r1, [pc, #360]	; (800dc2c <dhcp_create_msg+0x1ac>)
 800dac4:	4857      	ldr	r0, [pc, #348]	; (800dc24 <dhcp_create_msg+0x1a4>)
 800dac6:	f003 fdb5 	bl	8011634 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800daca:	692b      	ldr	r3, [r5, #16]
 800dacc:	b133      	cbz	r3, 800dadc <dhcp_create_msg+0x5c>
 800dace:	4b53      	ldr	r3, [pc, #332]	; (800dc1c <dhcp_create_msg+0x19c>)
 800dad0:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800dad4:	4956      	ldr	r1, [pc, #344]	; (800dc30 <dhcp_create_msg+0x1b0>)
 800dad6:	4853      	ldr	r0, [pc, #332]	; (800dc24 <dhcp_create_msg+0x1a4>)
 800dad8:	f003 fdac 	bl	8011634 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800dadc:	2200      	movs	r2, #0
 800dade:	f44f 719a 	mov.w	r1, #308	; 0x134
 800dae2:	4610      	mov	r0, r2
 800dae4:	f7fc f8c8 	bl	8009c78 <pbuf_alloc>
 800dae8:	60e8      	str	r0, [r5, #12]
  if (dhcp->p_out == NULL) {
 800daea:	2800      	cmp	r0, #0
 800daec:	f000 8092 	beq.w	800dc14 <dhcp_create_msg+0x194>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800daf0:	8943      	ldrh	r3, [r0, #10]
 800daf2:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800daf6:	d206      	bcs.n	800db06 <dhcp_create_msg+0x86>
 800daf8:	4b48      	ldr	r3, [pc, #288]	; (800dc1c <dhcp_create_msg+0x19c>)
 800dafa:	f240 7227 	movw	r2, #1831	; 0x727
 800dafe:	494d      	ldr	r1, [pc, #308]	; (800dc34 <dhcp_create_msg+0x1b4>)
 800db00:	4848      	ldr	r0, [pc, #288]	; (800dc24 <dhcp_create_msg+0x1a4>)
 800db02:	f003 fd97 	bl	8011634 <iprintf>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800db06:	2f03      	cmp	r7, #3
 800db08:	d102      	bne.n	800db10 <dhcp_create_msg+0x90>
 800db0a:	7a6b      	ldrb	r3, [r5, #9]
 800db0c:	2b03      	cmp	r3, #3
 800db0e:	d107      	bne.n	800db20 <dhcp_create_msg+0xa0>
    if (dhcp->tries == 0) {
 800db10:	7aab      	ldrb	r3, [r5, #10]
 800db12:	4c49      	ldr	r4, [pc, #292]	; (800dc38 <dhcp_create_msg+0x1b8>)
 800db14:	b913      	cbnz	r3, 800db1c <dhcp_create_msg+0x9c>
      xid = LWIP_RAND();
 800db16:	f003 fe31 	bl	801177c <rand>
 800db1a:	6020      	str	r0, [r4, #0]
    dhcp->xid = xid;
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	602b      	str	r3, [r5, #0]
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800db20:	68eb      	ldr	r3, [r5, #12]
  dhcp->msg_out->hops = 0;
 800db22:	2400      	movs	r4, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800db24:	f8d3 8004 	ldr.w	r8, [r3, #4]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800db28:	2301      	movs	r3, #1
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800db2a:	f8c5 8010 	str.w	r8, [r5, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800db2e:	f888 3000 	strb.w	r3, [r8]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800db32:	f888 3001 	strb.w	r3, [r8, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800db36:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
  dhcp->msg_out->hops = 0;
 800db3a:	f888 4003 	strb.w	r4, [r8, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800db3e:	f888 3002 	strb.w	r3, [r8, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800db42:	6828      	ldr	r0, [r5, #0]
 800db44:	f7fb fbfb 	bl	800933e <lwip_htonl>
  dhcp->msg_out->secs = 0;
 800db48:	692b      	ldr	r3, [r5, #16]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800db4a:	2f04      	cmp	r7, #4
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800db4c:	f8c8 0004 	str.w	r0, [r8, #4]
  dhcp->msg_out->secs = 0;
 800db50:	721c      	strb	r4, [r3, #8]
 800db52:	725c      	strb	r4, [r3, #9]
  dhcp->msg_out->flags = 0;
 800db54:	729c      	strb	r4, [r3, #10]
 800db56:	72dc      	strb	r4, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800db58:	731c      	strb	r4, [r3, #12]
 800db5a:	735c      	strb	r4, [r3, #13]
 800db5c:	739c      	strb	r4, [r3, #14]
 800db5e:	73dc      	strb	r4, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800db60:	d008      	beq.n	800db74 <dhcp_create_msg+0xf4>
 800db62:	1ffa      	subs	r2, r7, #7
 800db64:	2a01      	cmp	r2, #1
 800db66:	d905      	bls.n	800db74 <dhcp_create_msg+0xf4>
 800db68:	2f03      	cmp	r7, #3
 800db6a:	d105      	bne.n	800db78 <dhcp_create_msg+0xf8>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800db6c:	7a6a      	ldrb	r2, [r5, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800db6e:	3a04      	subs	r2, #4
 800db70:	2a01      	cmp	r2, #1
 800db72:	d801      	bhi.n	800db78 <dhcp_create_msg+0xf8>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800db74:	6872      	ldr	r2, [r6, #4]
 800db76:	60da      	str	r2, [r3, #12]
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800db78:	2400      	movs	r4, #0
 800db7a:	f103 011c 	add.w	r1, r3, #28
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800db7e:	3629      	adds	r6, #41	; 0x29
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800db80:	741c      	strb	r4, [r3, #16]
 800db82:	745c      	strb	r4, [r3, #17]
 800db84:	749c      	strb	r4, [r3, #18]
 800db86:	74dc      	strb	r4, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800db88:	751c      	strb	r4, [r3, #20]
 800db8a:	755c      	strb	r4, [r3, #21]
 800db8c:	759c      	strb	r4, [r3, #22]
 800db8e:	75dc      	strb	r4, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800db90:	761c      	strb	r4, [r3, #24]
 800db92:	765c      	strb	r4, [r3, #25]
 800db94:	769c      	strb	r4, [r3, #26]
 800db96:	76dc      	strb	r4, [r3, #27]
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800db98:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800db9c:	b2a2      	uxth	r2, r4
 800db9e:	4290      	cmp	r0, r2
 800dba0:	d936      	bls.n	800dc10 <dhcp_create_msg+0x190>
 800dba2:	2a05      	cmp	r2, #5
 800dba4:	d834      	bhi.n	800dc10 <dhcp_create_msg+0x190>
 800dba6:	5d32      	ldrb	r2, [r6, r4]
 800dba8:	3401      	adds	r4, #1
 800dbaa:	f801 2b01 	strb.w	r2, [r1], #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800dbae:	2c10      	cmp	r4, #16
 800dbb0:	d1f4      	bne.n	800db9c <dhcp_create_msg+0x11c>
 800dbb2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800dbb6:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    dhcp->msg_out->sname[i] = 0;
 800dbba:	2000      	movs	r0, #0
 800dbbc:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800dbc0:	428a      	cmp	r2, r1
 800dbc2:	d1fb      	bne.n	800dbbc <dhcp_create_msg+0x13c>
 800dbc4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
    dhcp->msg_out->file[i] = 0;
 800dbc8:	2100      	movs	r1, #0
 800dbca:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800dbce:	4290      	cmp	r0, r2
 800dbd0:	d1fb      	bne.n	800dbca <dhcp_create_msg+0x14a>
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800dbd2:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800dbd6:	2263      	movs	r2, #99	; 0x63
 800dbd8:	33f0      	adds	r3, #240	; 0xf0
 800dbda:	f803 0c03 	strb.w	r0, [r3, #-3]
 800dbde:	2053      	movs	r0, #83	; 0x53
 800dbe0:	f803 2c04 	strb.w	r2, [r3, #-4]
 800dbe4:	f803 2c01 	strb.w	r2, [r3, #-1]
  dhcp->options_out_len = 0;
 800dbe8:	2200      	movs	r2, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800dbea:	f803 0c02 	strb.w	r0, [r3, #-2]
  dhcp->options_out_len = 0;
 800dbee:	82a9      	strh	r1, [r5, #20]
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800dbf0:	f803 2b01 	strb.w	r2, [r3], #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800dbf4:	3201      	adds	r2, #1
 800dbf6:	2a44      	cmp	r2, #68	; 0x44
 800dbf8:	d1fa      	bne.n	800dbf0 <dhcp_create_msg+0x170>
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800dbfa:	2201      	movs	r2, #1
 800dbfc:	2135      	movs	r1, #53	; 0x35
 800dbfe:	4628      	mov	r0, r5
 800dc00:	f7ff fed0 	bl	800d9a4 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800dc04:	4628      	mov	r0, r5
 800dc06:	4639      	mov	r1, r7
 800dc08:	f7ff fef0 	bl	800d9ec <dhcp_option_byte>
  return ERR_OK;
 800dc0c:	2000      	movs	r0, #0
 800dc0e:	e746      	b.n	800da9e <dhcp_create_msg+0x1e>
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800dc10:	2200      	movs	r2, #0
 800dc12:	e7c9      	b.n	800dba8 <dhcp_create_msg+0x128>
    return ERR_MEM;
 800dc14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc18:	e741      	b.n	800da9e <dhcp_create_msg+0x1e>
 800dc1a:	bf00      	nop
 800dc1c:	0801491d 	.word	0x0801491d
 800dc20:	08014a56 	.word	0x08014a56
 800dc24:	08012feb 	.word	0x08012feb
 800dc28:	08014a75 	.word	0x08014a75
 800dc2c:	08014a93 	.word	0x08014a93
 800dc30:	08014ab8 	.word	0x08014ab8
 800dc34:	08014adf 	.word	0x08014adf
 800dc38:	200082dc 	.word	0x200082dc

0800dc3c <dhcp_check>:
{
 800dc3c:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dc3e:	6a04      	ldr	r4, [r0, #32]
{
 800dc40:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800dc42:	2108      	movs	r1, #8
 800dc44:	4620      	mov	r0, r4
 800dc46:	f7ff fe83 	bl	800d950 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800dc50:	4628      	mov	r0, r5
 800dc52:	f001 f99f 	bl	800ef94 <etharp_query>
  if (dhcp->tries < 255) {
 800dc56:	7aa3      	ldrb	r3, [r4, #10]
 800dc58:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800dc5a:	bf1c      	itt	ne
 800dc5c:	3301      	addne	r3, #1
 800dc5e:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800dc60:	2301      	movs	r3, #1
 800dc62:	82e3      	strh	r3, [r4, #22]
}
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
	...

0800dc68 <dhcp_bind>:
{
 800dc68:	b523      	push	{r0, r1, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800dc6a:	4605      	mov	r5, r0
 800dc6c:	b940      	cbnz	r0, 800dc80 <dhcp_bind+0x18>
 800dc6e:	4b3e      	ldr	r3, [pc, #248]	; (800dd68 <dhcp_bind+0x100>)
 800dc70:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800dc74:	493d      	ldr	r1, [pc, #244]	; (800dd6c <dhcp_bind+0x104>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800dc76:	483e      	ldr	r0, [pc, #248]	; (800dd70 <dhcp_bind+0x108>)
 800dc78:	f003 fcdc 	bl	8011634 <iprintf>
}
 800dc7c:	b002      	add	sp, #8
 800dc7e:	bd20      	pop	{r5, pc}
  dhcp = netif_dhcp_data(netif);
 800dc80:	6a00      	ldr	r0, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800dc82:	b920      	cbnz	r0, 800dc8e <dhcp_bind+0x26>
 800dc84:	4b38      	ldr	r3, [pc, #224]	; (800dd68 <dhcp_bind+0x100>)
 800dc86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dc8a:	493a      	ldr	r1, [pc, #232]	; (800dd74 <dhcp_bind+0x10c>)
 800dc8c:	e7f3      	b.n	800dc76 <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	8403      	strh	r3, [r0, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800dc92:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dc94:	1c5a      	adds	r2, r3, #1
 800dc96:	d00c      	beq.n	800dcb2 <dhcp_bind+0x4a>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dc98:	331e      	adds	r3, #30
     if (timeout > 0xffff) {
 800dc9a:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dc9e:	bf36      	itet	cc
 800dca0:	223c      	movcc	r2, #60	; 0x3c
       timeout = 0xffff;
 800dca2:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dca6:	fbb3 f3f2 	udivcc	r3, r3, r2
     dhcp->t0_timeout = (u16_t)timeout;
 800dcaa:	b29a      	uxth	r2, r3
     if (dhcp->t0_timeout == 0) {
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d042      	beq.n	800dd36 <dhcp_bind+0xce>
     dhcp->t0_timeout = (u16_t)timeout;
 800dcb0:	8442      	strh	r2, [r0, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800dcb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800dcb4:	1c59      	adds	r1, r3, #1
 800dcb6:	d00e      	beq.n	800dcd6 <dhcp_bind+0x6e>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dcb8:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800dcba:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dcbe:	bf36      	itet	cc
 800dcc0:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 800dcc2:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dcc6:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t1_timeout = (u16_t)timeout;
 800dcca:	b29a      	uxth	r2, r3
    if (dhcp->t1_timeout == 0) {
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d035      	beq.n	800dd3c <dhcp_bind+0xd4>
    dhcp->t1_timeout = (u16_t)timeout;
 800dcd0:	8302      	strh	r2, [r0, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800dcd2:	8b03      	ldrh	r3, [r0, #24]
 800dcd4:	8383      	strh	r3, [r0, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800dcd6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800dcd8:	1c5a      	adds	r2, r3, #1
 800dcda:	d00d      	beq.n	800dcf8 <dhcp_bind+0x90>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dcdc:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 800dcde:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dce2:	bf36      	itet	cc
 800dce4:	223c      	movcc	r2, #60	; 0x3c
      timeout = 0xffff;
 800dce6:	f64f 73ff 	movwcs	r3, #65535	; 0xffff
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800dcea:	fbb3 f3f2 	udivcc	r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 800dcee:	b29a      	uxth	r2, r3
    if (dhcp->t2_timeout == 0) {
 800dcf0:	b33b      	cbz	r3, 800dd42 <dhcp_bind+0xda>
    dhcp->t2_timeout = (u16_t)timeout;
 800dcf2:	8342      	strh	r2, [r0, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800dcf4:	8b43      	ldrh	r3, [r0, #26]
 800dcf6:	83c3      	strh	r3, [r0, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800dcf8:	8b43      	ldrh	r3, [r0, #26]
 800dcfa:	8b02      	ldrh	r2, [r0, #24]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d302      	bcc.n	800dd06 <dhcp_bind+0x9e>
 800dd00:	b10b      	cbz	r3, 800dd06 <dhcp_bind+0x9e>
    dhcp->t1_timeout = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	8303      	strh	r3, [r0, #24]
  if (dhcp->subnet_mask_given) {
 800dd06:	7ac3      	ldrb	r3, [r0, #11]
 800dd08:	b1f3      	cbz	r3, 800dd48 <dhcp_bind+0xe0>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800dd0a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800dd0c:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800dd0e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800dd10:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 800dd12:	b92b      	cbnz	r3, 800dd20 <dhcp_bind+0xb8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800dd14:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800dd16:	9a00      	ldr	r2, [sp, #0]
 800dd18:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800dd1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dd1e:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800dd20:	210a      	movs	r1, #10
 800dd22:	f7ff fe15 	bl	800d950 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800dd26:	ab01      	add	r3, sp, #4
 800dd28:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800dd2c:	466a      	mov	r2, sp
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f7fb fdfe 	bl	8009930 <netif_set_addr>
 800dd34:	e7a2      	b.n	800dc7c <dhcp_bind+0x14>
       dhcp->t0_timeout = 1;
 800dd36:	2301      	movs	r3, #1
 800dd38:	8443      	strh	r3, [r0, #34]	; 0x22
 800dd3a:	e7ba      	b.n	800dcb2 <dhcp_bind+0x4a>
      dhcp->t1_timeout = 1;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	8303      	strh	r3, [r0, #24]
 800dd40:	e7c7      	b.n	800dcd2 <dhcp_bind+0x6a>
      dhcp->t2_timeout = 1;
 800dd42:	2301      	movs	r3, #1
 800dd44:	8343      	strh	r3, [r0, #26]
 800dd46:	e7d5      	b.n	800dcf4 <dhcp_bind+0x8c>
    if (first_octet <= 127) {
 800dd48:	f990 2028 	ldrsb.w	r2, [r0, #40]	; 0x28
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800dd4c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    if (first_octet <= 127) {
 800dd50:	2a00      	cmp	r2, #0
 800dd52:	db01      	blt.n	800dd58 <dhcp_bind+0xf0>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800dd54:	23ff      	movs	r3, #255	; 0xff
 800dd56:	e7d9      	b.n	800dd0c <dhcp_bind+0xa4>
    } else if (first_octet >= 192) {
 800dd58:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800dd5a:	bf8c      	ite	hi
 800dd5c:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800dd60:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800dd64:	e7d2      	b.n	800dd0c <dhcp_bind+0xa4>
 800dd66:	bf00      	nop
 800dd68:	0801491d 	.word	0x0801491d
 800dd6c:	08014b1f 	.word	0x08014b1f
 800dd70:	08012feb 	.word	0x08012feb
 800dd74:	08014b38 	.word	0x08014b38

0800dd78 <dhcp_inc_pcb_refcount>:
{
 800dd78:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800dd7a:	4d15      	ldr	r5, [pc, #84]	; (800ddd0 <dhcp_inc_pcb_refcount+0x58>)
 800dd7c:	782b      	ldrb	r3, [r5, #0]
 800dd7e:	b9f3      	cbnz	r3, 800ddbe <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800dd80:	4c14      	ldr	r4, [pc, #80]	; (800ddd4 <dhcp_inc_pcb_refcount+0x5c>)
 800dd82:	6823      	ldr	r3, [r4, #0]
 800dd84:	b12b      	cbz	r3, 800dd92 <dhcp_inc_pcb_refcount+0x1a>
 800dd86:	4b14      	ldr	r3, [pc, #80]	; (800ddd8 <dhcp_inc_pcb_refcount+0x60>)
 800dd88:	22d9      	movs	r2, #217	; 0xd9
 800dd8a:	4914      	ldr	r1, [pc, #80]	; (800dddc <dhcp_inc_pcb_refcount+0x64>)
 800dd8c:	4814      	ldr	r0, [pc, #80]	; (800dde0 <dhcp_inc_pcb_refcount+0x68>)
 800dd8e:	f003 fc51 	bl	8011634 <iprintf>
    dhcp_pcb = udp_new();
 800dd92:	f7ff fdb7 	bl	800d904 <udp_new>
 800dd96:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 800dd98:	b1b0      	cbz	r0, 800ddc8 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800dd9a:	7a02      	ldrb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800dd9c:	4911      	ldr	r1, [pc, #68]	; (800dde4 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800dd9e:	f042 0220 	orr.w	r2, r2, #32
 800dda2:	7202      	strb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800dda4:	2244      	movs	r2, #68	; 0x44
 800dda6:	f7ff fc93 	bl	800d6d0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800ddaa:	2243      	movs	r2, #67	; 0x43
 800ddac:	490d      	ldr	r1, [pc, #52]	; (800dde4 <dhcp_inc_pcb_refcount+0x6c>)
 800ddae:	6820      	ldr	r0, [r4, #0]
 800ddb0:	f7ff fd64 	bl	800d87c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	490c      	ldr	r1, [pc, #48]	; (800dde8 <dhcp_inc_pcb_refcount+0x70>)
 800ddb8:	6820      	ldr	r0, [r4, #0]
 800ddba:	f7ff fd87 	bl	800d8cc <udp_recv>
  dhcp_pcb_refcount++;
 800ddbe:	782b      	ldrb	r3, [r5, #0]
  return ERR_OK;
 800ddc0:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	702b      	strb	r3, [r5, #0]
}
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800ddc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddcc:	e7fb      	b.n	800ddc6 <dhcp_inc_pcb_refcount+0x4e>
 800ddce:	bf00      	nop
 800ddd0:	200082d8 	.word	0x200082d8
 800ddd4:	200082d4 	.word	0x200082d4
 800ddd8:	0801491d 	.word	0x0801491d
 800dddc:	08014b50 	.word	0x08014b50
 800dde0:	08012feb 	.word	0x08012feb
 800dde4:	08015038 	.word	0x08015038
 800dde8:	0800e1f1 	.word	0x0800e1f1

0800ddec <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800ddec:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800ddee:	4604      	mov	r4, r0
 800ddf0:	b940      	cbnz	r0, 800de04 <dhcp_option_trailer+0x18>
 800ddf2:	4b17      	ldr	r3, [pc, #92]	; (800de50 <dhcp_option_trailer+0x64>)
 800ddf4:	f240 7282 	movw	r2, #1922	; 0x782
 800ddf8:	4916      	ldr	r1, [pc, #88]	; (800de54 <dhcp_option_trailer+0x68>)
 800ddfa:	4817      	ldr	r0, [pc, #92]	; (800de58 <dhcp_option_trailer+0x6c>)
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 800ddfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800de00:	f003 bc18 	b.w	8011634 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800de04:	6903      	ldr	r3, [r0, #16]
 800de06:	b933      	cbnz	r3, 800de16 <dhcp_option_trailer+0x2a>
 800de08:	4b11      	ldr	r3, [pc, #68]	; (800de50 <dhcp_option_trailer+0x64>)
 800de0a:	f240 7283 	movw	r2, #1923	; 0x783
 800de0e:	4913      	ldr	r1, [pc, #76]	; (800de5c <dhcp_option_trailer+0x70>)
 800de10:	4811      	ldr	r0, [pc, #68]	; (800de58 <dhcp_option_trailer+0x6c>)
 800de12:	f003 fc0f 	bl	8011634 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800de16:	8aa3      	ldrh	r3, [r4, #20]
 800de18:	2b43      	cmp	r3, #67	; 0x43
 800de1a:	d906      	bls.n	800de2a <dhcp_option_trailer+0x3e>
 800de1c:	4b0c      	ldr	r3, [pc, #48]	; (800de50 <dhcp_option_trailer+0x64>)
 800de1e:	f240 7284 	movw	r2, #1924	; 0x784
 800de22:	490f      	ldr	r1, [pc, #60]	; (800de60 <dhcp_option_trailer+0x74>)
 800de24:	480c      	ldr	r0, [pc, #48]	; (800de58 <dhcp_option_trailer+0x6c>)
 800de26:	f003 fc05 	bl	8011634 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800de2a:	8aa3      	ldrh	r3, [r4, #20]
 800de2c:	6922      	ldr	r2, [r4, #16]
 800de2e:	1c59      	adds	r1, r3, #1
 800de30:	4413      	add	r3, r2
 800de32:	82a1      	strh	r1, [r4, #20]
 800de34:	21ff      	movs	r1, #255	; 0xff
 800de36:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800de3a:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800de3c:	8aa3      	ldrh	r3, [r4, #20]
 800de3e:	2b43      	cmp	r3, #67	; 0x43
 800de40:	d900      	bls.n	800de44 <dhcp_option_trailer+0x58>
}
 800de42:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800de44:	1c58      	adds	r0, r3, #1
 800de46:	4413      	add	r3, r2
 800de48:	82a0      	strh	r0, [r4, #20]
 800de4a:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 800de4e:	e7f5      	b.n	800de3c <dhcp_option_trailer+0x50>
 800de50:	0801491d 	.word	0x0801491d
 800de54:	08014b75 	.word	0x08014b75
 800de58:	08012feb 	.word	0x08012feb
 800de5c:	08014b97 	.word	0x08014b97
 800de60:	08014bc3 	.word	0x08014bc3

0800de64 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif)
 800de64:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800de66:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800de68:	4d17      	ldr	r5, [pc, #92]	; (800dec8 <dhcp_handle_ack.isra.0+0x64>)
dhcp_handle_ack(struct netif *netif)
 800de6a:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800de6c:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800de70:	78eb      	ldrb	r3, [r5, #3]
 800de72:	b113      	cbz	r3, 800de7a <dhcp_handle_ack.isra.0+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800de74:	4b15      	ldr	r3, [pc, #84]	; (800decc <dhcp_handle_ack.isra.0+0x68>)
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800de7a:	792b      	ldrb	r3, [r5, #4]
 800de7c:	b1db      	cbz	r3, 800deb6 <dhcp_handle_ack.isra.0+0x52>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800de7e:	4b13      	ldr	r3, [pc, #76]	; (800decc <dhcp_handle_ack.isra.0+0x68>)
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800de84:	796b      	ldrb	r3, [r5, #5]
 800de86:	b1cb      	cbz	r3, 800debc <dhcp_handle_ack.isra.0+0x58>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800de88:	4b10      	ldr	r3, [pc, #64]	; (800decc <dhcp_handle_ack.isra.0+0x68>)
 800de8a:	695b      	ldr	r3, [r3, #20]
 800de8c:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800de8e:	6863      	ldr	r3, [r4, #4]
 800de90:	691b      	ldr	r3, [r3, #16]
 800de92:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800de94:	79ab      	ldrb	r3, [r5, #6]
 800de96:	b12b      	cbz	r3, 800dea4 <dhcp_handle_ack.isra.0+0x40>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800de98:	4b0c      	ldr	r3, [pc, #48]	; (800decc <dhcp_handle_ack.isra.0+0x68>)
 800de9a:	6998      	ldr	r0, [r3, #24]
 800de9c:	f7fb fa4f 	bl	800933e <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 800dea0:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800dea2:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 0;
 800dea4:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800dea6:	79eb      	ldrb	r3, [r5, #7]
 800dea8:	b123      	cbz	r3, 800deb4 <dhcp_handle_ack.isra.0+0x50>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800deaa:	4b08      	ldr	r3, [pc, #32]	; (800decc <dhcp_handle_ack.isra.0+0x68>)
 800deac:	69d8      	ldr	r0, [r3, #28]
 800deae:	f7fb fa46 	bl	800933e <lwip_htonl>
 800deb2:	6320      	str	r0, [r4, #48]	; 0x30
}
 800deb4:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800deb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800deb8:	085b      	lsrs	r3, r3, #1
 800deba:	e7e2      	b.n	800de82 <dhcp_handle_ack.isra.0+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800debc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800debe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800dec2:	08db      	lsrs	r3, r3, #3
 800dec4:	e7e2      	b.n	800de8c <dhcp_handle_ack.isra.0+0x28>
 800dec6:	bf00      	nop
 800dec8:	2000bd74 	.word	0x2000bd74
 800decc:	2000bd7c 	.word	0x2000bd7c

0800ded0 <dhcp_delete_msg>:
{
 800ded0:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800ded2:	4604      	mov	r4, r0
 800ded4:	b940      	cbnz	r0, 800dee8 <dhcp_delete_msg+0x18>
 800ded6:	4b11      	ldr	r3, [pc, #68]	; (800df1c <dhcp_delete_msg+0x4c>)
 800ded8:	f240 726d 	movw	r2, #1901	; 0x76d
 800dedc:	4910      	ldr	r1, [pc, #64]	; (800df20 <dhcp_delete_msg+0x50>)
 800dede:	4811      	ldr	r0, [pc, #68]	; (800df24 <dhcp_delete_msg+0x54>)
}
 800dee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800dee4:	f003 bba6 	b.w	8011634 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800dee8:	68c3      	ldr	r3, [r0, #12]
 800deea:	b933      	cbnz	r3, 800defa <dhcp_delete_msg+0x2a>
 800deec:	4b0b      	ldr	r3, [pc, #44]	; (800df1c <dhcp_delete_msg+0x4c>)
 800deee:	f240 726e 	movw	r2, #1902	; 0x76e
 800def2:	490d      	ldr	r1, [pc, #52]	; (800df28 <dhcp_delete_msg+0x58>)
 800def4:	480b      	ldr	r0, [pc, #44]	; (800df24 <dhcp_delete_msg+0x54>)
 800def6:	f003 fb9d 	bl	8011634 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800defa:	6923      	ldr	r3, [r4, #16]
 800defc:	b933      	cbnz	r3, 800df0c <dhcp_delete_msg+0x3c>
 800defe:	4b07      	ldr	r3, [pc, #28]	; (800df1c <dhcp_delete_msg+0x4c>)
 800df00:	f240 726f 	movw	r2, #1903	; 0x76f
 800df04:	4909      	ldr	r1, [pc, #36]	; (800df2c <dhcp_delete_msg+0x5c>)
 800df06:	4807      	ldr	r0, [pc, #28]	; (800df24 <dhcp_delete_msg+0x54>)
 800df08:	f003 fb94 	bl	8011634 <iprintf>
  if (dhcp->p_out != NULL) {
 800df0c:	68e0      	ldr	r0, [r4, #12]
 800df0e:	b108      	cbz	r0, 800df14 <dhcp_delete_msg+0x44>
    pbuf_free(dhcp->p_out);
 800df10:	f7fb fe48 	bl	8009ba4 <pbuf_free>
  dhcp->p_out = NULL;
 800df14:	2300      	movs	r3, #0
  dhcp->msg_out = NULL;
 800df16:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 800df1a:	bd10      	pop	{r4, pc}
 800df1c:	0801491d 	.word	0x0801491d
 800df20:	08014c02 	.word	0x08014c02
 800df24:	08012feb 	.word	0x08012feb
 800df28:	08014c20 	.word	0x08014c20
 800df2c:	08014c45 	.word	0x08014c45

0800df30 <dhcp_discover>:
{
 800df30:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800df32:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800df34:	6a04      	ldr	r4, [r0, #32]
{
 800df36:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800df38:	2106      	movs	r1, #6
 800df3a:	4620      	mov	r0, r4
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800df3c:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800df3e:	f7ff fd07 	bl	800d950 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800df42:	2201      	movs	r2, #1
 800df44:	4621      	mov	r1, r4
 800df46:	4628      	mov	r0, r5
 800df48:	f7ff fd9a 	bl	800da80 <dhcp_create_msg>
  if (result == ERR_OK) {
 800df4c:	4606      	mov	r6, r0
 800df4e:	bb78      	cbnz	r0, 800dfb0 <dhcp_discover+0x80>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800df50:	2202      	movs	r2, #2
 800df52:	2139      	movs	r1, #57	; 0x39
 800df54:	4620      	mov	r0, r4
 800df56:	f7ff fd25 	bl	800d9a4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800df5a:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 800df5c:	4620      	mov	r0, r4
 800df5e:	f7ff fcff 	bl	800d960 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800df62:	2203      	movs	r2, #3
 800df64:	2137      	movs	r1, #55	; 0x37
 800df66:	4620      	mov	r0, r4
 800df68:	f7ff fd1c 	bl	800d9a4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800df6c:	2101      	movs	r1, #1
 800df6e:	4620      	mov	r0, r4
 800df70:	f7ff fd3c 	bl	800d9ec <dhcp_option_byte>
 800df74:	2103      	movs	r1, #3
 800df76:	4620      	mov	r0, r4
 800df78:	f7ff fd38 	bl	800d9ec <dhcp_option_byte>
 800df7c:	211c      	movs	r1, #28
 800df7e:	4620      	mov	r0, r4
 800df80:	f7ff fd34 	bl	800d9ec <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800df84:	4620      	mov	r0, r4
 800df86:	f7ff ff31 	bl	800ddec <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800df8a:	8aa1      	ldrh	r1, [r4, #20]
 800df8c:	68e0      	ldr	r0, [r4, #12]
 800df8e:	31f0      	adds	r1, #240	; 0xf0
 800df90:	b289      	uxth	r1, r1
 800df92:	f7fb ff41 	bl	8009e18 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800df96:	4b13      	ldr	r3, [pc, #76]	; (800dfe4 <dhcp_discover+0xb4>)
 800df98:	4813      	ldr	r0, [pc, #76]	; (800dfe8 <dhcp_discover+0xb8>)
 800df9a:	4a14      	ldr	r2, [pc, #80]	; (800dfec <dhcp_discover+0xbc>)
 800df9c:	e9cd 5300 	strd	r5, r3, [sp]
 800dfa0:	2343      	movs	r3, #67	; 0x43
 800dfa2:	68e1      	ldr	r1, [r4, #12]
 800dfa4:	6800      	ldr	r0, [r0, #0]
 800dfa6:	f7ff fbe7 	bl	800d778 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f7ff ff90 	bl	800ded0 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800dfb0:	7aa3      	ldrb	r3, [r4, #10]
}
 800dfb2:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 800dfb4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800dfb6:	bf1c      	itt	ne
 800dfb8:	3301      	addne	r3, #1
 800dfba:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800dfbc:	7aa2      	ldrb	r2, [r4, #10]
 800dfbe:	2a05      	cmp	r2, #5
 800dfc0:	bf96      	itet	ls
 800dfc2:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 800dfc6:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 800dfca:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800dfcc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800dfd0:	bf98      	it	ls
 800dfd2:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800dfd4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800dfd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfdc:	82e3      	strh	r3, [r4, #22]
}
 800dfde:	b002      	add	sp, #8
 800dfe0:	bd70      	pop	{r4, r5, r6, pc}
 800dfe2:	bf00      	nop
 800dfe4:	08015038 	.word	0x08015038
 800dfe8:	200082d4 	.word	0x200082d4
 800dfec:	0801503c 	.word	0x0801503c

0800dff0 <dhcp_select>:
{
 800dff0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800dff2:	6a04      	ldr	r4, [r0, #32]
{
 800dff4:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800dff6:	2101      	movs	r1, #1
 800dff8:	4620      	mov	r0, r4
 800dffa:	f7ff fca9 	bl	800d950 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800dffe:	2203      	movs	r2, #3
 800e000:	4621      	mov	r1, r4
 800e002:	4628      	mov	r0, r5
 800e004:	f7ff fd3c 	bl	800da80 <dhcp_create_msg>
  if (result == ERR_OK) {
 800e008:	4606      	mov	r6, r0
 800e00a:	2800      	cmp	r0, #0
 800e00c:	d147      	bne.n	800e09e <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e00e:	2202      	movs	r2, #2
 800e010:	2139      	movs	r1, #57	; 0x39
 800e012:	4620      	mov	r0, r4
 800e014:	f7ff fcc6 	bl	800d9a4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800e018:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 800e01a:	4620      	mov	r0, r4
 800e01c:	f7ff fca0 	bl	800d960 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800e020:	2204      	movs	r2, #4
 800e022:	2132      	movs	r1, #50	; 0x32
 800e024:	4620      	mov	r0, r4
 800e026:	f7ff fcbd 	bl	800d9a4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e02a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e02c:	f7fb f987 	bl	800933e <lwip_htonl>
 800e030:	4601      	mov	r1, r0
 800e032:	4620      	mov	r0, r4
 800e034:	f7ff fcf6 	bl	800da24 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800e038:	2204      	movs	r2, #4
 800e03a:	2136      	movs	r1, #54	; 0x36
 800e03c:	4620      	mov	r0, r4
 800e03e:	f7ff fcb1 	bl	800d9a4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800e042:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e044:	f7fb f97b 	bl	800933e <lwip_htonl>
 800e048:	4601      	mov	r1, r0
 800e04a:	4620      	mov	r0, r4
 800e04c:	f7ff fcea 	bl	800da24 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e050:	2203      	movs	r2, #3
 800e052:	2137      	movs	r1, #55	; 0x37
 800e054:	4620      	mov	r0, r4
 800e056:	f7ff fca5 	bl	800d9a4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e05a:	2101      	movs	r1, #1
 800e05c:	4620      	mov	r0, r4
 800e05e:	f7ff fcc5 	bl	800d9ec <dhcp_option_byte>
 800e062:	2103      	movs	r1, #3
 800e064:	4620      	mov	r0, r4
 800e066:	f7ff fcc1 	bl	800d9ec <dhcp_option_byte>
 800e06a:	211c      	movs	r1, #28
 800e06c:	4620      	mov	r0, r4
 800e06e:	f7ff fcbd 	bl	800d9ec <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800e072:	4620      	mov	r0, r4
 800e074:	f7ff feba 	bl	800ddec <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e078:	8aa1      	ldrh	r1, [r4, #20]
 800e07a:	68e0      	ldr	r0, [r4, #12]
 800e07c:	31f0      	adds	r1, #240	; 0xf0
 800e07e:	b289      	uxth	r1, r1
 800e080:	f7fb feca 	bl	8009e18 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800e084:	4b12      	ldr	r3, [pc, #72]	; (800e0d0 <dhcp_select+0xe0>)
 800e086:	4813      	ldr	r0, [pc, #76]	; (800e0d4 <dhcp_select+0xe4>)
 800e088:	4a13      	ldr	r2, [pc, #76]	; (800e0d8 <dhcp_select+0xe8>)
 800e08a:	e9cd 5300 	strd	r5, r3, [sp]
 800e08e:	2343      	movs	r3, #67	; 0x43
 800e090:	68e1      	ldr	r1, [r4, #12]
 800e092:	6800      	ldr	r0, [r0, #0]
 800e094:	f7ff fb70 	bl	800d778 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800e098:	4620      	mov	r0, r4
 800e09a:	f7ff ff19 	bl	800ded0 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800e09e:	7aa3      	ldrb	r3, [r4, #10]
}
 800e0a0:	4630      	mov	r0, r6
  if (dhcp->tries < 255) {
 800e0a2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800e0a4:	bf1c      	itt	ne
 800e0a6:	3301      	addne	r3, #1
 800e0a8:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800e0aa:	7aa2      	ldrb	r2, [r4, #10]
 800e0ac:	2a05      	cmp	r2, #5
 800e0ae:	bf96      	itet	ls
 800e0b0:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 800e0b4:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 800e0b8:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e0ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800e0be:	bf98      	it	ls
 800e0c0:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e0c2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e0c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0ca:	82e3      	strh	r3, [r4, #22]
}
 800e0cc:	b002      	add	sp, #8
 800e0ce:	bd70      	pop	{r4, r5, r6, pc}
 800e0d0:	08015038 	.word	0x08015038
 800e0d4:	200082d4 	.word	0x200082d4
 800e0d8:	0801503c 	.word	0x0801503c

0800e0dc <dhcp_reboot>:
{
 800e0dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e0de:	6a04      	ldr	r4, [r0, #32]
{
 800e0e0:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800e0e2:	2103      	movs	r1, #3
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f7ff fc33 	bl	800d950 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800e0ea:	2203      	movs	r2, #3
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	4630      	mov	r0, r6
 800e0f0:	f7ff fcc6 	bl	800da80 <dhcp_create_msg>
  if (result == ERR_OK) {
 800e0f4:	4605      	mov	r5, r0
 800e0f6:	2800      	cmp	r0, #0
 800e0f8:	d13a      	bne.n	800e170 <dhcp_reboot+0x94>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e0fa:	2202      	movs	r2, #2
 800e0fc:	2139      	movs	r1, #57	; 0x39
 800e0fe:	4620      	mov	r0, r4
 800e100:	f7ff fc50 	bl	800d9a4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800e104:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e108:	4620      	mov	r0, r4
 800e10a:	f7ff fc29 	bl	800d960 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800e10e:	2204      	movs	r2, #4
 800e110:	2132      	movs	r1, #50	; 0x32
 800e112:	4620      	mov	r0, r4
 800e114:	f7ff fc46 	bl	800d9a4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e118:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e11a:	f7fb f910 	bl	800933e <lwip_htonl>
 800e11e:	4601      	mov	r1, r0
 800e120:	4620      	mov	r0, r4
 800e122:	f7ff fc7f 	bl	800da24 <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e126:	2203      	movs	r2, #3
 800e128:	2137      	movs	r1, #55	; 0x37
 800e12a:	4620      	mov	r0, r4
 800e12c:	f7ff fc3a 	bl	800d9a4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e130:	2101      	movs	r1, #1
 800e132:	4620      	mov	r0, r4
 800e134:	f7ff fc5a 	bl	800d9ec <dhcp_option_byte>
 800e138:	2103      	movs	r1, #3
 800e13a:	4620      	mov	r0, r4
 800e13c:	f7ff fc56 	bl	800d9ec <dhcp_option_byte>
 800e140:	211c      	movs	r1, #28
 800e142:	4620      	mov	r0, r4
 800e144:	f7ff fc52 	bl	800d9ec <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800e148:	4620      	mov	r0, r4
 800e14a:	f7ff fe4f 	bl	800ddec <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e14e:	8aa1      	ldrh	r1, [r4, #20]
 800e150:	68e0      	ldr	r0, [r4, #12]
 800e152:	31f0      	adds	r1, #240	; 0xf0
 800e154:	b289      	uxth	r1, r1
 800e156:	f7fb fe5f 	bl	8009e18 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800e15a:	4813      	ldr	r0, [pc, #76]	; (800e1a8 <dhcp_reboot+0xcc>)
 800e15c:	9600      	str	r6, [sp, #0]
 800e15e:	2343      	movs	r3, #67	; 0x43
 800e160:	4a12      	ldr	r2, [pc, #72]	; (800e1ac <dhcp_reboot+0xd0>)
 800e162:	68e1      	ldr	r1, [r4, #12]
 800e164:	6800      	ldr	r0, [r0, #0]
 800e166:	f7ff fb6d 	bl	800d844 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800e16a:	4620      	mov	r0, r4
 800e16c:	f7ff feb0 	bl	800ded0 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800e170:	7aa3      	ldrb	r3, [r4, #10]
}
 800e172:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 800e174:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800e176:	bf1c      	itt	ne
 800e178:	3301      	addne	r3, #1
 800e17a:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800e17c:	7aa3      	ldrb	r3, [r4, #10]
 800e17e:	2b09      	cmp	r3, #9
 800e180:	bf96      	itet	ls
 800e182:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800e186:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800e18a:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e18e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800e192:	bf9c      	itt	ls
 800e194:	00db      	lslls	r3, r3, #3
 800e196:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e198:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e19c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1a0:	82e3      	strh	r3, [r4, #22]
}
 800e1a2:	b002      	add	sp, #8
 800e1a4:	bd70      	pop	{r4, r5, r6, pc}
 800e1a6:	bf00      	nop
 800e1a8:	200082d4 	.word	0x200082d4
 800e1ac:	0801503c 	.word	0x0801503c

0800e1b0 <dhcp_dec_pcb_refcount>:
{
 800e1b0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800e1b2:	4d0a      	ldr	r5, [pc, #40]	; (800e1dc <dhcp_dec_pcb_refcount+0x2c>)
 800e1b4:	782b      	ldrb	r3, [r5, #0]
 800e1b6:	b92b      	cbnz	r3, 800e1c4 <dhcp_dec_pcb_refcount+0x14>
 800e1b8:	4b09      	ldr	r3, [pc, #36]	; (800e1e0 <dhcp_dec_pcb_refcount+0x30>)
 800e1ba:	22f3      	movs	r2, #243	; 0xf3
 800e1bc:	4909      	ldr	r1, [pc, #36]	; (800e1e4 <dhcp_dec_pcb_refcount+0x34>)
 800e1be:	480a      	ldr	r0, [pc, #40]	; (800e1e8 <dhcp_dec_pcb_refcount+0x38>)
 800e1c0:	f003 fa38 	bl	8011634 <iprintf>
  dhcp_pcb_refcount--;
 800e1c4:	782c      	ldrb	r4, [r5, #0]
 800e1c6:	3c01      	subs	r4, #1
 800e1c8:	b2e4      	uxtb	r4, r4
 800e1ca:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 800e1cc:	b924      	cbnz	r4, 800e1d8 <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 800e1ce:	4d07      	ldr	r5, [pc, #28]	; (800e1ec <dhcp_dec_pcb_refcount+0x3c>)
 800e1d0:	6828      	ldr	r0, [r5, #0]
 800e1d2:	f7ff fb7f 	bl	800d8d4 <udp_remove>
    dhcp_pcb = NULL;
 800e1d6:	602c      	str	r4, [r5, #0]
}
 800e1d8:	bd38      	pop	{r3, r4, r5, pc}
 800e1da:	bf00      	nop
 800e1dc:	200082d8 	.word	0x200082d8
 800e1e0:	0801491d 	.word	0x0801491d
 800e1e4:	08014c6c 	.word	0x08014c6c
 800e1e8:	08012feb 	.word	0x08012feb
 800e1ec:	200082d4 	.word	0x200082d4

0800e1f0 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 800e1f0:	4ba9      	ldr	r3, [pc, #676]	; (800e498 <dhcp_recv+0x2a8>)
{
 800e1f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 800e1f6:	685f      	ldr	r7, [r3, #4]
{
 800e1f8:	4692      	mov	sl, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e1fa:	f8d7 9020 	ldr.w	r9, [r7, #32]
{
 800e1fe:	ed2d 8b02 	vpush	{d8}
 800e202:	b089      	sub	sp, #36	; 0x24
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800e204:	f1b9 0f00 	cmp.w	r9, #0
 800e208:	d04f      	beq.n	800e2aa <dhcp_recv+0xba>
 800e20a:	f899 3008 	ldrb.w	r3, [r9, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d048      	beq.n	800e2a4 <dhcp_recv+0xb4>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800e212:	f8d9 3004 	ldr.w	r3, [r9, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800e216:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800e218:	b133      	cbz	r3, 800e228 <dhcp_recv+0x38>
 800e21a:	4ba0      	ldr	r3, [pc, #640]	; (800e49c <dhcp_recv+0x2ac>)
 800e21c:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800e220:	499f      	ldr	r1, [pc, #636]	; (800e4a0 <dhcp_recv+0x2b0>)
 800e222:	48a0      	ldr	r0, [pc, #640]	; (800e4a4 <dhcp_recv+0x2b4>)
 800e224:	f003 fa06 	bl	8011634 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 800e228:	f8ba 300a 	ldrh.w	r3, [sl, #10]
 800e22c:	2b2b      	cmp	r3, #43	; 0x2b
 800e22e:	d939      	bls.n	800e2a4 <dhcp_recv+0xb4>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 800e230:	7823      	ldrb	r3, [r4, #0]
 800e232:	2b02      	cmp	r3, #2
 800e234:	d136      	bne.n	800e2a4 <dhcp_recv+0xb4>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800e236:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800e23a:	f107 0129 	add.w	r1, r7, #41	; 0x29
 800e23e:	f104 021c 	add.w	r2, r4, #28
 800e242:	2300      	movs	r3, #0
 800e244:	b2dd      	uxtb	r5, r3
 800e246:	42a8      	cmp	r0, r5
 800e248:	d901      	bls.n	800e24e <dhcp_recv+0x5e>
 800e24a:	2b06      	cmp	r3, #6
 800e24c:	d123      	bne.n	800e296 <dhcp_recv+0xa6>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800e24e:	6860      	ldr	r0, [r4, #4]
 800e250:	f7fb f875 	bl	800933e <lwip_htonl>
 800e254:	f8d9 3000 	ldr.w	r3, [r9]
 800e258:	4298      	cmp	r0, r3
 800e25a:	d123      	bne.n	800e2a4 <dhcp_recv+0xb4>
  dhcp_clear_all_options(dhcp);
 800e25c:	4b92      	ldr	r3, [pc, #584]	; (800e4a8 <dhcp_recv+0x2b8>)
 800e25e:	2200      	movs	r2, #0
 800e260:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 800e262:	f8ba 100a 	ldrh.w	r1, [sl, #10]
  dhcp_clear_all_options(dhcp);
 800e266:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 800e268:	292b      	cmp	r1, #43	; 0x2b
 800e26a:	d91b      	bls.n	800e2a4 <dhcp_recv+0xb4>
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800e26c:	f8da 1004 	ldr.w	r1, [sl, #4]
  int parse_sname_as_options = 0;
 800e270:	9203      	str	r2, [sp, #12]
  options_idx = DHCP_OPTIONS_OFS;
 800e272:	22f0      	movs	r2, #240	; 0xf0
  options_idx_max = p->tot_len;
 800e274:	f8ba b008 	ldrh.w	fp, [sl, #8]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800e278:	f8c9 1004 	str.w	r1, [r9, #4]
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800e27c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 800e280:	46d0      	mov	r8, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 800e282:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800e286:	9a01      	ldr	r2, [sp, #4]
 800e288:	4293      	cmp	r3, r2
 800e28a:	d916      	bls.n	800e2ba <dhcp_recv+0xca>
  options = (u8_t*)q->payload;
 800e28c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e290:	9d01      	ldr	r5, [sp, #4]
 800e292:	9304      	str	r3, [sp, #16]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e294:	e11d      	b.n	800e4d2 <dhcp_recv+0x2e2>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800e296:	f811 6b01 	ldrb.w	r6, [r1], #1
 800e29a:	3301      	adds	r3, #1
 800e29c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e2a0:	42ae      	cmp	r6, r5
 800e2a2:	d0cf      	beq.n	800e244 <dhcp_recv+0x54>
    dhcp->msg_in = NULL;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	f8c9 3004 	str.w	r3, [r9, #4]
  pbuf_free(p);
 800e2aa:	4650      	mov	r0, sl
 800e2ac:	f7fb fc7a 	bl	8009ba4 <pbuf_free>
}
 800e2b0:	b009      	add	sp, #36	; 0x24
 800e2b2:	ecbd 8b02 	vpop	{d8}
 800e2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx -= q->len;
 800e2ba:	9a01      	ldr	r2, [sp, #4]
    q = q->next;
 800e2bc:	f8d8 8000 	ldr.w	r8, [r8]
    options_idx -= q->len;
 800e2c0:	1ad2      	subs	r2, r2, r3
    options_idx_max -= q->len;
 800e2c2:	ebab 0303 	sub.w	r3, fp, r3
    options_idx -= q->len;
 800e2c6:	b292      	uxth	r2, r2
    options_idx_max -= q->len;
 800e2c8:	fa1f fb83 	uxth.w	fp, r3
    options_idx -= q->len;
 800e2cc:	9201      	str	r2, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 800e2ce:	f1b8 0f00 	cmp.w	r8, #0
 800e2d2:	d1d6      	bne.n	800e282 <dhcp_recv+0x92>
 800e2d4:	e7e6      	b.n	800e2a4 <dhcp_recv+0xb4>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800e2d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	f000 810e 	beq.w	800e4fc <dhcp_recv+0x30c>
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	e10a      	b.n	800e4fc <dhcp_recv+0x30c>
 800e2e6:	3c33      	subs	r4, #51	; 0x33
 800e2e8:	2c08      	cmp	r4, #8
 800e2ea:	f200 8115 	bhi.w	800e518 <dhcp_recv+0x328>
 800e2ee:	e8df f014 	tbh	[pc, r4, lsl #1]
 800e2f2:	007c      	.short	0x007c
 800e2f4:	00910082 	.word	0x00910082
 800e2f8:	01130097 	.word	0x01130097
 800e2fc:	01130113 	.word	0x01130113
 800e300:	00a3009d 	.word	0x00a3009d
        offset--;
 800e304:	3d01      	subs	r5, #1
        decode_len = len = 0;
 800e306:	4623      	mov	r3, r4
    int decode_idx = -1;
 800e308:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        offset--;
 800e30c:	b2ad      	uxth	r5, r5
    offset += len + 2;
 800e30e:	3502      	adds	r5, #2
 800e310:	fa13 f585 	uxtah	r5, r3, r5
 800e314:	b2ad      	uxth	r5, r5
    if (decode_len > 0) {
 800e316:	b334      	cbz	r4, 800e366 <dhcp_recv+0x176>
      u32_t value = 0;
 800e318:	2300      	movs	r3, #0
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800e31a:	2e07      	cmp	r6, #7
      u32_t value = 0;
 800e31c:	9307      	str	r3, [sp, #28]
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800e31e:	d906      	bls.n	800e32e <dhcp_recv+0x13e>
 800e320:	4b5e      	ldr	r3, [pc, #376]	; (800e49c <dhcp_recv+0x2ac>)
 800e322:	f240 6236 	movw	r2, #1590	; 0x636
 800e326:	4961      	ldr	r1, [pc, #388]	; (800e4ac <dhcp_recv+0x2bc>)
 800e328:	485e      	ldr	r0, [pc, #376]	; (800e4a4 <dhcp_recv+0x2b4>)
 800e32a:	f003 f983 	bl	8011634 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800e32e:	9b02      	ldr	r3, [sp, #8]
 800e330:	5d9b      	ldrb	r3, [r3, r6]
 800e332:	b9c3      	cbnz	r3, 800e366 <dhcp_recv+0x176>
        copy_len = LWIP_MIN(decode_len, 4);
 800e334:	b2a2      	uxth	r2, r4
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800e336:	ee18 3a10 	vmov	r3, s16
 800e33a:	a907      	add	r1, sp, #28
 800e33c:	4640      	mov	r0, r8
 800e33e:	9205      	str	r2, [sp, #20]
 800e340:	f7fb fec8 	bl	800a0d4 <pbuf_copy_partial>
 800e344:	9a05      	ldr	r2, [sp, #20]
 800e346:	4282      	cmp	r2, r0
 800e348:	d1ac      	bne.n	800e2a4 <dhcp_recv+0xb4>
        } else if (decode_len == 4) {
 800e34a:	2c04      	cmp	r4, #4
 800e34c:	f040 808f 	bne.w	800e46e <dhcp_recv+0x27e>
          value = lwip_ntohl(value);
 800e350:	9807      	ldr	r0, [sp, #28]
 800e352:	f7fa fff4 	bl	800933e <lwip_htonl>
 800e356:	9007      	str	r0, [sp, #28]
        dhcp_got_option(dhcp, decode_idx);
 800e358:	2301      	movs	r3, #1
 800e35a:	9a02      	ldr	r2, [sp, #8]
 800e35c:	5593      	strb	r3, [r2, r6]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800e35e:	9b07      	ldr	r3, [sp, #28]
 800e360:	4a53      	ldr	r2, [pc, #332]	; (800e4b0 <dhcp_recv+0x2c0>)
 800e362:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
    if (offset >= q->len) {
 800e366:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800e36a:	429d      	cmp	r5, r3
 800e36c:	f0c0 80b1 	bcc.w	800e4d2 <dhcp_recv+0x2e2>
      offset -= q->len;
 800e370:	1aed      	subs	r5, r5, r3
      offset_max -= q->len;
 800e372:	ebab 0303 	sub.w	r3, fp, r3
      offset -= q->len;
 800e376:	b2ad      	uxth	r5, r5
      offset_max -= q->len;
 800e378:	fa1f fb83 	uxth.w	fp, r3
      if ((offset < offset_max) && offset_max) {
 800e37c:	455d      	cmp	r5, fp
 800e37e:	f0c0 8081 	bcc.w	800e484 <dhcp_recv+0x294>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800e382:	9b02      	ldr	r3, [sp, #8]
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	f040 80ca 	bne.w	800e520 <dhcp_recv+0x330>
  } else if (parse_sname_as_options) {
 800e38c:	9b03      	ldr	r3, [sp, #12]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f040 80cf 	bne.w	800e532 <dhcp_recv+0x342>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800e394:	9b02      	ldr	r3, [sp, #8]
 800e396:	785b      	ldrb	r3, [r3, #1]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d083      	beq.n	800e2a4 <dhcp_recv+0xb4>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800e39c:	4a44      	ldr	r2, [pc, #272]	; (800e4b0 <dhcp_recv+0x2c0>)
 800e39e:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 800e3a0:	2b05      	cmp	r3, #5
 800e3a2:	f040 80e1 	bne.w	800e568 <dhcp_recv+0x378>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e3a6:	f899 3009 	ldrb.w	r3, [r9, #9]
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	f040 80d1 	bne.w	800e552 <dhcp_recv+0x362>
      dhcp_handle_ack(netif);
 800e3b0:	6a38      	ldr	r0, [r7, #32]
 800e3b2:	f7ff fd57 	bl	800de64 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800e3b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
        dhcp_check(netif);
 800e3ba:	4638      	mov	r0, r7
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800e3bc:	071b      	lsls	r3, r3, #28
 800e3be:	f140 80d0 	bpl.w	800e562 <dhcp_recv+0x372>
        dhcp_check(netif);
 800e3c2:	f7ff fc3b 	bl	800dc3c <dhcp_check>
 800e3c6:	e76d      	b.n	800e2a4 <dhcp_recv+0xb4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e3c8:	2b04      	cmp	r3, #4
 800e3ca:	d03b      	beq.n	800e444 <dhcp_recv+0x254>
 800e3cc:	4b33      	ldr	r3, [pc, #204]	; (800e49c <dhcp_recv+0x2ac>)
 800e3ce:	f240 52f6 	movw	r2, #1526	; 0x5f6
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e3d2:	4938      	ldr	r1, [pc, #224]	; (800e4b4 <dhcp_recv+0x2c4>)
 800e3d4:	e005      	b.n	800e3e2 <dhcp_recv+0x1f2>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800e3d6:	2b03      	cmp	r3, #3
 800e3d8:	d837      	bhi.n	800e44a <dhcp_recv+0x25a>
 800e3da:	4b30      	ldr	r3, [pc, #192]	; (800e49c <dhcp_recv+0x2ac>)
 800e3dc:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800e3e0:	4935      	ldr	r1, [pc, #212]	; (800e4b8 <dhcp_recv+0x2c8>)
 800e3e2:	4830      	ldr	r0, [pc, #192]	; (800e4a4 <dhcp_recv+0x2b4>)
 800e3e4:	f003 f926 	bl	8011634 <iprintf>
 800e3e8:	e75c      	b.n	800e2a4 <dhcp_recv+0xb4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e3ea:	2b04      	cmp	r3, #4
 800e3ec:	d030      	beq.n	800e450 <dhcp_recv+0x260>
 800e3ee:	4b2b      	ldr	r3, [pc, #172]	; (800e49c <dhcp_recv+0x2ac>)
 800e3f0:	f240 6209 	movw	r2, #1545	; 0x609
 800e3f4:	e7ed      	b.n	800e3d2 <dhcp_recv+0x1e2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e3f6:	2b01      	cmp	r3, #1
 800e3f8:	d004      	beq.n	800e404 <dhcp_recv+0x214>
 800e3fa:	4b28      	ldr	r3, [pc, #160]	; (800e49c <dhcp_recv+0x2ac>)
 800e3fc:	f240 6217 	movw	r2, #1559	; 0x617
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e400:	492e      	ldr	r1, [pc, #184]	; (800e4bc <dhcp_recv+0x2cc>)
 800e402:	e7ee      	b.n	800e3e2 <dhcp_recv+0x1f2>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800e404:	9a01      	ldr	r2, [sp, #4]
 800e406:	2af0      	cmp	r2, #240	; 0xf0
 800e408:	d025      	beq.n	800e456 <dhcp_recv+0x266>
 800e40a:	4b24      	ldr	r3, [pc, #144]	; (800e49c <dhcp_recv+0x2ac>)
 800e40c:	f240 6219 	movw	r2, #1561	; 0x619
 800e410:	492b      	ldr	r1, [pc, #172]	; (800e4c0 <dhcp_recv+0x2d0>)
 800e412:	e7e6      	b.n	800e3e2 <dhcp_recv+0x1f2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800e414:	2b01      	cmp	r3, #1
 800e416:	d024      	beq.n	800e462 <dhcp_recv+0x272>
 800e418:	4b20      	ldr	r3, [pc, #128]	; (800e49c <dhcp_recv+0x2ac>)
 800e41a:	f240 621d 	movw	r2, #1565	; 0x61d
 800e41e:	e7ef      	b.n	800e400 <dhcp_recv+0x210>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e420:	2b04      	cmp	r3, #4
 800e422:	d01b      	beq.n	800e45c <dhcp_recv+0x26c>
 800e424:	4b1d      	ldr	r3, [pc, #116]	; (800e49c <dhcp_recv+0x2ac>)
 800e426:	f240 6221 	movw	r2, #1569	; 0x621
 800e42a:	e7d2      	b.n	800e3d2 <dhcp_recv+0x1e2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e42c:	2b04      	cmp	r3, #4
 800e42e:	d018      	beq.n	800e462 <dhcp_recv+0x272>
 800e430:	4b1a      	ldr	r3, [pc, #104]	; (800e49c <dhcp_recv+0x2ac>)
 800e432:	f240 6225 	movw	r2, #1573	; 0x625
 800e436:	e7cc      	b.n	800e3d2 <dhcp_recv+0x1e2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800e438:	2b04      	cmp	r3, #4
 800e43a:	d015      	beq.n	800e468 <dhcp_recv+0x278>
 800e43c:	4b17      	ldr	r3, [pc, #92]	; (800e49c <dhcp_recv+0x2ac>)
 800e43e:	f240 6229 	movw	r2, #1577	; 0x629
 800e442:	e7c6      	b.n	800e3d2 <dhcp_recv+0x1e2>
 800e444:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800e446:	2606      	movs	r6, #6
 800e448:	e761      	b.n	800e30e <dhcp_recv+0x11e>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800e44a:	2607      	movs	r6, #7
        decode_len = 4; /* only copy the first given router */
 800e44c:	2404      	movs	r4, #4
 800e44e:	e75e      	b.n	800e30e <dhcp_recv+0x11e>
 800e450:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800e452:	2603      	movs	r6, #3
 800e454:	e75b      	b.n	800e30e <dhcp_recv+0x11e>
    decode_len = len;
 800e456:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800e458:	2600      	movs	r6, #0
 800e45a:	e758      	b.n	800e30e <dhcp_recv+0x11e>
 800e45c:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800e45e:	2602      	movs	r6, #2
 800e460:	e755      	b.n	800e30e <dhcp_recv+0x11e>
 800e462:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 800e464:	461e      	mov	r6, r3
 800e466:	e752      	b.n	800e30e <dhcp_recv+0x11e>
 800e468:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 800e46a:	2605      	movs	r6, #5
 800e46c:	e74f      	b.n	800e30e <dhcp_recv+0x11e>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800e46e:	2c01      	cmp	r4, #1
 800e470:	d004      	beq.n	800e47c <dhcp_recv+0x28c>
 800e472:	4b0a      	ldr	r3, [pc, #40]	; (800e49c <dhcp_recv+0x2ac>)
 800e474:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800e478:	4912      	ldr	r1, [pc, #72]	; (800e4c4 <dhcp_recv+0x2d4>)
 800e47a:	e7b2      	b.n	800e3e2 <dhcp_recv+0x1f2>
          value = ((u8_t*)&value)[0];
 800e47c:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800e480:	9307      	str	r3, [sp, #28]
 800e482:	e769      	b.n	800e358 <dhcp_recv+0x168>
        q = q->next;
 800e484:	f8d8 8000 	ldr.w	r8, [r8]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800e488:	f1b8 0f00 	cmp.w	r8, #0
 800e48c:	d11e      	bne.n	800e4cc <dhcp_recv+0x2dc>
 800e48e:	4b03      	ldr	r3, [pc, #12]	; (800e49c <dhcp_recv+0x2ac>)
 800e490:	f240 6254 	movw	r2, #1620	; 0x654
 800e494:	490c      	ldr	r1, [pc, #48]	; (800e4c8 <dhcp_recv+0x2d8>)
 800e496:	e7a4      	b.n	800e3e2 <dhcp_recv+0x1f2>
 800e498:	20008634 	.word	0x20008634
 800e49c:	0801491d 	.word	0x0801491d
 800e4a0:	08014c90 	.word	0x08014c90
 800e4a4:	08012feb 	.word	0x08012feb
 800e4a8:	2000bd74 	.word	0x2000bd74
 800e4ac:	08014cde 	.word	0x08014cde
 800e4b0:	2000bd7c 	.word	0x2000bd7c
 800e4b4:	08014ca3 	.word	0x08014ca3
 800e4b8:	08014cac 	.word	0x08014cac
 800e4bc:	08014cbe 	.word	0x08014cbe
 800e4c0:	08014cc7 	.word	0x08014cc7
 800e4c4:	08014cef 	.word	0x08014cef
 800e4c8:	08014d02 	.word	0x08014d02
        options = (u8_t*)q->payload;
 800e4cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e4d0:	9304      	str	r3, [sp, #16]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e4d2:	455d      	cmp	r5, fp
 800e4d4:	f4bf af55 	bcs.w	800e382 <dhcp_recv+0x192>
 800e4d8:	9b04      	ldr	r3, [sp, #16]
 800e4da:	5d5c      	ldrb	r4, [r3, r5]
 800e4dc:	2cff      	cmp	r4, #255	; 0xff
 800e4de:	f43f af50 	beq.w	800e382 <dhcp_recv+0x192>
    u16_t val_offset = offset + 2;
 800e4e2:	1cab      	adds	r3, r5, #2
    if ((offset + 1) < q->len) {
 800e4e4:	f8b8 200a 	ldrh.w	r2, [r8, #10]
    u16_t val_offset = offset + 2;
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	ee08 3a10 	vmov	s16, r3
    if ((offset + 1) < q->len) {
 800e4ee:	1c6b      	adds	r3, r5, #1
 800e4f0:	4293      	cmp	r3, r2
 800e4f2:	f6bf aef0 	bge.w	800e2d6 <dhcp_recv+0xe6>
      len = options[offset + 1];
 800e4f6:	9b04      	ldr	r3, [sp, #16]
 800e4f8:	442b      	add	r3, r5
 800e4fa:	785b      	ldrb	r3, [r3, #1]
    switch(op) {
 800e4fc:	2c3b      	cmp	r4, #59	; 0x3b
 800e4fe:	d80b      	bhi.n	800e518 <dhcp_recv+0x328>
 800e500:	2c32      	cmp	r4, #50	; 0x32
 800e502:	f63f aef0 	bhi.w	800e2e6 <dhcp_recv+0xf6>
 800e506:	2c01      	cmp	r4, #1
 800e508:	f43f af5e 	beq.w	800e3c8 <dhcp_recv+0x1d8>
 800e50c:	2c03      	cmp	r4, #3
 800e50e:	f43f af62 	beq.w	800e3d6 <dhcp_recv+0x1e6>
 800e512:	2c00      	cmp	r4, #0
 800e514:	f43f aef6 	beq.w	800e304 <dhcp_recv+0x114>
 800e518:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e51c:	2400      	movs	r4, #0
 800e51e:	e6f6      	b.n	800e30e <dhcp_recv+0x11e>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e520:	4b2b      	ldr	r3, [pc, #172]	; (800e5d0 <dhcp_recv+0x3e0>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e522:	2200      	movs	r2, #0
 800e524:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e526:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e528:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d00c      	beq.n	800e548 <dhcp_recv+0x358>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d105      	bne.n	800e53e <dhcp_recv+0x34e>
    parse_sname_as_options = 0;
 800e532:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800e534:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 800e538:	9303      	str	r3, [sp, #12]
    options_idx = DHCP_SNAME_OFS;
 800e53a:	232c      	movs	r3, #44	; 0x2c
 800e53c:	e007      	b.n	800e54e <dhcp_recv+0x35e>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800e53e:	2b03      	cmp	r3, #3
 800e540:	f47f af24 	bne.w	800e38c <dhcp_recv+0x19c>
      parse_sname_as_options = 1;
 800e544:	2301      	movs	r3, #1
 800e546:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e548:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 800e54c:	236c      	movs	r3, #108	; 0x6c
 800e54e:	9301      	str	r3, [sp, #4]
 800e550:	e696      	b.n	800e280 <dhcp_recv+0x90>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800e552:	3b03      	subs	r3, #3
 800e554:	2b02      	cmp	r3, #2
 800e556:	f63f aea5 	bhi.w	800e2a4 <dhcp_recv+0xb4>
      dhcp_handle_ack(netif);
 800e55a:	6a38      	ldr	r0, [r7, #32]
 800e55c:	f7ff fc82 	bl	800de64 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 800e560:	4638      	mov	r0, r7
 800e562:	f7ff fb81 	bl	800dc68 <dhcp_bind>
 800e566:	e69d      	b.n	800e2a4 <dhcp_recv+0xb4>
  else if ((msg_type == DHCP_NAK) &&
 800e568:	2b06      	cmp	r3, #6
 800e56a:	d115      	bne.n	800e598 <dhcp_recv+0x3a8>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e56c:	f899 3009 	ldrb.w	r3, [r9, #9]
  else if ((msg_type == DHCP_NAK) &&
 800e570:	1eda      	subs	r2, r3, #3
 800e572:	2a02      	cmp	r2, #2
 800e574:	d902      	bls.n	800e57c <dhcp_recv+0x38c>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e576:	2b01      	cmp	r3, #1
 800e578:	f47f ae94 	bne.w	800e2a4 <dhcp_recv+0xb4>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e57c:	6a38      	ldr	r0, [r7, #32]
 800e57e:	210c      	movs	r1, #12
 800e580:	f7ff f9e6 	bl	800d950 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e584:	4b13      	ldr	r3, [pc, #76]	; (800e5d4 <dhcp_recv+0x3e4>)
 800e586:	4638      	mov	r0, r7
 800e588:	461a      	mov	r2, r3
 800e58a:	4619      	mov	r1, r3
 800e58c:	f7fb f9d0 	bl	8009930 <netif_set_addr>
  dhcp_discover(netif);
 800e590:	4638      	mov	r0, r7
 800e592:	f7ff fccd 	bl	800df30 <dhcp_discover>
}
 800e596:	e685      	b.n	800e2a4 <dhcp_recv+0xb4>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800e598:	2b02      	cmp	r3, #2
 800e59a:	f47f ae83 	bne.w	800e2a4 <dhcp_recv+0xb4>
 800e59e:	f899 3009 	ldrb.w	r3, [r9, #9]
 800e5a2:	2b06      	cmp	r3, #6
 800e5a4:	f47f ae7e 	bne.w	800e2a4 <dhcp_recv+0xb4>
    dhcp->request_timeout = 0;
 800e5a8:	9b03      	ldr	r3, [sp, #12]
 800e5aa:	f8a9 3016 	strh.w	r3, [r9, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800e5ae:	9b02      	ldr	r3, [sp, #8]
 800e5b0:	789b      	ldrb	r3, [r3, #2]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	f43f ae76 	beq.w	800e2a4 <dhcp_recv+0xb4>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e5b8:	6a3c      	ldr	r4, [r7, #32]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e5ba:	6890      	ldr	r0, [r2, #8]
 800e5bc:	f7fa febf 	bl	800933e <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800e5c0:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800e5c2:	6260      	str	r0, [r4, #36]	; 0x24
    dhcp_select(netif);
 800e5c4:	4638      	mov	r0, r7
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800e5c6:	691b      	ldr	r3, [r3, #16]
 800e5c8:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 800e5ca:	f7ff fd11 	bl	800dff0 <dhcp_select>
 800e5ce:	e669      	b.n	800e2a4 <dhcp_recv+0xb4>
 800e5d0:	2000bd7c 	.word	0x2000bd7c
 800e5d4:	08015038 	.word	0x08015038

0800e5d8 <dhcp_arp_reply>:
{
 800e5d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e5da:	4605      	mov	r5, r0
 800e5dc:	b948      	cbnz	r0, 800e5f2 <dhcp_arp_reply+0x1a>
 800e5de:	4b24      	ldr	r3, [pc, #144]	; (800e670 <dhcp_arp_reply+0x98>)
 800e5e0:	f240 327b 	movw	r2, #891	; 0x37b
 800e5e4:	4923      	ldr	r1, [pc, #140]	; (800e674 <dhcp_arp_reply+0x9c>)
 800e5e6:	4824      	ldr	r0, [pc, #144]	; (800e678 <dhcp_arp_reply+0xa0>)
}
 800e5e8:	b003      	add	sp, #12
 800e5ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800e5ee:	f003 b821 	b.w	8011634 <iprintf>
  dhcp = netif_dhcp_data(netif);
 800e5f2:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800e5f4:	2c00      	cmp	r4, #0
 800e5f6:	d039      	beq.n	800e66c <dhcp_arp_reply+0x94>
 800e5f8:	7a63      	ldrb	r3, [r4, #9]
 800e5fa:	2b08      	cmp	r3, #8
 800e5fc:	d136      	bne.n	800e66c <dhcp_arp_reply+0x94>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800e5fe:	680a      	ldr	r2, [r1, #0]
 800e600:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e602:	429a      	cmp	r2, r3
 800e604:	d132      	bne.n	800e66c <dhcp_arp_reply+0x94>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800e606:	210c      	movs	r1, #12
 800e608:	4620      	mov	r0, r4
 800e60a:	f7ff f9a1 	bl	800d950 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800e60e:	2204      	movs	r2, #4
 800e610:	4621      	mov	r1, r4
 800e612:	4628      	mov	r0, r5
 800e614:	f7ff fa34 	bl	800da80 <dhcp_create_msg>
  if (result == ERR_OK) {
 800e618:	bb08      	cbnz	r0, 800e65e <dhcp_arp_reply+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800e61a:	2204      	movs	r2, #4
 800e61c:	2132      	movs	r1, #50	; 0x32
 800e61e:	4620      	mov	r0, r4
 800e620:	f7ff f9c0 	bl	800d9a4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800e624:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800e626:	f7fa fe8a 	bl	800933e <lwip_htonl>
 800e62a:	4601      	mov	r1, r0
 800e62c:	4620      	mov	r0, r4
 800e62e:	f7ff f9f9 	bl	800da24 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800e632:	4620      	mov	r0, r4
 800e634:	f7ff fbda 	bl	800ddec <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e638:	8aa1      	ldrh	r1, [r4, #20]
 800e63a:	68e0      	ldr	r0, [r4, #12]
 800e63c:	31f0      	adds	r1, #240	; 0xf0
 800e63e:	b289      	uxth	r1, r1
 800e640:	f7fb fbea 	bl	8009e18 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800e644:	4b0d      	ldr	r3, [pc, #52]	; (800e67c <dhcp_arp_reply+0xa4>)
 800e646:	480e      	ldr	r0, [pc, #56]	; (800e680 <dhcp_arp_reply+0xa8>)
 800e648:	4a0e      	ldr	r2, [pc, #56]	; (800e684 <dhcp_arp_reply+0xac>)
 800e64a:	e9cd 5300 	strd	r5, r3, [sp]
 800e64e:	2343      	movs	r3, #67	; 0x43
 800e650:	68e1      	ldr	r1, [r4, #12]
 800e652:	6800      	ldr	r0, [r0, #0]
 800e654:	f7ff f890 	bl	800d778 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800e658:	4620      	mov	r0, r4
 800e65a:	f7ff fc39 	bl	800ded0 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800e65e:	7aa3      	ldrb	r3, [r4, #10]
 800e660:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800e662:	bf1c      	itt	ne
 800e664:	3301      	addne	r3, #1
 800e666:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e668:	2314      	movs	r3, #20
 800e66a:	82e3      	strh	r3, [r4, #22]
}
 800e66c:	b003      	add	sp, #12
 800e66e:	bd30      	pop	{r4, r5, pc}
 800e670:	0801491d 	.word	0x0801491d
 800e674:	08014b2a 	.word	0x08014b2a
 800e678:	08012feb 	.word	0x08012feb
 800e67c:	08015038 	.word	0x08015038
 800e680:	200082d4 	.word	0x200082d4
 800e684:	0801503c 	.word	0x0801503c

0800e688 <dhcp_renew>:
{
 800e688:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e68a:	6a04      	ldr	r4, [r0, #32]
{
 800e68c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800e68e:	2105      	movs	r1, #5
 800e690:	4620      	mov	r0, r4
 800e692:	f7ff f95d 	bl	800d950 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800e696:	2203      	movs	r2, #3
 800e698:	4621      	mov	r1, r4
 800e69a:	4630      	mov	r0, r6
 800e69c:	f7ff f9f0 	bl	800da80 <dhcp_create_msg>
  if (result == ERR_OK) {
 800e6a0:	4605      	mov	r5, r0
 800e6a2:	bb70      	cbnz	r0, 800e702 <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e6a4:	2202      	movs	r2, #2
 800e6a6:	2139      	movs	r1, #57	; 0x39
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f7ff f97b 	bl	800d9a4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800e6ae:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 800e6b0:	4620      	mov	r0, r4
 800e6b2:	f7ff f955 	bl	800d960 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e6b6:	2203      	movs	r2, #3
 800e6b8:	2137      	movs	r1, #55	; 0x37
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	f7ff f972 	bl	800d9a4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e6c0:	2101      	movs	r1, #1
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f7ff f992 	bl	800d9ec <dhcp_option_byte>
 800e6c8:	2103      	movs	r1, #3
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f7ff f98e 	bl	800d9ec <dhcp_option_byte>
 800e6d0:	211c      	movs	r1, #28
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f7ff f98a 	bl	800d9ec <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f7ff fb87 	bl	800ddec <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e6de:	8aa1      	ldrh	r1, [r4, #20]
 800e6e0:	68e0      	ldr	r0, [r4, #12]
 800e6e2:	31f0      	adds	r1, #240	; 0xf0
 800e6e4:	b289      	uxth	r1, r1
 800e6e6:	f7fb fb97 	bl	8009e18 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800e6ea:	4813      	ldr	r0, [pc, #76]	; (800e738 <dhcp_renew+0xb0>)
 800e6ec:	9600      	str	r6, [sp, #0]
 800e6ee:	2343      	movs	r3, #67	; 0x43
 800e6f0:	f104 0224 	add.w	r2, r4, #36	; 0x24
 800e6f4:	68e1      	ldr	r1, [r4, #12]
 800e6f6:	6800      	ldr	r0, [r0, #0]
 800e6f8:	f7ff f8a4 	bl	800d844 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f7ff fbe7 	bl	800ded0 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800e702:	7aa3      	ldrb	r3, [r4, #10]
}
 800e704:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 800e706:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800e708:	bf1c      	itt	ne
 800e70a:	3301      	addne	r3, #1
 800e70c:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800e70e:	7aa3      	ldrb	r3, [r4, #10]
 800e710:	2b09      	cmp	r3, #9
 800e712:	bf96      	itet	ls
 800e714:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800e718:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 800e71c:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e720:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800e724:	bf9c      	itt	ls
 800e726:	011b      	lslls	r3, r3, #4
 800e728:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e72a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800e72e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e732:	82e3      	strh	r3, [r4, #22]
}
 800e734:	b002      	add	sp, #8
 800e736:	bd70      	pop	{r4, r5, r6, pc}
 800e738:	200082d4 	.word	0x200082d4

0800e73c <dhcp_stop>:
{
 800e73c:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800e73e:	b940      	cbnz	r0, 800e752 <dhcp_stop+0x16>
 800e740:	4b0f      	ldr	r3, [pc, #60]	; (800e780 <dhcp_stop+0x44>)
 800e742:	f240 5242 	movw	r2, #1346	; 0x542
 800e746:	490f      	ldr	r1, [pc, #60]	; (800e784 <dhcp_stop+0x48>)
 800e748:	480f      	ldr	r0, [pc, #60]	; (800e788 <dhcp_stop+0x4c>)
}
 800e74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800e74e:	f002 bf71 	b.w	8011634 <iprintf>
  dhcp = netif_dhcp_data(netif);
 800e752:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 800e754:	b194      	cbz	r4, 800e77c <dhcp_stop+0x40>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800e756:	6863      	ldr	r3, [r4, #4]
 800e758:	b133      	cbz	r3, 800e768 <dhcp_stop+0x2c>
 800e75a:	4b09      	ldr	r3, [pc, #36]	; (800e780 <dhcp_stop+0x44>)
 800e75c:	f240 524f 	movw	r2, #1359	; 0x54f
 800e760:	490a      	ldr	r1, [pc, #40]	; (800e78c <dhcp_stop+0x50>)
 800e762:	4809      	ldr	r0, [pc, #36]	; (800e788 <dhcp_stop+0x4c>)
 800e764:	f002 ff66 	bl	8011634 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e768:	2100      	movs	r1, #0
 800e76a:	4620      	mov	r0, r4
 800e76c:	f7ff f8f0 	bl	800d950 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 800e770:	7a23      	ldrb	r3, [r4, #8]
 800e772:	b11b      	cbz	r3, 800e77c <dhcp_stop+0x40>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e774:	f7ff fd1c 	bl	800e1b0 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800e778:	2300      	movs	r3, #0
 800e77a:	7223      	strb	r3, [r4, #8]
}
 800e77c:	bd10      	pop	{r4, pc}
 800e77e:	bf00      	nop
 800e780:	0801491d 	.word	0x0801491d
 800e784:	08014d39 	.word	0x08014d39
 800e788:	08012feb 	.word	0x08012feb
 800e78c:	08014c90 	.word	0x08014c90

0800e790 <dhcp_start>:
{
 800e790:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800e792:	4605      	mov	r5, r0
 800e794:	b948      	cbnz	r0, 800e7aa <dhcp_start+0x1a>
 800e796:	4b27      	ldr	r3, [pc, #156]	; (800e834 <dhcp_start+0xa4>)
 800e798:	f240 22d6 	movw	r2, #726	; 0x2d6
 800e79c:	4926      	ldr	r1, [pc, #152]	; (800e838 <dhcp_start+0xa8>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e79e:	4827      	ldr	r0, [pc, #156]	; (800e83c <dhcp_start+0xac>)
 800e7a0:	f002 ff48 	bl	8011634 <iprintf>
 800e7a4:	f06f 000f 	mvn.w	r0, #15
}
 800e7a8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800e7aa:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800e7ae:	07db      	lsls	r3, r3, #31
 800e7b0:	d404      	bmi.n	800e7bc <dhcp_start+0x2c>
 800e7b2:	4b20      	ldr	r3, [pc, #128]	; (800e834 <dhcp_start+0xa4>)
 800e7b4:	f240 22d7 	movw	r2, #727	; 0x2d7
 800e7b8:	4921      	ldr	r1, [pc, #132]	; (800e840 <dhcp_start+0xb0>)
 800e7ba:	e7f0      	b.n	800e79e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e7bc:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  dhcp = netif_dhcp_data(netif);
 800e7be:	6a04      	ldr	r4, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800e7c0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800e7c4:	d202      	bcs.n	800e7cc <dhcp_start+0x3c>
    return ERR_MEM;
 800e7c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e7ca:	e7ed      	b.n	800e7a8 <dhcp_start+0x18>
  if (dhcp == NULL) {
 800e7cc:	b9d4      	cbnz	r4, 800e804 <dhcp_start+0x74>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800e7ce:	2040      	movs	r0, #64	; 0x40
 800e7d0:	f7fa ff52 	bl	8009678 <mem_malloc>
    if (dhcp == NULL) {
 800e7d4:	4604      	mov	r4, r0
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d0f5      	beq.n	800e7c6 <dhcp_start+0x36>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800e7da:	6228      	str	r0, [r5, #32]
  memset(dhcp, 0, sizeof(struct dhcp));
 800e7dc:	2240      	movs	r2, #64	; 0x40
 800e7de:	2100      	movs	r1, #0
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f002 fe75 	bl	80114d0 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800e7e6:	f7ff fac7 	bl	800dd78 <dhcp_inc_pcb_refcount>
 800e7ea:	2800      	cmp	r0, #0
 800e7ec:	d1eb      	bne.n	800e7c6 <dhcp_start+0x36>
  dhcp->pcb_allocated = 1;
 800e7ee:	2301      	movs	r3, #1
  result = dhcp_discover(netif);
 800e7f0:	4628      	mov	r0, r5
  dhcp->pcb_allocated = 1;
 800e7f2:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 800e7f4:	f7ff fb9c 	bl	800df30 <dhcp_discover>
  if (result != ERR_OK) {
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d0d5      	beq.n	800e7a8 <dhcp_start+0x18>
    dhcp_stop(netif);
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	f7ff ff9d 	bl	800e73c <dhcp_stop>
 800e802:	e7e0      	b.n	800e7c6 <dhcp_start+0x36>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800e804:	68e3      	ldr	r3, [r4, #12]
 800e806:	b133      	cbz	r3, 800e816 <dhcp_start+0x86>
 800e808:	4b0a      	ldr	r3, [pc, #40]	; (800e834 <dhcp_start+0xa4>)
 800e80a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800e80e:	490d      	ldr	r1, [pc, #52]	; (800e844 <dhcp_start+0xb4>)
 800e810:	480a      	ldr	r0, [pc, #40]	; (800e83c <dhcp_start+0xac>)
 800e812:	f002 ff0f 	bl	8011634 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800e816:	6863      	ldr	r3, [r4, #4]
 800e818:	b133      	cbz	r3, 800e828 <dhcp_start+0x98>
 800e81a:	4b06      	ldr	r3, [pc, #24]	; (800e834 <dhcp_start+0xa4>)
 800e81c:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e820:	4909      	ldr	r1, [pc, #36]	; (800e848 <dhcp_start+0xb8>)
 800e822:	4806      	ldr	r0, [pc, #24]	; (800e83c <dhcp_start+0xac>)
 800e824:	f002 ff06 	bl	8011634 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 800e828:	7a23      	ldrb	r3, [r4, #8]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d0d6      	beq.n	800e7dc <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800e82e:	f7ff fcbf 	bl	800e1b0 <dhcp_dec_pcb_refcount>
 800e832:	e7d3      	b.n	800e7dc <dhcp_start+0x4c>
 800e834:	0801491d 	.word	0x0801491d
 800e838:	08014b2a 	.word	0x08014b2a
 800e83c:	08012feb 	.word	0x08012feb
 800e840:	08014d52 	.word	0x08014d52
 800e844:	08014d73 	.word	0x08014d73
 800e848:	08014c90 	.word	0x08014c90

0800e84c <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800e84c:	b150      	cbz	r0, 800e864 <dhcp_supplied_address+0x18>
 800e84e:	6a00      	ldr	r0, [r0, #32]
 800e850:	b140      	cbz	r0, 800e864 <dhcp_supplied_address+0x18>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e852:	7a40      	ldrb	r0, [r0, #9]
 800e854:	280a      	cmp	r0, #10
 800e856:	d006      	beq.n	800e866 <dhcp_supplied_address+0x1a>
 800e858:	3804      	subs	r0, #4
 800e85a:	2801      	cmp	r0, #1
 800e85c:	bf8c      	ite	hi
 800e85e:	2000      	movhi	r0, #0
 800e860:	2001      	movls	r0, #1
 800e862:	b2c0      	uxtb	r0, r0
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 800e864:	4770      	bx	lr
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e866:	2001      	movs	r0, #1
 800e868:	e7fb      	b.n	800e862 <dhcp_supplied_address+0x16>
	...

0800e86c <dhcp_release>:
{
 800e86c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e86e:	6a04      	ldr	r4, [r0, #32]
{
 800e870:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 800e872:	2c00      	cmp	r4, #0
 800e874:	d043      	beq.n	800e8fe <dhcp_release+0x92>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800e876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e878:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800e87a:	f7ff ffe7 	bl	800e84c <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e87e:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800e880:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800e882:	4620      	mov	r0, r4
 800e884:	f7ff f864 	bl	800d950 <dhcp_set_state>
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800e888:	2300      	movs	r3, #0
 800e88a:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800e88e:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800e892:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800e896:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800e89a:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (!is_dhcp_supplied_address) {
 800e89c:	b365      	cbz	r5, 800e8f8 <dhcp_release+0x8c>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800e89e:	2207      	movs	r2, #7
 800e8a0:	4621      	mov	r1, r4
 800e8a2:	4630      	mov	r0, r6
 800e8a4:	f7ff f8ec 	bl	800da80 <dhcp_create_msg>
  if (result == ERR_OK) {
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	b9f8      	cbnz	r0, 800e8ec <dhcp_release+0x80>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800e8ac:	2204      	movs	r2, #4
 800e8ae:	2136      	movs	r1, #54	; 0x36
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f7ff f877 	bl	800d9a4 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800e8b6:	9803      	ldr	r0, [sp, #12]
 800e8b8:	f7fa fd41 	bl	800933e <lwip_htonl>
 800e8bc:	4601      	mov	r1, r0
 800e8be:	4620      	mov	r0, r4
 800e8c0:	f7ff f8b0 	bl	800da24 <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f7ff fa91 	bl	800ddec <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e8ca:	8aa1      	ldrh	r1, [r4, #20]
 800e8cc:	68e0      	ldr	r0, [r4, #12]
 800e8ce:	31f0      	adds	r1, #240	; 0xf0
 800e8d0:	b289      	uxth	r1, r1
 800e8d2:	f7fb faa1 	bl	8009e18 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800e8d6:	480b      	ldr	r0, [pc, #44]	; (800e904 <dhcp_release+0x98>)
 800e8d8:	9600      	str	r6, [sp, #0]
 800e8da:	2343      	movs	r3, #67	; 0x43
 800e8dc:	aa03      	add	r2, sp, #12
 800e8de:	68e1      	ldr	r1, [r4, #12]
 800e8e0:	6800      	ldr	r0, [r0, #0]
 800e8e2:	f7fe ffaf 	bl	800d844 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800e8e6:	4620      	mov	r0, r4
 800e8e8:	f7ff faf2 	bl	800ded0 <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <dhcp_release+0x9c>)
 800e8ee:	4630      	mov	r0, r6
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	f7fb f81c 	bl	8009930 <netif_set_addr>
}
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	b004      	add	sp, #16
 800e8fc:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 800e8fe:	f06f 050f 	mvn.w	r5, #15
 800e902:	e7f9      	b.n	800e8f8 <dhcp_release+0x8c>
 800e904:	200082d4 	.word	0x200082d4
 800e908:	08015038 	.word	0x08015038

0800e90c <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 800e90c:	4b51      	ldr	r3, [pc, #324]	; (800ea54 <dhcp_coarse_tmr+0x148>)
{
 800e90e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct netif *netif = netif_list;
 800e912:	681d      	ldr	r5, [r3, #0]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e914:	f240 2619 	movw	r6, #537	; 0x219
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800e918:	4f4f      	ldr	r7, [pc, #316]	; (800ea58 <dhcp_coarse_tmr+0x14c>)
 800e91a:	f8df 8140 	ldr.w	r8, [pc, #320]	; 800ea5c <dhcp_coarse_tmr+0x150>
  while (netif != NULL) {
 800e91e:	b915      	cbnz	r5, 800e926 <dhcp_coarse_tmr+0x1a>
}
 800e920:	b003      	add	sp, #12
 800e922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e926:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800e928:	b17c      	cbz	r4, 800e94a <dhcp_coarse_tmr+0x3e>
 800e92a:	7a63      	ldrb	r3, [r4, #9]
 800e92c:	b16b      	cbz	r3, 800e94a <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800e92e:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 800e930:	b169      	cbz	r1, 800e94e <dhcp_coarse_tmr+0x42>
 800e932:	8c22      	ldrh	r2, [r4, #32]
 800e934:	3201      	adds	r2, #1
 800e936:	b292      	uxth	r2, r2
 800e938:	4291      	cmp	r1, r2
 800e93a:	8422      	strh	r2, [r4, #32]
 800e93c:	d107      	bne.n	800e94e <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 800e93e:	4628      	mov	r0, r5
 800e940:	f7ff ff94 	bl	800e86c <dhcp_release>
        dhcp_discover(netif);
 800e944:	4628      	mov	r0, r5
 800e946:	f7ff faf3 	bl	800df30 <dhcp_discover>
    netif = netif->next;
 800e94a:	682d      	ldr	r5, [r5, #0]
 800e94c:	e7e7      	b.n	800e91e <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800e94e:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 800e952:	f1b9 0f00 	cmp.w	r9, #0
 800e956:	d064      	beq.n	800ea22 <dhcp_coarse_tmr+0x116>
 800e958:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 800e95c:	f1b9 0f01 	cmp.w	r9, #1
 800e960:	83e2      	strh	r2, [r4, #30]
 800e962:	d15e      	bne.n	800ea22 <dhcp_coarse_tmr+0x116>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800e964:	3b01      	subs	r3, #1
 800e966:	b2db      	uxtb	r3, r3
 800e968:	2b09      	cmp	r3, #9
 800e96a:	d8ee      	bhi.n	800e94a <dhcp_coarse_tmr+0x3e>
 800e96c:	fa26 f303 	lsr.w	r3, r6, r3
 800e970:	07db      	lsls	r3, r3, #31
 800e972:	d5ea      	bpl.n	800e94a <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800e974:	2104      	movs	r1, #4
 800e976:	4620      	mov	r0, r4
 800e978:	f7fe ffea 	bl	800d950 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800e97c:	2203      	movs	r2, #3
 800e97e:	4621      	mov	r1, r4
 800e980:	4628      	mov	r0, r5
 800e982:	f7ff f87d 	bl	800da80 <dhcp_create_msg>
  if (result == ERR_OK) {
 800e986:	bb60      	cbnz	r0, 800e9e2 <dhcp_coarse_tmr+0xd6>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800e988:	2202      	movs	r2, #2
 800e98a:	2139      	movs	r1, #57	; 0x39
 800e98c:	4620      	mov	r0, r4
 800e98e:	f7ff f809 	bl	800d9a4 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800e992:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 800e994:	4620      	mov	r0, r4
 800e996:	f7fe ffe3 	bl	800d960 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800e99a:	2203      	movs	r2, #3
 800e99c:	2137      	movs	r1, #55	; 0x37
 800e99e:	4620      	mov	r0, r4
 800e9a0:	f7ff f800 	bl	800d9a4 <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800e9a4:	4649      	mov	r1, r9
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7ff f820 	bl	800d9ec <dhcp_option_byte>
 800e9ac:	2103      	movs	r1, #3
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	f7ff f81c 	bl	800d9ec <dhcp_option_byte>
 800e9b4:	211c      	movs	r1, #28
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f7ff f818 	bl	800d9ec <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f7ff fa15 	bl	800ddec <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800e9c2:	8aa1      	ldrh	r1, [r4, #20]
 800e9c4:	68e0      	ldr	r0, [r4, #12]
 800e9c6:	31f0      	adds	r1, #240	; 0xf0
 800e9c8:	b289      	uxth	r1, r1
 800e9ca:	f7fb fa25 	bl	8009e18 <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800e9ce:	9500      	str	r5, [sp, #0]
 800e9d0:	2343      	movs	r3, #67	; 0x43
 800e9d2:	4642      	mov	r2, r8
 800e9d4:	68e1      	ldr	r1, [r4, #12]
 800e9d6:	6838      	ldr	r0, [r7, #0]
 800e9d8:	f7fe ff34 	bl	800d844 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f7ff fa77 	bl	800ded0 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800e9e2:	7aa3      	ldrb	r3, [r4, #10]
 800e9e4:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800e9e6:	bf1c      	itt	ne
 800e9e8:	3301      	addne	r3, #1
 800e9ea:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800e9ec:	7aa3      	ldrb	r3, [r4, #10]
 800e9ee:	2b09      	cmp	r3, #9
 800e9f0:	bf96      	itet	ls
 800e9f2:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800e9f6:	f242 7310 	movwhi	r3, #10000	; 0x2710
 800e9fa:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800e9fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800ea02:	bf9c      	itt	ls
 800ea04:	00db      	lslls	r3, r3, #3
 800ea06:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ea08:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ea0c:	fbb3 f3f2 	udiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800ea10:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ea12:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800ea14:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800ea16:	1a9b      	subs	r3, r3, r2
 800ea18:	2b01      	cmp	r3, #1
 800ea1a:	dd96      	ble.n	800e94a <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ea1c:	105b      	asrs	r3, r3, #1
 800ea1e:	83e3      	strh	r3, [r4, #30]
 800ea20:	e793      	b.n	800e94a <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800ea22:	8ba2      	ldrh	r2, [r4, #28]
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	d090      	beq.n	800e94a <dhcp_coarse_tmr+0x3e>
 800ea28:	1e51      	subs	r1, r2, #1
 800ea2a:	2a01      	cmp	r2, #1
 800ea2c:	83a1      	strh	r1, [r4, #28]
 800ea2e:	d18c      	bne.n	800e94a <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ea30:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800ea34:	2a01      	cmp	r2, #1
 800ea36:	d001      	beq.n	800ea3c <dhcp_coarse_tmr+0x130>
 800ea38:	2b0a      	cmp	r3, #10
 800ea3a:	d186      	bne.n	800e94a <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 800ea3c:	4628      	mov	r0, r5
 800ea3e:	f7ff fe23 	bl	800e688 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800ea42:	8b63      	ldrh	r3, [r4, #26]
 800ea44:	8c22      	ldrh	r2, [r4, #32]
 800ea46:	1a9b      	subs	r3, r3, r2
 800ea48:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ea4a:	bfc4      	itt	gt
 800ea4c:	105b      	asrgt	r3, r3, #1
 800ea4e:	83a3      	strhgt	r3, [r4, #28]
 800ea50:	e77b      	b.n	800e94a <dhcp_coarse_tmr+0x3e>
 800ea52:	bf00      	nop
 800ea54:	2000bd48 	.word	0x2000bd48
 800ea58:	200082d4 	.word	0x200082d4
 800ea5c:	0801503c 	.word	0x0801503c

0800ea60 <dhcp_fine_tmr>:
{
 800ea60:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 800ea62:	4b1d      	ldr	r3, [pc, #116]	; (800ead8 <dhcp_fine_tmr+0x78>)
        dhcp->request_timeout--;
 800ea64:	2500      	movs	r5, #0
  struct netif *netif = netif_list;
 800ea66:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 800ea68:	b904      	cbnz	r4, 800ea6c <dhcp_fine_tmr+0xc>
}
 800ea6a:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ea6c:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 800ea6e:	b123      	cbz	r3, 800ea7a <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 800ea70:	8ada      	ldrh	r2, [r3, #22]
 800ea72:	2a01      	cmp	r2, #1
 800ea74:	d903      	bls.n	800ea7e <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 800ea76:	3a01      	subs	r2, #1
 800ea78:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 800ea7a:	6824      	ldr	r4, [r4, #0]
 800ea7c:	e7f4      	b.n	800ea68 <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 800ea7e:	d1fc      	bne.n	800ea7a <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ea80:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 800ea82:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ea84:	2a0c      	cmp	r2, #12
 800ea86:	d001      	beq.n	800ea8c <dhcp_fine_tmr+0x2c>
 800ea88:	2a06      	cmp	r2, #6
 800ea8a:	d103      	bne.n	800ea94 <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 800ea8c:	4620      	mov	r0, r4
      dhcp_discover(netif);
 800ea8e:	f7ff fa4f 	bl	800df30 <dhcp_discover>
 800ea92:	e7f2      	b.n	800ea7a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ea94:	2a01      	cmp	r2, #1
 800ea96:	d109      	bne.n	800eaac <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 800ea98:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 800ea9a:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 800ea9c:	2b05      	cmp	r3, #5
 800ea9e:	d802      	bhi.n	800eaa6 <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 800eaa0:	f7ff faa6 	bl	800dff0 <dhcp_select>
 800eaa4:	e7e9      	b.n	800ea7a <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 800eaa6:	f7ff fee1 	bl	800e86c <dhcp_release>
 800eaaa:	e7ef      	b.n	800ea8c <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800eaac:	2a08      	cmp	r2, #8
 800eaae:	d109      	bne.n	800eac4 <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 800eab0:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 800eab2:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d802      	bhi.n	800eabe <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 800eab8:	f7ff f8c0 	bl	800dc3c <dhcp_check>
 800eabc:	e7dd      	b.n	800ea7a <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 800eabe:	f7ff f8d3 	bl	800dc68 <dhcp_bind>
 800eac2:	e7da      	b.n	800ea7a <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800eac4:	2a03      	cmp	r2, #3
 800eac6:	d1d8      	bne.n	800ea7a <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 800eac8:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 800eaca:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d8de      	bhi.n	800ea8e <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 800ead0:	f7ff fb04 	bl	800e0dc <dhcp_reboot>
 800ead4:	e7d1      	b.n	800ea7a <dhcp_fine_tmr+0x1a>
 800ead6:	bf00      	nop
 800ead8:	2000bd48 	.word	0x2000bd48

0800eadc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800eadc:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800eade:	2618      	movs	r6, #24
 800eae0:	4d07      	ldr	r5, [pc, #28]	; (800eb00 <etharp_free_entry+0x24>)
{
 800eae2:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 800eae4:	4346      	muls	r6, r0
 800eae6:	59a8      	ldr	r0, [r5, r6]
 800eae8:	b118      	cbz	r0, 800eaf2 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800eaea:	f7fb f85b 	bl	8009ba4 <pbuf_free>
    arp_table[i].q = NULL;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800eaf2:	2018      	movs	r0, #24
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	fb00 5404 	mla	r4, r0, r4, r5
 800eafa:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	bf00      	nop
 800eb00:	200082e0 	.word	0x200082e0

0800eb04 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800eb04:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb08:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800eb0c:	4688      	mov	r8, r1
 800eb0e:	4691      	mov	r9, r2
 800eb10:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eb12:	4607      	mov	r7, r0
 800eb14:	b930      	cbnz	r0, 800eb24 <etharp_raw+0x20>
 800eb16:	4b2d      	ldr	r3, [pc, #180]	; (800ebcc <etharp_raw+0xc8>)
 800eb18:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800eb1c:	492c      	ldr	r1, [pc, #176]	; (800ebd0 <etharp_raw+0xcc>)
 800eb1e:	482d      	ldr	r0, [pc, #180]	; (800ebd4 <etharp_raw+0xd0>)
 800eb20:	f002 fd88 	bl	8011634 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800eb24:	2200      	movs	r2, #0
 800eb26:	211c      	movs	r1, #28
 800eb28:	2002      	movs	r0, #2
 800eb2a:	f7fb f8a5 	bl	8009c78 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800eb2e:	4605      	mov	r5, r0
 800eb30:	2800      	cmp	r0, #0
 800eb32:	d047      	beq.n	800ebc4 <etharp_raw+0xc0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800eb34:	8943      	ldrh	r3, [r0, #10]
 800eb36:	2b1b      	cmp	r3, #27
 800eb38:	d806      	bhi.n	800eb48 <etharp_raw+0x44>
 800eb3a:	4b24      	ldr	r3, [pc, #144]	; (800ebcc <etharp_raw+0xc8>)
 800eb3c:	f240 4263 	movw	r2, #1123	; 0x463
 800eb40:	4925      	ldr	r1, [pc, #148]	; (800ebd8 <etharp_raw+0xd4>)
 800eb42:	4824      	ldr	r0, [pc, #144]	; (800ebd4 <etharp_raw+0xd0>)
 800eb44:	f002 fd76 	bl	8011634 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800eb48:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800eb4a:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800eb4e:	f7fa fbf3 	bl	8009338 <lwip_htons>
 800eb52:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800eb54:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb58:	2b06      	cmp	r3, #6
 800eb5a:	d006      	beq.n	800eb6a <etharp_raw+0x66>
 800eb5c:	4b1b      	ldr	r3, [pc, #108]	; (800ebcc <etharp_raw+0xc8>)
 800eb5e:	f240 426a 	movw	r2, #1130	; 0x46a
 800eb62:	491e      	ldr	r1, [pc, #120]	; (800ebdc <etharp_raw+0xd8>)
 800eb64:	481b      	ldr	r0, [pc, #108]	; (800ebd4 <etharp_raw+0xd0>)
 800eb66:	f002 fd65 	bl	8011634 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800eb6a:	6833      	ldr	r3, [r6, #0]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800eb6c:	4642      	mov	r2, r8
 800eb6e:	4629      	mov	r1, r5
 800eb70:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800eb72:	60a3      	str	r3, [r4, #8]
 800eb74:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800eb76:	2600      	movs	r6, #0
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800eb78:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800eb7a:	f8da 3000 	ldr.w	r3, [sl]
 800eb7e:	f8c4 3012 	str.w	r3, [r4, #18]
 800eb82:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800eb86:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800eb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800eb90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb92:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800eb94:	7026      	strb	r6, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800eb96:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800eb98:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800eb9a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800eb9c:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800eb9e:	2308      	movs	r3, #8
 800eba0:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 800eba2:	2306      	movs	r3, #6
 800eba4:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800eba6:	2304      	movs	r3, #4
 800eba8:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800ebaa:	f640 0306 	movw	r3, #2054	; 0x806
 800ebae:	9300      	str	r3, [sp, #0]
 800ebb0:	464b      	mov	r3, r9
 800ebb2:	f001 f999 	bl	800fee8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f7fa fff4 	bl	8009ba4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800ebbc:	4630      	mov	r0, r6
}
 800ebbe:	b002      	add	sp, #8
 800ebc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800ebc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebc8:	e7f9      	b.n	800ebbe <etharp_raw+0xba>
 800ebca:	bf00      	nop
 800ebcc:	08014d8b 	.word	0x08014d8b
 800ebd0:	08014b2a 	.word	0x08014b2a
 800ebd4:	08012feb 	.word	0x08012feb
 800ebd8:	08014dc2 	.word	0x08014dc2
 800ebdc:	08014df3 	.word	0x08014df3

0800ebe0 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800ebe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	4a3c      	ldr	r2, [pc, #240]	; (800ecdc <etharp_find_entry.isra.0+0xfc>)
  s8_t old_queue = ARP_TABLE_SIZE;
 800ebea:	200a      	movs	r0, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800ebec:	9101      	str	r1, [sp, #4]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ebee:	469a      	mov	sl, r3
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800ebf0:	4601      	mov	r1, r0
 800ebf2:	4686      	mov	lr, r0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800ebf4:	4699      	mov	r9, r3
 800ebf6:	4698      	mov	r8, r3
  s8_t empty = ARP_TABLE_SIZE;
 800ebf8:	4684      	mov	ip, r0
 800ebfa:	4615      	mov	r5, r2
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ebfc:	f1bc 0f0a 	cmp.w	ip, #10
    u8_t state = arp_table[i].state;
 800ec00:	f892 b014 	ldrb.w	fp, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800ec04:	d129      	bne.n	800ec5a <etharp_find_entry.isra.0+0x7a>
 800ec06:	f1bb 0f00 	cmp.w	fp, #0
 800ec0a:	d129      	bne.n	800ec60 <etharp_find_entry.isra.0+0x80>
      empty = i;
 800ec0c:	fa4f fc83 	sxtb.w	ip, r3
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec10:	3301      	adds	r3, #1
 800ec12:	3218      	adds	r2, #24
 800ec14:	2b0a      	cmp	r3, #10
 800ec16:	d1f1      	bne.n	800ebfc <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800ec18:	9b01      	ldr	r3, [sp, #4]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d15b      	bne.n	800ecd6 <etharp_find_entry.isra.0+0xf6>
 800ec1e:	f1bc 0f0a 	cmp.w	ip, #10
 800ec22:	d03c      	beq.n	800ec9e <etharp_find_entry.isra.0+0xbe>
    i = empty;
 800ec24:	fa5f f68c 	uxtb.w	r6, ip
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ec28:	2318      	movs	r3, #24
 800ec2a:	fb03 5306 	mla	r3, r3, r6, r5
 800ec2e:	7d1b      	ldrb	r3, [r3, #20]
 800ec30:	b133      	cbz	r3, 800ec40 <etharp_find_entry.isra.0+0x60>
 800ec32:	4b2b      	ldr	r3, [pc, #172]	; (800ece0 <etharp_find_entry.isra.0+0x100>)
 800ec34:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800ec38:	492a      	ldr	r1, [pc, #168]	; (800ece4 <etharp_find_entry.isra.0+0x104>)
 800ec3a:	482b      	ldr	r0, [pc, #172]	; (800ece8 <etharp_find_entry.isra.0+0x108>)
 800ec3c:	f002 fcfa 	bl	8011634 <iprintf>
  if (ipaddr != NULL) {
 800ec40:	b124      	cbz	r4, 800ec4c <etharp_find_entry.isra.0+0x6c>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ec42:	2318      	movs	r3, #24
 800ec44:	6822      	ldr	r2, [r4, #0]
 800ec46:	fb03 5306 	mla	r3, r3, r6, r5
 800ec4a:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 800ec4c:	2318      	movs	r3, #24
  return (err_t)i;
 800ec4e:	b270      	sxtb	r0, r6
  arp_table[i].ctime = 0;
 800ec50:	fb03 5506 	mla	r5, r3, r6, r5
 800ec54:	2300      	movs	r3, #0
 800ec56:	826b      	strh	r3, [r5, #18]
  return (err_t)i;
 800ec58:	e008      	b.n	800ec6c <etharp_find_entry.isra.0+0x8c>
    } else if (state != ETHARP_STATE_EMPTY) {
 800ec5a:	f1bb 0f00 	cmp.w	fp, #0
 800ec5e:	d0d7      	beq.n	800ec10 <etharp_find_entry.isra.0+0x30>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800ec60:	b13c      	cbz	r4, 800ec72 <etharp_find_entry.isra.0+0x92>
 800ec62:	6827      	ldr	r7, [r4, #0]
 800ec64:	6856      	ldr	r6, [r2, #4]
 800ec66:	42b7      	cmp	r7, r6
 800ec68:	d103      	bne.n	800ec72 <etharp_find_entry.isra.0+0x92>
        return i;
 800ec6a:	b258      	sxtb	r0, r3
}
 800ec6c:	b003      	add	sp, #12
 800ec6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (state == ETHARP_STATE_PENDING) {
 800ec72:	f1bb 0f01 	cmp.w	fp, #1
 800ec76:	8a57      	ldrh	r7, [r2, #18]
 800ec78:	d10c      	bne.n	800ec94 <etharp_find_entry.isra.0+0xb4>
        if (arp_table[i].q != NULL) {
 800ec7a:	6816      	ldr	r6, [r2, #0]
 800ec7c:	b126      	cbz	r6, 800ec88 <etharp_find_entry.isra.0+0xa8>
          if (arp_table[i].ctime >= age_queue) {
 800ec7e:	4547      	cmp	r7, r8
 800ec80:	d3c6      	bcc.n	800ec10 <etharp_find_entry.isra.0+0x30>
            old_queue = i;
 800ec82:	b258      	sxtb	r0, r3
 800ec84:	46b8      	mov	r8, r7
 800ec86:	e7c3      	b.n	800ec10 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_pending) {
 800ec88:	454f      	cmp	r7, r9
 800ec8a:	d3c1      	bcc.n	800ec10 <etharp_find_entry.isra.0+0x30>
            old_pending = i;
 800ec8c:	fa4f fe83 	sxtb.w	lr, r3
 800ec90:	46b9      	mov	r9, r7
 800ec92:	e7bd      	b.n	800ec10 <etharp_find_entry.isra.0+0x30>
          if (arp_table[i].ctime >= age_stable) {
 800ec94:	4557      	cmp	r7, sl
            old_stable = i;
 800ec96:	bf24      	itt	cs
 800ec98:	b259      	sxtbcs	r1, r3
 800ec9a:	46ba      	movcs	sl, r7
 800ec9c:	e7b8      	b.n	800ec10 <etharp_find_entry.isra.0+0x30>
    if (old_stable < ARP_TABLE_SIZE) {
 800ec9e:	290a      	cmp	r1, #10
 800eca0:	d00f      	beq.n	800ecc2 <etharp_find_entry.isra.0+0xe2>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800eca2:	2318      	movs	r3, #24
      i = old_stable;
 800eca4:	b2ce      	uxtb	r6, r1
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800eca6:	4359      	muls	r1, r3
 800eca8:	586b      	ldr	r3, [r5, r1]
 800ecaa:	b133      	cbz	r3, 800ecba <etharp_find_entry.isra.0+0xda>
 800ecac:	4b0c      	ldr	r3, [pc, #48]	; (800ece0 <etharp_find_entry.isra.0+0x100>)
 800ecae:	f240 126f 	movw	r2, #367	; 0x16f
 800ecb2:	490e      	ldr	r1, [pc, #56]	; (800ecec <etharp_find_entry.isra.0+0x10c>)
 800ecb4:	480c      	ldr	r0, [pc, #48]	; (800ece8 <etharp_find_entry.isra.0+0x108>)
 800ecb6:	f002 fcbd 	bl	8011634 <iprintf>
    etharp_free_entry(i);
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7ff ff0e 	bl	800eadc <etharp_free_entry>
 800ecc0:	e7b2      	b.n	800ec28 <etharp_find_entry.isra.0+0x48>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ecc2:	f1be 0f0a 	cmp.w	lr, #10
 800ecc6:	d002      	beq.n	800ecce <etharp_find_entry.isra.0+0xee>
      i = old_pending;
 800ecc8:	fa5f f68e 	uxtb.w	r6, lr
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
 800eccc:	e7f5      	b.n	800ecba <etharp_find_entry.isra.0+0xda>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ecce:	280a      	cmp	r0, #10
 800ecd0:	d001      	beq.n	800ecd6 <etharp_find_entry.isra.0+0xf6>
      i = old_queue;
 800ecd2:	b2c6      	uxtb	r6, r0
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
 800ecd4:	e7f1      	b.n	800ecba <etharp_find_entry.isra.0+0xda>
    return (s8_t)ERR_MEM;
 800ecd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ecda:	e7c7      	b.n	800ec6c <etharp_find_entry.isra.0+0x8c>
 800ecdc:	200082e0 	.word	0x200082e0
 800ece0:	08014d8b 	.word	0x08014d8b
 800ece4:	08014e4b 	.word	0x08014e4b
 800ece8:	08012feb 	.word	0x08012feb
 800ecec:	08014e34 	.word	0x08014e34

0800ecf0 <etharp_cleanup_netif>:
{
 800ecf0:	b570      	push	{r4, r5, r6, lr}
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	4d07      	ldr	r5, [pc, #28]	; (800ed14 <etharp_cleanup_netif+0x24>)
 800ecf6:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ecf8:	7d2b      	ldrb	r3, [r5, #20]
 800ecfa:	b12b      	cbz	r3, 800ed08 <etharp_cleanup_netif+0x18>
 800ecfc:	68ab      	ldr	r3, [r5, #8]
 800ecfe:	42b3      	cmp	r3, r6
 800ed00:	d102      	bne.n	800ed08 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800ed02:	4620      	mov	r0, r4
 800ed04:	f7ff feea 	bl	800eadc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ed08:	3401      	adds	r4, #1
 800ed0a:	3518      	adds	r5, #24
 800ed0c:	2c0a      	cmp	r4, #10
 800ed0e:	d1f3      	bne.n	800ecf8 <etharp_cleanup_netif+0x8>
}
 800ed10:	bd70      	pop	{r4, r5, r6, pc}
 800ed12:	bf00      	nop
 800ed14:	200082e0 	.word	0x200082e0

0800ed18 <etharp_input>:
{
 800ed18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed1c:	4607      	mov	r7, r0
 800ed1e:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ed20:	460c      	mov	r4, r1
 800ed22:	b949      	cbnz	r1, 800ed38 <etharp_input+0x20>
 800ed24:	4b4b      	ldr	r3, [pc, #300]	; (800ee54 <etharp_input+0x13c>)
 800ed26:	f44f 7222 	mov.w	r2, #648	; 0x288
 800ed2a:	494b      	ldr	r1, [pc, #300]	; (800ee58 <etharp_input+0x140>)
 800ed2c:	484b      	ldr	r0, [pc, #300]	; (800ee5c <etharp_input+0x144>)
 800ed2e:	f002 fc81 	bl	8011634 <iprintf>
}
 800ed32:	b008      	add	sp, #32
 800ed34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 800ed38:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800ed3a:	882b      	ldrh	r3, [r5, #0]
 800ed3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed40:	d108      	bne.n	800ed54 <etharp_input+0x3c>
 800ed42:	792b      	ldrb	r3, [r5, #4]
 800ed44:	2b06      	cmp	r3, #6
 800ed46:	d105      	bne.n	800ed54 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ed48:	796b      	ldrb	r3, [r5, #5]
 800ed4a:	2b04      	cmp	r3, #4
 800ed4c:	d102      	bne.n	800ed54 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ed4e:	886b      	ldrh	r3, [r5, #2]
 800ed50:	2b08      	cmp	r3, #8
 800ed52:	d003      	beq.n	800ed5c <etharp_input+0x44>
  pbuf_free(p);
 800ed54:	4638      	mov	r0, r7
 800ed56:	f7fa ff25 	bl	8009ba4 <pbuf_free>
 800ed5a:	e7ea      	b.n	800ed32 <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800ed5c:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800ed60:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed64:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800ed66:	9307      	str	r3, [sp, #28]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800ed68:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ed6a:	2e00      	cmp	r6, #0
 800ed6c:	d05d      	beq.n	800ee2a <etharp_input+0x112>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ed6e:	1af3      	subs	r3, r6, r3
 800ed70:	425e      	negs	r6, r3
 800ed72:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ed74:	f1c6 0a02 	rsb	sl, r6, #2
 800ed78:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ed7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ed80:	2b06      	cmp	r3, #6
 800ed82:	d006      	beq.n	800ed92 <etharp_input+0x7a>
 800ed84:	4b33      	ldr	r3, [pc, #204]	; (800ee54 <etharp_input+0x13c>)
 800ed86:	f240 12ab 	movw	r2, #427	; 0x1ab
 800ed8a:	4935      	ldr	r1, [pc, #212]	; (800ee60 <etharp_input+0x148>)
 800ed8c:	4833      	ldr	r0, [pc, #204]	; (800ee5c <etharp_input+0x144>)
 800ed8e:	f002 fc51 	bl	8011634 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800ed92:	9807      	ldr	r0, [sp, #28]
 800ed94:	2800      	cmp	r0, #0
 800ed96:	d03c      	beq.n	800ee12 <etharp_input+0xfa>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ed98:	4621      	mov	r1, r4
 800ed9a:	f000 fc98 	bl	800f6ce <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800ed9e:	4681      	mov	r9, r0
 800eda0:	bbb8      	cbnz	r0, 800ee12 <etharp_input+0xfa>
      ip4_addr_ismulticast(ipaddr)) {
 800eda2:	9b07      	ldr	r3, [sp, #28]
 800eda4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eda8:	2be0      	cmp	r3, #224	; 0xe0
 800edaa:	d032      	beq.n	800ee12 <etharp_input+0xfa>
  i = etharp_find_entry(ipaddr, flags, netif);
 800edac:	4651      	mov	r1, sl
 800edae:	a807      	add	r0, sp, #28
 800edb0:	f7ff ff16 	bl	800ebe0 <etharp_find_entry.isra.0>
  if (i < 0) {
 800edb4:	2800      	cmp	r0, #0
 800edb6:	db2c      	blt.n	800ee12 <etharp_input+0xfa>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800edb8:	2218      	movs	r2, #24
 800edba:	4b2a      	ldr	r3, [pc, #168]	; (800ee64 <etharp_input+0x14c>)
 800edbc:	f04f 0e02 	mov.w	lr, #2
 800edc0:	fb02 fc00 	mul.w	ip, r2, r0
 800edc4:	eb03 010c 	add.w	r1, r3, ip
 800edc8:	f881 e014 	strb.w	lr, [r1, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800edcc:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 800edd0:	608c      	str	r4, [r1, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800edd2:	fb12 e200 	smlabb	r2, r2, r0, lr
 800edd6:	f8d8 0000 	ldr.w	r0, [r8]
 800edda:	eb03 0e02 	add.w	lr, r3, r2
 800edde:	5098      	str	r0, [r3, r2]
 800ede0:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 800ede4:	f8ae 2004 	strh.w	r2, [lr, #4]
  arp_table[i].ctime = 0;
 800ede8:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 800edec:	f853 100c 	ldr.w	r1, [r3, ip]
 800edf0:	b179      	cbz	r1, 800ee12 <etharp_input+0xfa>
    arp_table[i].q = NULL;
 800edf2:	f843 900c 	str.w	r9, [r3, ip]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800edf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800edfa:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800edfe:	4620      	mov	r0, r4
 800ee00:	9300      	str	r3, [sp, #0]
 800ee02:	4643      	mov	r3, r8
 800ee04:	9105      	str	r1, [sp, #20]
 800ee06:	f001 f86f 	bl	800fee8 <ethernet_output>
    pbuf_free(p);
 800ee0a:	9905      	ldr	r1, [sp, #20]
 800ee0c:	4608      	mov	r0, r1
 800ee0e:	f7fa fec9 	bl	8009ba4 <pbuf_free>
  switch (hdr->opcode) {
 800ee12:	88eb      	ldrh	r3, [r5, #6]
 800ee14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee18:	d00a      	beq.n	800ee30 <etharp_input+0x118>
 800ee1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee1e:	d199      	bne.n	800ed54 <etharp_input+0x3c>
    dhcp_arp_reply(netif, &sipaddr);
 800ee20:	a907      	add	r1, sp, #28
 800ee22:	4620      	mov	r0, r4
 800ee24:	f7ff fbd8 	bl	800e5d8 <dhcp_arp_reply>
    break;
 800ee28:	e794      	b.n	800ed54 <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ee2a:	f04f 0a02 	mov.w	sl, #2
 800ee2e:	e7a5      	b.n	800ed7c <etharp_input+0x64>
    if (for_us) {
 800ee30:	2e00      	cmp	r6, #0
 800ee32:	d08f      	beq.n	800ed54 <etharp_input+0x3c>
      etharp_raw(netif,
 800ee34:	2202      	movs	r2, #2
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ee36:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	9203      	str	r2, [sp, #12]
 800ee3e:	aa07      	add	r2, sp, #28
 800ee40:	4619      	mov	r1, r3
 800ee42:	e9cd 8201 	strd	r8, r2, [sp, #4]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ee46:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800ee48:	9200      	str	r2, [sp, #0]
 800ee4a:	4642      	mov	r2, r8
 800ee4c:	f7ff fe5a 	bl	800eb04 <etharp_raw>
 800ee50:	e780      	b.n	800ed54 <etharp_input+0x3c>
 800ee52:	bf00      	nop
 800ee54:	08014d8b 	.word	0x08014d8b
 800ee58:	08014b2a 	.word	0x08014b2a
 800ee5c:	08012feb 	.word	0x08012feb
 800ee60:	08014e93 	.word	0x08014e93
 800ee64:	200082e0 	.word	0x200082e0

0800ee68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ee68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee6a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ee6c:	2401      	movs	r4, #1
 800ee6e:	f100 0329 	add.w	r3, r0, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ee72:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ee74:	e9cd 1402 	strd	r1, r4, [sp, #8]
 800ee78:	4904      	ldr	r1, [pc, #16]	; (800ee8c <etharp_request+0x24>)
 800ee7a:	9200      	str	r2, [sp, #0]
 800ee7c:	9101      	str	r1, [sp, #4]
 800ee7e:	4619      	mov	r1, r3
 800ee80:	4a03      	ldr	r2, [pc, #12]	; (800ee90 <etharp_request+0x28>)
 800ee82:	f7ff fe3f 	bl	800eb04 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800ee86:	b004      	add	sp, #16
 800ee88:	bd10      	pop	{r4, pc}
 800ee8a:	bf00      	nop
 800ee8c:	08015245 	.word	0x08015245
 800ee90:	0801523f 	.word	0x0801523f

0800ee94 <etharp_tmr>:
{
 800ee94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee96:	4c13      	ldr	r4, [pc, #76]	; (800eee4 <etharp_tmr+0x50>)
 800ee98:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ee9a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ee9c:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800ee9e:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 800eea0:	b16a      	cbz	r2, 800eebe <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 800eea2:	8a63      	ldrh	r3, [r4, #18]
 800eea4:	3301      	adds	r3, #1
 800eea6:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eea8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800eeac:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800eeae:	d203      	bcs.n	800eeb8 <etharp_tmr+0x24>
 800eeb0:	2a01      	cmp	r2, #1
 800eeb2:	d109      	bne.n	800eec8 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800eeb4:	2b04      	cmp	r3, #4
 800eeb6:	d90f      	bls.n	800eed8 <etharp_tmr+0x44>
        etharp_free_entry(i);
 800eeb8:	4628      	mov	r0, r5
 800eeba:	f7ff fe0f 	bl	800eadc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800eebe:	3501      	adds	r5, #1
 800eec0:	3418      	adds	r4, #24
 800eec2:	2d0a      	cmp	r5, #10
 800eec4:	d1eb      	bne.n	800ee9e <etharp_tmr+0xa>
}
 800eec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800eec8:	2a03      	cmp	r2, #3
 800eeca:	d101      	bne.n	800eed0 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800eecc:	7527      	strb	r7, [r4, #20]
 800eece:	e7f6      	b.n	800eebe <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800eed0:	2a04      	cmp	r2, #4
 800eed2:	d1f4      	bne.n	800eebe <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800eed4:	7526      	strb	r6, [r4, #20]
 800eed6:	e7f2      	b.n	800eebe <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800eed8:	1d21      	adds	r1, r4, #4
 800eeda:	68a0      	ldr	r0, [r4, #8]
 800eedc:	f7ff ffc4 	bl	800ee68 <etharp_request>
 800eee0:	e7ed      	b.n	800eebe <etharp_tmr+0x2a>
 800eee2:	bf00      	nop
 800eee4:	200082e0 	.word	0x200082e0

0800eee8 <etharp_output_to_arp_index>:
{
 800eee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800eeec:	4d24      	ldr	r5, [pc, #144]	; (800ef80 <etharp_output_to_arp_index+0x98>)
 800eeee:	2318      	movs	r3, #24
{
 800eef0:	4607      	mov	r7, r0
 800eef2:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800eef4:	fb03 5302 	mla	r3, r3, r2, r5
{
 800eef8:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d806      	bhi.n	800ef0e <etharp_output_to_arp_index+0x26>
 800ef00:	4b20      	ldr	r3, [pc, #128]	; (800ef84 <etharp_output_to_arp_index+0x9c>)
 800ef02:	f44f 723b 	mov.w	r2, #748	; 0x2ec
 800ef06:	4920      	ldr	r1, [pc, #128]	; (800ef88 <etharp_output_to_arp_index+0xa0>)
 800ef08:	4820      	ldr	r0, [pc, #128]	; (800ef8c <etharp_output_to_arp_index+0xa4>)
 800ef0a:	f002 fb93 	bl	8011634 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800ef0e:	2218      	movs	r2, #24
 800ef10:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 800ef14:	f107 0929 	add.w	r9, r7, #41	; 0x29
 800ef18:	fb02 5404 	mla	r4, r2, r4, r5
 800ef1c:	00f6      	lsls	r6, r6, #3
 800ef1e:	7d23      	ldrb	r3, [r4, #20]
 800ef20:	f106 0a0c 	add.w	sl, r6, #12
 800ef24:	2b02      	cmp	r3, #2
 800ef26:	44aa      	add	sl, r5
 800ef28:	d10b      	bne.n	800ef42 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800ef2a:	8a63      	ldrh	r3, [r4, #18]
 800ef2c:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800ef30:	d913      	bls.n	800ef5a <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800ef32:	3604      	adds	r6, #4
 800ef34:	4638      	mov	r0, r7
 800ef36:	19a9      	adds	r1, r5, r6
 800ef38:	f7ff ff96 	bl	800ee68 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ef3c:	b908      	cbnz	r0, 800ef42 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ef3e:	2303      	movs	r3, #3
 800ef40:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ef42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef46:	464a      	mov	r2, r9
 800ef48:	4641      	mov	r1, r8
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	9300      	str	r3, [sp, #0]
 800ef4e:	4653      	mov	r3, sl
 800ef50:	f000 ffca 	bl	800fee8 <ethernet_output>
}
 800ef54:	b004      	add	sp, #16
 800ef56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ef5a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ef5e:	d3f0      	bcc.n	800ef42 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ef60:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ef62:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ef64:	4652      	mov	r2, sl
 800ef66:	4649      	mov	r1, r9
 800ef68:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ef6a:	442e      	add	r6, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ef6c:	4b08      	ldr	r3, [pc, #32]	; (800ef90 <etharp_output_to_arp_index+0xa8>)
 800ef6e:	4638      	mov	r0, r7
 800ef70:	9602      	str	r6, [sp, #8]
 800ef72:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ef74:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ef76:	9300      	str	r3, [sp, #0]
 800ef78:	464b      	mov	r3, r9
 800ef7a:	f7ff fdc3 	bl	800eb04 <etharp_raw>
 800ef7e:	e7dd      	b.n	800ef3c <etharp_output_to_arp_index+0x54>
 800ef80:	200082e0 	.word	0x200082e0
 800ef84:	08014d8b 	.word	0x08014d8b
 800ef88:	08014eb7 	.word	0x08014eb7
 800ef8c:	08012feb 	.word	0x08012feb
 800ef90:	08015245 	.word	0x08015245

0800ef94 <etharp_query>:
{
 800ef94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ef98:	4688      	mov	r8, r1
 800ef9a:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ef9c:	4601      	mov	r1, r0
{
 800ef9e:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800efa0:	f8d8 0000 	ldr.w	r0, [r8]
 800efa4:	f000 fb93 	bl	800f6ce <ip4_addr_isbroadcast_u32>
 800efa8:	2800      	cmp	r0, #0
 800efaa:	d14c      	bne.n	800f046 <etharp_query+0xb2>
      ip4_addr_ismulticast(ipaddr) ||
 800efac:	f8d8 3000 	ldr.w	r3, [r8]
 800efb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800efb4:	2ae0      	cmp	r2, #224	; 0xe0
 800efb6:	d046      	beq.n	800f046 <etharp_query+0xb2>
      ip4_addr_isany(ipaddr)) {
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d044      	beq.n	800f046 <etharp_query+0xb2>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800efbc:	2101      	movs	r1, #1
 800efbe:	4640      	mov	r0, r8
 800efc0:	f7ff fe0e 	bl	800ebe0 <etharp_find_entry.isra.0>
  if (i < 0) {
 800efc4:	1e04      	subs	r4, r0, #0
 800efc6:	db41      	blt.n	800f04c <etharp_query+0xb8>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800efc8:	4f37      	ldr	r7, [pc, #220]	; (800f0a8 <etharp_query+0x114>)
 800efca:	2318      	movs	r3, #24
 800efcc:	fb03 7304 	mla	r3, r3, r4, r7
 800efd0:	7d1a      	ldrb	r2, [r3, #20]
 800efd2:	2a00      	cmp	r2, #0
 800efd4:	d14e      	bne.n	800f074 <etharp_query+0xe0>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800efd6:	2201      	movs	r2, #1
    arp_table[i].netif = netif;
 800efd8:	609e      	str	r6, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800efda:	751a      	strb	r2, [r3, #20]
    result = etharp_request(netif, ipaddr);
 800efdc:	4641      	mov	r1, r8
 800efde:	4630      	mov	r0, r6
 800efe0:	f7ff ff42 	bl	800ee68 <etharp_request>
    if (q == NULL) {
 800efe4:	2d00      	cmp	r5, #0
 800efe6:	d149      	bne.n	800f07c <etharp_query+0xe8>
}
 800efe8:	b002      	add	sp, #8
 800efea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800efee:	d1fb      	bne.n	800efe8 <etharp_query+0x54>
 800eff0:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800eff2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800f0b0 <etharp_query+0x11c>
 800eff6:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 800f0b4 <etharp_query+0x120>
 800effa:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800f0b8 <etharp_query+0x124>
 800effe:	8972      	ldrh	r2, [r6, #10]
 800f000:	8933      	ldrh	r3, [r6, #8]
 800f002:	429a      	cmp	r2, r3
 800f004:	d108      	bne.n	800f018 <etharp_query+0x84>
 800f006:	6833      	ldr	r3, [r6, #0]
 800f008:	b133      	cbz	r3, 800f018 <etharp_query+0x84>
 800f00a:	4643      	mov	r3, r8
 800f00c:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800f010:	4649      	mov	r1, r9
 800f012:	4650      	mov	r0, sl
 800f014:	f002 fb0e 	bl	8011634 <iprintf>
      if (p->type != PBUF_ROM) {
 800f018:	7b33      	ldrb	r3, [r6, #12]
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	d118      	bne.n	800f050 <etharp_query+0xbc>
      p = p->next;
 800f01e:	6836      	ldr	r6, [r6, #0]
    while (p) {
 800f020:	2e00      	cmp	r6, #0
 800f022:	d1ec      	bne.n	800effe <etharp_query+0x6a>
      pbuf_ref(p);
 800f024:	462e      	mov	r6, r5
 800f026:	4628      	mov	r0, r5
 800f028:	f7fa ff6e 	bl	8009f08 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 800f02c:	2318      	movs	r3, #24
 800f02e:	fb03 f204 	mul.w	r2, r3, r4
 800f032:	461d      	mov	r5, r3
 800f034:	58b8      	ldr	r0, [r7, r2]
 800f036:	b108      	cbz	r0, 800f03c <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 800f038:	f7fa fdb4 	bl	8009ba4 <pbuf_free>
      arp_table[i].q = p;
 800f03c:	fb05 f304 	mul.w	r3, r5, r4
      result = ERR_OK;
 800f040:	2000      	movs	r0, #0
      arp_table[i].q = p;
 800f042:	50fe      	str	r6, [r7, r3]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
 800f044:	e7d0      	b.n	800efe8 <etharp_query+0x54>
    return ERR_ARG;
 800f046:	f06f 000f 	mvn.w	r0, #15
 800f04a:	e7cd      	b.n	800efe8 <etharp_query+0x54>
 800f04c:	4620      	mov	r0, r4
 800f04e:	e7cb      	b.n	800efe8 <etharp_query+0x54>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800f050:	8931      	ldrh	r1, [r6, #8]
 800f052:	2200      	movs	r2, #0
 800f054:	2002      	movs	r0, #2
 800f056:	f7fa fe0f 	bl	8009c78 <pbuf_alloc>
      if (p != NULL) {
 800f05a:	4606      	mov	r6, r0
 800f05c:	b138      	cbz	r0, 800f06e <etharp_query+0xda>
        if (pbuf_copy(p, q) != ERR_OK) {
 800f05e:	4629      	mov	r1, r5
 800f060:	f7fa ffb2 	bl	8009fc8 <pbuf_copy>
 800f064:	2800      	cmp	r0, #0
 800f066:	d0e1      	beq.n	800f02c <etharp_query+0x98>
          pbuf_free(p);
 800f068:	4630      	mov	r0, r6
 800f06a:	f7fa fd9b 	bl	8009ba4 <pbuf_free>
      result = ERR_MEM;
 800f06e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f072:	e7b9      	b.n	800efe8 <etharp_query+0x54>
  if (is_new_entry || (q == NULL)) {
 800f074:	2d00      	cmp	r5, #0
 800f076:	d0b1      	beq.n	800efdc <etharp_query+0x48>
  err_t result = ERR_MEM;
 800f078:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f07c:	2318      	movs	r3, #24
 800f07e:	fb03 7204 	mla	r2, r3, r4, r7
 800f082:	7d12      	ldrb	r2, [r2, #20]
 800f084:	2a01      	cmp	r2, #1
 800f086:	d9b2      	bls.n	800efee <etharp_query+0x5a>
    ETHARP_SET_HINT(netif, i);
 800f088:	4a08      	ldr	r2, [pc, #32]	; (800f0ac <etharp_query+0x118>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f08a:	200c      	movs	r0, #12
 800f08c:	4629      	mov	r1, r5
 800f08e:	fb13 0304 	smlabb	r3, r3, r4, r0
    ETHARP_SET_HINT(netif, i);
 800f092:	7014      	strb	r4, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f098:	4630      	mov	r0, r6
 800f09a:	443b      	add	r3, r7
 800f09c:	9200      	str	r2, [sp, #0]
 800f09e:	f106 0229 	add.w	r2, r6, #41	; 0x29
 800f0a2:	f000 ff21 	bl	800fee8 <ethernet_output>
 800f0a6:	e79f      	b.n	800efe8 <etharp_query+0x54>
 800f0a8:	200082e0 	.word	0x200082e0
 800f0ac:	200083d0 	.word	0x200083d0
 800f0b0:	08014d8b 	.word	0x08014d8b
 800f0b4:	08014ee7 	.word	0x08014ee7
 800f0b8:	08012feb 	.word	0x08012feb

0800f0bc <etharp_output>:
{
 800f0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0be:	460e      	mov	r6, r1
 800f0c0:	b085      	sub	sp, #20
 800f0c2:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f0c4:	4604      	mov	r4, r0
 800f0c6:	b930      	cbnz	r0, 800f0d6 <etharp_output+0x1a>
 800f0c8:	4b3d      	ldr	r3, [pc, #244]	; (800f1c0 <etharp_output+0x104>)
 800f0ca:	f240 321b 	movw	r2, #795	; 0x31b
 800f0ce:	493d      	ldr	r1, [pc, #244]	; (800f1c4 <etharp_output+0x108>)
 800f0d0:	483d      	ldr	r0, [pc, #244]	; (800f1c8 <etharp_output+0x10c>)
 800f0d2:	f002 faaf 	bl	8011634 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800f0d6:	b936      	cbnz	r6, 800f0e6 <etharp_output+0x2a>
 800f0d8:	4b39      	ldr	r3, [pc, #228]	; (800f1c0 <etharp_output+0x104>)
 800f0da:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f0de:	493b      	ldr	r1, [pc, #236]	; (800f1cc <etharp_output+0x110>)
 800f0e0:	4839      	ldr	r0, [pc, #228]	; (800f1c8 <etharp_output+0x10c>)
 800f0e2:	f002 faa7 	bl	8011634 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800f0e6:	b935      	cbnz	r5, 800f0f6 <etharp_output+0x3a>
 800f0e8:	4b35      	ldr	r3, [pc, #212]	; (800f1c0 <etharp_output+0x104>)
 800f0ea:	f240 321d 	movw	r2, #797	; 0x31d
 800f0ee:	4938      	ldr	r1, [pc, #224]	; (800f1d0 <etharp_output+0x114>)
 800f0f0:	4835      	ldr	r0, [pc, #212]	; (800f1c8 <etharp_output+0x10c>)
 800f0f2:	f002 fa9f 	bl	8011634 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800f0f6:	4621      	mov	r1, r4
 800f0f8:	6828      	ldr	r0, [r5, #0]
 800f0fa:	f000 fae8 	bl	800f6ce <ip4_addr_isbroadcast_u32>
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d158      	bne.n	800f1b4 <etharp_output+0xf8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800f102:	682b      	ldr	r3, [r5, #0]
 800f104:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800f108:	2ae0      	cmp	r2, #224	; 0xe0
 800f10a:	d11b      	bne.n	800f144 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800f10c:	2301      	movs	r3, #1
 800f10e:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800f112:	235e      	movs	r3, #94	; 0x5e
 800f114:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800f118:	786b      	ldrb	r3, [r5, #1]
 800f11a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f11e:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800f122:	78ab      	ldrb	r3, [r5, #2]
 800f124:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800f128:	78eb      	ldrb	r3, [r5, #3]
 800f12a:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800f12e:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800f130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f134:	4631      	mov	r1, r6
 800f136:	4620      	mov	r0, r4
 800f138:	9200      	str	r2, [sp, #0]
 800f13a:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800f13e:	f000 fed3 	bl	800fee8 <ethernet_output>
 800f142:	e01f      	b.n	800f184 <etharp_output+0xc8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f144:	6862      	ldr	r2, [r4, #4]
 800f146:	68a1      	ldr	r1, [r4, #8]
 800f148:	405a      	eors	r2, r3
 800f14a:	420a      	tst	r2, r1
 800f14c:	d008      	beq.n	800f160 <etharp_output+0xa4>
        !ip4_addr_islinklocal(ipaddr)) {
 800f14e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800f150:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800f154:	4293      	cmp	r3, r2
 800f156:	d003      	beq.n	800f160 <etharp_output+0xa4>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800f158:	68e3      	ldr	r3, [r4, #12]
 800f15a:	b36b      	cbz	r3, 800f1b8 <etharp_output+0xfc>
            dst_addr = netif_ip4_gw(netif);
 800f15c:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800f160:	4b1c      	ldr	r3, [pc, #112]	; (800f1d4 <etharp_output+0x118>)
 800f162:	2018      	movs	r0, #24
 800f164:	491c      	ldr	r1, [pc, #112]	; (800f1d8 <etharp_output+0x11c>)
 800f166:	781a      	ldrb	r2, [r3, #0]
 800f168:	fb00 1002 	mla	r0, r0, r2, r1
 800f16c:	7d01      	ldrb	r1, [r0, #20]
 800f16e:	2901      	cmp	r1, #1
 800f170:	4619      	mov	r1, r3
 800f172:	d909      	bls.n	800f188 <etharp_output+0xcc>
 800f174:	682f      	ldr	r7, [r5, #0]
 800f176:	6843      	ldr	r3, [r0, #4]
 800f178:	429f      	cmp	r7, r3
 800f17a:	d105      	bne.n	800f188 <etharp_output+0xcc>
        return etharp_output_to_arp_index(netif, q, i);
 800f17c:	4631      	mov	r1, r6
 800f17e:	4620      	mov	r0, r4
 800f180:	f7ff feb2 	bl	800eee8 <etharp_output_to_arp_index>
}
 800f184:	b005      	add	sp, #20
 800f186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f188:	4b13      	ldr	r3, [pc, #76]	; (800f1d8 <etharp_output+0x11c>)
{
 800f18a:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f18c:	7d18      	ldrb	r0, [r3, #20]
 800f18e:	2801      	cmp	r0, #1
 800f190:	d906      	bls.n	800f1a0 <etharp_output+0xe4>
 800f192:	682f      	ldr	r7, [r5, #0]
 800f194:	6858      	ldr	r0, [r3, #4]
 800f196:	4287      	cmp	r7, r0
 800f198:	d102      	bne.n	800f1a0 <etharp_output+0xe4>
        ETHARP_SET_HINT(netif, i);
 800f19a:	b2d2      	uxtb	r2, r2
 800f19c:	700a      	strb	r2, [r1, #0]
 800f19e:	e7ed      	b.n	800f17c <etharp_output+0xc0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f1a0:	3201      	adds	r2, #1
 800f1a2:	3318      	adds	r3, #24
 800f1a4:	2a0a      	cmp	r2, #10
 800f1a6:	d1f1      	bne.n	800f18c <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 800f1a8:	4632      	mov	r2, r6
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	f7ff fef1 	bl	800ef94 <etharp_query>
 800f1b2:	e7e7      	b.n	800f184 <etharp_output+0xc8>
    dest = (const struct eth_addr *)&ethbroadcast;
 800f1b4:	4b09      	ldr	r3, [pc, #36]	; (800f1dc <etharp_output+0x120>)
 800f1b6:	e7bb      	b.n	800f130 <etharp_output+0x74>
            return ERR_RTE;
 800f1b8:	f06f 0003 	mvn.w	r0, #3
 800f1bc:	e7e2      	b.n	800f184 <etharp_output+0xc8>
 800f1be:	bf00      	nop
 800f1c0:	08014d8b 	.word	0x08014d8b
 800f1c4:	08014b2a 	.word	0x08014b2a
 800f1c8:	08012feb 	.word	0x08012feb
 800f1cc:	08013bd2 	.word	0x08013bd2
 800f1d0:	08014e74 	.word	0x08014e74
 800f1d4:	200083d0 	.word	0x200083d0
 800f1d8:	200082e0 	.word	0x200082e0
 800f1dc:	0801523f 	.word	0x0801523f

0800f1e0 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 800f1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1e2:	4604      	mov	r4, r0
 800f1e4:	b087      	sub	sp, #28
 800f1e6:	460f      	mov	r7, r1
 800f1e8:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f1ea:	2124      	movs	r1, #36	; 0x24
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	2001      	movs	r0, #1
 800f1f0:	f7fa fd42 	bl	8009c78 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	b390      	cbz	r0, 800f25e <icmp_send_response.isra.0+0x7e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f1f8:	8943      	ldrh	r3, [r0, #10]
 800f1fa:	2b23      	cmp	r3, #35	; 0x23
 800f1fc:	d806      	bhi.n	800f20c <icmp_send_response.isra.0+0x2c>
 800f1fe:	4b19      	ldr	r3, [pc, #100]	; (800f264 <icmp_send_response.isra.0+0x84>)
 800f200:	f240 1261 	movw	r2, #353	; 0x161
 800f204:	4918      	ldr	r1, [pc, #96]	; (800f268 <icmp_send_response.isra.0+0x88>)
 800f206:	4819      	ldr	r0, [pc, #100]	; (800f26c <icmp_send_response.isra.0+0x8c>)
 800f208:	f002 fa14 	bl	8011634 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f20c:	6820      	ldr	r0, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800f20e:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f210:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f212:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 800f216:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f218:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 800f21c:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800f21e:	71a3      	strb	r3, [r4, #6]
 800f220:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f222:	4603      	mov	r3, r0
  icmphdr->type = type;
 800f224:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 800f226:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f228:	f853 6b04 	ldr.w	r6, [r3], #4
 800f22c:	428b      	cmp	r3, r1
 800f22e:	f842 6b04 	str.w	r6, [r2], #4
 800f232:	d1f9      	bne.n	800f228 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f234:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f236:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 800f238:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 800f23a:	f000 f8bb 	bl	800f3b4 <ip4_route>
#endif
  if (netif != NULL) {
 800f23e:	b158      	cbz	r0, 800f258 <icmp_send_response.isra.0+0x78>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f240:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f242:	2301      	movs	r3, #1
 800f244:	aa05      	add	r2, sp, #20
    icmphdr->chksum = 0;
 800f246:	70a1      	strb	r1, [r4, #2]
 800f248:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f24a:	9002      	str	r0, [sp, #8]
 800f24c:	4628      	mov	r0, r5
 800f24e:	e9cd 1300 	strd	r1, r3, [sp]
 800f252:	23ff      	movs	r3, #255	; 0xff
 800f254:	f000 fa2a 	bl	800f6ac <ip4_output_if>
  }
  pbuf_free(q);
 800f258:	4628      	mov	r0, r5
 800f25a:	f7fa fca3 	bl	8009ba4 <pbuf_free>
}
 800f25e:	b007      	add	sp, #28
 800f260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f262:	bf00      	nop
 800f264:	08014f01 	.word	0x08014f01
 800f268:	08014f36 	.word	0x08014f36
 800f26c:	08012feb 	.word	0x08012feb

0800f270 <icmp_input>:
  iphdr_in = ip4_current_header();
 800f270:	4b45      	ldr	r3, [pc, #276]	; (800f388 <icmp_input+0x118>)
{
 800f272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 800f276:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 800f27a:	b085      	sub	sp, #20
 800f27c:	4604      	mov	r4, r0
 800f27e:	460f      	mov	r7, r1
  hlen = IPH_HL(iphdr_in) * 4;
 800f280:	f899 5000 	ldrb.w	r5, [r9]
 800f284:	4698      	mov	r8, r3
 800f286:	f005 050f 	and.w	r5, r5, #15
 800f28a:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 800f28c:	2d13      	cmp	r5, #19
 800f28e:	d92a      	bls.n	800f2e6 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 800f290:	8942      	ldrh	r2, [r0, #10]
 800f292:	2a03      	cmp	r2, #3
 800f294:	d927      	bls.n	800f2e6 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 800f296:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 800f298:	7812      	ldrb	r2, [r2, #0]
 800f29a:	2a08      	cmp	r2, #8
 800f29c:	d123      	bne.n	800f2e6 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f29e:	6958      	ldr	r0, [r3, #20]
 800f2a0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800f2a4:	2ae0      	cmp	r2, #224	; 0xe0
 800f2a6:	d01e      	beq.n	800f2e6 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f2a8:	6819      	ldr	r1, [r3, #0]
 800f2aa:	f000 fa10 	bl	800f6ce <ip4_addr_isbroadcast_u32>
 800f2ae:	4606      	mov	r6, r0
 800f2b0:	b9c8      	cbnz	r0, 800f2e6 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f2b2:	8923      	ldrh	r3, [r4, #8]
 800f2b4:	2b07      	cmp	r3, #7
 800f2b6:	d916      	bls.n	800f2e6 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800f2b8:	f105 010e 	add.w	r1, r5, #14
 800f2bc:	4620      	mov	r0, r4
 800f2be:	f7fa fc6b 	bl	8009b98 <pbuf_header>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d050      	beq.n	800f368 <icmp_input+0xf8>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800f2c6:	8921      	ldrh	r1, [r4, #8]
 800f2c8:	4632      	mov	r2, r6
 800f2ca:	2002      	movs	r0, #2
 800f2cc:	4429      	add	r1, r5
 800f2ce:	b289      	uxth	r1, r1
 800f2d0:	f7fa fcd2 	bl	8009c78 <pbuf_alloc>
      if (r == NULL) {
 800f2d4:	4606      	mov	r6, r0
 800f2d6:	b130      	cbz	r0, 800f2e6 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f2d8:	8942      	ldrh	r2, [r0, #10]
 800f2da:	f105 0308 	add.w	r3, r5, #8
 800f2de:	429a      	cmp	r2, r3
 800f2e0:	d207      	bcs.n	800f2f2 <icmp_input+0x82>
        pbuf_free(r);
 800f2e2:	f7fa fc5f 	bl	8009ba4 <pbuf_free>
  pbuf_free(p);
 800f2e6:	4620      	mov	r0, r4
}
 800f2e8:	b005      	add	sp, #20
 800f2ea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 800f2ee:	f7fa bc59 	b.w	8009ba4 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 800f2f2:	4649      	mov	r1, r9
 800f2f4:	462a      	mov	r2, r5
 800f2f6:	6840      	ldr	r0, [r0, #4]
 800f2f8:	f002 f8dc 	bl	80114b4 <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 800f2fc:	4269      	negs	r1, r5
 800f2fe:	4630      	mov	r0, r6
 800f300:	f7fa fc4a 	bl	8009b98 <pbuf_header>
 800f304:	b138      	cbz	r0, 800f316 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f306:	4b21      	ldr	r3, [pc, #132]	; (800f38c <icmp_input+0x11c>)
 800f308:	22af      	movs	r2, #175	; 0xaf
 800f30a:	4921      	ldr	r1, [pc, #132]	; (800f390 <icmp_input+0x120>)
 800f30c:	4821      	ldr	r0, [pc, #132]	; (800f394 <icmp_input+0x124>)
 800f30e:	f002 f991 	bl	8011634 <iprintf>
        pbuf_free(r);
 800f312:	4630      	mov	r0, r6
 800f314:	e7e5      	b.n	800f2e2 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 800f316:	4621      	mov	r1, r4
 800f318:	4630      	mov	r0, r6
 800f31a:	f7fa fe55 	bl	8009fc8 <pbuf_copy>
 800f31e:	2800      	cmp	r0, #0
 800f320:	d1f7      	bne.n	800f312 <icmp_input+0xa2>
      pbuf_free(p);
 800f322:	4620      	mov	r0, r4
 800f324:	4634      	mov	r4, r6
 800f326:	f7fa fc3d 	bl	8009ba4 <pbuf_free>
    if (pbuf_header(p, (s16_t)hlen)) {
 800f32a:	4629      	mov	r1, r5
 800f32c:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 800f32e:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 800f330:	f7fa fc32 	bl	8009b98 <pbuf_header>
 800f334:	2800      	cmp	r0, #0
 800f336:	d1d6      	bne.n	800f2e6 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800f338:	6862      	ldr	r2, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 800f33a:	f8d8 3014 	ldr.w	r3, [r8, #20]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f33e:	4916      	ldr	r1, [pc, #88]	; (800f398 <icmp_input+0x128>)
      ip4_addr_copy(iphdr->src, *src);
 800f340:	60d3      	str	r3, [r2, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f342:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f346:	6113      	str	r3, [r2, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800f348:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f34a:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 800f34c:	70b0      	strb	r0, [r6, #2]
 800f34e:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800f350:	7213      	strb	r3, [r2, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800f352:	7290      	strb	r0, [r2, #10]
 800f354:	72d0      	strb	r0, [r2, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f356:	2201      	movs	r2, #1
 800f358:	9702      	str	r7, [sp, #8]
 800f35a:	e9cd 0200 	strd	r0, r2, [sp]
 800f35e:	4602      	mov	r2, r0
 800f360:	4620      	mov	r0, r4
 800f362:	f000 f9a3 	bl	800f6ac <ip4_output_if>
  pbuf_free(p);
 800f366:	e7be      	b.n	800f2e6 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800f368:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 800f36c:	4620      	mov	r0, r4
 800f36e:	31f2      	adds	r1, #242	; 0xf2
 800f370:	b209      	sxth	r1, r1
 800f372:	f7fa fc11 	bl	8009b98 <pbuf_header>
 800f376:	2800      	cmp	r0, #0
 800f378:	d0d7      	beq.n	800f32a <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f37a:	4b04      	ldr	r3, [pc, #16]	; (800f38c <icmp_input+0x11c>)
 800f37c:	22c0      	movs	r2, #192	; 0xc0
 800f37e:	4907      	ldr	r1, [pc, #28]	; (800f39c <icmp_input+0x12c>)
 800f380:	4804      	ldr	r0, [pc, #16]	; (800f394 <icmp_input+0x124>)
 800f382:	f002 f957 	bl	8011634 <iprintf>
        goto icmperr;
 800f386:	e7ae      	b.n	800f2e6 <icmp_input+0x76>
 800f388:	20008634 	.word	0x20008634
 800f38c:	08014f01 	.word	0x08014f01
 800f390:	08014f62 	.word	0x08014f62
 800f394:	08012feb 	.word	0x08012feb
 800f398:	20008648 	.word	0x20008648
 800f39c:	08014f97 	.word	0x08014f97

0800f3a0 <icmp_dest_unreach>:
{
 800f3a0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800f3a2:	3004      	adds	r0, #4
 800f3a4:	2103      	movs	r1, #3
 800f3a6:	f7ff bf1b 	b.w	800f1e0 <icmp_send_response.isra.0>

0800f3aa <icmp_time_exceeded>:
{
 800f3aa:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800f3ac:	3004      	adds	r0, #4
 800f3ae:	210b      	movs	r1, #11
 800f3b0:	f7ff bf16 	b.w	800f1e0 <icmp_send_response.isra.0>

0800f3b4 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800f3b4:	4b13      	ldr	r3, [pc, #76]	; (800f404 <ip4_route+0x50>)
{
 800f3b6:	4602      	mov	r2, r0
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800f3b8:	6818      	ldr	r0, [r3, #0]
{
 800f3ba:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800f3bc:	b968      	cbnz	r0, 800f3da <ip4_route+0x26>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f3be:	4b12      	ldr	r3, [pc, #72]	; (800f408 <ip4_route+0x54>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	b14b      	cbz	r3, 800f3d8 <ip4_route+0x24>
 800f3c4:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f3c8:	f002 0205 	and.w	r2, r2, #5
 800f3cc:	2a05      	cmp	r2, #5
 800f3ce:	d103      	bne.n	800f3d8 <ip4_route+0x24>
 800f3d0:	685a      	ldr	r2, [r3, #4]
 800f3d2:	2a00      	cmp	r2, #0
 800f3d4:	bf18      	it	ne
 800f3d6:	4618      	movne	r0, r3
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 800f3d8:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f3da:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
 800f3de:	07cd      	lsls	r5, r1, #31
 800f3e0:	d50d      	bpl.n	800f3fe <ip4_route+0x4a>
 800f3e2:	074c      	lsls	r4, r1, #29
 800f3e4:	d50b      	bpl.n	800f3fe <ip4_route+0x4a>
 800f3e6:	6843      	ldr	r3, [r0, #4]
 800f3e8:	b14b      	cbz	r3, 800f3fe <ip4_route+0x4a>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f3ea:	6814      	ldr	r4, [r2, #0]
 800f3ec:	6885      	ldr	r5, [r0, #8]
 800f3ee:	4063      	eors	r3, r4
 800f3f0:	422b      	tst	r3, r5
 800f3f2:	d0f1      	beq.n	800f3d8 <ip4_route+0x24>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f3f4:	078b      	lsls	r3, r1, #30
 800f3f6:	d402      	bmi.n	800f3fe <ip4_route+0x4a>
 800f3f8:	68c3      	ldr	r3, [r0, #12]
 800f3fa:	429c      	cmp	r4, r3
 800f3fc:	d0ec      	beq.n	800f3d8 <ip4_route+0x24>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800f3fe:	6800      	ldr	r0, [r0, #0]
 800f400:	e7dc      	b.n	800f3bc <ip4_route+0x8>
 800f402:	bf00      	nop
 800f404:	2000bd48 	.word	0x2000bd48
 800f408:	2000bd4c 	.word	0x2000bd4c

0800f40c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f40c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f410:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 800f414:	4604      	mov	r4, r0
 800f416:	460f      	mov	r7, r1
  if (IPH_V(iphdr) != 4) {
 800f418:	f898 9000 	ldrb.w	r9, [r8]
 800f41c:	ea4f 1319 	mov.w	r3, r9, lsr #4
 800f420:	2b04      	cmp	r3, #4
 800f422:	d005      	beq.n	800f430 <ip4_input+0x24>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f424:	4620      	mov	r0, r4
 800f426:	f7fa fbbd 	bl	8009ba4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800f42a:	2000      	movs	r0, #0
 800f42c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f430:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL(iphdr);
 800f434:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f438:	f7f9 ff7e 	bl	8009338 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 800f43c:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen *= 4;
 800f43e:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f442:	4605      	mov	r5, r0
  if (iphdr_len < p->tot_len) {
 800f444:	4283      	cmp	r3, r0
 800f446:	d903      	bls.n	800f450 <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 800f448:	4601      	mov	r1, r0
 800f44a:	4620      	mov	r0, r4
 800f44c:	f7fa fce4 	bl	8009e18 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f450:	8963      	ldrh	r3, [r4, #10]
 800f452:	454b      	cmp	r3, r9
 800f454:	d3e6      	bcc.n	800f424 <ip4_input+0x18>
 800f456:	8923      	ldrh	r3, [r4, #8]
 800f458:	42ab      	cmp	r3, r5
 800f45a:	d3e3      	bcc.n	800f424 <ip4_input+0x18>
 800f45c:	f1b9 0f13 	cmp.w	r9, #19
 800f460:	d9e0      	bls.n	800f424 <ip4_input+0x18>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f462:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f466:	4d53      	ldr	r5, [pc, #332]	; (800f5b4 <ip4_input+0x1a8>)
 800f468:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f46a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f46e:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f472:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f474:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f476:	d10e      	bne.n	800f496 <ip4_input+0x8a>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f47c:	07da      	lsls	r2, r3, #31
 800f47e:	d405      	bmi.n	800f48c <ip4_input+0x80>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800f480:	f898 3009 	ldrb.w	r3, [r8, #9]
 800f484:	2b11      	cmp	r3, #17
 800f486:	d063      	beq.n	800f550 <ip4_input+0x144>
 800f488:	2600      	movs	r6, #0
 800f48a:	e01d      	b.n	800f4c8 <ip4_input+0xbc>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d0f6      	beq.n	800f480 <ip4_input+0x74>
 800f492:	463e      	mov	r6, r7
 800f494:	e018      	b.n	800f4c8 <ip4_input+0xbc>
 800f496:	463e      	mov	r6, r7
    int first = 1;
 800f498:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 800f49c:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f5b8 <ip4_input+0x1ac>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f4a0:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 800f4a4:	07db      	lsls	r3, r3, #31
 800f4a6:	d404      	bmi.n	800f4b2 <ip4_input+0xa6>
      if (first) {
 800f4a8:	f1ba 0f00 	cmp.w	sl, #0
 800f4ac:	d143      	bne.n	800f536 <ip4_input+0x12a>
        netif = netif->next;
 800f4ae:	6836      	ldr	r6, [r6, #0]
 800f4b0:	e046      	b.n	800f540 <ip4_input+0x134>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f4b2:	6873      	ldr	r3, [r6, #4]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d0f7      	beq.n	800f4a8 <ip4_input+0x9c>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f4b8:	6968      	ldr	r0, [r5, #20]
 800f4ba:	4283      	cmp	r3, r0
 800f4bc:	d004      	beq.n	800f4c8 <ip4_input+0xbc>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f4be:	4631      	mov	r1, r6
 800f4c0:	f000 f905 	bl	800f6ce <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d0ef      	beq.n	800f4a8 <ip4_input+0x9c>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800f4c8:	6928      	ldr	r0, [r5, #16]
 800f4ca:	b148      	cbz	r0, 800f4e0 <ip4_input+0xd4>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f4cc:	4639      	mov	r1, r7
 800f4ce:	f000 f8fe 	bl	800f6ce <ip4_addr_isbroadcast_u32>
 800f4d2:	2800      	cmp	r0, #0
 800f4d4:	d1a6      	bne.n	800f424 <ip4_input+0x18>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800f4d6:	692b      	ldr	r3, [r5, #16]
 800f4d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800f4dc:	2be0      	cmp	r3, #224	; 0xe0
 800f4de:	d0a1      	beq.n	800f424 <ip4_input+0x18>
  if (netif == NULL) {
 800f4e0:	2e00      	cmp	r6, #0
 800f4e2:	d09f      	beq.n	800f424 <ip4_input+0x18>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800f4e4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800f4e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f4ec:	b13b      	cbz	r3, 800f4fe <ip4_input+0xf2>
    p = ip4_reass(p);
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f000 fa20 	bl	800f934 <ip4_reass>
    if (p == NULL) {
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	d097      	beq.n	800f42a <ip4_input+0x1e>
    iphdr = (struct ip_hdr *)p->payload;
 800f4fa:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 800f4fe:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800f502:	f1c9 0100 	rsb	r1, r9, #0
 800f506:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 800f508:	e9c5 6700 	strd	r6, r7, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800f50c:	f898 3000 	ldrb.w	r3, [r8]
 800f510:	f003 030f 	and.w	r3, r3, #15
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	81ab      	strh	r3, [r5, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800f518:	f7fa fb3e 	bl	8009b98 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 800f51c:	f898 3009 	ldrb.w	r3, [r8, #9]
 800f520:	2b06      	cmp	r3, #6
 800f522:	d029      	beq.n	800f578 <ip4_input+0x16c>
 800f524:	2b11      	cmp	r3, #17
 800f526:	d01b      	beq.n	800f560 <ip4_input+0x154>
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d12a      	bne.n	800f582 <ip4_input+0x176>
      icmp_input(p, inp);
 800f52c:	4639      	mov	r1, r7
 800f52e:	4620      	mov	r0, r4
 800f530:	f7ff fe9e 	bl	800f270 <icmp_input>
      break;
 800f534:	e018      	b.n	800f568 <ip4_input+0x15c>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800f536:	7d2b      	ldrb	r3, [r5, #20]
 800f538:	2b7f      	cmp	r3, #127	; 0x7f
 800f53a:	d0a1      	beq.n	800f480 <ip4_input+0x74>
        netif = netif_list;
 800f53c:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 800f540:	42be      	cmp	r6, r7
        netif = netif->next;
 800f542:	f04f 0a00 	mov.w	sl, #0
 800f546:	bf08      	it	eq
 800f548:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 800f54a:	2e00      	cmp	r6, #0
 800f54c:	d1a8      	bne.n	800f4a0 <ip4_input+0x94>
 800f54e:	e797      	b.n	800f480 <ip4_input+0x74>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800f550:	eb08 0309 	add.w	r3, r8, r9
 800f554:	885b      	ldrh	r3, [r3, #2]
 800f556:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800f55a:	d195      	bne.n	800f488 <ip4_input+0x7c>
 800f55c:	463e      	mov	r6, r7
 800f55e:	e7bf      	b.n	800f4e0 <ip4_input+0xd4>
      udp_input(p, inp);
 800f560:	4639      	mov	r1, r7
 800f562:	4620      	mov	r0, r4
 800f564:	f7fe f81e 	bl	800d5a4 <udp_input>
  ip_data.current_netif = NULL;
 800f568:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 800f56a:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 800f56e:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 800f570:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 800f572:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 800f576:	e758      	b.n	800f42a <ip4_input+0x1e>
      tcp_input(p, inp);
 800f578:	4639      	mov	r1, r7
 800f57a:	4620      	mov	r0, r4
 800f57c:	f7fc faa0 	bl	800bac0 <tcp_input>
      break;
 800f580:	e7f2      	b.n	800f568 <ip4_input+0x15c>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f582:	4631      	mov	r1, r6
 800f584:	6968      	ldr	r0, [r5, #20]
 800f586:	f000 f8a2 	bl	800f6ce <ip4_addr_isbroadcast_u32>
 800f58a:	b970      	cbnz	r0, 800f5aa <ip4_input+0x19e>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f58c:	696b      	ldr	r3, [r5, #20]
 800f58e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800f592:	2be0      	cmp	r3, #224	; 0xe0
 800f594:	d009      	beq.n	800f5aa <ip4_input+0x19e>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800f596:	4649      	mov	r1, r9
 800f598:	4620      	mov	r0, r4
 800f59a:	f7fa fb00 	bl	8009b9e <pbuf_header_force>
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f59e:	2102      	movs	r1, #2
 800f5a0:	4620      	mov	r0, r4
        p->payload = iphdr;
 800f5a2:	f8c4 8004 	str.w	r8, [r4, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800f5a6:	f7ff fefb 	bl	800f3a0 <icmp_dest_unreach>
      pbuf_free(p);
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	f7fa fafa 	bl	8009ba4 <pbuf_free>
 800f5b0:	e7da      	b.n	800f568 <ip4_input+0x15c>
 800f5b2:	bf00      	nop
 800f5b4:	20008634 	.word	0x20008634
 800f5b8:	2000bd48 	.word	0x2000bd48

0800f5bc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800f5bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5c0:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f5c2:	89c3      	ldrh	r3, [r0, #14]
{
 800f5c4:	4605      	mov	r5, r0
 800f5c6:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f5c8:	2b01      	cmp	r3, #1
{
 800f5ca:	4616      	mov	r6, r2
 800f5cc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800f5d0:	d006      	beq.n	800f5e0 <ip4_output_if_src+0x24>
 800f5d2:	4b30      	ldr	r3, [pc, #192]	; (800f694 <ip4_output_if_src+0xd8>)
 800f5d4:	f240 3233 	movw	r2, #819	; 0x333
 800f5d8:	492f      	ldr	r1, [pc, #188]	; (800f698 <ip4_output_if_src+0xdc>)
 800f5da:	4830      	ldr	r0, [pc, #192]	; (800f69c <ip4_output_if_src+0xe0>)
 800f5dc:	f002 f82a 	bl	8011634 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800f5e0:	2e00      	cmp	r6, #0
 800f5e2:	d047      	beq.n	800f674 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800f5e4:	2114      	movs	r1, #20
 800f5e6:	4628      	mov	r0, r5
 800f5e8:	f7fa fad6 	bl	8009b98 <pbuf_header>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	d14d      	bne.n	800f68c <ip4_output_if_src+0xd0>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f5f0:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800f5f2:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800f5f4:	2b13      	cmp	r3, #19
 800f5f6:	d806      	bhi.n	800f606 <ip4_output_if_src+0x4a>
 800f5f8:	4b26      	ldr	r3, [pc, #152]	; (800f694 <ip4_output_if_src+0xd8>)
 800f5fa:	f44f 7258 	mov.w	r2, #864	; 0x360
 800f5fe:	4928      	ldr	r1, [pc, #160]	; (800f6a0 <ip4_output_if_src+0xe4>)
 800f600:	4826      	ldr	r0, [pc, #152]	; (800f69c <ip4_output_if_src+0xe0>)
 800f602:	f002 f817 	bl	8011634 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 800f606:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 800f60a:	7227      	strb	r7, [r4, #8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800f60c:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 800f60e:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 800f610:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f612:	f8df a094 	ldr.w	sl, [pc, #148]	; 800f6a8 <ip4_output_if_src+0xec>
    ip4_addr_copy(iphdr->dest, *dest);
 800f616:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800f618:	2345      	movs	r3, #69	; 0x45
 800f61a:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 800f61c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800f620:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f622:	8928      	ldrh	r0, [r5, #8]
 800f624:	f7f9 fe88 	bl	8009338 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 800f628:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800f62a:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 800f62c:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f62e:	f8ba 0000 	ldrh.w	r0, [sl]
 800f632:	f7f9 fe81 	bl	8009338 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800f636:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800f63a:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 800f63c:	3301      	adds	r3, #1
 800f63e:	f8aa 3000 	strh.w	r3, [sl]

    if (src == NULL) {
 800f642:	f1b9 0f00 	cmp.w	r9, #0
 800f646:	d112      	bne.n	800f66e <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800f648:	4b16      	ldr	r3, [pc, #88]	; (800f6a4 <ip4_output_if_src+0xe8>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800f64e:	72a7      	strb	r7, [r4, #10]
 800f650:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800f652:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 800f656:	b193      	cbz	r3, 800f67e <ip4_output_if_src+0xc2>
 800f658:	892a      	ldrh	r2, [r5, #8]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d90f      	bls.n	800f67e <ip4_output_if_src+0xc2>
    return ip4_frag(p, netif, dest);
 800f65e:	4632      	mov	r2, r6
 800f660:	4641      	mov	r1, r8
 800f662:	4628      	mov	r0, r5
 800f664:	f000 fb10 	bl	800fc88 <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 800f668:	b002      	add	sp, #8
 800f66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800f66e:	f8d9 3000 	ldr.w	r3, [r9]
 800f672:	e7eb      	b.n	800f64c <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f674:	686b      	ldr	r3, [r5, #4]
    dest = &dest_addr;
 800f676:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 800f678:	691b      	ldr	r3, [r3, #16]
 800f67a:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800f67c:	e7e9      	b.n	800f652 <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800f67e:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800f682:	4632      	mov	r2, r6
 800f684:	4629      	mov	r1, r5
 800f686:	4640      	mov	r0, r8
 800f688:	4798      	blx	r3
 800f68a:	e7ed      	b.n	800f668 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800f68c:	f06f 0001 	mvn.w	r0, #1
 800f690:	e7ea      	b.n	800f668 <ip4_output_if_src+0xac>
 800f692:	bf00      	nop
 800f694:	08014fc9 	.word	0x08014fc9
 800f698:	08014ffd 	.word	0x08014ffd
 800f69c:	08012feb 	.word	0x08012feb
 800f6a0:	08015009 	.word	0x08015009
 800f6a4:	08015038 	.word	0x08015038
 800f6a8:	200083d2 	.word	0x200083d2

0800f6ac <ip4_output_if>:
{
 800f6ac:	b4f0      	push	{r4, r5, r6, r7}
 800f6ae:	9c06      	ldr	r4, [sp, #24]
 800f6b0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800f6b4:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800f6b8:	b11a      	cbz	r2, 800f6c2 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 800f6ba:	b109      	cbz	r1, 800f6c0 <ip4_output_if+0x14>
 800f6bc:	680f      	ldr	r7, [r1, #0]
 800f6be:	b907      	cbnz	r7, 800f6c2 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800f6c0:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f6c2:	9504      	str	r5, [sp, #16]
 800f6c4:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 800f6c8:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800f6ca:	f7ff bf77 	b.w	800f5bc <ip4_output_if_src>

0800f6ce <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800f6ce:	1e43      	subs	r3, r0, #1
{
 800f6d0:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800f6d2:	3303      	adds	r3, #3
 800f6d4:	d812      	bhi.n	800f6fc <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800f6d6:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800f6da:	f013 0002 	ands.w	r0, r3, #2
 800f6de:	d010      	beq.n	800f702 <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800f6e0:	684b      	ldr	r3, [r1, #4]
 800f6e2:	4293      	cmp	r3, r2
 800f6e4:	d00c      	beq.n	800f700 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800f6e6:	6888      	ldr	r0, [r1, #8]
 800f6e8:	4053      	eors	r3, r2
 800f6ea:	4203      	tst	r3, r0
 800f6ec:	d108      	bne.n	800f700 <ip4_addr_isbroadcast_u32+0x32>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800f6ee:	43c3      	mvns	r3, r0
 800f6f0:	ea22 0000 	bic.w	r0, r2, r0
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800f6f4:	1ac3      	subs	r3, r0, r3
 800f6f6:	4258      	negs	r0, r3
 800f6f8:	4158      	adcs	r0, r3
 800f6fa:	4770      	bx	lr
    return 1;
 800f6fc:	2001      	movs	r0, #1
 800f6fe:	4770      	bx	lr
    return 0;
 800f700:	2000      	movs	r0, #0
  }
}
 800f702:	4770      	bx	lr

0800f704 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800f704:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800f706:	4b0c      	ldr	r3, [pc, #48]	; (800f738 <ip_reass_dequeue_datagram+0x34>)
{
 800f708:	4604      	mov	r4, r0
 800f70a:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	4282      	cmp	r2, r0
 800f710:	d107      	bne.n	800f722 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800f712:	6802      	ldr	r2, [r0, #0]
 800f714:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f716:	4621      	mov	r1, r4
 800f718:	2004      	movs	r0, #4
}
 800f71a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 800f71e:	f7fa b8bd 	b.w	800989c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800f722:	b931      	cbnz	r1, 800f732 <ip_reass_dequeue_datagram+0x2e>
 800f724:	4b05      	ldr	r3, [pc, #20]	; (800f73c <ip_reass_dequeue_datagram+0x38>)
 800f726:	f240 1245 	movw	r2, #325	; 0x145
 800f72a:	4905      	ldr	r1, [pc, #20]	; (800f740 <ip_reass_dequeue_datagram+0x3c>)
 800f72c:	4805      	ldr	r0, [pc, #20]	; (800f744 <ip_reass_dequeue_datagram+0x40>)
 800f72e:	f001 ff81 	bl	8011634 <iprintf>
    prev->next = ipr->next;
 800f732:	6823      	ldr	r3, [r4, #0]
 800f734:	602b      	str	r3, [r5, #0]
 800f736:	e7ee      	b.n	800f716 <ip_reass_dequeue_datagram+0x12>
 800f738:	200083d8 	.word	0x200083d8
 800f73c:	08015040 	.word	0x08015040
 800f740:	08015079 	.word	0x08015079
 800f744:	08012feb 	.word	0x08012feb

0800f748 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f748:	4281      	cmp	r1, r0
{
 800f74a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f74e:	4604      	mov	r4, r0
 800f750:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800f752:	d105      	bne.n	800f760 <ip_reass_free_complete_datagram+0x18>
 800f754:	4b2f      	ldr	r3, [pc, #188]	; (800f814 <ip_reass_free_complete_datagram+0xcc>)
 800f756:	22ab      	movs	r2, #171	; 0xab
 800f758:	492f      	ldr	r1, [pc, #188]	; (800f818 <ip_reass_free_complete_datagram+0xd0>)
 800f75a:	4830      	ldr	r0, [pc, #192]	; (800f81c <ip_reass_free_complete_datagram+0xd4>)
 800f75c:	f001 ff6a 	bl	8011634 <iprintf>
  if (prev != NULL) {
 800f760:	b146      	cbz	r6, 800f774 <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800f762:	6833      	ldr	r3, [r6, #0]
 800f764:	42a3      	cmp	r3, r4
 800f766:	d005      	beq.n	800f774 <ip_reass_free_complete_datagram+0x2c>
 800f768:	4b2a      	ldr	r3, [pc, #168]	; (800f814 <ip_reass_free_complete_datagram+0xcc>)
 800f76a:	22ad      	movs	r2, #173	; 0xad
 800f76c:	492c      	ldr	r1, [pc, #176]	; (800f820 <ip_reass_free_complete_datagram+0xd8>)
 800f76e:	482b      	ldr	r0, [pc, #172]	; (800f81c <ip_reass_free_complete_datagram+0xd4>)
 800f770:	f001 ff60 	bl	8011634 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800f774:	6867      	ldr	r7, [r4, #4]
 800f776:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 800f778:	889a      	ldrh	r2, [r3, #4]
 800f77a:	bb92      	cbnz	r2, 800f7e2 <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 800f77c:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f77e:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 800f782:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800f784:	f104 0208 	add.w	r2, r4, #8
 800f788:	f852 0b04 	ldr.w	r0, [r2], #4
 800f78c:	428a      	cmp	r2, r1
 800f78e:	f843 0b04 	str.w	r0, [r3], #4
 800f792:	d1f9      	bne.n	800f788 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800f794:	2101      	movs	r1, #1
 800f796:	4638      	mov	r0, r7
 800f798:	f7ff fe07 	bl	800f3aa <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800f79c:	4638      	mov	r0, r7
 800f79e:	f7fa fbab 	bl	8009ef8 <pbuf_clen>
 800f7a2:	4605      	mov	r5, r0
    pbuf_free(p);
 800f7a4:	4638      	mov	r0, r7
 800f7a6:	f7fa f9fd 	bl	8009ba4 <pbuf_free>
  p = ipr->p;
 800f7aa:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f7ac:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800f814 <ip_reass_free_complete_datagram+0xcc>
 800f7b0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800f82c <ip_reass_free_complete_datagram+0xe4>
 800f7b4:	f8df a064 	ldr.w	sl, [pc, #100]	; 800f81c <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 800f7b8:	b9af      	cbnz	r7, 800f7e6 <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 800f7ba:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800f7bc:	4c19      	ldr	r4, [pc, #100]	; (800f824 <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 800f7be:	4631      	mov	r1, r6
 800f7c0:	f7ff ffa0 	bl	800f704 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800f7c4:	8823      	ldrh	r3, [r4, #0]
 800f7c6:	42ab      	cmp	r3, r5
 800f7c8:	d205      	bcs.n	800f7d6 <ip_reass_free_complete_datagram+0x8e>
 800f7ca:	4b12      	ldr	r3, [pc, #72]	; (800f814 <ip_reass_free_complete_datagram+0xcc>)
 800f7cc:	22d2      	movs	r2, #210	; 0xd2
 800f7ce:	4916      	ldr	r1, [pc, #88]	; (800f828 <ip_reass_free_complete_datagram+0xe0>)
 800f7d0:	4812      	ldr	r0, [pc, #72]	; (800f81c <ip_reass_free_complete_datagram+0xd4>)
 800f7d2:	f001 ff2f 	bl	8011634 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800f7d6:	8823      	ldrh	r3, [r4, #0]
}
 800f7d8:	4628      	mov	r0, r5
  ip_reass_pbufcount -= pbufs_freed;
 800f7da:	1b5b      	subs	r3, r3, r5
 800f7dc:	8023      	strh	r3, [r4, #0]
}
 800f7de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800f7e2:	2500      	movs	r5, #0
 800f7e4:	e7e1      	b.n	800f7aa <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800f7e6:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 800f7e8:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 800f7ea:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 800f7ee:	f7fa fb83 	bl	8009ef8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800f7f2:	4405      	add	r5, r0
 800f7f4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 800f7f8:	db05      	blt.n	800f806 <ip_reass_free_complete_datagram+0xbe>
 800f7fa:	4643      	mov	r3, r8
 800f7fc:	22cc      	movs	r2, #204	; 0xcc
 800f7fe:	4649      	mov	r1, r9
 800f800:	4650      	mov	r0, sl
 800f802:	f001 ff17 	bl	8011634 <iprintf>
    pbuf_free(pcur);
 800f806:	4638      	mov	r0, r7
    pbufs_freed += clen;
 800f808:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 800f80a:	465f      	mov	r7, fp
    pbuf_free(pcur);
 800f80c:	f7fa f9ca 	bl	8009ba4 <pbuf_free>
 800f810:	e7d2      	b.n	800f7b8 <ip_reass_free_complete_datagram+0x70>
 800f812:	bf00      	nop
 800f814:	08015040 	.word	0x08015040
 800f818:	08015092 	.word	0x08015092
 800f81c:	08012feb 	.word	0x08012feb
 800f820:	0801509e 	.word	0x0801509e
 800f824:	200083d4 	.word	0x200083d4
 800f828:	080150cd 	.word	0x080150cd
 800f82c:	080150b0 	.word	0x080150b0

0800f830 <ip_reass_remove_oldest_datagram>:
{
 800f830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f834:	4605      	mov	r5, r0
 800f836:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800f838:	2600      	movs	r6, #0
    r = reassdatagrams;
 800f83a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800f8a4 <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 800f83e:	2400      	movs	r4, #0
    r = reassdatagrams;
 800f840:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800f844:	4621      	mov	r1, r4
    prev = NULL;
 800f846:	46a4      	mov	ip, r4
    oldest = NULL;
 800f848:	4620      	mov	r0, r4
    while (r != NULL) {
 800f84a:	b953      	cbnz	r3, 800f862 <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 800f84c:	b110      	cbz	r0, 800f854 <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800f84e:	f7ff ff7b 	bl	800f748 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800f852:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800f854:	42be      	cmp	r6, r7
 800f856:	da01      	bge.n	800f85c <ip_reass_remove_oldest_datagram+0x2c>
 800f858:	2c01      	cmp	r4, #1
 800f85a:	dcf0      	bgt.n	800f83e <ip_reass_remove_oldest_datagram+0xe>
}
 800f85c:	4630      	mov	r0, r6
 800f85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800f862:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800f866:	695a      	ldr	r2, [r3, #20]
 800f868:	4572      	cmp	r2, lr
 800f86a:	d109      	bne.n	800f880 <ip_reass_remove_oldest_datagram+0x50>
 800f86c:	f8d5 e010 	ldr.w	lr, [r5, #16]
 800f870:	699a      	ldr	r2, [r3, #24]
 800f872:	4572      	cmp	r2, lr
 800f874:	d104      	bne.n	800f880 <ip_reass_remove_oldest_datagram+0x50>
 800f876:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 800f87a:	88aa      	ldrh	r2, [r5, #4]
 800f87c:	4596      	cmp	lr, r2
 800f87e:	d008      	beq.n	800f892 <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 800f880:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800f882:	b160      	cbz	r0, 800f89e <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800f884:	7fc2      	ldrb	r2, [r0, #31]
 800f886:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 800f88a:	4596      	cmp	lr, r2
 800f88c:	bf9c      	itt	ls
 800f88e:	4661      	movls	r1, ip
 800f890:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800f892:	681a      	ldr	r2, [r3, #0]
 800f894:	2a00      	cmp	r2, #0
 800f896:	bf18      	it	ne
 800f898:	469c      	movne	ip, r3
 800f89a:	4613      	mov	r3, r2
 800f89c:	e7d5      	b.n	800f84a <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 800f89e:	4661      	mov	r1, ip
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	e7f6      	b.n	800f892 <ip_reass_remove_oldest_datagram+0x62>
 800f8a4:	200083d8 	.word	0x200083d8

0800f8a8 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800f8a8:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800f8aa:	4604      	mov	r4, r0
 800f8ac:	b930      	cbnz	r0, 800f8bc <ip_frag_free_pbuf_custom_ref+0x14>
 800f8ae:	4b06      	ldr	r3, [pc, #24]	; (800f8c8 <ip_frag_free_pbuf_custom_ref+0x20>)
 800f8b0:	f240 22ae 	movw	r2, #686	; 0x2ae
 800f8b4:	4905      	ldr	r1, [pc, #20]	; (800f8cc <ip_frag_free_pbuf_custom_ref+0x24>)
 800f8b6:	4806      	ldr	r0, [pc, #24]	; (800f8d0 <ip_frag_free_pbuf_custom_ref+0x28>)
 800f8b8:	f001 febc 	bl	8011634 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f8bc:	4621      	mov	r1, r4
 800f8be:	2005      	movs	r0, #5
}
 800f8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800f8c4:	f7f9 bfea 	b.w	800989c <memp_free>
 800f8c8:	08015040 	.word	0x08015040
 800f8cc:	08013b8e 	.word	0x08013b8e
 800f8d0:	08012feb 	.word	0x08012feb

0800f8d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f8d4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f8d6:	4604      	mov	r4, r0
 800f8d8:	b930      	cbnz	r0, 800f8e8 <ipfrag_free_pbuf_custom+0x14>
 800f8da:	4b08      	ldr	r3, [pc, #32]	; (800f8fc <ipfrag_free_pbuf_custom+0x28>)
 800f8dc:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800f8e0:	4907      	ldr	r1, [pc, #28]	; (800f900 <ipfrag_free_pbuf_custom+0x2c>)
 800f8e2:	4808      	ldr	r0, [pc, #32]	; (800f904 <ipfrag_free_pbuf_custom+0x30>)
 800f8e4:	f001 fea6 	bl	8011634 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 800f8e8:	6960      	ldr	r0, [r4, #20]
 800f8ea:	b108      	cbz	r0, 800f8f0 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 800f8ec:	f7fa f95a 	bl	8009ba4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f8f0:	4620      	mov	r0, r4
}
 800f8f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800f8f6:	f7ff bfd7 	b.w	800f8a8 <ip_frag_free_pbuf_custom_ref>
 800f8fa:	bf00      	nop
 800f8fc:	08015040 	.word	0x08015040
 800f900:	080150e8 	.word	0x080150e8
 800f904:	08012feb 	.word	0x08012feb

0800f908 <ip_reass_tmr>:
{
 800f908:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800f90a:	4b09      	ldr	r3, [pc, #36]	; (800f930 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 800f90c:	2400      	movs	r4, #0
  r = reassdatagrams;
 800f90e:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800f910:	b900      	cbnz	r0, 800f914 <ip_reass_tmr+0xc>
}
 800f912:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800f914:	7fc3      	ldrb	r3, [r0, #31]
 800f916:	6805      	ldr	r5, [r0, #0]
 800f918:	b123      	cbz	r3, 800f924 <ip_reass_tmr+0x1c>
      r->timer--;
 800f91a:	3b01      	subs	r3, #1
 800f91c:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 800f91e:	4604      	mov	r4, r0
 800f920:	4628      	mov	r0, r5
 800f922:	e7f5      	b.n	800f910 <ip_reass_tmr+0x8>
 800f924:	4621      	mov	r1, r4
 800f926:	f7ff ff0f 	bl	800f748 <ip_reass_free_complete_datagram>
 800f92a:	4620      	mov	r0, r4
 800f92c:	e7f7      	b.n	800f91e <ip_reass_tmr+0x16>
 800f92e:	bf00      	nop
 800f930:	200083d8 	.word	0x200083d8

0800f934 <ip4_reass>:
{
 800f934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800f938:	6845      	ldr	r5, [r0, #4]
{
 800f93a:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800f93c:	782b      	ldrb	r3, [r5, #0]
 800f93e:	f003 030f 	and.w	r3, r3, #15
 800f942:	2b05      	cmp	r3, #5
 800f944:	f040 808d 	bne.w	800fa62 <ip4_reass+0x12e>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f948:	88e8      	ldrh	r0, [r5, #6]
 800f94a:	f7f9 fcf5 	bl	8009338 <lwip_htons>
 800f94e:	f3c0 000c 	ubfx	r0, r0, #0, #13
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f952:	4cb3      	ldr	r4, [pc, #716]	; (800fc20 <ip4_reass+0x2ec>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800f954:	ea4f 08c0 	mov.w	r8, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f958:	8868      	ldrh	r0, [r5, #2]
 800f95a:	f7f9 fced 	bl	8009338 <lwip_htons>
 800f95e:	782b      	ldrb	r3, [r5, #0]
 800f960:	f003 030f 	and.w	r3, r3, #15
 800f964:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800f968:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800f96a:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f96c:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800f96e:	f7fa fac3 	bl	8009ef8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f972:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 800f974:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f976:	4403      	add	r3, r0
 800f978:	2b0a      	cmp	r3, #10
 800f97a:	dc69      	bgt.n	800fa50 <ip4_reass+0x11c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f97c:	4ea9      	ldr	r6, [pc, #676]	; (800fc24 <ip4_reass+0x2f0>)
 800f97e:	6834      	ldr	r4, [r6, #0]
 800f980:	2c00      	cmp	r4, #0
 800f982:	d173      	bne.n	800fa6c <ip4_reass+0x138>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f984:	2004      	movs	r0, #4
 800f986:	f7f9 ff6d 	bl	8009864 <memp_malloc>
  if (ipr == NULL) {
 800f98a:	4604      	mov	r4, r0
 800f98c:	b958      	cbnz	r0, 800f9a6 <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800f98e:	4649      	mov	r1, r9
 800f990:	4628      	mov	r0, r5
 800f992:	f7ff ff4d 	bl	800f830 <ip_reass_remove_oldest_datagram>
 800f996:	4581      	cmp	r9, r0
 800f998:	dc63      	bgt.n	800fa62 <ip4_reass+0x12e>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800f99a:	2004      	movs	r0, #4
 800f99c:	f7f9 ff62 	bl	8009864 <memp_malloc>
    if (ipr == NULL)
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d05d      	beq.n	800fa62 <ip4_reass+0x12e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800f9a6:	221c      	movs	r2, #28
 800f9a8:	2100      	movs	r1, #0
 800f9aa:	1d20      	adds	r0, r4, #4
 800f9ac:	f001 fd90 	bl	80114d0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800f9b0:	2303      	movs	r3, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f9b2:	f104 0208 	add.w	r2, r4, #8
 800f9b6:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800f9ba:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800f9bc:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800f9be:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800f9c0:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800f9c2:	462b      	mov	r3, r5
 800f9c4:	f853 0b04 	ldr.w	r0, [r3], #4
 800f9c8:	428b      	cmp	r3, r1
 800f9ca:	f842 0b04 	str.w	r0, [r2], #4
 800f9ce:	d1f9      	bne.n	800f9c4 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f9d0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 800f9d4:	f01b 0b20 	ands.w	fp, fp, #32
 800f9d8:	d108      	bne.n	800f9ec <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800f9da:	9b01      	ldr	r3, [sp, #4]
 800f9dc:	4443      	add	r3, r8
 800f9de:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f9e0:	4598      	cmp	r8, r3
 800f9e2:	d83e      	bhi.n	800fa62 <ip4_reass+0x12e>
 800f9e4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d83a      	bhi.n	800fa62 <ip4_reass+0x12e>
  fraghdr = (struct ip_hdr*)new_p->payload;
 800f9ec:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800f9ee:	8868      	ldrh	r0, [r5, #2]
 800f9f0:	f7f9 fca2 	bl	8009338 <lwip_htons>
 800f9f4:	f895 a000 	ldrb.w	sl, [r5]
 800f9f8:	f00a 0a0f 	and.w	sl, sl, #15
 800f9fc:	eba0 008a 	sub.w	r0, r0, sl, lsl #2
 800fa00:	fa1f fa80 	uxth.w	sl, r0
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800fa04:	88e8      	ldrh	r0, [r5, #6]
 800fa06:	f7f9 fc97 	bl	8009338 <lwip_htons>
 800fa0a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper*)new_p->payload;
 800fa0e:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 800fa10:	2500      	movs	r5, #0
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800fa12:	00c0      	lsls	r0, r0, #3
  for (q = ipr->p; q != NULL;) {
 800fa14:	f8d4 c004 	ldr.w	ip, [r4, #4]
  iprh->next_pbuf = NULL;
 800fa18:	7035      	strb	r5, [r6, #0]
  iprh->end = offset + len;
 800fa1a:	eb0a 0300 	add.w	r3, sl, r0
  int valid = 1;
 800fa1e:	f04f 0a01 	mov.w	sl, #1
  iprh->next_pbuf = NULL;
 800fa22:	7075      	strb	r5, [r6, #1]
  iprh->end = offset + len;
 800fa24:	b29a      	uxth	r2, r3
 800fa26:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 800fa28:	4663      	mov	r3, ip
  iprh->next_pbuf = NULL;
 800fa2a:	70b5      	strb	r5, [r6, #2]
 800fa2c:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 800fa2e:	80b0      	strh	r0, [r6, #4]
  for (q = ipr->p; q != NULL;) {
 800fa30:	bb5b      	cbnz	r3, 800fa8a <ip4_reass+0x156>
    if (iprh_prev != NULL) {
 800fa32:	2d00      	cmp	r5, #0
 800fa34:	f040 80a2 	bne.w	800fb7c <ip4_reass+0x248>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800fa38:	f1bc 0f00 	cmp.w	ip, #0
 800fa3c:	f000 808d 	beq.w	800fb5a <ip4_reass+0x226>
 800fa40:	4b79      	ldr	r3, [pc, #484]	; (800fc28 <ip4_reass+0x2f4>)
 800fa42:	f240 12b3 	movw	r2, #435	; 0x1b3
 800fa46:	4979      	ldr	r1, [pc, #484]	; (800fc2c <ip4_reass+0x2f8>)
 800fa48:	4879      	ldr	r0, [pc, #484]	; (800fc30 <ip4_reass+0x2fc>)
 800fa4a:	f001 fdf3 	bl	8011634 <iprintf>
 800fa4e:	e084      	b.n	800fb5a <ip4_reass+0x226>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fa50:	4601      	mov	r1, r0
 800fa52:	4628      	mov	r0, r5
 800fa54:	f7ff feec 	bl	800f830 <ip_reass_remove_oldest_datagram>
 800fa58:	b118      	cbz	r0, 800fa62 <ip4_reass+0x12e>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800fa5a:	8823      	ldrh	r3, [r4, #0]
 800fa5c:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800fa5e:	2b0a      	cmp	r3, #10
 800fa60:	dd8c      	ble.n	800f97c <ip4_reass+0x48>
  pbuf_free(p);
 800fa62:	4638      	mov	r0, r7
 800fa64:	f7fa f89e 	bl	8009ba4 <pbuf_free>
  return NULL;
 800fa68:	2600      	movs	r6, #0
 800fa6a:	e070      	b.n	800fb4e <ip4_reass+0x21a>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800fa6c:	68eb      	ldr	r3, [r5, #12]
 800fa6e:	6962      	ldr	r2, [r4, #20]
 800fa70:	429a      	cmp	r2, r3
 800fa72:	d108      	bne.n	800fa86 <ip4_reass+0x152>
 800fa74:	692b      	ldr	r3, [r5, #16]
 800fa76:	69a2      	ldr	r2, [r4, #24]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d104      	bne.n	800fa86 <ip4_reass+0x152>
 800fa7c:	89a2      	ldrh	r2, [r4, #12]
 800fa7e:	88ab      	ldrh	r3, [r5, #4]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	f000 80dd 	beq.w	800fc40 <ip4_reass+0x30c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800fa86:	6824      	ldr	r4, [r4, #0]
 800fa88:	e77a      	b.n	800f980 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800fa8a:	f8d3 e004 	ldr.w	lr, [r3, #4]
    if (iprh->start < iprh_tmp->start) {
 800fa8e:	f8be 1004 	ldrh.w	r1, [lr, #4]
 800fa92:	4288      	cmp	r0, r1
 800fa94:	d263      	bcs.n	800fb5e <ip4_reass+0x22a>
      iprh->next_pbuf = q;
 800fa96:	6033      	str	r3, [r6, #0]
      if (iprh_prev != NULL) {
 800fa98:	2d00      	cmp	r5, #0
 800fa9a:	d05c      	beq.n	800fb56 <ip4_reass+0x222>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800fa9c:	88eb      	ldrh	r3, [r5, #6]
 800fa9e:	4298      	cmp	r0, r3
 800faa0:	f0c0 80a1 	bcc.w	800fbe6 <ip4_reass+0x2b2>
 800faa4:	428a      	cmp	r2, r1
 800faa6:	f200 809e 	bhi.w	800fbe6 <ip4_reass+0x2b2>
        if (iprh_prev->end != iprh->start) {
 800faaa:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 800faac:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800faae:	f040 80e3 	bne.w	800fc78 <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fab2:	f1bb 0f00 	cmp.w	fp, #0
 800fab6:	d004      	beq.n	800fac2 <ip4_reass+0x18e>
 800fab8:	7fa3      	ldrb	r3, [r4, #30]
 800faba:	f013 0301 	ands.w	r3, r3, #1
 800fabe:	f000 809d 	beq.w	800fbfc <ip4_reass+0x2c8>
    if (valid) {
 800fac2:	f1ba 0f00 	cmp.w	sl, #0
 800fac6:	d168      	bne.n	800fb9a <ip4_reass+0x266>
          q = iprh->next_pbuf;
 800fac8:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800facc:	4f54      	ldr	r7, [pc, #336]	; (800fc20 <ip4_reass+0x2ec>)
 800face:	8838      	ldrh	r0, [r7, #0]
 800fad0:	4481      	add	r9, r0
 800fad2:	f8a7 9000 	strh.w	r9, [r7]
  if (is_last) {
 800fad6:	f1bb 0f00 	cmp.w	fp, #0
 800fada:	d107      	bne.n	800faec <ip4_reass+0x1b8>
    u16_t datagram_len = (u16_t)(offset + len);
 800fadc:	9b01      	ldr	r3, [sp, #4]
 800fade:	4498      	add	r8, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800fae0:	7fa3      	ldrb	r3, [r4, #30]
 800fae2:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 800fae6:	f8a4 801c 	strh.w	r8, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800faea:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800faec:	f1ba 0f01 	cmp.w	sl, #1
 800faf0:	d1ba      	bne.n	800fa68 <ip4_reass+0x134>
    ipr->datagram_len += IP_HLEN;
 800faf2:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800faf4:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 800faf8:	3314      	adds	r3, #20
 800fafa:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800fafc:	6863      	ldr	r3, [r4, #4]
 800fafe:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fb00:	f104 0308 	add.w	r3, r4, #8
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800fb04:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800fb06:	4632      	mov	r2, r6
 800fb08:	f853 0b04 	ldr.w	r0, [r3], #4
 800fb0c:	428b      	cmp	r3, r1
 800fb0e:	f842 0b04 	str.w	r0, [r2], #4
 800fb12:	d1f9      	bne.n	800fb08 <ip4_reass+0x1d4>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800fb14:	8ba0      	ldrh	r0, [r4, #28]
 800fb16:	f7f9 fc0f 	bl	8009338 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800fb1a:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800fb1c:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800fb1e:	71b3      	strb	r3, [r6, #6]
 800fb20:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800fb22:	72b3      	strb	r3, [r6, #10]
 800fb24:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 800fb26:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 800fb28:	2d00      	cmp	r5, #0
 800fb2a:	d169      	bne.n	800fc00 <ip4_reass+0x2cc>
    if (ipr == reassdatagrams) {
 800fb2c:	4b3d      	ldr	r3, [pc, #244]	; (800fc24 <ip4_reass+0x2f0>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
        if (ipr_prev->next == ipr) {
 800fb30:	42a3      	cmp	r3, r4
 800fb32:	d002      	beq.n	800fb3a <ip4_reass+0x206>
 800fb34:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d170      	bne.n	800fc1c <ip4_reass+0x2e8>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f7ff fde1 	bl	800f704 <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800fb42:	4630      	mov	r0, r6
 800fb44:	f7fa f9d8 	bl	8009ef8 <pbuf_clen>
 800fb48:	883b      	ldrh	r3, [r7, #0]
 800fb4a:	1a18      	subs	r0, r3, r0
 800fb4c:	8038      	strh	r0, [r7, #0]
}
 800fb4e:	4630      	mov	r0, r6
 800fb50:	b003      	add	sp, #12
 800fb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 800fb56:	428a      	cmp	r2, r1
 800fb58:	d845      	bhi.n	800fbe6 <ip4_reass+0x2b2>
      ipr->p = new_p;
 800fb5a:	6067      	str	r7, [r4, #4]
 800fb5c:	e7a9      	b.n	800fab2 <ip4_reass+0x17e>
    } else if (iprh->start == iprh_tmp->start) {
 800fb5e:	d042      	beq.n	800fbe6 <ip4_reass+0x2b2>
    } else if (iprh->start < iprh_tmp->end) {
 800fb60:	f8be 3006 	ldrh.w	r3, [lr, #6]
 800fb64:	4283      	cmp	r3, r0
 800fb66:	d83e      	bhi.n	800fbe6 <ip4_reass+0x2b2>
      if (iprh_prev != NULL) {
 800fb68:	b125      	cbz	r5, 800fb74 <ip4_reass+0x240>
        if (iprh_prev->end != iprh_tmp->start) {
 800fb6a:	88eb      	ldrh	r3, [r5, #6]
          valid = 0;
 800fb6c:	428b      	cmp	r3, r1
 800fb6e:	bf18      	it	ne
 800fb70:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800fb74:	f8de 3000 	ldr.w	r3, [lr]
 800fb78:	4675      	mov	r5, lr
 800fb7a:	e759      	b.n	800fa30 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800fb7c:	88eb      	ldrh	r3, [r5, #6]
 800fb7e:	4283      	cmp	r3, r0
 800fb80:	d906      	bls.n	800fb90 <ip4_reass+0x25c>
 800fb82:	4b29      	ldr	r3, [pc, #164]	; (800fc28 <ip4_reass+0x2f4>)
 800fb84:	f240 12ab 	movw	r2, #427	; 0x1ab
 800fb88:	492a      	ldr	r1, [pc, #168]	; (800fc34 <ip4_reass+0x300>)
 800fb8a:	4829      	ldr	r0, [pc, #164]	; (800fc30 <ip4_reass+0x2fc>)
 800fb8c:	f001 fd52 	bl	8011634 <iprintf>
      if (iprh_prev->end != iprh->start) {
 800fb90:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 800fb92:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 800fb94:	88b3      	ldrh	r3, [r6, #4]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	e789      	b.n	800faae <ip4_reass+0x17a>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800fb9a:	6863      	ldr	r3, [r4, #4]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d093      	beq.n	800fac8 <ip4_reass+0x194>
 800fba0:	6859      	ldr	r1, [r3, #4]
 800fba2:	888b      	ldrh	r3, [r1, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d18f      	bne.n	800fac8 <ip4_reass+0x194>
        q = iprh->next_pbuf;
 800fba8:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800fbaa:	b99b      	cbnz	r3, 800fbd4 <ip4_reass+0x2a0>
          LWIP_ASSERT("sanity check",
 800fbac:	42b1      	cmp	r1, r6
 800fbae:	d106      	bne.n	800fbbe <ip4_reass+0x28a>
 800fbb0:	4b1d      	ldr	r3, [pc, #116]	; (800fc28 <ip4_reass+0x2f4>)
 800fbb2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800fbb6:	4920      	ldr	r1, [pc, #128]	; (800fc38 <ip4_reass+0x304>)
 800fbb8:	481d      	ldr	r0, [pc, #116]	; (800fc30 <ip4_reass+0x2fc>)
 800fbba:	f001 fd3b 	bl	8011634 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800fbbe:	6833      	ldr	r3, [r6, #0]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d083      	beq.n	800facc <ip4_reass+0x198>
 800fbc4:	4b18      	ldr	r3, [pc, #96]	; (800fc28 <ip4_reass+0x2f4>)
 800fbc6:	f240 12d7 	movw	r2, #471	; 0x1d7
 800fbca:	491c      	ldr	r1, [pc, #112]	; (800fc3c <ip4_reass+0x308>)
 800fbcc:	4818      	ldr	r0, [pc, #96]	; (800fc30 <ip4_reass+0x2fc>)
 800fbce:	f001 fd31 	bl	8011634 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fbd2:	e77b      	b.n	800facc <ip4_reass+0x198>
          iprh = (struct ip_reass_helper*)q->payload;
 800fbd4:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800fbd6:	88f0      	ldrh	r0, [r6, #6]
 800fbd8:	8893      	ldrh	r3, [r2, #4]
 800fbda:	4298      	cmp	r0, r3
 800fbdc:	f47f af74 	bne.w	800fac8 <ip4_reass+0x194>
          q = iprh->next_pbuf;
 800fbe0:	6813      	ldr	r3, [r2, #0]
 800fbe2:	4616      	mov	r6, r2
 800fbe4:	e7e1      	b.n	800fbaa <ip4_reass+0x276>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	f7fa f986 	bl	8009ef8 <pbuf_clen>
 800fbec:	4a0c      	ldr	r2, [pc, #48]	; (800fc20 <ip4_reass+0x2ec>)
 800fbee:	8813      	ldrh	r3, [r2, #0]
 800fbf0:	1a18      	subs	r0, r3, r0
 800fbf2:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 800fbf4:	4638      	mov	r0, r7
 800fbf6:	f7f9 ffd5 	bl	8009ba4 <pbuf_free>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800fbfa:	e732      	b.n	800fa62 <ip4_reass+0x12e>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800fbfc:	469a      	mov	sl, r3
 800fbfe:	e765      	b.n	800facc <ip4_reass+0x198>
      iprh = (struct ip_reass_helper*)r->payload;
 800fc00:	f8d5 8004 	ldr.w	r8, [r5, #4]
      pbuf_header(r, -IP_HLEN);
 800fc04:	f06f 0113 	mvn.w	r1, #19
 800fc08:	4628      	mov	r0, r5
 800fc0a:	f7f9 ffc5 	bl	8009b98 <pbuf_header>
      pbuf_cat(p, r);
 800fc0e:	4629      	mov	r1, r5
 800fc10:	4630      	mov	r0, r6
 800fc12:	f7fa f995 	bl	8009f40 <pbuf_cat>
      r = iprh->next_pbuf;
 800fc16:	f8d8 5000 	ldr.w	r5, [r8]
 800fc1a:	e785      	b.n	800fb28 <ip4_reass+0x1f4>
        if (ipr_prev->next == ipr) {
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	e787      	b.n	800fb30 <ip4_reass+0x1fc>
 800fc20:	200083d4 	.word	0x200083d4
 800fc24:	200083d8 	.word	0x200083d8
 800fc28:	08015040 	.word	0x08015040
 800fc2c:	08015112 	.word	0x08015112
 800fc30:	08012feb 	.word	0x08012feb
 800fc34:	080150f4 	.word	0x080150f4
 800fc38:	08015149 	.word	0x08015149
 800fc3c:	08015156 	.word	0x08015156
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fc40:	88e8      	ldrh	r0, [r5, #6]
 800fc42:	f7f9 fb79 	bl	8009338 <lwip_htons>
 800fc46:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	f47f aec0 	bne.w	800f9d0 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800fc50:	89e0      	ldrh	r0, [r4, #14]
 800fc52:	f7f9 fb71 	bl	8009338 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800fc56:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	f43f aeb8 	beq.w	800f9d0 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800fc60:	462b      	mov	r3, r5
 800fc62:	f104 0208 	add.w	r2, r4, #8
 800fc66:	f105 0114 	add.w	r1, r5, #20
 800fc6a:	f853 0b04 	ldr.w	r0, [r3], #4
 800fc6e:	428b      	cmp	r3, r1
 800fc70:	f842 0b04 	str.w	r0, [r2], #4
 800fc74:	d1f9      	bne.n	800fc6a <ip4_reass+0x336>
 800fc76:	e6ab      	b.n	800f9d0 <ip4_reass+0x9c>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800fc78:	f1bb 0f00 	cmp.w	fp, #0
 800fc7c:	f43f af24 	beq.w	800fac8 <ip4_reass+0x194>
 800fc80:	f04f 0a00 	mov.w	sl, #0
 800fc84:	e718      	b.n	800fab8 <ip4_reass+0x184>
 800fc86:	bf00      	nop

0800fc88 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800fc88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8c:	ed2d 8b02 	vpush	{d8}
 800fc90:	ee08 2a10 	vmov	s16, r2
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800fc94:	8cca      	ldrh	r2, [r1, #38]	; 0x26
{
 800fc96:	b08b      	sub	sp, #44	; 0x2c
 800fc98:	4606      	mov	r6, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800fc9a:	f1b2 0314 	subs.w	r3, r2, #20
{
 800fc9e:	468a      	mov	sl, r1
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800fca0:	bf48      	it	mi
 800fca2:	f1a2 030d 	submi.w	r3, r2, #13
 800fca6:	ea4f 08e3 	mov.w	r8, r3, asr #3
 800fcaa:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800fcae:	9307      	str	r3, [sp, #28]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800fcb0:	6843      	ldr	r3, [r0, #4]
 800fcb2:	9303      	str	r3, [sp, #12]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	f003 030f 	and.w	r3, r3, #15
 800fcba:	2b05      	cmp	r3, #5
 800fcbc:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800fcc0:	d00d      	beq.n	800fcde <ip4_frag+0x56>
 800fcc2:	4b5d      	ldr	r3, [pc, #372]	; (800fe38 <ip4_frag+0x1b0>)
 800fcc4:	f240 22e1 	movw	r2, #737	; 0x2e1
 800fcc8:	495c      	ldr	r1, [pc, #368]	; (800fe3c <ip4_frag+0x1b4>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800fcca:	485d      	ldr	r0, [pc, #372]	; (800fe40 <ip4_frag+0x1b8>)
 800fccc:	f001 fcb2 	bl	8011634 <iprintf>
 800fcd0:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800fcd4:	b00b      	add	sp, #44	; 0x2c
 800fcd6:	ecbd 8b02 	vpop	{d8}
 800fcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800fcde:	9b03      	ldr	r3, [sp, #12]
 800fce0:	88d8      	ldrh	r0, [r3, #6]
 800fce2:	f7f9 fb29 	bl	8009338 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800fce6:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800fcea:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 800fcee:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800fcf0:	d004      	beq.n	800fcfc <ip4_frag+0x74>
 800fcf2:	4b51      	ldr	r3, [pc, #324]	; (800fe38 <ip4_frag+0x1b0>)
 800fcf4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800fcf8:	4952      	ldr	r1, [pc, #328]	; (800fe44 <ip4_frag+0x1bc>)
 800fcfa:	e7e6      	b.n	800fcca <ip4_frag+0x42>
  left = p->tot_len - IP_HLEN;
 800fcfc:	8935      	ldrh	r5, [r6, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 800fcfe:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 800fd02:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800fd04:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800fd08:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 800fd0a:	9306      	str	r3, [sp, #24]
  while (left) {
 800fd0c:	b90d      	cbnz	r5, 800fd12 <ip4_frag+0x8a>
  return ERR_OK;
 800fd0e:	4628      	mov	r0, r5
 800fd10:	e7e0      	b.n	800fcd4 <ip4_frag+0x4c>
    fragsize = LWIP_MIN(left, nfb * 8);
 800fd12:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fd14:	2200      	movs	r2, #0
 800fd16:	2114      	movs	r1, #20
 800fd18:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 800fd1a:	42ab      	cmp	r3, r5
 800fd1c:	bfa8      	it	ge
 800fd1e:	462b      	movge	r3, r5
 800fd20:	b29b      	uxth	r3, r3
 800fd22:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800fd24:	f7f9 ffa8 	bl	8009c78 <pbuf_alloc>
    if (rambuf == NULL) {
 800fd28:	4680      	mov	r8, r0
 800fd2a:	b368      	cbz	r0, 800fd88 <ip4_frag+0x100>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800fd2c:	8973      	ldrh	r3, [r6, #10]
 800fd2e:	2b13      	cmp	r3, #19
 800fd30:	d806      	bhi.n	800fd40 <ip4_frag+0xb8>
 800fd32:	4b41      	ldr	r3, [pc, #260]	; (800fe38 <ip4_frag+0x1b0>)
 800fd34:	f44f 7242 	mov.w	r2, #776	; 0x308
 800fd38:	4943      	ldr	r1, [pc, #268]	; (800fe48 <ip4_frag+0x1c0>)
 800fd3a:	4841      	ldr	r0, [pc, #260]	; (800fe40 <ip4_frag+0x1b8>)
 800fd3c:	f001 fc7a 	bl	8011634 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800fd40:	9b03      	ldr	r3, [sp, #12]
 800fd42:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800fd46:	4619      	mov	r1, r3
 800fd48:	3114      	adds	r1, #20
 800fd4a:	f853 0b04 	ldr.w	r0, [r3], #4
 800fd4e:	428b      	cmp	r3, r1
 800fd50:	f842 0b04 	str.w	r0, [r2], #4
 800fd54:	d1f9      	bne.n	800fd4a <ip4_frag+0xc2>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800fd56:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 800fd5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    while (left_to_copy) {
 800fd5e:	f1b9 0f00 	cmp.w	r9, #0
 800fd62:	d038      	beq.n	800fdd6 <ip4_frag+0x14e>
      u16_t plen = p->len - poff;
 800fd64:	8974      	ldrh	r4, [r6, #10]
 800fd66:	1be4      	subs	r4, r4, r7
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800fd68:	b2a4      	uxth	r4, r4
 800fd6a:	454c      	cmp	r4, r9
 800fd6c:	bf28      	it	cs
 800fd6e:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 800fd70:	b914      	cbnz	r4, 800fd78 <ip4_frag+0xf0>
        p = p->next;
 800fd72:	6836      	ldr	r6, [r6, #0]
        poff = 0;
 800fd74:	2700      	movs	r7, #0
 800fd76:	e7f2      	b.n	800fd5e <ip4_frag+0xd6>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800fd78:	2005      	movs	r0, #5
 800fd7a:	f7f9 fd73 	bl	8009864 <memp_malloc>
      if (pcr == NULL) {
 800fd7e:	4603      	mov	r3, r0
 800fd80:	b928      	cbnz	r0, 800fd8e <ip4_frag+0x106>
        pbuf_free(rambuf);
 800fd82:	4640      	mov	r0, r8
 800fd84:	f7f9 ff0e 	bl	8009ba4 <pbuf_free>
  return ERR_MEM;
 800fd88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd8c:	e7a2      	b.n	800fcd4 <ip4_frag+0x4c>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800fd8e:	9401      	str	r4, [sp, #4]
 800fd90:	4621      	mov	r1, r4
 800fd92:	6872      	ldr	r2, [r6, #4]
 800fd94:	9008      	str	r0, [sp, #32]
 800fd96:	2004      	movs	r0, #4
 800fd98:	443a      	add	r2, r7
 800fd9a:	9200      	str	r2, [sp, #0]
 800fd9c:	2202      	movs	r2, #2
 800fd9e:	f7f9 fecb 	bl	8009b38 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800fda2:	9b08      	ldr	r3, [sp, #32]
 800fda4:	b918      	cbnz	r0, 800fdae <ip4_frag+0x126>
        ip_frag_free_pbuf_custom_ref(pcr);
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7ff fd7e 	bl	800f8a8 <ip_frag_free_pbuf_custom_ref>
 800fdac:	e7e9      	b.n	800fd82 <ip4_frag+0xfa>
 800fdae:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy -= newpbuflen;
 800fdb2:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 800fdb6:	4630      	mov	r0, r6
 800fdb8:	f7fa f8a6 	bl	8009f08 <pbuf_ref>
      pcr->original = p;
 800fdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fdbe:	4a23      	ldr	r2, [pc, #140]	; (800fe4c <ip4_frag+0x1c4>)
      left_to_copy -= newpbuflen;
 800fdc0:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 800fdc4:	9908      	ldr	r1, [sp, #32]
 800fdc6:	4640      	mov	r0, r8
      pcr->original = p;
 800fdc8:	615e      	str	r6, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800fdca:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 800fdcc:	f7fa f8b8 	bl	8009f40 <pbuf_cat>
      if (left_to_copy) {
 800fdd0:	f1b9 0f00 	cmp.w	r9, #0
 800fdd4:	d1cd      	bne.n	800fd72 <ip4_frag+0xea>
    tmp = (IP_OFFMASK & (ofo));
 800fdd6:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 800fdd8:	4427      	add	r7, r4
    tmp = (IP_OFFMASK & (ofo));
 800fdda:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800fdde:	f8ba 3026 	ldrh.w	r3, [sl, #38]	; 0x26
    poff += newpbuflen;
 800fde2:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 800fde4:	3b13      	subs	r3, #19
    if (!last) {
 800fde6:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800fde8:	bfa8      	it	ge
 800fdea:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fdee:	f7f9 faa3 	bl	8009338 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800fdf2:	9b05      	ldr	r3, [sp, #20]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800fdf4:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800fdf8:	f103 0014 	add.w	r0, r3, #20
 800fdfc:	b280      	uxth	r0, r0
 800fdfe:	f7f9 fa9b 	bl	8009338 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800fe02:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800fe04:	ee18 2a10 	vmov	r2, s16
 800fe08:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800fe0a:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 800fe0e:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 800fe10:	f88b 300a 	strb.w	r3, [fp, #10]
 800fe14:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 800fe18:	f8da 3014 	ldr.w	r3, [sl, #20]
 800fe1c:	4798      	blx	r3
    pbuf_free(rambuf);
 800fe1e:	4640      	mov	r0, r8
 800fe20:	f7f9 fec0 	bl	8009ba4 <pbuf_free>
    left -= fragsize;
 800fe24:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 800fe26:	9a07      	ldr	r2, [sp, #28]
    left -= fragsize;
 800fe28:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800fe2a:	9b04      	ldr	r3, [sp, #16]
 800fe2c:	4413      	add	r3, r2
    left -= fragsize;
 800fe2e:	b2ad      	uxth	r5, r5
    ofo += nfb;
 800fe30:	b29b      	uxth	r3, r3
 800fe32:	9304      	str	r3, [sp, #16]
 800fe34:	e76a      	b.n	800fd0c <ip4_frag+0x84>
 800fe36:	bf00      	nop
 800fe38:	08015040 	.word	0x08015040
 800fe3c:	08015178 	.word	0x08015178
 800fe40:	08012feb 	.word	0x08012feb
 800fe44:	0801519f 	.word	0x0801519f
 800fe48:	080151b9 	.word	0x080151b9
 800fe4c:	0800f8d5 	.word	0x0800f8d5

0800fe50 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800fe50:	8943      	ldrh	r3, [r0, #10]
 800fe52:	2b0e      	cmp	r3, #14
{
 800fe54:	b570      	push	{r4, r5, r6, lr}
 800fe56:	4604      	mov	r4, r0
 800fe58:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800fe5a:	d914      	bls.n	800fe86 <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800fe5c:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800fe5e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800fe60:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800fe62:	07d9      	lsls	r1, r3, #31
 800fe64:	d50a      	bpl.n	800fe7c <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d111      	bne.n	800fe8e <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800fe6a:	7843      	ldrb	r3, [r0, #1]
 800fe6c:	b933      	cbnz	r3, 800fe7c <ethernet_input+0x2c>
 800fe6e:	7883      	ldrb	r3, [r0, #2]
 800fe70:	2b5e      	cmp	r3, #94	; 0x5e
 800fe72:	d103      	bne.n	800fe7c <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800fe74:	7b63      	ldrb	r3, [r4, #13]
 800fe76:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fe7a:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800fe7c:	2e08      	cmp	r6, #8
 800fe7e:	d010      	beq.n	800fea2 <ethernet_input+0x52>
 800fe80:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800fe84:	d01e      	beq.n	800fec4 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800fe86:	4620      	mov	r0, r4
 800fe88:	f7f9 fe8c 	bl	8009ba4 <pbuf_free>
  return ERR_OK;
 800fe8c:	e018      	b.n	800fec0 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800fe8e:	2206      	movs	r2, #6
 800fe90:	4914      	ldr	r1, [pc, #80]	; (800fee4 <ethernet_input+0x94>)
 800fe92:	f001 fb01 	bl	8011498 <memcmp>
 800fe96:	2800      	cmp	r0, #0
 800fe98:	d1f0      	bne.n	800fe7c <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800fe9a:	7b63      	ldrb	r3, [r4, #13]
 800fe9c:	f043 0308 	orr.w	r3, r3, #8
 800fea0:	e7eb      	b.n	800fe7a <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fea2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800fea6:	071a      	lsls	r2, r3, #28
 800fea8:	d5ed      	bpl.n	800fe86 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800feaa:	f06f 010d 	mvn.w	r1, #13
 800feae:	4620      	mov	r0, r4
 800feb0:	f7f9 fe72 	bl	8009b98 <pbuf_header>
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d1e6      	bne.n	800fe86 <ethernet_input+0x36>
        ip4_input(p, netif);
 800feb8:	4629      	mov	r1, r5
 800feba:	4620      	mov	r0, r4
 800febc:	f7ff faa6 	bl	800f40c <ip4_input>
}
 800fec0:	2000      	movs	r0, #0
 800fec2:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fec4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800fec8:	071b      	lsls	r3, r3, #28
 800feca:	d5dc      	bpl.n	800fe86 <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800fecc:	f06f 010d 	mvn.w	r1, #13
 800fed0:	4620      	mov	r0, r4
 800fed2:	f7f9 fe61 	bl	8009b98 <pbuf_header>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	d1d5      	bne.n	800fe86 <ethernet_input+0x36>
        etharp_input(p, netif);
 800feda:	4629      	mov	r1, r5
 800fedc:	4620      	mov	r0, r4
 800fede:	f7fe ff1b 	bl	800ed18 <etharp_input>
      break;
 800fee2:	e7ed      	b.n	800fec0 <ethernet_input+0x70>
 800fee4:	0801523f 	.word	0x0801523f

0800fee8 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800fee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feec:	460d      	mov	r5, r1
 800feee:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fef0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800fef4:	4616      	mov	r6, r2
 800fef6:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800fef8:	f7f9 fa1e 	bl	8009338 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800fefc:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800fefe:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800ff00:	4628      	mov	r0, r5
 800ff02:	f7f9 fe49 	bl	8009b98 <pbuf_header>
 800ff06:	b9e0      	cbnz	r0, 800ff42 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800ff08:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800ff0a:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	600b      	str	r3, [r1, #0]
 800ff12:	88bb      	ldrh	r3, [r7, #4]
 800ff14:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800ff16:	6833      	ldr	r3, [r6, #0]
 800ff18:	f8c1 3006 	str.w	r3, [r1, #6]
 800ff1c:	88b3      	ldrh	r3, [r6, #4]
 800ff1e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800ff20:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ff24:	2b06      	cmp	r3, #6
 800ff26:	d006      	beq.n	800ff36 <ethernet_output+0x4e>
 800ff28:	4b08      	ldr	r3, [pc, #32]	; (800ff4c <ethernet_output+0x64>)
 800ff2a:	f240 122b 	movw	r2, #299	; 0x12b
 800ff2e:	4908      	ldr	r1, [pc, #32]	; (800ff50 <ethernet_output+0x68>)
 800ff30:	4808      	ldr	r0, [pc, #32]	; (800ff54 <ethernet_output+0x6c>)
 800ff32:	f001 fb7f 	bl	8011634 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800ff36:	69a3      	ldr	r3, [r4, #24]
 800ff38:	4629      	mov	r1, r5
 800ff3a:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800ff3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800ff40:	4718      	bx	r3
}
 800ff42:	f06f 0001 	mvn.w	r0, #1
 800ff46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4a:	bf00      	nop
 800ff4c:	080151d9 	.word	0x080151d9
 800ff50:	0801520e 	.word	0x0801520e
 800ff54:	08012feb 	.word	0x08012feb

0800ff58 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800ff58:	b513      	push	{r0, r1, r4, lr}
  osMessageQDef(QUEUE, size, void *);
 800ff5a:	2304      	movs	r3, #4
{
 800ff5c:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800ff5e:	9100      	str	r1, [sp, #0]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ff60:	4668      	mov	r0, sp
 800ff62:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800ff64:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800ff66:	f7f6 fadd 	bl	8006524 <osMessageCreate>
 800ff6a:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800ff6c:	fab0 f080 	clz	r0, r0
 800ff70:	0940      	lsrs	r0, r0, #5
  return ERR_MEM;
 
 return ERR_OK;
}
 800ff72:	4240      	negs	r0, r0
 800ff74:	b002      	add	sp, #8
 800ff76:	bd10      	pop	{r4, pc}

0800ff78 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800ff78:	b510      	push	{r4, lr}
 800ff7a:	4604      	mov	r4, r0
	if( osMessageWaiting(*mbox) )
 800ff7c:	6800      	ldr	r0, [r0, #0]
 800ff7e:	f7f6 fb41 	bl	8006604 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 800ff82:	6820      	ldr	r0, [r4, #0]

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800ff84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	osMessageDelete(*mbox);
 800ff88:	f7f6 bb43 	b.w	8006612 <osMessageDelete>

0800ff8c <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800ff8c:	b538      	push	{r3, r4, r5, lr}
 800ff8e:	4604      	mov	r4, r0
 800ff90:	460d      	mov	r5, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800ff92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff96:	4629      	mov	r1, r5
 800ff98:	6820      	ldr	r0, [r4, #0]
 800ff9a:	f7f6 fac9 	bl	8006530 <osMessagePut>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d1f7      	bne.n	800ff92 <sys_mbox_post+0x6>
}
 800ffa2:	bd38      	pop	{r3, r4, r5, pc}

0800ffa4 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	6800      	ldr	r0, [r0, #0]
{
 800ffa8:	b508      	push	{r3, lr}
   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800ffaa:	f7f6 fac1 	bl	8006530 <osMessagePut>
 800ffae:	3800      	subs	r0, #0
 800ffb0:	bf18      	it	ne
 800ffb2:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 800ffb4:	4240      	negs	r0, r0
 800ffb6:	bd08      	pop	{r3, pc}

0800ffb8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ffb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffba:	4617      	mov	r7, r2
 800ffbc:	b085      	sub	sp, #20
 800ffbe:	4606      	mov	r6, r0
 800ffc0:	460d      	mov	r5, r1
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800ffc2:	f7f6 f9ee 	bl	80063a2 <osKernelSysTick>
 800ffc6:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800ffc8:	b177      	cbz	r7, 800ffe8 <sys_arch_mbox_fetch+0x30>
  { 
    event = osMessageGet (*mbox, timeout);
 800ffca:	463a      	mov	r2, r7
 800ffcc:	6831      	ldr	r1, [r6, #0]
 800ffce:	a801      	add	r0, sp, #4
 800ffd0:	f7f6 fad6 	bl	8006580 <osMessageGet>
    
    if(event.status == osEventMessage)
 800ffd4:	9b01      	ldr	r3, [sp, #4]
 800ffd6:	2b10      	cmp	r3, #16
 800ffd8:	d10d      	bne.n	800fff6 <sys_arch_mbox_fetch+0x3e>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800ffda:	9b02      	ldr	r3, [sp, #8]
 800ffdc:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800ffde:	f7f6 f9e0 	bl	80063a2 <osKernelSysTick>
 800ffe2:	1b00      	subs	r0, r0, r4
  }
}
 800ffe4:	b005      	add	sp, #20
 800ffe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800ffe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ffec:	6831      	ldr	r1, [r6, #0]
 800ffee:	a801      	add	r0, sp, #4
 800fff0:	f7f6 fac6 	bl	8006580 <osMessageGet>
 800fff4:	e7f1      	b.n	800ffda <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800fff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fffa:	e7f3      	b.n	800ffe4 <sys_arch_mbox_fetch+0x2c>

0800fffc <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800fffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fffe:	460c      	mov	r4, r1
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 8010000:	2200      	movs	r2, #0
 8010002:	6801      	ldr	r1, [r0, #0]
 8010004:	a801      	add	r0, sp, #4
 8010006:	f7f6 fabb 	bl	8006580 <osMessageGet>
  
  if(event.status == osEventMessage)
 801000a:	9b01      	ldr	r3, [sp, #4]
 801000c:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 801000e:	bf05      	ittet	eq
 8010010:	9b02      	ldreq	r3, [sp, #8]
    return ERR_OK;
 8010012:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8010014:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    *msg = (void *)event.value.v;
 8010018:	6023      	streq	r3, [r4, #0]
  }
}
 801001a:	b004      	add	sp, #16
 801001c:	bd10      	pop	{r4, pc}

0801001e <sys_mbox_valid>:
 801001e:	6800      	ldr	r0, [r0, #0]
 8010020:	3800      	subs	r0, #0
 8010022:	bf18      	it	ne
 8010024:	2001      	movne	r0, #1
 8010026:	4770      	bx	lr

08010028 <sys_mbox_set_invalid>:
 8010028:	2300      	movs	r3, #0
 801002a:	6003      	str	r3, [r0, #0]
 801002c:	4770      	bx	lr

0801002e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801002e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010030:	4606      	mov	r6, r0
  osSemaphoreDef(SEM);
 8010032:	2400      	movs	r4, #0
{
 8010034:	460d      	mov	r5, r1

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8010036:	a801      	add	r0, sp, #4
 8010038:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 801003a:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801003c:	f7f6 fa32 	bl	80064a4 <osSemaphoreCreate>
 8010040:	6030      	str	r0, [r6, #0]
	
  if(*sem == NULL)
 8010042:	b130      	cbz	r0, 8010052 <sys_sem_new+0x24>
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
  }
	
  if(count == 0)	// Means it can't be taken
 8010044:	b945      	cbnz	r5, 8010058 <sys_sem_new+0x2a>
  {
    osSemaphoreWait(*sem,0);
 8010046:	4629      	mov	r1, r5
 8010048:	f7f6 fa40 	bl	80064cc <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 801004c:	4628      	mov	r0, r5
}
 801004e:	b002      	add	sp, #8
 8010050:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MEM;
 8010052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010056:	e7fa      	b.n	801004e <sys_sem_new+0x20>
	return ERR_OK;
 8010058:	4620      	mov	r0, r4
 801005a:	e7f8      	b.n	801004e <sys_sem_new+0x20>

0801005c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801005c:	b570      	push	{r4, r5, r6, lr}
 801005e:	460e      	mov	r6, r1
 8010060:	4605      	mov	r5, r0
  uint32_t starttime = osKernelSysTick();
 8010062:	f7f6 f99e 	bl	80063a2 <osKernelSysTick>
 8010066:	4604      	mov	r4, r0
  
  if(timeout != 0)
 8010068:	b146      	cbz	r6, 801007c <sys_arch_sem_wait+0x20>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801006a:	4631      	mov	r1, r6
 801006c:	6828      	ldr	r0, [r5, #0]
 801006e:	f7f6 fa2d 	bl	80064cc <osSemaphoreWait>
 8010072:	b958      	cbnz	r0, 801008c <sys_arch_sem_wait+0x30>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 8010074:	f7f6 f995 	bl	80063a2 <osKernelSysTick>
 8010078:	1b00      	subs	r0, r0, r4
  }
}
 801007a:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801007c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010080:	6828      	ldr	r0, [r5, #0]
 8010082:	f7f6 fa23 	bl	80064cc <osSemaphoreWait>
 8010086:	2800      	cmp	r0, #0
 8010088:	d1f8      	bne.n	801007c <sys_arch_sem_wait+0x20>
 801008a:	e7f3      	b.n	8010074 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 801008c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010090:	e7f3      	b.n	801007a <sys_arch_sem_wait+0x1e>

08010092 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 8010092:	6800      	ldr	r0, [r0, #0]
 8010094:	f7f6 ba42 	b.w	800651c <osSemaphoreRelease>

08010098 <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 8010098:	6800      	ldr	r0, [r0, #0]
 801009a:	f7f6 ba41 	b.w	8006520 <osSemaphoreDelete>

0801009e <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
  if (*sem == SYS_SEM_NULL)
 801009e:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;                                       
}
 80100a0:	3800      	subs	r0, #0
 80100a2:	bf18      	it	ne
 80100a4:	2001      	movne	r0, #1
 80100a6:	4770      	bx	lr

080100a8 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
  *sem = SYS_SEM_NULL;                                                          
 80100a8:	2300      	movs	r3, #0
 80100aa:	6003      	str	r3, [r0, #0]
} 
 80100ac:	4770      	bx	lr
	...

080100b0 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 80100b0:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80100b2:	4803      	ldr	r0, [pc, #12]	; (80100c0 <sys_init+0x10>)
 80100b4:	f7f6 f99c 	bl	80063f0 <osMutexCreate>
 80100b8:	4b02      	ldr	r3, [pc, #8]	; (80100c4 <sys_init+0x14>)
 80100ba:	6018      	str	r0, [r3, #0]
}
 80100bc:	bd08      	pop	{r3, pc}
 80100be:	bf00      	nop
 80100c0:	0801524c 	.word	0x0801524c
 80100c4:	2000bda0 	.word	0x2000bda0

080100c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80100c8:	b513      	push	{r0, r1, r4, lr}
  
  osMutexDef(MUTEX);
 80100ca:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80100cc:	4604      	mov	r4, r0
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 80100ce:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 80100d0:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80100d2:	f7f6 f98d 	bl	80063f0 <osMutexCreate>
 80100d6:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 80100d8:	fab0 f080 	clz	r0, r0
 80100dc:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 80100de:	4240      	negs	r0, r0
 80100e0:	b002      	add	sp, #8
 80100e2:	bd10      	pop	{r4, pc}

080100e4 <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 80100e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80100e8:	6800      	ldr	r0, [r0, #0]
 80100ea:	f7f6 b985 	b.w	80063f8 <osMutexWait>

080100ee <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80100ee:	6800      	ldr	r0, [r0, #0]
 80100f0:	f7f6 b9aa 	b.w	8006448 <osMutexRelease>

080100f4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80100f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80100f6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80100fa:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 80100fc:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80100fe:	f8ad 100c 	strh.w	r1, [sp, #12]
 8010102:	2100      	movs	r1, #0
 8010104:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 8010108:	4611      	mov	r1, r2
 801010a:	f7f6 f951 	bl	80063b0 <osThreadCreate>
}
 801010e:	b007      	add	sp, #28
 8010110:	f85d fb04 	ldr.w	pc, [sp], #4

08010114 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8010114:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8010116:	4b04      	ldr	r3, [pc, #16]	; (8010128 <sys_arch_protect+0x14>)
 8010118:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801011c:	6818      	ldr	r0, [r3, #0]
 801011e:	f7f6 f96b 	bl	80063f8 <osMutexWait>
  return (sys_prot_t)1;
}
 8010122:	2001      	movs	r0, #1
 8010124:	bd08      	pop	{r3, pc}
 8010126:	bf00      	nop
 8010128:	2000bda0 	.word	0x2000bda0

0801012c <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801012c:	4b01      	ldr	r3, [pc, #4]	; (8010134 <sys_arch_unprotect+0x8>)
 801012e:	6818      	ldr	r0, [r3, #0]
 8010130:	f7f6 b98a 	b.w	8006448 <osMutexRelease>
 8010134:	2000bda0 	.word	0x2000bda0

08010138 <__io_putchar>:
	}

#elif defined STM32F746xx
	int __io_putchar(int ch)
	{
		while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 8010138:	4b04      	ldr	r3, [pc, #16]	; (801014c <__io_putchar+0x14>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	69da      	ldr	r2, [r3, #28]
 8010140:	0612      	lsls	r2, r2, #24
 8010142:	d5fc      	bpl.n	801013e <__io_putchar+0x6>
		pUart->Instance->TDR = (uint16_t)ch;
 8010144:	b280      	uxth	r0, r0
 8010146:	6298      	str	r0, [r3, #40]	; 0x28
		return 0;
	}
 8010148:	2000      	movs	r0, #0
 801014a:	4770      	bx	lr
 801014c:	200083dc 	.word	0x200083dc

08010150 <inkey>:

	char inkey(void)
	{
		uint32_t flags = pUart->Instance->ISR;
 8010150:	4b05      	ldr	r3, [pc, #20]	; (8010168 <inkey+0x18>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	69d8      	ldr	r0, [r3, #28]

		if((flags & UART_FLAG_RXNE) || (flags & UART_FLAG_ORE))
 8010158:	f010 0028 	ands.w	r0, r0, #40	; 0x28
 801015c:	d003      	beq.n	8010166 <inkey+0x16>
		{
			__HAL_UART_CLEAR_OREFLAG(pUart);
 801015e:	2208      	movs	r2, #8
 8010160:	621a      	str	r2, [r3, #32]
			return (pUart->Instance->RDR);
 8010162:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010164:	b2c0      	uxtb	r0, r0
		}
		else
			return 0;
	}
 8010166:	4770      	bx	lr
 8010168:	200083dc 	.word	0x200083dc

0801016c <debug_init>:
#endif


void debug_init(UART_HandleTypeDef* handler)
{
	pUart = handler;
 801016c:	4b01      	ldr	r3, [pc, #4]	; (8010174 <debug_init+0x8>)
 801016e:	6018      	str	r0, [r3, #0]
}
 8010170:	4770      	bx	lr
 8010172:	bf00      	nop
 8010174:	200083dc 	.word	0x200083dc

08010178 <debug_chr>:
extern char inkey(void);

//send chr via UART (platform dependent)
void debug_chr(char chr)
{
	__io_putchar(chr);
 8010178:	f7ff bfde 	b.w	8010138 <__io_putchar>

0801017c <debug_ascii>:


//sends char b over pDbgu UART. Replaces values that can change cursor pos. on terminal
void debug_ascii(uint8_t b)
{
	switch(b)
 801017c:	280a      	cmp	r0, #10
 801017e:	d804      	bhi.n	801018a <debug_ascii+0xe>
 8010180:	2807      	cmp	r0, #7
 8010182:	d804      	bhi.n	801018e <debug_ascii+0x12>
 8010184:	b128      	cbz	r0, 8010192 <debug_ascii+0x16>
	__io_putchar(chr);
 8010186:	f7ff bfd7 	b.w	8010138 <__io_putchar>
	switch(b)
 801018a:	280d      	cmp	r0, #13
 801018c:	d1fb      	bne.n	8010186 <debug_ascii+0xa>
	__io_putchar(chr);
 801018e:	2020      	movs	r0, #32
 8010190:	e7f9      	b.n	8010186 <debug_ascii+0xa>
 8010192:	202e      	movs	r0, #46	; 0x2e
 8010194:	e7f7      	b.n	8010186 <debug_ascii+0xa>
	...

08010198 <debug_dump>:




void debug_dump(void *address, uint16_t len)
{
 8010198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801019c:	4604      	mov	r4, r0
 801019e:	4688      	mov	r8, r1
			debug_chr('\n');
			
			break;
		}
		
		xprintf("%08X %04X:   ",(unsigned int)buf,(unsigned int)(len-counter));
 80101a0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80102b4 <debug_dump+0x11c>
	xprintf("Debug dump @ %08X\n",(unsigned int)address);
 80101a4:	4601      	mov	r1, r0
 80101a6:	340f      	adds	r4, #15
	uint16_t i, counter=len;
 80101a8:	4646      	mov	r6, r8
		
		
		for(i=0;i<bytesInLine;i++)
		{
			xprintf("%02X ",(unsigned int)(buf[i]));
 80101aa:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80102b8 <debug_dump+0x120>
	xprintf("Debug dump @ %08X\n",(unsigned int)address);
 80101ae:	483d      	ldr	r0, [pc, #244]	; (80102a4 <debug_dump+0x10c>)
 80101b0:	f000 feac 	bl	8010f0c <xprintf>
 80101b4:	f1a4 070f 	sub.w	r7, r4, #15
		if(counter < bytesInLine)
 80101b8:	2e0f      	cmp	r6, #15
 80101ba:	eba8 0206 	sub.w	r2, r8, r6
			xprintf("%08X %04X: ",(unsigned int)buf,(unsigned int)(len-counter));
 80101be:	4639      	mov	r1, r7
		if(counter < bytesInLine)
 80101c0:	d840      	bhi.n	8010244 <debug_dump+0xac>
			xprintf("%08X %04X: ",(unsigned int)buf,(unsigned int)(len-counter));
 80101c2:	2400      	movs	r4, #0
					xprintf("   ");
 80101c4:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80102bc <debug_dump+0x124>
					xprintf("%02X ",(unsigned int)(buf[i]));
 80101c8:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80102b8 <debug_dump+0x120>
				if(i%8==7) xprintf(" ");
 80101cc:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80102ac <debug_dump+0x114>
			xprintf("%08X %04X: ",(unsigned int)buf,(unsigned int)(len-counter));
 80101d0:	4835      	ldr	r0, [pc, #212]	; (80102a8 <debug_dump+0x110>)
 80101d2:	f000 fe9b 	bl	8010f0c <xprintf>
			for(i=0;i<bytesInLine;i++)
 80101d6:	b2a5      	uxth	r5, r4
				if(i<counter)
 80101d8:	42b5      	cmp	r5, r6
 80101da:	d22b      	bcs.n	8010234 <debug_dump+0x9c>
					xprintf("%02X ",(unsigned int)(buf[i]));
 80101dc:	5d39      	ldrb	r1, [r7, r4]
 80101de:	4648      	mov	r0, r9
 80101e0:	f000 fe94 	bl	8010f0c <xprintf>
				if(i%8==7) xprintf(" ");
 80101e4:	f005 0507 	and.w	r5, r5, #7
 80101e8:	2d07      	cmp	r5, #7
 80101ea:	d102      	bne.n	80101f2 <debug_dump+0x5a>
 80101ec:	4650      	mov	r0, sl
 80101ee:	f000 fe8d 	bl	8010f0c <xprintf>
			for(i=0;i<bytesInLine;i++)
 80101f2:	3401      	adds	r4, #1
 80101f4:	2c10      	cmp	r4, #16
 80101f6:	d1ee      	bne.n	80101d6 <debug_dump+0x3e>
				xprintf(" ");
 80101f8:	482c      	ldr	r0, [pc, #176]	; (80102ac <debug_dump+0x114>)
 80101fa:	f000 fe87 	bl	8010f0c <xprintf>
 80101fe:	482b      	ldr	r0, [pc, #172]	; (80102ac <debug_dump+0x114>)
 8010200:	f000 fe84 	bl	8010f0c <xprintf>
 8010204:	4829      	ldr	r0, [pc, #164]	; (80102ac <debug_dump+0x114>)
 8010206:	f000 fe81 	bl	8010f0c <xprintf>
 801020a:	4828      	ldr	r0, [pc, #160]	; (80102ac <debug_dump+0x114>)
 801020c:	f000 fe7e 	bl	8010f0c <xprintf>
 8010210:	2100      	movs	r1, #0
				if(i<counter)
 8010212:	b28b      	uxth	r3, r1
 8010214:	42b3      	cmp	r3, r6
 8010216:	d211      	bcs.n	801023c <debug_dump+0xa4>
					debug_ascii(buf[i]);
 8010218:	5c78      	ldrb	r0, [r7, r1]
 801021a:	f7ff ffaf 	bl	801017c <debug_ascii>
			for(i=0;i<bytesInLine;i++)
 801021e:	3101      	adds	r1, #1
 8010220:	2910      	cmp	r1, #16
 8010222:	d1f6      	bne.n	8010212 <debug_dump+0x7a>
	__io_putchar(chr);
 8010224:	200a      	movs	r0, #10
 8010226:	f7ff ff87 	bl	8010138 <__io_putchar>
			
		if(counter == 0) break;
		
	}	//while(counter)
	//footer
	xprintf("End of dump");
 801022a:	4821      	ldr	r0, [pc, #132]	; (80102b0 <debug_dump+0x118>)
	
}
 801022c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	xprintf("End of dump");
 8010230:	f000 be6c 	b.w	8010f0c <xprintf>
					xprintf("   ");
 8010234:	4640      	mov	r0, r8
 8010236:	f000 fe69 	bl	8010f0c <xprintf>
 801023a:	e7d3      	b.n	80101e4 <debug_dump+0x4c>
	__io_putchar(chr);
 801023c:	2020      	movs	r0, #32
 801023e:	f7ff ff7b 	bl	8010138 <__io_putchar>
}
 8010242:	e7ec      	b.n	801021e <debug_dump+0x86>
		xprintf("%08X %04X:   ",(unsigned int)buf,(unsigned int)(len-counter));
 8010244:	2500      	movs	r5, #0
 8010246:	4648      	mov	r0, r9
 8010248:	f000 fe60 	bl	8010f0c <xprintf>
			xprintf("%02X ",(unsigned int)(buf[i]));
 801024c:	5d79      	ldrb	r1, [r7, r5]
 801024e:	4650      	mov	r0, sl
 8010250:	f000 fe5c 	bl	8010f0c <xprintf>
			if(i%8==7) debug_chr(' ');
 8010254:	f005 0307 	and.w	r3, r5, #7
 8010258:	2b07      	cmp	r3, #7
 801025a:	d102      	bne.n	8010262 <debug_dump+0xca>
	__io_putchar(chr);
 801025c:	2020      	movs	r0, #32
 801025e:	f7ff ff6b 	bl	8010138 <__io_putchar>
		for(i=0;i<bytesInLine;i++)
 8010262:	3501      	adds	r5, #1
 8010264:	2d10      	cmp	r5, #16
 8010266:	d1f1      	bne.n	801024c <debug_dump+0xb4>
	__io_putchar(chr);
 8010268:	2020      	movs	r0, #32
 801026a:	f7ff ff65 	bl	8010138 <__io_putchar>
 801026e:	2020      	movs	r0, #32
 8010270:	f7ff ff62 	bl	8010138 <__io_putchar>
 8010274:	2020      	movs	r0, #32
 8010276:	f7ff ff5f 	bl	8010138 <__io_putchar>
 801027a:	2020      	movs	r0, #32
 801027c:	f7ff ff5c 	bl	8010138 <__io_putchar>
		for(i=0;i<bytesInLine;i++)
 8010280:	f1a4 0110 	sub.w	r1, r4, #16
			debug_ascii(buf[i]);
 8010284:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010288:	f7ff ff78 	bl	801017c <debug_ascii>
		for(i=0;i<bytesInLine;i++)
 801028c:	42a1      	cmp	r1, r4
 801028e:	d1f9      	bne.n	8010284 <debug_dump+0xec>
			counter -= bytesInLine;
 8010290:	3e10      	subs	r6, #16
	__io_putchar(chr);
 8010292:	200a      	movs	r0, #10
 8010294:	3410      	adds	r4, #16
 8010296:	f7ff ff4f 	bl	8010138 <__io_putchar>
			counter -= bytesInLine;
 801029a:	b2b6      	uxth	r6, r6
		if(counter == 0) break;
 801029c:	2e00      	cmp	r6, #0
 801029e:	d189      	bne.n	80101b4 <debug_dump+0x1c>
 80102a0:	e7c3      	b.n	801022a <debug_dump+0x92>
 80102a2:	bf00      	nop
 80102a4:	08015250 	.word	0x08015250
 80102a8:	08015263 	.word	0x08015263
 80102ac:	08015281 	.word	0x08015281
 80102b0:	08015283 	.word	0x08015283
 80102b4:	08015275 	.word	0x08015275
 80102b8:	0801526f 	.word	0x0801526f
 80102bc:	0801527f 	.word	0x0801527f

080102c0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80102c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80102c4:	4a24      	ldr	r2, [pc, #144]	; (8010358 <low_level_output+0x98>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 80102c6:	f04f 0800 	mov.w	r8, #0
{
 80102ca:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80102cc:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80102d0:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 80102d2:	4647      	mov	r7, r8
 80102d4:	4691      	mov	r9, r2
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80102d6:	68b3      	ldr	r3, [r6, #8]
  for(q = p; q != NULL; q = q->next)
 80102d8:	b92c      	cbnz	r4, 80102e6 <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80102da:	4639      	mov	r1, r7
 80102dc:	481e      	ldr	r0, [pc, #120]	; (8010358 <low_level_output+0x98>)
 80102de:	f7f0 fb0b 	bl	80008f8 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80102e2:	4620      	mov	r0, r4
 80102e4:	e004      	b.n	80102f0 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80102e6:	6832      	ldr	r2, [r6, #0]
 80102e8:	2a00      	cmp	r2, #0
 80102ea:	da11      	bge.n	8010310 <low_level_output+0x50>
        errval = ERR_USE;
 80102ec:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80102f0:	f8d9 3000 	ldr.w	r3, [r9]
 80102f4:	f241 0214 	movw	r2, #4116	; 0x1014
 80102f8:	5899      	ldr	r1, [r3, r2]
 80102fa:	0689      	lsls	r1, r1, #26
 80102fc:	d505      	bpl.n	801030a <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80102fe:	2120      	movs	r1, #32
 8010300:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8010302:	f241 0204 	movw	r2, #4100	; 0x1004
 8010306:	2100      	movs	r1, #0
 8010308:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 801030a:	b003      	add	sp, #12
 801030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 8010310:	8962      	ldrh	r2, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010312:	4645      	mov	r5, r8
      payloadoffset = 0;
 8010314:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8010318:	eb05 0802 	add.w	r8, r5, r2
 801031c:	6861      	ldr	r1, [r4, #4]
 801031e:	1958      	adds	r0, r3, r5
 8010320:	45d8      	cmp	r8, fp
 8010322:	4451      	add	r1, sl
 8010324:	d808      	bhi.n	8010338 <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8010326:	e9cd 2300 	strd	r2, r3, [sp]
 801032a:	f001 f8c3 	bl	80114b4 <memcpy>
      framelength = framelength + byteslefttocopy;
 801032e:	9a00      	ldr	r2, [sp, #0]
  for(q = p; q != NULL; q = q->next)
 8010330:	6824      	ldr	r4, [r4, #0]
      framelength = framelength + byteslefttocopy;
 8010332:	4417      	add	r7, r2
  for(q = p; q != NULL; q = q->next)
 8010334:	9b01      	ldr	r3, [sp, #4]
 8010336:	e7cf      	b.n	80102d8 <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8010338:	ebab 0505 	sub.w	r5, fp, r5
 801033c:	462a      	mov	r2, r5
 801033e:	f001 f8b9 	bl	80114b4 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8010342:	68f6      	ldr	r6, [r6, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8010344:	6833      	ldr	r3, [r6, #0]
 8010346:	2b00      	cmp	r3, #0
 8010348:	dbd0      	blt.n	80102ec <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801034a:	44aa      	add	sl, r5
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801034c:	442f      	add	r7, r5
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 801034e:	68b3      	ldr	r3, [r6, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8010350:	f2a8 52f4 	subw	r2, r8, #1524	; 0x5f4
        bufferoffset = 0;
 8010354:	2500      	movs	r5, #0
 8010356:	e7df      	b.n	8010318 <low_level_output+0x58>
 8010358:	2000d674 	.word	0x2000d674

0801035c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 801035c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010360:	4680      	mov	r8, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8010362:	4c36      	ldr	r4, [pc, #216]	; (801043c <ethernetif_input+0xe0>)
 8010364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010368:	6820      	ldr	r0, [r4, #0]
 801036a:	f7f6 f8af 	bl	80064cc <osSemaphoreWait>
 801036e:	2800      	cmp	r0, #0
 8010370:	d1f8      	bne.n	8010364 <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8010372:	4e33      	ldr	r6, [pc, #204]	; (8010440 <ethernetif_input+0xe4>)
 8010374:	4630      	mov	r0, r6
 8010376:	f7f0 fb31 	bl	80009dc <HAL_ETH_GetReceivedFrame_IT>
 801037a:	4604      	mov	r4, r0
 801037c:	2800      	cmp	r0, #0
 801037e:	d1f0      	bne.n	8010362 <ethernetif_input+0x6>
  len = heth.RxFrameInfos.length;
 8010380:	8fb1      	ldrh	r1, [r6, #60]	; 0x3c
  if (len > 0)
 8010382:	bb01      	cbnz	r1, 80103c6 <ethernetif_input+0x6a>
  struct pbuf *p = NULL;
 8010384:	2500      	movs	r5, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8010386:	6b33      	ldr	r3, [r6, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8010388:	2200      	movs	r2, #0
 801038a:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 801038c:	4282      	cmp	r2, r0
 801038e:	d14d      	bne.n	801042c <ethernetif_input+0xd0>
    heth.RxFrameInfos.SegCount =0;  
 8010390:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8010392:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 8010396:	63b3      	str	r3, [r6, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8010398:	6833      	ldr	r3, [r6, #0]
 801039a:	5899      	ldr	r1, [r3, r2]
 801039c:	0609      	lsls	r1, r1, #24
 801039e:	d505      	bpl.n	80103ac <ethernetif_input+0x50>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80103a0:	2180      	movs	r1, #128	; 0x80
 80103a2:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 80103a4:	f241 0208 	movw	r2, #4104	; 0x1008
 80103a8:	2100      	movs	r1, #0
 80103aa:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 80103ac:	2d00      	cmp	r5, #0
 80103ae:	d0d8      	beq.n	8010362 <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 80103b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80103b4:	4641      	mov	r1, r8
 80103b6:	4628      	mov	r0, r5
 80103b8:	4798      	blx	r3
 80103ba:	2800      	cmp	r0, #0
 80103bc:	d0d9      	beq.n	8010372 <ethernetif_input+0x16>
          {
            pbuf_free(p);
 80103be:	4628      	mov	r0, r5
 80103c0:	f7f9 fbf0 	bl	8009ba4 <pbuf_free>
 80103c4:	e7d5      	b.n	8010372 <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80103c6:	2203      	movs	r2, #3
 80103c8:	2004      	movs	r0, #4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80103ca:	6c37      	ldr	r7, [r6, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80103cc:	f7f9 fc54 	bl	8009c78 <pbuf_alloc>
  if (p != NULL)
 80103d0:	4605      	mov	r5, r0
 80103d2:	2800      	cmp	r0, #0
 80103d4:	d0d6      	beq.n	8010384 <ethernetif_input+0x28>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80103d6:	46b9      	mov	r9, r7
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80103d8:	f8d6 a030 	ldr.w	sl, [r6, #48]	; 0x30
 80103dc:	4607      	mov	r7, r0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80103de:	f240 5bf4 	movw	fp, #1524	; 0x5f4
      byteslefttocopy = q->len;
 80103e2:	f8b7 e00a 	ldrh.w	lr, [r7, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80103e6:	46a4      	mov	ip, r4
      payloadoffset = 0;
 80103e8:	2300      	movs	r3, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80103ea:	eb0c 040e 	add.w	r4, ip, lr
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	eb09 010c 	add.w	r1, r9, ip
 80103f4:	455c      	cmp	r4, fp
 80103f6:	4418      	add	r0, r3
 80103f8:	d806      	bhi.n	8010408 <ethernetif_input+0xac>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80103fa:	4672      	mov	r2, lr
 80103fc:	f001 f85a 	bl	80114b4 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8010400:	683f      	ldr	r7, [r7, #0]
 8010402:	2f00      	cmp	r7, #0
 8010404:	d1ed      	bne.n	80103e2 <ethernetif_input+0x86>
 8010406:	e7be      	b.n	8010386 <ethernetif_input+0x2a>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8010408:	ebab 020c 	sub.w	r2, fp, ip
 801040c:	9301      	str	r3, [sp, #4]
 801040e:	9200      	str	r2, [sp, #0]
 8010410:	f001 f850 	bl	80114b4 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8010414:	f8da a00c 	ldr.w	sl, [sl, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8010418:	f2a4 5ef4 	subw	lr, r4, #1524	; 0x5f4
        bufferoffset = 0;
 801041c:	f04f 0c00 	mov.w	ip, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8010420:	f8da 9008 	ldr.w	r9, [sl, #8]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8010424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010428:	4413      	add	r3, r2
        bufferoffset = 0;
 801042a:	e7de      	b.n	80103ea <ethernetif_input+0x8e>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801042c:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801042e:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8010430:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8010434:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8010436:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8010438:	e7a8      	b.n	801038c <ethernetif_input+0x30>
 801043a:	bf00      	nop
 801043c:	200083e0 	.word	0x200083e0
 8010440:	2000d674 	.word	0x2000d674

08010444 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8010444:	6802      	ldr	r2, [r0, #0]
 8010446:	4b2d      	ldr	r3, [pc, #180]	; (80104fc <HAL_ETH_MspInit+0xb8>)
 8010448:	429a      	cmp	r2, r3
{
 801044a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801044c:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 801044e:	d152      	bne.n	80104f6 <HAL_ETH_MspInit+0xb2>
    __HAL_RCC_ETH_CLK_ENABLE();
 8010450:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010454:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010456:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010458:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 801045a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801045c:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801045e:	a903      	add	r1, sp, #12
 8010460:	4827      	ldr	r0, [pc, #156]	; (8010500 <HAL_ETH_MspInit+0xbc>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8010462:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8010466:	631a      	str	r2, [r3, #48]	; 0x30
 8010468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801046a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 801046e:	9200      	str	r2, [sp, #0]
 8010470:	9a00      	ldr	r2, [sp, #0]
 8010472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010474:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010478:	631a      	str	r2, [r3, #48]	; 0x30
 801047a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801047c:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8010480:	9201      	str	r2, [sp, #4]
 8010482:	9a01      	ldr	r2, [sp, #4]
 8010484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010486:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801048a:	631a      	str	r2, [r3, #48]	; 0x30
 801048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801048e:	9507      	str	r5, [sp, #28]
    __HAL_RCC_ETH_CLK_ENABLE();
 8010490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010494:	9302      	str	r3, [sp, #8]
 8010496:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010498:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801049a:	e9cd 4605 	strd	r4, r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801049e:	e9cd 3703 	strd	r3, r7, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80104a2:	f7f0 fcc5 	bl	8000e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80104a6:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104a8:	a903      	add	r1, sp, #12
 80104aa:	4816      	ldr	r0, [pc, #88]	; (8010504 <HAL_ETH_MspInit+0xc0>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80104ac:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104ae:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104b2:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80104b6:	f7f0 fcbb 	bl	8000e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80104ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80104be:	a903      	add	r1, sp, #12
 80104c0:	4811      	ldr	r0, [pc, #68]	; (8010508 <HAL_ETH_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80104c2:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104c4:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104c8:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80104cc:	f7f0 fcb0 	bl	8000e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80104d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80104d4:	a903      	add	r1, sp, #12
 80104d6:	480d      	ldr	r0, [pc, #52]	; (801050c <HAL_ETH_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80104d8:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80104da:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80104de:	e9cd 4605 	strd	r4, r6, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80104e2:	f7f0 fca5 	bl	8000e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80104e6:	203d      	movs	r0, #61	; 0x3d
 80104e8:	4622      	mov	r2, r4
 80104ea:	2105      	movs	r1, #5
 80104ec:	f7f0 f89e 	bl	800062c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80104f0:	203d      	movs	r0, #61	; 0x3d
 80104f2:	f7f0 f8cd 	bl	8000690 <HAL_NVIC_EnableIRQ>
}
 80104f6:	b009      	add	sp, #36	; 0x24
 80104f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104fa:	bf00      	nop
 80104fc:	40028000 	.word	0x40028000
 8010500:	40020800 	.word	0x40020800
 8010504:	40020000 	.word	0x40020000
 8010508:	40020400 	.word	0x40020400
 801050c:	40021800 	.word	0x40021800

08010510 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8010510:	4b01      	ldr	r3, [pc, #4]	; (8010518 <HAL_ETH_RxCpltCallback+0x8>)
 8010512:	6818      	ldr	r0, [r3, #0]
 8010514:	f7f6 b802 	b.w	800651c <osSemaphoreRelease>
 8010518:	200083e0 	.word	0x200083e0

0801051c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801051c:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801051e:	4604      	mov	r4, r0
{
 8010520:	b08b      	sub	sp, #44	; 0x2c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8010522:	b930      	cbnz	r0, 8010532 <ethernetif_init+0x16>
 8010524:	4b40      	ldr	r3, [pc, #256]	; (8010628 <ethernetif_init+0x10c>)
 8010526:	f240 2247 	movw	r2, #583	; 0x247
 801052a:	4940      	ldr	r1, [pc, #256]	; (801062c <ethernetif_init+0x110>)
 801052c:	4840      	ldr	r0, [pc, #256]	; (8010630 <ethernetif_init+0x114>)
 801052e:	f001 f881 	bl	8011634 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8010532:	f247 4373 	movw	r3, #29811	; 0x7473
  heth.Instance = ETH;
 8010536:	4d3f      	ldr	r5, [pc, #252]	; (8010634 <ethernetif_init+0x118>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8010538:	493f      	ldr	r1, [pc, #252]	; (8010638 <ethernetif_init+0x11c>)
 801053a:	2201      	movs	r2, #1
  netif->name[0] = IFNAME0;
 801053c:	8623      	strh	r3, [r4, #48]	; 0x30
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801053e:	4628      	mov	r0, r5
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8010540:	4b3e      	ldr	r3, [pc, #248]	; (801063c <ethernetif_init+0x120>)
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8010542:	e9c5 1200 	strd	r1, r2, [r5]
  netif->output = etharp_output;
 8010546:	6163      	str	r3, [r4, #20]
  MACAddr[0] = 0x00;
 8010548:	493d      	ldr	r1, [pc, #244]	; (8010640 <ethernetif_init+0x124>)
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801054a:	4b3e      	ldr	r3, [pc, #248]	; (8010644 <ethernetif_init+0x128>)
  MACAddr[0] = 0x00;
 801054c:	9103      	str	r1, [sp, #12]
  MACAddr[4] = 0xE0;
 801054e:	f24a 01e0 	movw	r1, #41184	; 0xa0e0
  netif->linkoutput = low_level_output;
 8010552:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 8010554:	2300      	movs	r3, #0
  MACAddr[4] = 0xE0;
 8010556:	f8ad 1010 	strh.w	r1, [sp, #16]
  heth.Init.MACAddr = &MACAddr[0];
 801055a:	a903      	add	r1, sp, #12
  uint32_t regvalue = 0;
 801055c:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 801055e:	822b      	strh	r3, [r5, #16]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8010560:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8010562:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8010566:	e9c5 1205 	strd	r1, r2, [r5, #20]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 801056a:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 801056c:	f7f0 fb28 	bl	8000bc0 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8010570:	b928      	cbnz	r0, 801057e <ethernetif_init+0x62>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8010572:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8010576:	f043 0304 	orr.w	r3, r3, #4
 801057a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 801057e:	2304      	movs	r3, #4
 8010580:	4a31      	ldr	r2, [pc, #196]	; (8010648 <ethernetif_init+0x12c>)
 8010582:	4932      	ldr	r1, [pc, #200]	; (801064c <ethernetif_init+0x130>)
  osSemaphoreDef(SEM);
 8010584:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8010586:	482b      	ldr	r0, [pc, #172]	; (8010634 <ethernetif_init+0x118>)
 8010588:	f7f0 f940 	bl	800080c <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 801058c:	2304      	movs	r3, #4
 801058e:	4a30      	ldr	r2, [pc, #192]	; (8010650 <ethernetif_init+0x134>)
 8010590:	4930      	ldr	r1, [pc, #192]	; (8010654 <ethernetif_init+0x138>)
 8010592:	4828      	ldr	r0, [pc, #160]	; (8010634 <ethernetif_init+0x118>)
 8010594:	f7f0 f976 	bl	8000884 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8010598:	2306      	movs	r3, #6
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 801059a:	2101      	movs	r1, #1
 801059c:	a802      	add	r0, sp, #8
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801059e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80105a2:	696b      	ldr	r3, [r5, #20]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80105a4:	ad05      	add	r5, sp, #20
 80105a6:	4e2c      	ldr	r6, [pc, #176]	; (8010658 <ethernetif_init+0x13c>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80105a8:	781a      	ldrb	r2, [r3, #0]
 80105aa:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80105ae:	785a      	ldrb	r2, [r3, #1]
 80105b0:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80105b4:	789a      	ldrb	r2, [r3, #2]
 80105b6:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80105ba:	78da      	ldrb	r2, [r3, #3]
  osSemaphoreDef(SEM);
 80105bc:	9702      	str	r7, [sp, #8]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80105be:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80105c2:	791a      	ldrb	r2, [r3, #4]
 80105c4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80105c8:	795b      	ldrb	r3, [r3, #5]
 80105ca:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 80105ce:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80105d2:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80105d4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80105d8:	f043 030a 	orr.w	r3, r3, #10
 80105dc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 80105e0:	f7f5 ff60 	bl	80064a4 <osSemaphoreCreate>
 80105e4:	4b1d      	ldr	r3, [pc, #116]	; (801065c <ethernetif_init+0x140>)
 80105e6:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80105e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80105ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80105ec:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 80105ee:	4621      	mov	r1, r4
 80105f0:	a805      	add	r0, sp, #20
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80105f2:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 80105f4:	f7f5 fedc 	bl	80063b0 <osThreadCreate>
  HAL_ETH_Start(&heth);
 80105f8:	480e      	ldr	r0, [pc, #56]	; (8010634 <ethernetif_init+0x118>)
 80105fa:	f7f0 fbdb 	bl	8000db4 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80105fe:	aa01      	add	r2, sp, #4
 8010600:	210b      	movs	r1, #11
 8010602:	480c      	ldr	r0, [pc, #48]	; (8010634 <ethernetif_init+0x118>)
 8010604:	f7f0 fa69 	bl	8000ada <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8010608:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801060a:	210b      	movs	r1, #11
 801060c:	4809      	ldr	r0, [pc, #36]	; (8010634 <ethernetif_init+0x118>)
  regvalue |= (PHY_ISFR_INT4);
 801060e:	f042 020b 	orr.w	r2, r2, #11
 8010612:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8010614:	f7f0 fa9c 	bl	8000b50 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8010618:	aa01      	add	r2, sp, #4
 801061a:	210b      	movs	r1, #11
 801061c:	4805      	ldr	r0, [pc, #20]	; (8010634 <ethernetif_init+0x118>)
 801061e:	f7f0 fa5c 	bl	8000ada <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 8010622:	4638      	mov	r0, r7
 8010624:	b00b      	add	sp, #44	; 0x2c
 8010626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010628:	08015295 	.word	0x08015295
 801062c:	08014b2a 	.word	0x08014b2a
 8010630:	08012feb 	.word	0x08012feb
 8010634:	2000d674 	.word	0x2000d674
 8010638:	40028000 	.word	0x40028000
 801063c:	0800f0bd 	.word	0x0800f0bd
 8010640:	00e18000 	.word	0x00e18000
 8010644:	080102c1 	.word	0x080102c1
 8010648:	2000d6bc 	.word	0x2000d6bc
 801064c:	2000bda4 	.word	0x2000bda4
 8010650:	2000be24 	.word	0x2000be24
 8010654:	2000d5f4 	.word	0x2000d5f4
 8010658:	08012734 	.word	0x08012734
 801065c:	200083e0 	.word	0x200083e0

08010660 <sys_now>:
 8010660:	f7ef bfba 	b.w	80005d8 <HAL_GetTick>

08010664 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8010664:	b508      	push	{r3, lr}
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8010666:	4906      	ldr	r1, [pc, #24]	; (8010680 <MX_FATFS_Init+0x1c>)
 8010668:	4806      	ldr	r0, [pc, #24]	; (8010684 <MX_FATFS_Init+0x20>)
 801066a:	f7f5 fe13 	bl	8006294 <FATFS_LinkDriver>
 801066e:	4b06      	ldr	r3, [pc, #24]	; (8010688 <MX_FATFS_Init+0x24>)

  /* USER CODE BEGIN Init */
  f_mount(&USBHFatFS, USBHPath, 0);
 8010670:	2200      	movs	r2, #0
 8010672:	4903      	ldr	r1, [pc, #12]	; (8010680 <MX_FATFS_Init+0x1c>)
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8010674:	7018      	strb	r0, [r3, #0]
  f_mount(&USBHFatFS, USBHPath, 0);
 8010676:	4805      	ldr	r0, [pc, #20]	; (801068c <MX_FATFS_Init+0x28>)
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8010678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  f_mount(&USBHFatFS, USBHPath, 0);
 801067c:	f7f5 ba98 	b.w	8005bb0 <f_mount>
 8010680:	2000ee8c 	.word	0x2000ee8c
 8010684:	08015570 	.word	0x08015570
 8010688:	2000f2f8 	.word	0x2000f2f8
 801068c:	2000f0c0 	.word	0x2000f0c0

08010690 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8010690:	2000      	movs	r0, #0
 8010692:	4770      	bx	lr

08010694 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8010694:	2100      	movs	r1, #0
{
 8010696:	b530      	push	{r4, r5, lr}
  tcpip_init( NULL, NULL );
 8010698:	4608      	mov	r0, r1
{
 801069a:	b085      	sub	sp, #20
  tcpip_init( NULL, NULL );
 801069c:	f7f8 fe0c 	bl	80092b8 <tcpip_init>
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80106a0:	4d11      	ldr	r5, [pc, #68]	; (80106e8 <MX_LWIP_Init+0x54>)
  ipaddr.addr = 0;
 80106a2:	2000      	movs	r0, #0
  gw.addr = 0;
 80106a4:	4b11      	ldr	r3, [pc, #68]	; (80106ec <MX_LWIP_Init+0x58>)
  ipaddr.addr = 0;
 80106a6:	4912      	ldr	r1, [pc, #72]	; (80106f0 <MX_LWIP_Init+0x5c>)
  netmask.addr = 0;
 80106a8:	4a12      	ldr	r2, [pc, #72]	; (80106f4 <MX_LWIP_Init+0x60>)
  gw.addr = 0;
 80106aa:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 80106ac:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 80106ae:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80106b0:	4c11      	ldr	r4, [pc, #68]	; (80106f8 <MX_LWIP_Init+0x64>)
 80106b2:	9502      	str	r5, [sp, #8]
 80106b4:	4d11      	ldr	r5, [pc, #68]	; (80106fc <MX_LWIP_Init+0x68>)
 80106b6:	e9cd 0500 	strd	r0, r5, [sp]
 80106ba:	4620      	mov	r0, r4
 80106bc:	f7f9 f954 	bl	8009968 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80106c0:	4620      	mov	r0, r4
 80106c2:	f7f9 f993 	bl	80099ec <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80106c6:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80106ca:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 80106cc:	075b      	lsls	r3, r3, #29
 80106ce:	d507      	bpl.n	80106e0 <MX_LWIP_Init+0x4c>
    netif_set_up(&gnetif);
 80106d0:	f7f9 f992 	bl	80099f8 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80106d4:	4808      	ldr	r0, [pc, #32]	; (80106f8 <MX_LWIP_Init+0x64>)

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80106d6:	b005      	add	sp, #20
 80106d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  dhcp_start(&gnetif);
 80106dc:	f7fe b858 	b.w	800e790 <dhcp_start>
    netif_set_down(&gnetif);
 80106e0:	f7f9 f999 	bl	8009a16 <netif_set_down>
 80106e4:	e7f6      	b.n	80106d4 <MX_LWIP_Init+0x40>
 80106e6:	bf00      	nop
 80106e8:	08009219 	.word	0x08009219
 80106ec:	2000f338 	.word	0x2000f338
 80106f0:	2000f330 	.word	0x2000f330
 80106f4:	2000f334 	.word	0x2000f334
 80106f8:	2000f2fc 	.word	0x2000f2fc
 80106fc:	0801051d 	.word	0x0801051d

08010700 <http_server_netconn_thread>:
}


//based on available code examples
static void http_server_netconn_thread(void const *arg)
{
 8010700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  xprintf("http_server_netconn_thread\n");
 8010704:	4830      	ldr	r0, [pc, #192]	; (80107c8 <http_server_netconn_thread+0xc8>)
{
 8010706:	b087      	sub	sp, #28
  xprintf("http_server_netconn_thread\n");
 8010708:	f000 fc00 	bl	8010f0c <xprintf>

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 801070c:	2200      	movs	r2, #0
 801070e:	2010      	movs	r0, #16
 8010710:	4611      	mov	r1, r2
 8010712:	f7f7 fb95 	bl	8007e40 <netconn_new_with_proto_and_callback>

  if (conn!= NULL)
 8010716:	4605      	mov	r5, r0
 8010718:	2800      	cmp	r0, #0
 801071a:	d052      	beq.n	80107c2 <http_server_netconn_thread+0xc2>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 801071c:	2250      	movs	r2, #80	; 0x50
 801071e:	2100      	movs	r1, #0
 8010720:	f7f7 fc00 	bl	8007f24 <netconn_bind>

    if (err == ERR_OK)
 8010724:	2800      	cmp	r0, #0
 8010726:	d14c      	bne.n	80107c2 <http_server_netconn_thread+0xc2>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8010728:	4f28      	ldr	r7, [pc, #160]	; (80107cc <http_server_netconn_thread+0xcc>)
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 801072a:	21ff      	movs	r1, #255	; 0xff
        response[0] = 0;
 801072c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80107d0 <http_server_netconn_thread+0xd0>
      netconn_listen(conn);
 8010730:	4628      	mov	r0, r5
        strcpy(response, "HTTP/1.1 200 OK\r\n\
 8010732:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80107e0 <http_server_netconn_thread+0xe0>
      netconn_listen(conn);
 8010736:	f7f7 fc19 	bl	8007f6c <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 801073a:	a903      	add	r1, sp, #12
 801073c:	4628      	mov	r0, r5
 801073e:	f7f7 fc31 	bl	8007fa4 <netconn_accept>
        if(accept_err == ERR_OK)
 8010742:	2800      	cmp	r0, #0
 8010744:	d1f9      	bne.n	801073a <http_server_netconn_thread+0x3a>
        {
          /* serve connection */
          http_server_serve(newconn);
 8010746:	9e03      	ldr	r6, [sp, #12]
  recv_err = netconn_recv(conn, &inbuf);
 8010748:	a904      	add	r1, sp, #16
 801074a:	4630      	mov	r0, r6
 801074c:	f7f7 fc7a 	bl	8008044 <netconn_recv>
  if (recv_err == ERR_OK)
 8010750:	bb68      	cbnz	r0, 80107ae <http_server_netconn_thread+0xae>
    if (netconn_err(conn) == ERR_OK)
 8010752:	f996 3008 	ldrsb.w	r3, [r6, #8]
 8010756:	bb53      	cbnz	r3, 80107ae <http_server_netconn_thread+0xae>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8010758:	f10d 020a 	add.w	r2, sp, #10
 801075c:	a905      	add	r1, sp, #20
 801075e:	9804      	ldr	r0, [sp, #16]
 8010760:	f7f8 fcb6 	bl	80090d0 <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8010764:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010768:	2b04      	cmp	r3, #4
 801076a:	d920      	bls.n	80107ae <http_server_netconn_thread+0xae>
 801076c:	2205      	movs	r2, #5
 801076e:	4639      	mov	r1, r7
 8010770:	9805      	ldr	r0, [sp, #20]
 8010772:	f001 f86a 	bl	801184a <strncmp>
 8010776:	4604      	mov	r4, r0
 8010778:	b9c8      	cbnz	r0, 80107ae <http_server_netconn_thread+0xae>
        strcpy(response, "HTTP/1.1 200 OK\r\n\
 801077a:	4649      	mov	r1, r9
        response[0] = 0;
 801077c:	f888 0000 	strb.w	r0, [r8]
        strcpy(response, "HTTP/1.1 200 OK\r\n\
 8010780:	4813      	ldr	r0, [pc, #76]	; (80107d0 <http_server_netconn_thread+0xd0>)
 8010782:	f001 f85a 	bl	801183a <strcpy>
        strcat(response,"<title>Prosta strona WWW</title>");
 8010786:	4913      	ldr	r1, [pc, #76]	; (80107d4 <http_server_netconn_thread+0xd4>)
 8010788:	4811      	ldr	r0, [pc, #68]	; (80107d0 <http_server_netconn_thread+0xd0>)
 801078a:	f001 f847 	bl	801181c <strcat>
        strcat(response,"<h1 style=\"color:red\">Rozkład jazdy</h1>");
 801078e:	4912      	ldr	r1, [pc, #72]	; (80107d8 <http_server_netconn_thread+0xd8>)
 8010790:	480f      	ldr	r0, [pc, #60]	; (80107d0 <http_server_netconn_thread+0xd0>)
 8010792:	f001 f843 	bl	801181c <strcat>
        strcat(response,"<p >Jazda z k****mi</p>");
 8010796:	4911      	ldr	r1, [pc, #68]	; (80107dc <http_server_netconn_thread+0xdc>)
 8010798:	480d      	ldr	r0, [pc, #52]	; (80107d0 <http_server_netconn_thread+0xd0>)
 801079a:	f001 f83f 	bl	801181c <strcat>
          netconn_write(conn, response, sizeof(response), NETCONN_NOCOPY);
 801079e:	4623      	mov	r3, r4
 80107a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80107a4:	490a      	ldr	r1, [pc, #40]	; (80107d0 <http_server_netconn_thread+0xd0>)
 80107a6:	4630      	mov	r0, r6
 80107a8:	9400      	str	r4, [sp, #0]
 80107aa:	f7f7 fc9b 	bl	80080e4 <netconn_write_partly>
  netconn_close(conn);
 80107ae:	4630      	mov	r0, r6
 80107b0:	f7f7 fce2 	bl	8008178 <netconn_close>
  netbuf_delete(inbuf);
 80107b4:	9804      	ldr	r0, [sp, #16]
 80107b6:	f7f8 fc79 	bl	80090ac <netbuf_delete>

          /* delete connection */
          netconn_delete(newconn);
 80107ba:	9803      	ldr	r0, [sp, #12]
 80107bc:	f7f7 fb9a 	bl	8007ef4 <netconn_delete>
 80107c0:	e7bb      	b.n	801073a <http_server_netconn_thread+0x3a>
        }
      }
    }
  }
}
 80107c2:	b007      	add	sp, #28
 80107c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107c8:	080152c4 	.word	0x080152c4
 80107cc:	080152e0 	.word	0x080152e0
 80107d0:	200083e4 	.word	0x200083e4
 80107d4:	08015356 	.word	0x08015356
 80107d8:	08015377 	.word	0x08015377
 80107dc:	080153a1 	.word	0x080153a1
 80107e0:	080152e6 	.word	0x080152e6

080107e4 <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 80107e4:	4b2d      	ldr	r3, [pc, #180]	; (801089c <SystemClock_Config+0xb8>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80107e6:	2101      	movs	r1, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80107e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80107ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 80107ee:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80107f0:	641a      	str	r2, [r3, #64]	; 0x40
{
 80107f2:	b0b4      	sub	sp, #208	; 0xd0
  __HAL_RCC_PWR_CLK_ENABLE();
 80107f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80107f6:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80107f8:	4a29      	ldr	r2, [pc, #164]	; (80108a0 <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.PLL.PLLN = 168;
 80107fa:	2504      	movs	r5, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80107fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010800:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8010802:	9300      	str	r3, [sp, #0]
 8010804:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8010806:	6813      	ldr	r3, [r2, #0]
 8010808:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801080c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010810:	6013      	str	r3, [r2, #0]
 8010812:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010814:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8010816:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801081a:	9301      	str	r3, [sp, #4]
 801081c:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 801081e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8010822:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8010826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801082a:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 168;
 801082e:	23a8      	movs	r3, #168	; 0xa8
 8010830:	e9cd 530f 	strd	r5, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8010834:	2307      	movs	r3, #7
 8010836:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010838:	f7f1 f800 	bl	800183c <HAL_RCC_OscConfig>
 801083c:	b100      	cbz	r0, 8010840 <SystemClock_Config+0x5c>
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 801083e:	e7fe      	b.n	801083e <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010840:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010842:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8010846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801084a:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801084c:	2105      	movs	r1, #5
 801084e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010850:	e9cd 6402 	strd	r6, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010854:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010858:	f7f1 f9b6 	bl	8001bc8 <HAL_RCC_ClockConfig>
 801085c:	b100      	cbz	r0, 8010860 <SystemClock_Config+0x7c>
  while (1)
 801085e:	e7fe      	b.n	801085e <SystemClock_Config+0x7a>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_CLK48;
 8010860:	4b10      	ldr	r3, [pc, #64]	; (80108a4 <SystemClock_Config+0xc0>)
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8010862:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8010864:	9032      	str	r0, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010866:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_CLK48;
 8010868:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801086a:	f7f1 fa8d 	bl	8001d88 <HAL_RCCEx_PeriphCLKConfig>
 801086e:	4604      	mov	r4, r0
 8010870:	b100      	cbz	r0, 8010874 <SystemClock_Config+0x90>
  while (1)
 8010872:	e7fe      	b.n	8010872 <SystemClock_Config+0x8e>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8010874:	f7f1 fa44 	bl	8001d00 <HAL_RCC_GetHCLKFreq>
 8010878:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801087c:	fbb0 f0f3 	udiv	r0, r0, r3
 8010880:	f7ef ff12 	bl	80006a8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8010884:	4628      	mov	r0, r5
 8010886:	f7ef ff25 	bl	80006d4 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 801088a:	4622      	mov	r2, r4
 801088c:	4631      	mov	r1, r6
 801088e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010892:	f7ef fecb 	bl	800062c <HAL_NVIC_SetPriority>
}
 8010896:	b034      	add	sp, #208	; 0xd0
 8010898:	bd70      	pop	{r4, r5, r6, pc}
 801089a:	bf00      	nop
 801089c:	40023800 	.word	0x40023800
 80108a0:	40007000 	.word	0x40007000
 80108a4:	00200100 	.word	0x00200100

080108a8 <main>:
{
 80108a8:	b500      	push	{lr}
 80108aa:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80108ac:	2400      	movs	r4, #0
  HAL_Init();
 80108ae:	f7ef fe7b 	bl	80005a8 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80108b2:	2501      	movs	r5, #1
  SystemClock_Config();
 80108b4:	f7ff ff96 	bl	80107e4 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80108b8:	4b49      	ldr	r3, [pc, #292]	; (80109e0 <main+0x138>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80108ba:	f244 0181 	movw	r1, #16513	; 0x4081
 80108be:	4849      	ldr	r0, [pc, #292]	; (80109e4 <main+0x13c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80108c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108c2:	f042 0204 	orr.w	r2, r2, #4
 80108c6:	631a      	str	r2, [r3, #48]	; 0x30
 80108c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108ca:	f002 0204 	and.w	r2, r2, #4
 80108ce:	9201      	str	r2, [sp, #4]
 80108d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80108d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80108d8:	631a      	str	r2, [r3, #48]	; 0x30
 80108da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108dc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80108e0:	9202      	str	r2, [sp, #8]
 80108e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80108e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108e6:	f042 0201 	orr.w	r2, r2, #1
 80108ea:	631a      	str	r2, [r3, #48]	; 0x30
 80108ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108ee:	f002 0201 	and.w	r2, r2, #1
 80108f2:	9203      	str	r2, [sp, #12]
 80108f4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80108f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108f8:	f042 0202 	orr.w	r2, r2, #2
 80108fc:	631a      	str	r2, [r3, #48]	; 0x30
 80108fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010900:	f002 0202 	and.w	r2, r2, #2
 8010904:	9204      	str	r2, [sp, #16]
 8010906:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801090a:	f042 0208 	orr.w	r2, r2, #8
 801090e:	631a      	str	r2, [r3, #48]	; 0x30
 8010910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010912:	f002 0208 	and.w	r2, r2, #8
 8010916:	9205      	str	r2, [sp, #20]
 8010918:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801091a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801091c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010920:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8010922:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8010924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801092a:	9306      	str	r3, [sp, #24]
 801092c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 801092e:	f7f0 fb71 	bl	8001014 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8010932:	2200      	movs	r2, #0
 8010934:	2140      	movs	r1, #64	; 0x40
 8010936:	482c      	ldr	r0, [pc, #176]	; (80109e8 <main+0x140>)
 8010938:	f7f0 fb6c 	bl	8001014 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801093c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8010940:	4b2a      	ldr	r3, [pc, #168]	; (80109ec <main+0x144>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8010942:	a907      	add	r1, sp, #28
 8010944:	482a      	ldr	r0, [pc, #168]	; (80109f0 <main+0x148>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010946:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010948:	e9cd 2307 	strd	r2, r3, [sp, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 801094c:	f7f0 fa70 	bl	8000e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010950:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010954:	a907      	add	r1, sp, #28
 8010956:	4823      	ldr	r0, [pc, #140]	; (80109e4 <main+0x13c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010958:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801095c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010960:	f7f0 fa66 	bl	8000e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8010964:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8010966:	a907      	add	r1, sp, #28
 8010968:	481f      	ldr	r0, [pc, #124]	; (80109e8 <main+0x140>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801096a:	e9cd 3507 	strd	r3, r5, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801096e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8010972:	f7f0 fa5d 	bl	8000e30 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8010976:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8010978:	a907      	add	r1, sp, #28
 801097a:	481b      	ldr	r0, [pc, #108]	; (80109e8 <main+0x140>)
  huart3.Instance = USART3;
 801097c:	4d1d      	ldr	r5, [pc, #116]	; (80109f4 <main+0x14c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801097e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010980:	e9cd 3407 	strd	r3, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8010984:	f7f0 fa54 	bl	8000e30 <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 8010988:	491b      	ldr	r1, [pc, #108]	; (80109f8 <main+0x150>)
 801098a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 801098e:	4628      	mov	r0, r5
  huart3.Init.Parity = UART_PARITY_NONE;
 8010990:	612c      	str	r4, [r5, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8010992:	626c      	str	r4, [r5, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 8010994:	e9c5 1300 	strd	r1, r3, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8010998:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 801099a:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801099e:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80109a2:	e9c5 4407 	strd	r4, r4, [r5, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80109a6:	f7f1 ffc4 	bl	8002932 <HAL_UART_Init>
 80109aa:	4606      	mov	r6, r0
 80109ac:	b100      	cbz	r0, 80109b0 <main+0x108>
  while (1)
 80109ae:	e7fe      	b.n	80109ae <main+0x106>
  debug_init(&huart3);
 80109b0:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80109b2:	4d12      	ldr	r5, [pc, #72]	; (80109fc <main+0x154>)
  debug_init(&huart3);
 80109b4:	f7ff fbda 	bl	801016c <debug_init>
  xprintf(ANSI_BG_BLUE "Nucleo-144 project" ANSI_BG_DEFAULT "\n");
 80109b8:	4811      	ldr	r0, [pc, #68]	; (8010a00 <main+0x158>)
 80109ba:	f000 faa7 	bl	8010f0c <xprintf>
  printf("Zwykly printf tez dziala\n");
 80109be:	4811      	ldr	r0, [pc, #68]	; (8010a04 <main+0x15c>)
 80109c0:	f000 fed4 	bl	801176c <puts>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80109c4:	ac07      	add	r4, sp, #28
 80109c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80109c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80109ca:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80109cc:	4631      	mov	r1, r6
 80109ce:	a807      	add	r0, sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80109d0:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80109d2:	f7f5 fced 	bl	80063b0 <osThreadCreate>
 80109d6:	4b0c      	ldr	r3, [pc, #48]	; (8010a08 <main+0x160>)
 80109d8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80109da:	f7f5 fcdd 	bl	8006398 <osKernelStart>
  while (1)
 80109de:	e7fe      	b.n	80109de <main+0x136>
 80109e0:	40023800 	.word	0x40023800
 80109e4:	40020400 	.word	0x40020400
 80109e8:	40021800 	.word	0x40021800
 80109ec:	10110000 	.word	0x10110000
 80109f0:	40020800 	.word	0x40020800
 80109f4:	2000f340 	.word	0x2000f340
 80109f8:	40004800 	.word	0x40004800
 80109fc:	08012748 	.word	0x08012748
 8010a00:	080153b9 	.word	0x080153b9
 8010a04:	080153db 	.word	0x080153db
 8010a08:	2000f33c 	.word	0x2000f33c

08010a0c <displayOwnIp>:
{
 8010a0c:	b507      	push	{r0, r1, r2, lr}
    ip4_addr3_16(netif_ip4_addr(&gnetif)),
 8010a0e:	4906      	ldr	r1, [pc, #24]	; (8010a28 <displayOwnIp+0x1c>)
  xprintf(
 8010a10:	4806      	ldr	r0, [pc, #24]	; (8010a2c <displayOwnIp+0x20>)
 8010a12:	79cb      	ldrb	r3, [r1, #7]
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	798b      	ldrb	r3, [r1, #6]
 8010a18:	794a      	ldrb	r2, [r1, #5]
 8010a1a:	7909      	ldrb	r1, [r1, #4]
 8010a1c:	f000 fa76 	bl	8010f0c <xprintf>
}
 8010a20:	b003      	add	sp, #12
 8010a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a26:	bf00      	nop
 8010a28:	2000f2fc 	.word	0x2000f2fc
 8010a2c:	080153f4 	.word	0x080153f4

08010a30 <StartDefaultTask>:
{
 8010a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a34:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
    xprintf(".");
 8010a38:	4d52      	ldr	r5, [pc, #328]	; (8010b84 <StartDefaultTask+0x154>)
  } while (Appli_state != APPLICATION_READY);
 8010a3a:	4c53      	ldr	r4, [pc, #332]	; (8010b88 <StartDefaultTask+0x158>)
{
 8010a3c:	af00      	add	r7, sp, #0
  MX_USB_HOST_Init();
 8010a3e:	f000 fadb 	bl	8010ff8 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 8010a42:	f7ff fe0f 	bl	8010664 <MX_FATFS_Init>
  MX_LWIP_Init();
 8010a46:	f7ff fe25 	bl	8010694 <MX_LWIP_Init>
  MX_DriverVbusFS(0); //wlacza zasilanie urzadzenia USB
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f000 fcbc 	bl	80113c8 <MX_DriverVbusFS>
  xprintf("waiting for USB device...");
 8010a50:	484e      	ldr	r0, [pc, #312]	; (8010b8c <StartDefaultTask+0x15c>)
 8010a52:	f000 fa5b 	bl	8010f0c <xprintf>
    xprintf(".");
 8010a56:	4628      	mov	r0, r5
 8010a58:	f000 fa58 	bl	8010f0c <xprintf>
    vTaskDelay(100);
 8010a5c:	2064      	movs	r0, #100	; 0x64
 8010a5e:	f7f6 fcab 	bl	80073b8 <vTaskDelay>
  } while (Appli_state != APPLICATION_READY);
 8010a62:	7823      	ldrb	r3, [r4, #0]
 8010a64:	2b02      	cmp	r3, #2
 8010a66:	d1f6      	bne.n	8010a56 <StartDefaultTask+0x26>
  xprintf("USB device ready!");
 8010a68:	4849      	ldr	r0, [pc, #292]	; (8010b90 <StartDefaultTask+0x160>)
 8010a6a:	f000 fa4f 	bl	8010f0c <xprintf>
  xprintf("Obtaining address with DHCP...\n");
 8010a6e:	4849      	ldr	r0, [pc, #292]	; (8010b94 <StartDefaultTask+0x164>)
 8010a70:	f000 fa4c 	bl	8010f0c <xprintf>
  struct dhcp *dhcp = netif_dhcp_data(&gnetif);
 8010a74:	4b48      	ldr	r3, [pc, #288]	; (8010b98 <StartDefaultTask+0x168>)
    xprintf("dhcp->state = %02X\n", dhcp->state);
 8010a76:	4d49      	ldr	r5, [pc, #292]	; (8010b9c <StartDefaultTask+0x16c>)
  struct dhcp *dhcp = netif_dhcp_data(&gnetif);
 8010a78:	6a1c      	ldr	r4, [r3, #32]
    xprintf("dhcp->state = %02X\n", dhcp->state);
 8010a7a:	7a61      	ldrb	r1, [r4, #9]
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	f000 fa45 	bl	8010f0c <xprintf>
    vTaskDelay(250);
 8010a82:	20fa      	movs	r0, #250	; 0xfa
 8010a84:	f7f6 fc98 	bl	80073b8 <vTaskDelay>
  } while (dhcp->state != 0x0A);
 8010a88:	7a63      	ldrb	r3, [r4, #9]
 8010a8a:	2b0a      	cmp	r3, #10
 8010a8c:	d1f5      	bne.n	8010a7a <StartDefaultTask+0x4a>
  osThreadDef(
 8010a8e:	4d44      	ldr	r5, [pc, #272]	; (8010ba0 <StartDefaultTask+0x170>)
 8010a90:	1d3c      	adds	r4, r7, #4
  xprintf("DHCP bound\n");
 8010a92:	4844      	ldr	r0, [pc, #272]	; (8010ba4 <StartDefaultTask+0x174>)
 8010a94:	f000 fa3a 	bl	8010f0c <xprintf>
      xprintf("read test!\n");
 8010a98:	f8df 8130 	ldr.w	r8, [pc, #304]	; 8010bcc <StartDefaultTask+0x19c>
  displayOwnIp();
 8010a9c:	f7ff ffb6 	bl	8010a0c <displayOwnIp>
      xprintf("f_open res=%d\n", res);
 8010aa0:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8010bd0 <StartDefaultTask+0x1a0>
  osThreadDef(
 8010aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010aa8:	682b      	ldr	r3, [r5, #0]
  osThreadCreate(osThread(netconn_thread), NULL);
 8010aaa:	2100      	movs	r1, #0
 8010aac:	1d38      	adds	r0, r7, #4
  osThreadDef(
 8010aae:	6023      	str	r3, [r4, #0]
  osThreadCreate(osThread(netconn_thread), NULL);
 8010ab0:	f7f5 fc7e 	bl	80063b0 <osThreadCreate>
      FRESULT res = f_open(&file, "0:/test.txt", FA_READ);
 8010ab4:	4c3c      	ldr	r4, [pc, #240]	; (8010ba8 <StartDefaultTask+0x178>)
    osDelay(10);
 8010ab6:	200a      	movs	r0, #10
 8010ab8:	f7f5 fc92 	bl	80063e0 <osDelay>
    char key = inkey();
 8010abc:	f7ff fb48 	bl	8010150 <inkey>
    switch (key)
 8010ac0:	2872      	cmp	r0, #114	; 0x72
 8010ac2:	d028      	beq.n	8010b16 <StartDefaultTask+0xe6>
 8010ac4:	2877      	cmp	r0, #119	; 0x77
 8010ac6:	d1f6      	bne.n	8010ab6 <StartDefaultTask+0x86>
      xprintf("write test\n");
 8010ac8:	4838      	ldr	r0, [pc, #224]	; (8010bac <StartDefaultTask+0x17c>)
 8010aca:	f000 fa1f 	bl	8010f0c <xprintf>
      xprintf("f_open... ");
 8010ace:	4838      	ldr	r0, [pc, #224]	; (8010bb0 <StartDefaultTask+0x180>)
 8010ad0:	f000 fa1c 	bl	8010f0c <xprintf>
      res = f_open(&file, "0:/test.txt", FA_WRITE | FA_OPEN_APPEND);
 8010ad4:	4621      	mov	r1, r4
 8010ad6:	2232      	movs	r2, #50	; 0x32
 8010ad8:	f107 0018 	add.w	r0, r7, #24
 8010adc:	f7f5 f8b2 	bl	8005c44 <f_open>
 8010ae0:	4605      	mov	r5, r0
      xprintf("res=%d\n", res);
 8010ae2:	4601      	mov	r1, r0
 8010ae4:	4833      	ldr	r0, [pc, #204]	; (8010bb4 <StartDefaultTask+0x184>)
 8010ae6:	f000 fa11 	bl	8010f0c <xprintf>
      if (res)
 8010aea:	2d00      	cmp	r5, #0
 8010aec:	d1e3      	bne.n	8010ab6 <StartDefaultTask+0x86>
      xprintf("f_write... ");
 8010aee:	4832      	ldr	r0, [pc, #200]	; (8010bb8 <StartDefaultTask+0x188>)
 8010af0:	f000 fa0c 	bl	8010f0c <xprintf>
      res = f_write(&file, text, strlen(text), &bw);
 8010af4:	463b      	mov	r3, r7
 8010af6:	2210      	movs	r2, #16
 8010af8:	4930      	ldr	r1, [pc, #192]	; (8010bbc <StartDefaultTask+0x18c>)
 8010afa:	f107 0018 	add.w	r0, r7, #24
 8010afe:	f7f5 fa6b 	bl	8005fd8 <f_write>
      xprintf("res=%d, bw=%d\n", res, bw);
 8010b02:	683a      	ldr	r2, [r7, #0]
      res = f_write(&file, text, strlen(text), &bw);
 8010b04:	4601      	mov	r1, r0
      xprintf("res=%d, bw=%d\n", res, bw);
 8010b06:	482e      	ldr	r0, [pc, #184]	; (8010bc0 <StartDefaultTask+0x190>)
 8010b08:	f000 fa00 	bl	8010f0c <xprintf>
      f_close(&file);
 8010b0c:	f107 0018 	add.w	r0, r7, #24
 8010b10:	f7f5 fb86 	bl	8006220 <f_close>
      break;
 8010b14:	e7cf      	b.n	8010ab6 <StartDefaultTask+0x86>
      xprintf("read test!\n");
 8010b16:	4640      	mov	r0, r8
    {
 8010b18:	466e      	mov	r6, sp
      xprintf("read test!\n");
 8010b1a:	f000 f9f7 	bl	8010f0c <xprintf>
      FRESULT res = f_open(&file, "0:/test.txt", FA_READ);
 8010b1e:	4621      	mov	r1, r4
 8010b20:	2201      	movs	r2, #1
 8010b22:	f107 0018 	add.w	r0, r7, #24
 8010b26:	f7f5 f88d 	bl	8005c44 <f_open>
 8010b2a:	4605      	mov	r5, r0
      xprintf("f_open res=%d\n", res);
 8010b2c:	4601      	mov	r1, r0
 8010b2e:	4648      	mov	r0, r9
 8010b30:	f000 f9ec 	bl	8010f0c <xprintf>
      if (res)
 8010b34:	b9fd      	cbnz	r5, 8010b76 <StartDefaultTask+0x146>
      char buf[BUF_SIZE];
 8010b36:	b090      	sub	sp, #64	; 0x40
          xprintf("chunk:\n");
 8010b38:	f8df a098 	ldr.w	sl, [pc, #152]	; 8010bd4 <StartDefaultTask+0x1a4>
      xprintf("reading file contents:\n");
 8010b3c:	4821      	ldr	r0, [pc, #132]	; (8010bc4 <StartDefaultTask+0x194>)
      char buf[BUF_SIZE];
 8010b3e:	466d      	mov	r5, sp
      xprintf("reading file contents:\n");
 8010b40:	f000 f9e4 	bl	8010f0c <xprintf>
        res = f_read(&file, buf, BUF_SIZE, &br);
 8010b44:	4629      	mov	r1, r5
 8010b46:	463b      	mov	r3, r7
 8010b48:	2240      	movs	r2, #64	; 0x40
 8010b4a:	f107 0018 	add.w	r0, r7, #24
 8010b4e:	f7f5 f97f 	bl	8005e50 <f_read>
        if ((res == FR_OK) && (br))
 8010b52:	4601      	mov	r1, r0
 8010b54:	b988      	cbnz	r0, 8010b7a <StartDefaultTask+0x14a>
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	b17b      	cbz	r3, 8010b7a <StartDefaultTask+0x14a>
          xprintf("chunk:\n");
 8010b5a:	4650      	mov	r0, sl
 8010b5c:	f000 f9d6 	bl	8010f0c <xprintf>
          debug_dump(buf, br);
 8010b60:	8839      	ldrh	r1, [r7, #0]
 8010b62:	4628      	mov	r0, r5
 8010b64:	f7ff fb18 	bl	8010198 <debug_dump>
      } while (br > 0);
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d1ea      	bne.n	8010b44 <StartDefaultTask+0x114>
      f_close(&file);
 8010b6e:	f107 0018 	add.w	r0, r7, #24
 8010b72:	f7f5 fb55 	bl	8006220 <f_close>
      break;
 8010b76:	46b5      	mov	sp, r6
 8010b78:	e79d      	b.n	8010ab6 <StartDefaultTask+0x86>
          xprintf("f_read res=%d\n", res);
 8010b7a:	4813      	ldr	r0, [pc, #76]	; (8010bc8 <StartDefaultTask+0x198>)
 8010b7c:	f000 f9c6 	bl	8010f0c <xprintf>
          break;
 8010b80:	e7f5      	b.n	8010b6e <StartDefaultTask+0x13e>
 8010b82:	bf00      	nop
 8010b84:	08015420 	.word	0x08015420
 8010b88:	200085dc 	.word	0x200085dc
 8010b8c:	08015408 	.word	0x08015408
 8010b90:	08015422 	.word	0x08015422
 8010b94:	08015434 	.word	0x08015434
 8010b98:	2000f2fc 	.word	0x2000f2fc
 8010b9c:	08015454 	.word	0x08015454
 8010ba0:	0801275c 	.word	0x0801275c
 8010ba4:	08015468 	.word	0x08015468
 8010ba8:	0801548b 	.word	0x0801548b
 8010bac:	08015474 	.word	0x08015474
 8010bb0:	08015480 	.word	0x08015480
 8010bb4:	08015505 	.word	0x08015505
 8010bb8:	08015497 	.word	0x08015497
 8010bbc:	080154a3 	.word	0x080154a3
 8010bc0:	080154b4 	.word	0x080154b4
 8010bc4:	080154de 	.word	0x080154de
 8010bc8:	080154fe 	.word	0x080154fe
 8010bcc:	080154c3 	.word	0x080154c3
 8010bd0:	080154cf 	.word	0x080154cf
 8010bd4:	080154f6 	.word	0x080154f6

08010bd8 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6)
 8010bd8:	6802      	ldr	r2, [r0, #0]
 8010bda:	4b03      	ldr	r3, [pc, #12]	; (8010be8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d101      	bne.n	8010be4 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8010be0:	f7ef bcee 	b.w	80005c0 <HAL_IncTick>
}
 8010be4:	4770      	bx	lr
 8010be6:	bf00      	nop
 8010be8:	40001000 	.word	0x40001000

08010bec <_Error_Handler>:
  while (1)
 8010bec:	e7fe      	b.n	8010bec <_Error_Handler>
	...

08010bf0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8010bf0:	4b21      	ldr	r3, [pc, #132]	; (8010c78 <HAL_MspInit+0x88>)
{
 8010bf2:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8010bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010bf6:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8010bf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8010bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8010bfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c00:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8010c04:	9200      	str	r2, [sp, #0]
 8010c06:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010c0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010c0e:	645a      	str	r2, [r3, #68]	; 0x44
 8010c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c16:	9301      	str	r3, [sp, #4]
 8010c18:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010c1a:	f7ef fcf5 	bl	8000608 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8010c1e:	2200      	movs	r2, #0
 8010c20:	f06f 000b 	mvn.w	r0, #11
 8010c24:	4611      	mov	r1, r2
 8010c26:	f7ef fd01 	bl	800062c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	f06f 000a 	mvn.w	r0, #10
 8010c30:	4611      	mov	r1, r2
 8010c32:	f7ef fcfb 	bl	800062c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8010c36:	2200      	movs	r2, #0
 8010c38:	f06f 0009 	mvn.w	r0, #9
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	f7ef fcf5 	bl	800062c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8010c42:	2200      	movs	r2, #0
 8010c44:	f06f 0004 	mvn.w	r0, #4
 8010c48:	4611      	mov	r1, r2
 8010c4a:	f7ef fcef 	bl	800062c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8010c4e:	2200      	movs	r2, #0
 8010c50:	f06f 0003 	mvn.w	r0, #3
 8010c54:	4611      	mov	r1, r2
 8010c56:	f7ef fce9 	bl	800062c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	210f      	movs	r1, #15
 8010c5e:	f06f 0001 	mvn.w	r0, #1
 8010c62:	f7ef fce3 	bl	800062c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8010c66:	2200      	movs	r2, #0
 8010c68:	210f      	movs	r1, #15
 8010c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8010c6e:	b003      	add	sp, #12
 8010c70:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8010c74:	f7ef bcda 	b.w	800062c <HAL_NVIC_SetPriority>
 8010c78:	40023800 	.word	0x40023800

08010c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8010c7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 8010c7e:	6802      	ldr	r2, [r0, #0]
 8010c80:	4b0f      	ldr	r3, [pc, #60]	; (8010cc0 <HAL_UART_MspInit+0x44>)
 8010c82:	429a      	cmp	r2, r3
 8010c84:	d119      	bne.n	8010cba <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8010c86:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010c8a:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010c8c:	480d      	ldr	r0, [pc, #52]	; (8010cc4 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8010c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8010c94:	641a      	str	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c96:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_USART3_CLK_ENABLE();
 8010c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010ca0:	9300      	str	r3, [sp, #0]
 8010ca2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010ca4:	2302      	movs	r3, #2
 8010ca6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010caa:	2303      	movs	r3, #3
 8010cac:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010cb0:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010cb2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8010cb4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010cb6:	f7f0 f8bb 	bl	8000e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8010cba:	b007      	add	sp, #28
 8010cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cc0:	40004800 	.word	0x40004800
 8010cc4:	40020c00 	.word	0x40020c00

08010cc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010cc8:	b510      	push	{r4, lr}
 8010cca:	4601      	mov	r1, r0
 8010ccc:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8010cce:	2200      	movs	r2, #0
 8010cd0:	2036      	movs	r0, #54	; 0x36
 8010cd2:	f7ef fcab 	bl	800062c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8010cd6:	2036      	movs	r0, #54	; 0x36
 8010cd8:	f7ef fcda 	bl	8000690 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8010cdc:	4b14      	ldr	r3, [pc, #80]	; (8010d30 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010cde:	a901      	add	r1, sp, #4
 8010ce0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8010ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8010ce4:	4c13      	ldr	r4, [pc, #76]	; (8010d34 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8010ce6:	f042 0210 	orr.w	r2, r2, #16
 8010cea:	641a      	str	r2, [r3, #64]	; 0x40
 8010cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cee:	f003 0310 	and.w	r3, r3, #16
 8010cf2:	9302      	str	r3, [sp, #8]
 8010cf4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8010cf6:	f7f1 f829 	bl	8001d4c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8010cfa:	f7f1 f807 	bl	8001d0c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8010cfe:	4b0e      	ldr	r3, [pc, #56]	; (8010d38 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8010d00:	0040      	lsls	r0, r0, #1
  htim6.Instance = TIM6;
 8010d02:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8010d04:	f240 33e7 	movw	r3, #999	; 0x3e7
 8010d08:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8010d0a:	4b0c      	ldr	r3, [pc, #48]	; (8010d3c <HAL_InitTick+0x74>)
 8010d0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8010d10:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 8010d12:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8010d14:	6060      	str	r0, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8010d16:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8010d18:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8010d1a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8010d1c:	f7f1 fbe4 	bl	80024e8 <HAL_TIM_Base_Init>
 8010d20:	b920      	cbnz	r0, 8010d2c <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8010d22:	4620      	mov	r0, r4
 8010d24:	f7f1 fabb 	bl	800229e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8010d28:	b008      	add	sp, #32
 8010d2a:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8010d2c:	2001      	movs	r0, #1
 8010d2e:	e7fb      	b.n	8010d28 <HAL_InitTick+0x60>
 8010d30:	40023800 	.word	0x40023800
 8010d34:	2000f3b0 	.word	0x2000f3b0
 8010d38:	40001000 	.word	0x40001000
 8010d3c:	000f4240 	.word	0x000f4240

08010d40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8010d40:	f7f5 bc56 	b.w	80065f0 <osSystickHandler>

08010d44 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8010d44:	4801      	ldr	r0, [pc, #4]	; (8010d4c <TIM6_DAC_IRQHandler+0x8>)
 8010d46:	f7f1 bab9 	b.w	80022bc <HAL_TIM_IRQHandler>
 8010d4a:	bf00      	nop
 8010d4c:	2000f3b0 	.word	0x2000f3b0

08010d50 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8010d50:	4801      	ldr	r0, [pc, #4]	; (8010d58 <ETH_IRQHandler+0x8>)
 8010d52:	f7ef be8a 	b.w	8000a6a <HAL_ETH_IRQHandler>
 8010d56:	bf00      	nop
 8010d58:	2000d674 	.word	0x2000d674

08010d5c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8010d5c:	4801      	ldr	r0, [pc, #4]	; (8010d64 <OTG_FS_IRQHandler+0x8>)
 8010d5e:	f7f0 ba43 	b.w	80011e8 <HAL_HCD_IRQHandler>
 8010d62:	bf00      	nop
 8010d64:	2000f7c4 	.word	0x2000f7c4

08010d68 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8010d68:	4b0b      	ldr	r3, [pc, #44]	; (8010d98 <_sbrk+0x30>)
{
 8010d6a:	4602      	mov	r2, r0
	if (heap_end == 0)
 8010d6c:	6819      	ldr	r1, [r3, #0]
 8010d6e:	b909      	cbnz	r1, 8010d74 <_sbrk+0xc>
		heap_end = &end;
 8010d70:	490a      	ldr	r1, [pc, #40]	; (8010d9c <_sbrk+0x34>)
 8010d72:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8010d74:	490a      	ldr	r1, [pc, #40]	; (8010da0 <_sbrk+0x38>)
	prev_heap_end = heap_end;
 8010d76:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8010d78:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 8010d7a:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8010d7c:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 8010d7e:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 8010d82:	428a      	cmp	r2, r1
	{
		errno = ENOMEM;
 8010d84:	bf83      	ittte	hi
 8010d86:	4b07      	ldrhi	r3, [pc, #28]	; (8010da4 <_sbrk+0x3c>)
 8010d88:	220c      	movhi	r2, #12
		return (caddr_t) -1;
 8010d8a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;
 8010d8e:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 8010d90:	bf88      	it	hi
 8010d92:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8010d94:	4770      	bx	lr
 8010d96:	bf00      	nop
 8010d98:	200085d8 	.word	0x200085d8
 8010d9c:	2000fa90 	.word	0x2000fa90
 8010da0:	e000ed08 	.word	0xe000ed08
 8010da4:	2000bd9c 	.word	0x2000bd9c

08010da8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8010da8:	2001      	movs	r0, #1
 8010daa:	4770      	bx	lr

08010dac <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8010dac:	4b02      	ldr	r3, [pc, #8]	; (8010db8 <_kill+0xc>)
 8010dae:	2216      	movs	r2, #22
	return -1;
}
 8010db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	errno = EINVAL;
 8010db4:	601a      	str	r2, [r3, #0]
}
 8010db6:	4770      	bx	lr
 8010db8:	2000bd9c 	.word	0x2000bd9c

08010dbc <_exit>:
	errno = EINVAL;
 8010dbc:	4b01      	ldr	r3, [pc, #4]	; (8010dc4 <_exit+0x8>)
 8010dbe:	2216      	movs	r2, #22
 8010dc0:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}
 8010dc2:	e7fe      	b.n	8010dc2 <_exit+0x6>
 8010dc4:	2000bd9c 	.word	0x2000bd9c

08010dc8 <_write>:
}

int _write(int file, char *ptr, int len)
{
 8010dc8:	b570      	push	{r4, r5, r6, lr}
 8010dca:	460e      	mov	r6, r1
 8010dcc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010dce:	2500      	movs	r5, #0
 8010dd0:	42a5      	cmp	r5, r4
 8010dd2:	db01      	blt.n	8010dd8 <_write+0x10>
	{
	   __io_putchar( *ptr++ );
	}
	return len;
}
 8010dd4:	4620      	mov	r0, r4
 8010dd6:	bd70      	pop	{r4, r5, r6, pc}
	   __io_putchar( *ptr++ );
 8010dd8:	5d70      	ldrb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010dda:	3501      	adds	r5, #1
	   __io_putchar( *ptr++ );
 8010ddc:	f7ff f9ac 	bl	8010138 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010de0:	e7f6      	b.n	8010dd0 <_write+0x8>

08010de2 <_close>:

int _close(int file)
{
	return -1;
}
 8010de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010de6:	4770      	bx	lr

08010de8 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8010de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8010dec:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8010dee:	604b      	str	r3, [r1, #4]
}
 8010df0:	4770      	bx	lr

08010df2 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8010df2:	2001      	movs	r0, #1
 8010df4:	4770      	bx	lr

08010df6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8010df6:	2000      	movs	r0, #0
 8010df8:	4770      	bx	lr

08010dfa <_read>:

int _read(int file, char *ptr, int len)
{
 8010dfa:	b570      	push	{r4, r5, r6, lr}
 8010dfc:	460e      	mov	r6, r1
 8010dfe:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010e00:	2500      	movs	r5, #0
 8010e02:	42a5      	cmp	r5, r4
 8010e04:	db01      	blt.n	8010e0a <_read+0x10>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 8010e06:	4620      	mov	r0, r4
 8010e08:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 8010e0a:	f3af 8000 	nop.w
 8010e0e:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8010e10:	3501      	adds	r5, #1
 8010e12:	e7f6      	b.n	8010e02 <_read+0x8>

08010e14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010e14:	490f      	ldr	r1, [pc, #60]	; (8010e54 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010e16:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8010e18:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8010e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8010e24:	4b0c      	ldr	r3, [pc, #48]	; (8010e58 <SystemInit+0x44>)
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	f042 0201 	orr.w	r2, r2, #1
 8010e2c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8010e2e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8010e36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010e3a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8010e3c:	4a07      	ldr	r2, [pc, #28]	; (8010e5c <SystemInit+0x48>)
 8010e3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010e46:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010e48:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010e4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010e4e:	608b      	str	r3, [r1, #8]
#endif
}
 8010e50:	4770      	bx	lr
 8010e52:	bf00      	nop
 8010e54:	e000ed00 	.word	0xe000ed00
 8010e58:	40023800 	.word	0x40023800
 8010e5c:	24003010 	.word	0x24003010

08010e60 <xputs>:




void xputs (const char* str)
{
 8010e60:	b510      	push	{r4, lr}
 8010e62:	1e44      	subs	r4, r0, #1
	while (*str)
 8010e64:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8010e68:	b900      	cbnz	r0, 8010e6c <xputs+0xc>
		xputc(*str++);
}
 8010e6a:	bd10      	pop	{r4, pc}
	debug_chr(c);
 8010e6c:	f7ff f984 	bl	8010178 <debug_chr>
}
 8010e70:	e7f8      	b.n	8010e64 <xputs+0x4>

08010e72 <xitoa>:
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;


	if (radix < 0) {
 8010e72:	2900      	cmp	r1, #0
{
 8010e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e76:	b087      	sub	sp, #28
	if (radix < 0) {
 8010e78:	da3c      	bge.n	8010ef4 <xitoa+0x82>
		radix = -radix;
		if (val < 0) {
 8010e7a:	2800      	cmp	r0, #0
		radix = -radix;
 8010e7c:	f1c1 0100 	rsb	r1, r1, #0
		if (val < 0) {
 8010e80:	da38      	bge.n	8010ef4 <xitoa+0x82>
			val = -val;
 8010e82:	4240      	negs	r0, r0
			sgn = '-';
 8010e84:	262d      	movs	r6, #45	; 0x2d
		}
	}
	v = val;
	r = radix;
	if (len < 0) {
 8010e86:	2a00      	cmp	r2, #0
		len = -len;
 8010e88:	bfba      	itte	lt
 8010e8a:	4252      	neglt	r2, r2
		pad = '0';
 8010e8c:	2730      	movlt	r7, #48	; 0x30
	uint8_t c, r, sgn = 0, pad = ' ';
 8010e8e:	2720      	movge	r7, #32
	}
	if (len > 20) return;
 8010e90:	2a14      	cmp	r2, #20
 8010e92:	dc2d      	bgt.n	8010ef0 <xitoa+0x7e>
	uint8_t s[20], i = 0;
 8010e94:	2500      	movs	r5, #0
	do {
		c = (uint8_t)(v % r);
 8010e96:	b2c9      	uxtb	r1, r1
		if (c >= 10) c += 7;
		c += '0';
		s[i++] = c;
 8010e98:	f10d 0c18 	add.w	ip, sp, #24
		c = (uint8_t)(v % r);
 8010e9c:	fbb0 fef1 	udiv	lr, r0, r1
 8010ea0:	fb01 041e 	mls	r4, r1, lr, r0
		s[i++] = c;
 8010ea4:	44ac      	add	ip, r5
		c = (uint8_t)(v % r);
 8010ea6:	b2e3      	uxtb	r3, r4
		if (c >= 10) c += 7;
 8010ea8:	2c09      	cmp	r4, #9
		s[i++] = c;
 8010eaa:	f105 0401 	add.w	r4, r5, #1
		if (c >= 10) c += 7;
 8010eae:	bf88      	it	hi
 8010eb0:	3307      	addhi	r3, #7
		s[i++] = c;
 8010eb2:	b2e4      	uxtb	r4, r4
		if (c >= 10) c += 7;
 8010eb4:	bf88      	it	hi
 8010eb6:	b2db      	uxtbhi	r3, r3
		v /= r;
	} while (v);
 8010eb8:	4281      	cmp	r1, r0
		c += '0';
 8010eba:	f103 0330 	add.w	r3, r3, #48	; 0x30
		s[i++] = c;
 8010ebe:	f80c 3c14 	strb.w	r3, [ip, #-20]
	} while (v);
 8010ec2:	d919      	bls.n	8010ef8 <xitoa+0x86>
	if (sgn) s[i++] = sgn;
 8010ec4:	b12e      	cbz	r6, 8010ed2 <xitoa+0x60>
 8010ec6:	ab06      	add	r3, sp, #24
 8010ec8:	3502      	adds	r5, #2
 8010eca:	441c      	add	r4, r3
 8010ecc:	f804 6c14 	strb.w	r6, [r4, #-20]
 8010ed0:	b2ec      	uxtb	r4, r5
	while (i < len)
 8010ed2:	4294      	cmp	r4, r2
 8010ed4:	4623      	mov	r3, r4
 8010ed6:	db12      	blt.n	8010efe <xitoa+0x8c>
 8010ed8:	1e65      	subs	r5, r4, #1
 8010eda:	ab01      	add	r3, sp, #4
 8010edc:	fa53 f585 	uxtab	r5, r3, r5
		s[i++] = pad;
	do
		xputc(s[--i]);
 8010ee0:	3c01      	subs	r4, #1
	debug_chr(c);
 8010ee2:	f815 0901 	ldrb.w	r0, [r5], #-1
		xputc(s[--i]);
 8010ee6:	b2e4      	uxtb	r4, r4
	debug_chr(c);
 8010ee8:	f7ff f946 	bl	8010178 <debug_chr>
	while (i);
 8010eec:	2c00      	cmp	r4, #0
 8010eee:	d1f7      	bne.n	8010ee0 <xitoa+0x6e>
}
 8010ef0:	b007      	add	sp, #28
 8010ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t c, r, sgn = 0, pad = ' ';
 8010ef4:	2600      	movs	r6, #0
 8010ef6:	e7c6      	b.n	8010e86 <xitoa+0x14>
		v /= r;
 8010ef8:	4670      	mov	r0, lr
		s[i++] = c;
 8010efa:	4625      	mov	r5, r4
 8010efc:	e7cc      	b.n	8010e98 <xitoa+0x26>
		s[i++] = pad;
 8010efe:	a906      	add	r1, sp, #24
 8010f00:	3401      	adds	r4, #1
 8010f02:	440b      	add	r3, r1
 8010f04:	b2e4      	uxtb	r4, r4
 8010f06:	f803 7c14 	strb.w	r7, [r3, #-20]
 8010f0a:	e7e2      	b.n	8010ed2 <xitoa+0x60>

08010f0c <xprintf>:

void xprintf (const char* str, ...)
{
 8010f0c:	b40f      	push	{r0, r1, r2, r3}
 8010f0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f10:	ab06      	add	r3, sp, #24
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
			w += w * 10 + (d - '0');
 8010f12:	260a      	movs	r6, #10
{
 8010f14:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start(arp, str);
 8010f18:	9301      	str	r3, [sp, #4]
	while ((d = *str++) != 0) {
 8010f1a:	7820      	ldrb	r0, [r4, #0]
 8010f1c:	2800      	cmp	r0, #0
 8010f1e:	d03c      	beq.n	8010f9a <xprintf+0x8e>
		if (d != '%') {
 8010f20:	2825      	cmp	r0, #37	; 0x25
 8010f22:	d003      	beq.n	8010f2c <xprintf+0x20>
	while ((d = *str++) != 0) {
 8010f24:	3401      	adds	r4, #1
	debug_chr(c);
 8010f26:	f7ff f927 	bl	8010178 <debug_chr>
			xputs(va_arg(arp, char*));
			continue;
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
 8010f2a:	e7f6      	b.n	8010f1a <xprintf+0xe>
		d = *str++; w = r = s = l = 0;
 8010f2c:	7863      	ldrb	r3, [r4, #1]
		if (d == '0') {
 8010f2e:	2b30      	cmp	r3, #48	; 0x30
 8010f30:	d11f      	bne.n	8010f72 <xprintf+0x66>
			d = *str++; s = 1;
 8010f32:	78a3      	ldrb	r3, [r4, #2]
 8010f34:	2001      	movs	r0, #1
 8010f36:	3403      	adds	r4, #3
		d = *str++; w = r = s = l = 0;
 8010f38:	2200      	movs	r2, #0
 8010f3a:	e004      	b.n	8010f46 <xprintf+0x3a>
			w += w * 10 + (d - '0');
 8010f3c:	fb06 1102 	mla	r1, r6, r2, r1
			d = *str++;
 8010f40:	f814 3b01 	ldrb.w	r3, [r4], #1
			w += w * 10 + (d - '0');
 8010f44:	440a      	add	r2, r1
		while ((d >= '0')&&(d <= '9')) {
 8010f46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8010f4a:	2909      	cmp	r1, #9
 8010f4c:	d9f6      	bls.n	8010f3c <xprintf+0x30>
		if (s) w = -w;
 8010f4e:	b100      	cbz	r0, 8010f52 <xprintf+0x46>
 8010f50:	4252      	negs	r2, r2
		if (d == 'l') {
 8010f52:	2b6c      	cmp	r3, #108	; 0x6c
			d = *str++;
 8010f54:	bf06      	itte	eq
 8010f56:	f814 3b01 	ldrbeq.w	r3, [r4], #1
			l = 1;
 8010f5a:	2501      	moveq	r5, #1
		d = *str++; w = r = s = l = 0;
 8010f5c:	2500      	movne	r5, #0
		if (!d) break;
 8010f5e:	b1e3      	cbz	r3, 8010f9a <xprintf+0x8e>
		if (d == 's') {
 8010f60:	2b73      	cmp	r3, #115	; 0x73
 8010f62:	d109      	bne.n	8010f78 <xprintf+0x6c>
			xputs(va_arg(arp, char*));
 8010f64:	9b01      	ldr	r3, [sp, #4]
 8010f66:	1d1a      	adds	r2, r3, #4
 8010f68:	6818      	ldr	r0, [r3, #0]
 8010f6a:	9201      	str	r2, [sp, #4]
 8010f6c:	f7ff ff78 	bl	8010e60 <xputs>
			continue;
 8010f70:	e7d3      	b.n	8010f1a <xprintf+0xe>
		d = *str++; w = r = s = l = 0;
 8010f72:	3402      	adds	r4, #2
 8010f74:	2000      	movs	r0, #0
 8010f76:	e7df      	b.n	8010f38 <xprintf+0x2c>
		if (d == 'c') {
 8010f78:	2b63      	cmp	r3, #99	; 0x63
 8010f7a:	d104      	bne.n	8010f86 <xprintf+0x7a>
			xputc((char)va_arg(arp, int));
 8010f7c:	9b01      	ldr	r3, [sp, #4]
 8010f7e:	1d1a      	adds	r2, r3, #4
	debug_chr(c);
 8010f80:	7818      	ldrb	r0, [r3, #0]
			xputc((char)va_arg(arp, int));
 8010f82:	9201      	str	r2, [sp, #4]
	debug_chr(c);
 8010f84:	e7cf      	b.n	8010f26 <xprintf+0x1a>
		}
		if (d == 'u') r = 10;
 8010f86:	2b75      	cmp	r3, #117	; 0x75
 8010f88:	d00c      	beq.n	8010fa4 <xprintf+0x98>
		if (d == 'd') r = -10;
 8010f8a:	2b64      	cmp	r3, #100	; 0x64
 8010f8c:	d016      	beq.n	8010fbc <xprintf+0xb0>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 8010f8e:	f023 0120 	bic.w	r1, r3, #32
 8010f92:	2958      	cmp	r1, #88	; 0x58
 8010f94:	d01b      	beq.n	8010fce <xprintf+0xc2>
		if (d == 'b') r = 2;
 8010f96:	2b62      	cmp	r3, #98	; 0x62
 8010f98:	d017      	beq.n	8010fca <xprintf+0xbe>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
 8010f9a:	b002      	add	sp, #8
 8010f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010fa0:	b004      	add	sp, #16
 8010fa2:	4770      	bx	lr
		if (d == 'u') r = 10;
 8010fa4:	210a      	movs	r1, #10
		if (l) {
 8010fa6:	9b01      	ldr	r3, [sp, #4]
 8010fa8:	f853 0b04 	ldr.w	r0, [r3], #4
 8010fac:	b14d      	cbz	r5, 8010fc2 <xprintf+0xb6>
				xitoa((unsigned long)va_arg(arp, int), r, w);
 8010fae:	9b01      	ldr	r3, [sp, #4]
 8010fb0:	1d18      	adds	r0, r3, #4
 8010fb2:	9001      	str	r0, [sp, #4]
 8010fb4:	6818      	ldr	r0, [r3, #0]
				xitoa((long)va_arg(arp, int), r, w);
 8010fb6:	f7ff ff5c 	bl	8010e72 <xitoa>
 8010fba:	e7ae      	b.n	8010f1a <xprintf+0xe>
		if (d == 'd') r = -10;
 8010fbc:	f06f 0109 	mvn.w	r1, #9
 8010fc0:	e7f1      	b.n	8010fa6 <xprintf+0x9a>
			if (r > 0)
 8010fc2:	2900      	cmp	r1, #0
 8010fc4:	dcf3      	bgt.n	8010fae <xprintf+0xa2>
				xitoa((long)va_arg(arp, int), r, w);
 8010fc6:	9301      	str	r3, [sp, #4]
 8010fc8:	e7f5      	b.n	8010fb6 <xprintf+0xaa>
		if (l) {
 8010fca:	2102      	movs	r1, #2
 8010fcc:	e7ef      	b.n	8010fae <xprintf+0xa2>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 8010fce:	2110      	movs	r1, #16
 8010fd0:	e7ed      	b.n	8010fae <xprintf+0xa2>
	...

08010fd4 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8010fd4:	2904      	cmp	r1, #4
 8010fd6:	d00a      	beq.n	8010fee <USBH_UserProcess+0x1a>
 8010fd8:	2905      	cmp	r1, #5
 8010fda:	d004      	beq.n	8010fe6 <USBH_UserProcess+0x12>
 8010fdc:	2902      	cmp	r1, #2
 8010fde:	d105      	bne.n	8010fec <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010fe0:	4b04      	ldr	r3, [pc, #16]	; (8010ff4 <USBH_UserProcess+0x20>)
 8010fe2:	7019      	strb	r1, [r3, #0]
  break;
 8010fe4:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8010fe6:	4b03      	ldr	r3, [pc, #12]	; (8010ff4 <USBH_UserProcess+0x20>)
 8010fe8:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8010fea:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010fec:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8010fee:	4b01      	ldr	r3, [pc, #4]	; (8010ff4 <USBH_UserProcess+0x20>)
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	e7fa      	b.n	8010fea <USBH_UserProcess+0x16>
 8010ff4:	200085dc 	.word	0x200085dc

08010ff8 <MX_USB_HOST_Init>:
{
 8010ff8:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8010ffa:	4c07      	ldr	r4, [pc, #28]	; (8011018 <MX_USB_HOST_Init+0x20>)
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	4907      	ldr	r1, [pc, #28]	; (801101c <MX_USB_HOST_Init+0x24>)
 8011000:	4620      	mov	r0, r4
 8011002:	f7f2 fe93 	bl	8003d2c <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS);
 8011006:	4620      	mov	r0, r4
 8011008:	4905      	ldr	r1, [pc, #20]	; (8011020 <MX_USB_HOST_Init+0x28>)
 801100a:	f7f2 fecd 	bl	8003da8 <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 801100e:	4620      	mov	r0, r4
}
 8011010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 8011014:	f7f2 bf4a 	b.w	8003eac <USBH_Start>
 8011018:	2000f3f0 	.word	0x2000f3f0
 801101c:	08010fd5 	.word	0x08010fd5
 8011020:	20000004 	.word	0x20000004

08011024 <HAL_HCD_MspInit>:
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcdHandle->Instance==USB_OTG_FS)
 8011024:	6803      	ldr	r3, [r0, #0]
 8011026:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801102a:	b510      	push	{r4, lr}
 801102c:	b088      	sub	sp, #32
  if(hcdHandle->Instance==USB_OTG_FS)
 801102e:	d132      	bne.n	8011096 <HAL_HCD_MspInit+0x72>
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011030:	f44f 52e8 	mov.w	r2, #7424	; 0x1d00
 8011034:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011036:	2400      	movs	r4, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011038:	a903      	add	r1, sp, #12
 801103a:	4818      	ldr	r0, [pc, #96]	; (801109c <HAL_HCD_MspInit+0x78>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801103c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011040:	2303      	movs	r3, #3
 8011042:	e9cd 4305 	strd	r4, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011046:	230a      	movs	r3, #10
 8011048:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801104a:	f7ef fef1 	bl	8000e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801104e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8011052:	a903      	add	r1, sp, #12
 8011054:	4811      	ldr	r0, [pc, #68]	; (801109c <HAL_HCD_MspInit+0x78>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011056:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011058:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801105c:	f7ef fee8 	bl	8000e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011060:	4b0f      	ldr	r3, [pc, #60]	; (80110a0 <HAL_HCD_MspInit+0x7c>)

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011062:	2043      	movs	r0, #67	; 0x43
 8011064:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011068:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801106c:	635a      	str	r2, [r3, #52]	; 0x34
 801106e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011070:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8011074:	9201      	str	r2, [sp, #4]
 8011076:	9a01      	ldr	r2, [sp, #4]
 8011078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801107a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801107e:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011080:	4622      	mov	r2, r4
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011088:	9302      	str	r3, [sp, #8]
 801108a:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801108c:	f7ef face 	bl	800062c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011090:	2043      	movs	r0, #67	; 0x43
 8011092:	f7ef fafd 	bl	8000690 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011096:	b008      	add	sp, #32
 8011098:	bd10      	pop	{r4, pc}
 801109a:	bf00      	nop
 801109c:	40020000 	.word	0x40020000
 80110a0:	40023800 	.word	0x40023800

080110a4 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 80110a4:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 80110a8:	f7f3 b939 	b.w	800431e <USBH_LL_IncTimer>

080110ac <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80110ac:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 80110b0:	f7f3 b94b 	b.w	800434a <USBH_LL_Connect>

080110b4 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80110b4:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 80110b8:	f7f3 b962 	b.w	8004380 <USBH_LL_Disconnect>

080110bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80110bc:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 80110c0:	f7f3 b988 	b.w	80043d4 <USBH_LL_NotifyURBChange>

080110c4 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80110c4:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 80110c8:	f7f3 b937 	b.w	800433a <USBH_LL_PortEnabled>

080110cc <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80110cc:	f8d0 02bc 	ldr.w	r0, [r0, #700]	; 0x2bc
 80110d0:	f7f3 b937 	b.w	8004342 <USBH_LL_PortDisabled>

080110d4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80110d4:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80110d6:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
{
 80110da:	4604      	mov	r4, r0
  if (phost->id == HOST_FS) {
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d11f      	bne.n	8011120 <USBH_LL_Init+0x4c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80110e0:	4810      	ldr	r0, [pc, #64]	; (8011124 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_FS;

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80110e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80110e6:	f04f 0c08 	mov.w	ip, #8
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80110ea:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80110ec:	2203      	movs	r2, #3
  phost->pData = &hhcd_USB_OTG_FS;
 80110ee:	f8c4 03c4 	str.w	r0, [r4, #964]	; 0x3c4
  hhcd_USB_OTG_FS.pData = phost;
 80110f2:	f8c0 42bc 	str.w	r4, [r0, #700]	; 0x2bc
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80110f6:	e9c0 c202 	strd	ip, r2, [r0, #8]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80110fa:	2200      	movs	r2, #0
 80110fc:	6102      	str	r2, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80110fe:	2202      	movs	r2, #2
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011100:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011104:	f7ef ffd3 	bl	80010ae <HAL_HCD_Init>
 8011108:	b118      	cbz	r0, 8011112 <USBH_LL_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 801110a:	21f8      	movs	r1, #248	; 0xf8
 801110c:	4806      	ldr	r0, [pc, #24]	; (8011128 <USBH_LL_Init+0x54>)
 801110e:	f7ff fd6d 	bl	8010bec <_Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011112:	4804      	ldr	r0, [pc, #16]	; (8011124 <USBH_LL_Init+0x50>)
 8011114:	f7f0 fb8c 	bl	8001830 <HAL_HCD_GetCurrentFrame>
 8011118:	4601      	mov	r1, r0
 801111a:	4620      	mov	r0, r4
 801111c:	f7f3 f8fc 	bl	8004318 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 8011120:	2000      	movs	r0, #0
 8011122:	bd10      	pop	{r4, pc}
 8011124:	2000f7c4 	.word	0x2000f7c4
 8011128:	08015525 	.word	0x08015525

0801112c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 801112c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 801112e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8011132:	f7f0 fb47 	bl	80017c4 <HAL_HCD_Start>

  switch (hal_status) {
 8011136:	2803      	cmp	r0, #3
 8011138:	bf96      	itet	ls
 801113a:	4b02      	ldrls	r3, [pc, #8]	; (8011144 <USBH_LL_Start+0x18>)
  hal_status = HAL_HCD_Start(phost->pData);
 801113c:	2002      	movhi	r0, #2
 801113e:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8011140:	bd08      	pop	{r3, pc}
 8011142:	bf00      	nop
 8011144:	08015538 	.word	0x08015538

08011148 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011148:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 801114a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 801114e:	f7f0 fb4f 	bl	80017f0 <HAL_HCD_Stop>

  switch (hal_status) {
 8011152:	2803      	cmp	r0, #3
 8011154:	bf96      	itet	ls
 8011156:	4b02      	ldrls	r3, [pc, #8]	; (8011160 <USBH_LL_Stop+0x18>)
  hal_status = HAL_HCD_Stop(phost->pData);
 8011158:	2002      	movhi	r0, #2
 801115a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 801115c:	bd08      	pop	{r3, pc}
 801115e:	bf00      	nop
 8011160:	08015538 	.word	0x08015538

08011164 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011164:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011166:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 801116a:	f7f0 fb64 	bl	8001836 <HAL_HCD_GetCurrentSpeed>
 801116e:	2802      	cmp	r0, #2
 8011170:	bf88      	it	hi
 8011172:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8011174:	b2c0      	uxtb	r0, r0
 8011176:	bd08      	pop	{r3, pc}

08011178 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011178:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801117a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 801117e:	f7f0 fb49 	bl	8001814 <HAL_HCD_ResetPort>
  switch (hal_status) {
 8011182:	2803      	cmp	r0, #3
 8011184:	bf96      	itet	ls
 8011186:	4b02      	ldrls	r3, [pc, #8]	; (8011190 <USBH_LL_ResetPort+0x18>)
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011188:	2002      	movhi	r0, #2
 801118a:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 801118c:	bd08      	pop	{r3, pc}
 801118e:	bf00      	nop
 8011190:	08015538 	.word	0x08015538

08011194 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011194:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8011198:	f7f0 bb45 	b.w	8001826 <HAL_HCD_HC_GetXferCount>

0801119c <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801119c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 801119e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80111a2:	9402      	str	r4, [sp, #8]
 80111a4:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80111a8:	9401      	str	r4, [sp, #4]
 80111aa:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80111ae:	9400      	str	r4, [sp, #0]
 80111b0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80111b4:	f7ef ff33 	bl	800101e <HAL_HCD_HC_Init>
                               dev_address, speed, ep_type, mps);

  switch (hal_status) {
 80111b8:	2803      	cmp	r0, #3
 80111ba:	bf96      	itet	ls
 80111bc:	4b02      	ldrls	r3, [pc, #8]	; (80111c8 <USBH_LL_OpenPipe+0x2c>)
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80111be:	2002      	movhi	r0, #2
 80111c0:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80111c2:	b004      	add	sp, #16
 80111c4:	bd10      	pop	{r4, pc}
 80111c6:	bf00      	nop
 80111c8:	08015538 	.word	0x08015538

080111cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80111cc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80111ce:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80111d2:	f7ef ff5a 	bl	800108a <HAL_HCD_HC_Halt>

  switch (hal_status) {
 80111d6:	2803      	cmp	r0, #3
 80111d8:	bf96      	itet	ls
 80111da:	4b02      	ldrls	r3, [pc, #8]	; (80111e4 <USBH_LL_ClosePipe+0x18>)
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80111dc:	2002      	movhi	r0, #2
 80111de:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 80111e0:	bd08      	pop	{r3, pc}
 80111e2:	bf00      	nop
 80111e4:	08015538 	.word	0x08015538

080111e8 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80111e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80111ea:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 80111ee:	9403      	str	r4, [sp, #12]
 80111f0:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80111f4:	9402      	str	r4, [sp, #8]
 80111f6:	9c07      	ldr	r4, [sp, #28]
 80111f8:	9401      	str	r4, [sp, #4]
 80111fa:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80111fe:	9400      	str	r4, [sp, #0]
 8011200:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8011204:	f7ef ff97 	bl	8001136 <HAL_HCD_HC_SubmitRequest>
                                        ep_type, token, pbuff, length,
                                        do_ping);

  switch (hal_status) {
 8011208:	2803      	cmp	r0, #3
 801120a:	bf96      	itet	ls
 801120c:	4b02      	ldrls	r3, [pc, #8]	; (8011218 <USBH_LL_SubmitURB+0x30>)
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801120e:	2002      	movhi	r0, #2
 8011210:	5c18      	ldrbls	r0, [r3, r0]
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8011212:	b004      	add	sp, #16
 8011214:	bd10      	pop	{r4, pc}
 8011216:	bf00      	nop
 8011218:	08015538 	.word	0x08015538

0801121c <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801121c:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8011220:	f7f0 bafb 	b.w	800181a <HAL_HCD_HC_GetURBState>

08011224 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011224:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8011226:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 801122a:	2b01      	cmp	r3, #1
 801122c:	d102      	bne.n	8011234 <USBH_LL_DriverVBUS+0x10>
    MX_DriverVbusFS(state);
 801122e:	4608      	mov	r0, r1
 8011230:	f000 f8ca 	bl	80113c8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011234:	20c8      	movs	r0, #200	; 0xc8
 8011236:	f7ef f9d5 	bl	80005e4 <HAL_Delay>
  return USBH_OK;
}
 801123a:	2000      	movs	r0, #0
 801123c:	bd08      	pop	{r3, pc}

0801123e <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801123e:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8011242:	2028      	movs	r0, #40	; 0x28
 8011244:	fb00 3101 	mla	r1, r0, r1, r3
 8011248:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 801124c:	b11b      	cbz	r3, 8011256 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 801124e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8011252:	2000      	movs	r0, #0
 8011254:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8011256:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 801125a:	e7fa      	b.n	8011252 <USBH_LL_SetToggle+0x14>

0801125c <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801125c:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8011260:	2228      	movs	r2, #40	; 0x28
 8011262:	fb02 3101 	mla	r1, r2, r1, r3
 8011266:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 801126a:	b113      	cbz	r3, 8011272 <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801126c:	f891 0050 	ldrb.w	r0, [r1, #80]	; 0x50
 8011270:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8011272:	f891 0051 	ldrb.w	r0, [r1, #81]	; 0x51
  }
  return toggle;
}
 8011276:	4770      	bx	lr

08011278 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8011278:	f7ef b9b4 	b.w	80005e4 <HAL_Delay>

0801127c <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 801127c:	2000      	movs	r0, #0
 801127e:	4770      	bx	lr

08011280 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8011280:	4601      	mov	r1, r0
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8011282:	4804      	ldr	r0, [pc, #16]	; (8011294 <USBH_status+0x14>)
{
 8011284:	b508      	push	{r3, lr}
  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8011286:	f7f2 f9d9 	bl	800363c <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 801128a:	fab0 f080 	clz	r0, r0
 801128e:	0940      	lsrs	r0, r0, #5
 8011290:	bd08      	pop	{r3, pc}
 8011292:	bf00      	nop
 8011294:	2000f3f0 	.word	0x2000f3f0

08011298 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011298:	b510      	push	{r4, lr}
 801129a:	4603      	mov	r3, r0
 801129c:	b08e      	sub	sp, #56	; 0x38
 801129e:	4608      	mov	r0, r1
 80112a0:	4614      	mov	r4, r2
 80112a2:	2903      	cmp	r1, #3
 80112a4:	d803      	bhi.n	80112ae <USBH_ioctl+0x16>
 80112a6:	e8df f001 	tbb	[pc, r1]
 80112aa:	0503      	.short	0x0503
 80112ac:	1a10      	.short	0x1a10
      *(DWORD*)buff = info.capacity.block_nbr;
      res = RES_OK;
    }
    else
    {
      res = RES_ERROR;
 80112ae:	2004      	movs	r0, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 80112b0:	b00e      	add	sp, #56	; 0x38
 80112b2:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80112b4:	aa01      	add	r2, sp, #4
 80112b6:	4619      	mov	r1, r3
 80112b8:	480e      	ldr	r0, [pc, #56]	; (80112f4 <USBH_ioctl+0x5c>)
 80112ba:	f7f2 f9d0 	bl	800365e <USBH_MSC_GetLUNInfo>
 80112be:	b108      	cbz	r0, 80112c4 <USBH_ioctl+0x2c>
      res = RES_ERROR;
 80112c0:	2001      	movs	r0, #1
  return res;
 80112c2:	e7f5      	b.n	80112b0 <USBH_ioctl+0x18>
      *(DWORD*)buff = info.capacity.block_nbr;
 80112c4:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size;
 80112c6:	6023      	str	r3, [r4, #0]
      res = RES_OK;
 80112c8:	e7f2      	b.n	80112b0 <USBH_ioctl+0x18>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80112ca:	aa01      	add	r2, sp, #4
 80112cc:	4619      	mov	r1, r3
 80112ce:	4809      	ldr	r0, [pc, #36]	; (80112f4 <USBH_ioctl+0x5c>)
 80112d0:	f7f2 f9c5 	bl	800365e <USBH_MSC_GetLUNInfo>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	d1f3      	bne.n	80112c0 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size;
 80112d8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80112dc:	e7f3      	b.n	80112c6 <USBH_ioctl+0x2e>
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80112de:	aa01      	add	r2, sp, #4
 80112e0:	4619      	mov	r1, r3
 80112e2:	4804      	ldr	r0, [pc, #16]	; (80112f4 <USBH_ioctl+0x5c>)
 80112e4:	f7f2 f9bb 	bl	800365e <USBH_MSC_GetLUNInfo>
 80112e8:	2800      	cmp	r0, #0
 80112ea:	d1e9      	bne.n	80112c0 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80112ec:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80112f0:	0a5b      	lsrs	r3, r3, #9
 80112f2:	e7e8      	b.n	80112c6 <USBH_ioctl+0x2e>
 80112f4:	2000f3f0 	.word	0x2000f3f0

080112f8 <USBH_read>:
{
 80112f8:	b510      	push	{r4, lr}
 80112fa:	b090      	sub	sp, #64	; 0x40
 80112fc:	4604      	mov	r4, r0
  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80112fe:	9300      	str	r3, [sp, #0]
 8011300:	460b      	mov	r3, r1
 8011302:	4601      	mov	r1, r0
 8011304:	480f      	ldr	r0, [pc, #60]	; (8011344 <USBH_read+0x4c>)
 8011306:	f7f2 f9c2 	bl	800368e <USBH_MSC_Read>
 801130a:	b1b0      	cbz	r0, 801133a <USBH_read+0x42>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 801130c:	aa03      	add	r2, sp, #12
 801130e:	4621      	mov	r1, r4
 8011310:	480c      	ldr	r0, [pc, #48]	; (8011344 <USBH_read+0x4c>)
 8011312:	f7f2 f9a4 	bl	800365e <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8011316:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801131a:	2b28      	cmp	r3, #40	; 0x28
 801131c:	d003      	beq.n	8011326 <USBH_read+0x2e>
 801131e:	2b3a      	cmp	r3, #58	; 0x3a
 8011320:	d001      	beq.n	8011326 <USBH_read+0x2e>
 8011322:	2b04      	cmp	r3, #4
 8011324:	d10b      	bne.n	801133e <USBH_read+0x46>
      USBH_ErrLog ("USB Disk is not ready!");
 8011326:	4808      	ldr	r0, [pc, #32]	; (8011348 <USBH_read+0x50>)
 8011328:	f000 f984 	bl	8011634 <iprintf>
 801132c:	4807      	ldr	r0, [pc, #28]	; (801134c <USBH_read+0x54>)
 801132e:	f000 f981 	bl	8011634 <iprintf>
 8011332:	200a      	movs	r0, #10
 8011334:	f000 f996 	bl	8011664 <putchar>
 8011338:	2003      	movs	r0, #3
}
 801133a:	b010      	add	sp, #64	; 0x40
 801133c:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 801133e:	2001      	movs	r0, #1
 8011340:	e7fb      	b.n	801133a <USBH_read+0x42>
 8011342:	bf00      	nop
 8011344:	2000f3f0 	.word	0x2000f3f0
 8011348:	080128e2 	.word	0x080128e2
 801134c:	0801553c 	.word	0x0801553c

08011350 <USBH_write>:
{
 8011350:	b510      	push	{r4, lr}
 8011352:	b090      	sub	sp, #64	; 0x40
 8011354:	4604      	mov	r4, r0
  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8011356:	9300      	str	r3, [sp, #0]
 8011358:	460b      	mov	r3, r1
 801135a:	4601      	mov	r1, r0
 801135c:	4816      	ldr	r0, [pc, #88]	; (80113b8 <USBH_write+0x68>)
 801135e:	f7f2 f9d9 	bl	8003714 <USBH_MSC_Write>
 8011362:	b160      	cbz	r0, 801137e <USBH_write+0x2e>
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8011364:	aa03      	add	r2, sp, #12
 8011366:	4621      	mov	r1, r4
 8011368:	4813      	ldr	r0, [pc, #76]	; (80113b8 <USBH_write+0x68>)
 801136a:	f7f2 f978 	bl	800365e <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 801136e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011372:	2b27      	cmp	r3, #39	; 0x27
 8011374:	d009      	beq.n	801138a <USBH_write+0x3a>
 8011376:	d804      	bhi.n	8011382 <USBH_write+0x32>
 8011378:	2b04      	cmp	r3, #4
 801137a:	d011      	beq.n	80113a0 <USBH_write+0x50>
 801137c:	2001      	movs	r0, #1
}
 801137e:	b010      	add	sp, #64	; 0x40
 8011380:	bd10      	pop	{r4, pc}
    switch (info.sense.asc)
 8011382:	2b28      	cmp	r3, #40	; 0x28
 8011384:	d00c      	beq.n	80113a0 <USBH_write+0x50>
 8011386:	2b3a      	cmp	r3, #58	; 0x3a
 8011388:	e7f7      	b.n	801137a <USBH_write+0x2a>
      USBH_ErrLog("USB Disk is Write protected!");
 801138a:	480c      	ldr	r0, [pc, #48]	; (80113bc <USBH_write+0x6c>)
 801138c:	f000 f952 	bl	8011634 <iprintf>
 8011390:	480b      	ldr	r0, [pc, #44]	; (80113c0 <USBH_write+0x70>)
 8011392:	f000 f94f 	bl	8011634 <iprintf>
 8011396:	200a      	movs	r0, #10
 8011398:	f000 f964 	bl	8011664 <putchar>
      res = RES_WRPRT;
 801139c:	2002      	movs	r0, #2
      break;
 801139e:	e7ee      	b.n	801137e <USBH_write+0x2e>
      USBH_ErrLog ("USB Disk is not ready!");
 80113a0:	4806      	ldr	r0, [pc, #24]	; (80113bc <USBH_write+0x6c>)
 80113a2:	f000 f947 	bl	8011634 <iprintf>
 80113a6:	4807      	ldr	r0, [pc, #28]	; (80113c4 <USBH_write+0x74>)
 80113a8:	f000 f944 	bl	8011634 <iprintf>
 80113ac:	200a      	movs	r0, #10
 80113ae:	f000 f959 	bl	8011664 <putchar>
 80113b2:	2003      	movs	r0, #3
 80113b4:	e7e3      	b.n	801137e <USBH_write+0x2e>
 80113b6:	bf00      	nop
 80113b8:	2000f3f0 	.word	0x2000f3f0
 80113bc:	080128e2 	.word	0x080128e2
 80113c0:	08015553 	.word	0x08015553
 80113c4:	0801553c 	.word	0x0801553c

080113c8 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80113c8:	fab0 f280 	clz	r2, r0
 80113cc:	2140      	movs	r1, #64	; 0x40
 80113ce:	4802      	ldr	r0, [pc, #8]	; (80113d8 <MX_DriverVbusFS+0x10>)
 80113d0:	0952      	lsrs	r2, r2, #5
 80113d2:	f7ef be1f 	b.w	8001014 <HAL_GPIO_WritePin>
 80113d6:	bf00      	nop
 80113d8:	40021800 	.word	0x40021800

080113dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80113dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011414 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80113e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80113e2:	e003      	b.n	80113ec <LoopCopyDataInit>

080113e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80113e4:	4b0c      	ldr	r3, [pc, #48]	; (8011418 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80113e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80113e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80113ea:	3104      	adds	r1, #4

080113ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80113ec:	480b      	ldr	r0, [pc, #44]	; (801141c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80113ee:	4b0c      	ldr	r3, [pc, #48]	; (8011420 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80113f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80113f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80113f4:	d3f6      	bcc.n	80113e4 <CopyDataInit>
  ldr  r2, =_sbss
 80113f6:	4a0b      	ldr	r2, [pc, #44]	; (8011424 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80113f8:	e002      	b.n	8011400 <LoopFillZerobss>

080113fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80113fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80113fc:	f842 3b04 	str.w	r3, [r2], #4

08011400 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8011400:	4b09      	ldr	r3, [pc, #36]	; (8011428 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8011402:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011404:	d3f9      	bcc.n	80113fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8011406:	f7ff fd05 	bl	8010e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801140a:	f000 f811 	bl	8011430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801140e:	f7ff fa4b 	bl	80108a8 <main>
  bx  lr    
 8011412:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011414:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8011418:	080156e0 	.word	0x080156e0
  ldr  r0, =_sdata
 801141c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8011420:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8011424:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8011428:	2000fa90 	.word	0x2000fa90

0801142c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801142c:	e7fe      	b.n	801142c <ADC_IRQHandler>
	...

08011430 <__libc_init_array>:
 8011430:	b570      	push	{r4, r5, r6, lr}
 8011432:	4d0d      	ldr	r5, [pc, #52]	; (8011468 <__libc_init_array+0x38>)
 8011434:	4c0d      	ldr	r4, [pc, #52]	; (801146c <__libc_init_array+0x3c>)
 8011436:	1b64      	subs	r4, r4, r5
 8011438:	10a4      	asrs	r4, r4, #2
 801143a:	2600      	movs	r6, #0
 801143c:	42a6      	cmp	r6, r4
 801143e:	d109      	bne.n	8011454 <__libc_init_array+0x24>
 8011440:	4d0b      	ldr	r5, [pc, #44]	; (8011470 <__libc_init_array+0x40>)
 8011442:	4c0c      	ldr	r4, [pc, #48]	; (8011474 <__libc_init_array+0x44>)
 8011444:	f001 f95c 	bl	8012700 <_init>
 8011448:	1b64      	subs	r4, r4, r5
 801144a:	10a4      	asrs	r4, r4, #2
 801144c:	2600      	movs	r6, #0
 801144e:	42a6      	cmp	r6, r4
 8011450:	d105      	bne.n	801145e <__libc_init_array+0x2e>
 8011452:	bd70      	pop	{r4, r5, r6, pc}
 8011454:	f855 3b04 	ldr.w	r3, [r5], #4
 8011458:	4798      	blx	r3
 801145a:	3601      	adds	r6, #1
 801145c:	e7ee      	b.n	801143c <__libc_init_array+0xc>
 801145e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011462:	4798      	blx	r3
 8011464:	3601      	adds	r6, #1
 8011466:	e7f2      	b.n	801144e <__libc_init_array+0x1e>
 8011468:	080156d8 	.word	0x080156d8
 801146c:	080156d8 	.word	0x080156d8
 8011470:	080156d8 	.word	0x080156d8
 8011474:	080156dc 	.word	0x080156dc

08011478 <malloc>:
 8011478:	4b02      	ldr	r3, [pc, #8]	; (8011484 <malloc+0xc>)
 801147a:	4601      	mov	r1, r0
 801147c:	6818      	ldr	r0, [r3, #0]
 801147e:	f000 b87f 	b.w	8011580 <_malloc_r>
 8011482:	bf00      	nop
 8011484:	20000034 	.word	0x20000034

08011488 <free>:
 8011488:	4b02      	ldr	r3, [pc, #8]	; (8011494 <free+0xc>)
 801148a:	4601      	mov	r1, r0
 801148c:	6818      	ldr	r0, [r3, #0]
 801148e:	f000 b827 	b.w	80114e0 <_free_r>
 8011492:	bf00      	nop
 8011494:	20000034 	.word	0x20000034

08011498 <memcmp>:
 8011498:	b530      	push	{r4, r5, lr}
 801149a:	3901      	subs	r1, #1
 801149c:	2400      	movs	r4, #0
 801149e:	42a2      	cmp	r2, r4
 80114a0:	d101      	bne.n	80114a6 <memcmp+0xe>
 80114a2:	2000      	movs	r0, #0
 80114a4:	e005      	b.n	80114b2 <memcmp+0x1a>
 80114a6:	5d03      	ldrb	r3, [r0, r4]
 80114a8:	3401      	adds	r4, #1
 80114aa:	5d0d      	ldrb	r5, [r1, r4]
 80114ac:	42ab      	cmp	r3, r5
 80114ae:	d0f6      	beq.n	801149e <memcmp+0x6>
 80114b0:	1b58      	subs	r0, r3, r5
 80114b2:	bd30      	pop	{r4, r5, pc}

080114b4 <memcpy>:
 80114b4:	440a      	add	r2, r1
 80114b6:	4291      	cmp	r1, r2
 80114b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80114bc:	d100      	bne.n	80114c0 <memcpy+0xc>
 80114be:	4770      	bx	lr
 80114c0:	b510      	push	{r4, lr}
 80114c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80114c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80114ca:	4291      	cmp	r1, r2
 80114cc:	d1f9      	bne.n	80114c2 <memcpy+0xe>
 80114ce:	bd10      	pop	{r4, pc}

080114d0 <memset>:
 80114d0:	4402      	add	r2, r0
 80114d2:	4603      	mov	r3, r0
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d100      	bne.n	80114da <memset+0xa>
 80114d8:	4770      	bx	lr
 80114da:	f803 1b01 	strb.w	r1, [r3], #1
 80114de:	e7f9      	b.n	80114d4 <memset+0x4>

080114e0 <_free_r>:
 80114e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114e2:	2900      	cmp	r1, #0
 80114e4:	d048      	beq.n	8011578 <_free_r+0x98>
 80114e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114ea:	9001      	str	r0, [sp, #4]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	f1a1 0404 	sub.w	r4, r1, #4
 80114f2:	bfb8      	it	lt
 80114f4:	18e4      	addlt	r4, r4, r3
 80114f6:	f000 fcc9 	bl	8011e8c <__malloc_lock>
 80114fa:	4a20      	ldr	r2, [pc, #128]	; (801157c <_free_r+0x9c>)
 80114fc:	9801      	ldr	r0, [sp, #4]
 80114fe:	6813      	ldr	r3, [r2, #0]
 8011500:	4615      	mov	r5, r2
 8011502:	b933      	cbnz	r3, 8011512 <_free_r+0x32>
 8011504:	6063      	str	r3, [r4, #4]
 8011506:	6014      	str	r4, [r2, #0]
 8011508:	b003      	add	sp, #12
 801150a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801150e:	f000 bcc3 	b.w	8011e98 <__malloc_unlock>
 8011512:	42a3      	cmp	r3, r4
 8011514:	d90b      	bls.n	801152e <_free_r+0x4e>
 8011516:	6821      	ldr	r1, [r4, #0]
 8011518:	1862      	adds	r2, r4, r1
 801151a:	4293      	cmp	r3, r2
 801151c:	bf04      	itt	eq
 801151e:	681a      	ldreq	r2, [r3, #0]
 8011520:	685b      	ldreq	r3, [r3, #4]
 8011522:	6063      	str	r3, [r4, #4]
 8011524:	bf04      	itt	eq
 8011526:	1852      	addeq	r2, r2, r1
 8011528:	6022      	streq	r2, [r4, #0]
 801152a:	602c      	str	r4, [r5, #0]
 801152c:	e7ec      	b.n	8011508 <_free_r+0x28>
 801152e:	461a      	mov	r2, r3
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	b10b      	cbz	r3, 8011538 <_free_r+0x58>
 8011534:	42a3      	cmp	r3, r4
 8011536:	d9fa      	bls.n	801152e <_free_r+0x4e>
 8011538:	6811      	ldr	r1, [r2, #0]
 801153a:	1855      	adds	r5, r2, r1
 801153c:	42a5      	cmp	r5, r4
 801153e:	d10b      	bne.n	8011558 <_free_r+0x78>
 8011540:	6824      	ldr	r4, [r4, #0]
 8011542:	4421      	add	r1, r4
 8011544:	1854      	adds	r4, r2, r1
 8011546:	42a3      	cmp	r3, r4
 8011548:	6011      	str	r1, [r2, #0]
 801154a:	d1dd      	bne.n	8011508 <_free_r+0x28>
 801154c:	681c      	ldr	r4, [r3, #0]
 801154e:	685b      	ldr	r3, [r3, #4]
 8011550:	6053      	str	r3, [r2, #4]
 8011552:	4421      	add	r1, r4
 8011554:	6011      	str	r1, [r2, #0]
 8011556:	e7d7      	b.n	8011508 <_free_r+0x28>
 8011558:	d902      	bls.n	8011560 <_free_r+0x80>
 801155a:	230c      	movs	r3, #12
 801155c:	6003      	str	r3, [r0, #0]
 801155e:	e7d3      	b.n	8011508 <_free_r+0x28>
 8011560:	6825      	ldr	r5, [r4, #0]
 8011562:	1961      	adds	r1, r4, r5
 8011564:	428b      	cmp	r3, r1
 8011566:	bf04      	itt	eq
 8011568:	6819      	ldreq	r1, [r3, #0]
 801156a:	685b      	ldreq	r3, [r3, #4]
 801156c:	6063      	str	r3, [r4, #4]
 801156e:	bf04      	itt	eq
 8011570:	1949      	addeq	r1, r1, r5
 8011572:	6021      	streq	r1, [r4, #0]
 8011574:	6054      	str	r4, [r2, #4]
 8011576:	e7c7      	b.n	8011508 <_free_r+0x28>
 8011578:	b003      	add	sp, #12
 801157a:	bd30      	pop	{r4, r5, pc}
 801157c:	200085e0 	.word	0x200085e0

08011580 <_malloc_r>:
 8011580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011582:	1ccd      	adds	r5, r1, #3
 8011584:	f025 0503 	bic.w	r5, r5, #3
 8011588:	3508      	adds	r5, #8
 801158a:	2d0c      	cmp	r5, #12
 801158c:	bf38      	it	cc
 801158e:	250c      	movcc	r5, #12
 8011590:	2d00      	cmp	r5, #0
 8011592:	4606      	mov	r6, r0
 8011594:	db01      	blt.n	801159a <_malloc_r+0x1a>
 8011596:	42a9      	cmp	r1, r5
 8011598:	d903      	bls.n	80115a2 <_malloc_r+0x22>
 801159a:	230c      	movs	r3, #12
 801159c:	6033      	str	r3, [r6, #0]
 801159e:	2000      	movs	r0, #0
 80115a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115a2:	f000 fc73 	bl	8011e8c <__malloc_lock>
 80115a6:	4921      	ldr	r1, [pc, #132]	; (801162c <_malloc_r+0xac>)
 80115a8:	680a      	ldr	r2, [r1, #0]
 80115aa:	4614      	mov	r4, r2
 80115ac:	b99c      	cbnz	r4, 80115d6 <_malloc_r+0x56>
 80115ae:	4f20      	ldr	r7, [pc, #128]	; (8011630 <_malloc_r+0xb0>)
 80115b0:	683b      	ldr	r3, [r7, #0]
 80115b2:	b923      	cbnz	r3, 80115be <_malloc_r+0x3e>
 80115b4:	4621      	mov	r1, r4
 80115b6:	4630      	mov	r0, r6
 80115b8:	f000 f920 	bl	80117fc <_sbrk_r>
 80115bc:	6038      	str	r0, [r7, #0]
 80115be:	4629      	mov	r1, r5
 80115c0:	4630      	mov	r0, r6
 80115c2:	f000 f91b 	bl	80117fc <_sbrk_r>
 80115c6:	1c43      	adds	r3, r0, #1
 80115c8:	d123      	bne.n	8011612 <_malloc_r+0x92>
 80115ca:	230c      	movs	r3, #12
 80115cc:	6033      	str	r3, [r6, #0]
 80115ce:	4630      	mov	r0, r6
 80115d0:	f000 fc62 	bl	8011e98 <__malloc_unlock>
 80115d4:	e7e3      	b.n	801159e <_malloc_r+0x1e>
 80115d6:	6823      	ldr	r3, [r4, #0]
 80115d8:	1b5b      	subs	r3, r3, r5
 80115da:	d417      	bmi.n	801160c <_malloc_r+0x8c>
 80115dc:	2b0b      	cmp	r3, #11
 80115de:	d903      	bls.n	80115e8 <_malloc_r+0x68>
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	441c      	add	r4, r3
 80115e4:	6025      	str	r5, [r4, #0]
 80115e6:	e004      	b.n	80115f2 <_malloc_r+0x72>
 80115e8:	6863      	ldr	r3, [r4, #4]
 80115ea:	42a2      	cmp	r2, r4
 80115ec:	bf0c      	ite	eq
 80115ee:	600b      	streq	r3, [r1, #0]
 80115f0:	6053      	strne	r3, [r2, #4]
 80115f2:	4630      	mov	r0, r6
 80115f4:	f000 fc50 	bl	8011e98 <__malloc_unlock>
 80115f8:	f104 000b 	add.w	r0, r4, #11
 80115fc:	1d23      	adds	r3, r4, #4
 80115fe:	f020 0007 	bic.w	r0, r0, #7
 8011602:	1ac2      	subs	r2, r0, r3
 8011604:	d0cc      	beq.n	80115a0 <_malloc_r+0x20>
 8011606:	1a1b      	subs	r3, r3, r0
 8011608:	50a3      	str	r3, [r4, r2]
 801160a:	e7c9      	b.n	80115a0 <_malloc_r+0x20>
 801160c:	4622      	mov	r2, r4
 801160e:	6864      	ldr	r4, [r4, #4]
 8011610:	e7cc      	b.n	80115ac <_malloc_r+0x2c>
 8011612:	1cc4      	adds	r4, r0, #3
 8011614:	f024 0403 	bic.w	r4, r4, #3
 8011618:	42a0      	cmp	r0, r4
 801161a:	d0e3      	beq.n	80115e4 <_malloc_r+0x64>
 801161c:	1a21      	subs	r1, r4, r0
 801161e:	4630      	mov	r0, r6
 8011620:	f000 f8ec 	bl	80117fc <_sbrk_r>
 8011624:	3001      	adds	r0, #1
 8011626:	d1dd      	bne.n	80115e4 <_malloc_r+0x64>
 8011628:	e7cf      	b.n	80115ca <_malloc_r+0x4a>
 801162a:	bf00      	nop
 801162c:	200085e0 	.word	0x200085e0
 8011630:	200085e4 	.word	0x200085e4

08011634 <iprintf>:
 8011634:	b40f      	push	{r0, r1, r2, r3}
 8011636:	4b0a      	ldr	r3, [pc, #40]	; (8011660 <iprintf+0x2c>)
 8011638:	b513      	push	{r0, r1, r4, lr}
 801163a:	681c      	ldr	r4, [r3, #0]
 801163c:	b124      	cbz	r4, 8011648 <iprintf+0x14>
 801163e:	69a3      	ldr	r3, [r4, #24]
 8011640:	b913      	cbnz	r3, 8011648 <iprintf+0x14>
 8011642:	4620      	mov	r0, r4
 8011644:	f000 fb0c 	bl	8011c60 <__sinit>
 8011648:	ab05      	add	r3, sp, #20
 801164a:	9a04      	ldr	r2, [sp, #16]
 801164c:	68a1      	ldr	r1, [r4, #8]
 801164e:	9301      	str	r3, [sp, #4]
 8011650:	4620      	mov	r0, r4
 8011652:	f000 fc51 	bl	8011ef8 <_vfiprintf_r>
 8011656:	b002      	add	sp, #8
 8011658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801165c:	b004      	add	sp, #16
 801165e:	4770      	bx	lr
 8011660:	20000034 	.word	0x20000034

08011664 <putchar>:
 8011664:	4b09      	ldr	r3, [pc, #36]	; (801168c <putchar+0x28>)
 8011666:	b513      	push	{r0, r1, r4, lr}
 8011668:	681c      	ldr	r4, [r3, #0]
 801166a:	4601      	mov	r1, r0
 801166c:	b134      	cbz	r4, 801167c <putchar+0x18>
 801166e:	69a3      	ldr	r3, [r4, #24]
 8011670:	b923      	cbnz	r3, 801167c <putchar+0x18>
 8011672:	9001      	str	r0, [sp, #4]
 8011674:	4620      	mov	r0, r4
 8011676:	f000 faf3 	bl	8011c60 <__sinit>
 801167a:	9901      	ldr	r1, [sp, #4]
 801167c:	68a2      	ldr	r2, [r4, #8]
 801167e:	4620      	mov	r0, r4
 8011680:	b002      	add	sp, #8
 8011682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011686:	f000 befb 	b.w	8012480 <_putc_r>
 801168a:	bf00      	nop
 801168c:	20000034 	.word	0x20000034

08011690 <_puts_r>:
 8011690:	b570      	push	{r4, r5, r6, lr}
 8011692:	460e      	mov	r6, r1
 8011694:	4605      	mov	r5, r0
 8011696:	b118      	cbz	r0, 80116a0 <_puts_r+0x10>
 8011698:	6983      	ldr	r3, [r0, #24]
 801169a:	b90b      	cbnz	r3, 80116a0 <_puts_r+0x10>
 801169c:	f000 fae0 	bl	8011c60 <__sinit>
 80116a0:	69ab      	ldr	r3, [r5, #24]
 80116a2:	68ac      	ldr	r4, [r5, #8]
 80116a4:	b913      	cbnz	r3, 80116ac <_puts_r+0x1c>
 80116a6:	4628      	mov	r0, r5
 80116a8:	f000 fada 	bl	8011c60 <__sinit>
 80116ac:	4b2c      	ldr	r3, [pc, #176]	; (8011760 <_puts_r+0xd0>)
 80116ae:	429c      	cmp	r4, r3
 80116b0:	d120      	bne.n	80116f4 <_puts_r+0x64>
 80116b2:	686c      	ldr	r4, [r5, #4]
 80116b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116b6:	07db      	lsls	r3, r3, #31
 80116b8:	d405      	bmi.n	80116c6 <_puts_r+0x36>
 80116ba:	89a3      	ldrh	r3, [r4, #12]
 80116bc:	0598      	lsls	r0, r3, #22
 80116be:	d402      	bmi.n	80116c6 <_puts_r+0x36>
 80116c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116c2:	f000 fb7d 	bl	8011dc0 <__retarget_lock_acquire_recursive>
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	0719      	lsls	r1, r3, #28
 80116ca:	d51d      	bpl.n	8011708 <_puts_r+0x78>
 80116cc:	6923      	ldr	r3, [r4, #16]
 80116ce:	b1db      	cbz	r3, 8011708 <_puts_r+0x78>
 80116d0:	3e01      	subs	r6, #1
 80116d2:	68a3      	ldr	r3, [r4, #8]
 80116d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80116d8:	3b01      	subs	r3, #1
 80116da:	60a3      	str	r3, [r4, #8]
 80116dc:	bb39      	cbnz	r1, 801172e <_puts_r+0x9e>
 80116de:	2b00      	cmp	r3, #0
 80116e0:	da38      	bge.n	8011754 <_puts_r+0xc4>
 80116e2:	4622      	mov	r2, r4
 80116e4:	210a      	movs	r1, #10
 80116e6:	4628      	mov	r0, r5
 80116e8:	f000 f8c2 	bl	8011870 <__swbuf_r>
 80116ec:	3001      	adds	r0, #1
 80116ee:	d011      	beq.n	8011714 <_puts_r+0x84>
 80116f0:	250a      	movs	r5, #10
 80116f2:	e011      	b.n	8011718 <_puts_r+0x88>
 80116f4:	4b1b      	ldr	r3, [pc, #108]	; (8011764 <_puts_r+0xd4>)
 80116f6:	429c      	cmp	r4, r3
 80116f8:	d101      	bne.n	80116fe <_puts_r+0x6e>
 80116fa:	68ac      	ldr	r4, [r5, #8]
 80116fc:	e7da      	b.n	80116b4 <_puts_r+0x24>
 80116fe:	4b1a      	ldr	r3, [pc, #104]	; (8011768 <_puts_r+0xd8>)
 8011700:	429c      	cmp	r4, r3
 8011702:	bf08      	it	eq
 8011704:	68ec      	ldreq	r4, [r5, #12]
 8011706:	e7d5      	b.n	80116b4 <_puts_r+0x24>
 8011708:	4621      	mov	r1, r4
 801170a:	4628      	mov	r0, r5
 801170c:	f000 f902 	bl	8011914 <__swsetup_r>
 8011710:	2800      	cmp	r0, #0
 8011712:	d0dd      	beq.n	80116d0 <_puts_r+0x40>
 8011714:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801171a:	07da      	lsls	r2, r3, #31
 801171c:	d405      	bmi.n	801172a <_puts_r+0x9a>
 801171e:	89a3      	ldrh	r3, [r4, #12]
 8011720:	059b      	lsls	r3, r3, #22
 8011722:	d402      	bmi.n	801172a <_puts_r+0x9a>
 8011724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011726:	f000 fb4c 	bl	8011dc2 <__retarget_lock_release_recursive>
 801172a:	4628      	mov	r0, r5
 801172c:	bd70      	pop	{r4, r5, r6, pc}
 801172e:	2b00      	cmp	r3, #0
 8011730:	da04      	bge.n	801173c <_puts_r+0xac>
 8011732:	69a2      	ldr	r2, [r4, #24]
 8011734:	429a      	cmp	r2, r3
 8011736:	dc06      	bgt.n	8011746 <_puts_r+0xb6>
 8011738:	290a      	cmp	r1, #10
 801173a:	d004      	beq.n	8011746 <_puts_r+0xb6>
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	1c5a      	adds	r2, r3, #1
 8011740:	6022      	str	r2, [r4, #0]
 8011742:	7019      	strb	r1, [r3, #0]
 8011744:	e7c5      	b.n	80116d2 <_puts_r+0x42>
 8011746:	4622      	mov	r2, r4
 8011748:	4628      	mov	r0, r5
 801174a:	f000 f891 	bl	8011870 <__swbuf_r>
 801174e:	3001      	adds	r0, #1
 8011750:	d1bf      	bne.n	80116d2 <_puts_r+0x42>
 8011752:	e7df      	b.n	8011714 <_puts_r+0x84>
 8011754:	6823      	ldr	r3, [r4, #0]
 8011756:	250a      	movs	r5, #10
 8011758:	1c5a      	adds	r2, r3, #1
 801175a:	6022      	str	r2, [r4, #0]
 801175c:	701d      	strb	r5, [r3, #0]
 801175e:	e7db      	b.n	8011718 <_puts_r+0x88>
 8011760:	0801565c 	.word	0x0801565c
 8011764:	0801567c 	.word	0x0801567c
 8011768:	0801563c 	.word	0x0801563c

0801176c <puts>:
 801176c:	4b02      	ldr	r3, [pc, #8]	; (8011778 <puts+0xc>)
 801176e:	4601      	mov	r1, r0
 8011770:	6818      	ldr	r0, [r3, #0]
 8011772:	f7ff bf8d 	b.w	8011690 <_puts_r>
 8011776:	bf00      	nop
 8011778:	20000034 	.word	0x20000034

0801177c <rand>:
 801177c:	4b17      	ldr	r3, [pc, #92]	; (80117dc <rand+0x60>)
 801177e:	b510      	push	{r4, lr}
 8011780:	681c      	ldr	r4, [r3, #0]
 8011782:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011784:	b9b3      	cbnz	r3, 80117b4 <rand+0x38>
 8011786:	2018      	movs	r0, #24
 8011788:	f7ff fe76 	bl	8011478 <malloc>
 801178c:	63a0      	str	r0, [r4, #56]	; 0x38
 801178e:	b928      	cbnz	r0, 801179c <rand+0x20>
 8011790:	4602      	mov	r2, r0
 8011792:	4b13      	ldr	r3, [pc, #76]	; (80117e0 <rand+0x64>)
 8011794:	4813      	ldr	r0, [pc, #76]	; (80117e4 <rand+0x68>)
 8011796:	214e      	movs	r1, #78	; 0x4e
 8011798:	f000 f92a 	bl	80119f0 <__assert_func>
 801179c:	4a12      	ldr	r2, [pc, #72]	; (80117e8 <rand+0x6c>)
 801179e:	4b13      	ldr	r3, [pc, #76]	; (80117ec <rand+0x70>)
 80117a0:	e9c0 2300 	strd	r2, r3, [r0]
 80117a4:	4b12      	ldr	r3, [pc, #72]	; (80117f0 <rand+0x74>)
 80117a6:	6083      	str	r3, [r0, #8]
 80117a8:	230b      	movs	r3, #11
 80117aa:	8183      	strh	r3, [r0, #12]
 80117ac:	2201      	movs	r2, #1
 80117ae:	2300      	movs	r3, #0
 80117b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80117b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80117b6:	480f      	ldr	r0, [pc, #60]	; (80117f4 <rand+0x78>)
 80117b8:	690a      	ldr	r2, [r1, #16]
 80117ba:	694b      	ldr	r3, [r1, #20]
 80117bc:	4c0e      	ldr	r4, [pc, #56]	; (80117f8 <rand+0x7c>)
 80117be:	4350      	muls	r0, r2
 80117c0:	fb04 0003 	mla	r0, r4, r3, r0
 80117c4:	fba2 3404 	umull	r3, r4, r2, r4
 80117c8:	1c5a      	adds	r2, r3, #1
 80117ca:	4404      	add	r4, r0
 80117cc:	f144 0000 	adc.w	r0, r4, #0
 80117d0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80117d4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80117d8:	bd10      	pop	{r4, pc}
 80117da:	bf00      	nop
 80117dc:	20000034 	.word	0x20000034
 80117e0:	08015588 	.word	0x08015588
 80117e4:	0801559f 	.word	0x0801559f
 80117e8:	abcd330e 	.word	0xabcd330e
 80117ec:	e66d1234 	.word	0xe66d1234
 80117f0:	0005deec 	.word	0x0005deec
 80117f4:	5851f42d 	.word	0x5851f42d
 80117f8:	4c957f2d 	.word	0x4c957f2d

080117fc <_sbrk_r>:
 80117fc:	b538      	push	{r3, r4, r5, lr}
 80117fe:	4d06      	ldr	r5, [pc, #24]	; (8011818 <_sbrk_r+0x1c>)
 8011800:	2300      	movs	r3, #0
 8011802:	4604      	mov	r4, r0
 8011804:	4608      	mov	r0, r1
 8011806:	602b      	str	r3, [r5, #0]
 8011808:	f7ff faae 	bl	8010d68 <_sbrk>
 801180c:	1c43      	adds	r3, r0, #1
 801180e:	d102      	bne.n	8011816 <_sbrk_r+0x1a>
 8011810:	682b      	ldr	r3, [r5, #0]
 8011812:	b103      	cbz	r3, 8011816 <_sbrk_r+0x1a>
 8011814:	6023      	str	r3, [r4, #0]
 8011816:	bd38      	pop	{r3, r4, r5, pc}
 8011818:	2000bd9c 	.word	0x2000bd9c

0801181c <strcat>:
 801181c:	b510      	push	{r4, lr}
 801181e:	4602      	mov	r2, r0
 8011820:	7814      	ldrb	r4, [r2, #0]
 8011822:	4613      	mov	r3, r2
 8011824:	3201      	adds	r2, #1
 8011826:	2c00      	cmp	r4, #0
 8011828:	d1fa      	bne.n	8011820 <strcat+0x4>
 801182a:	3b01      	subs	r3, #1
 801182c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011830:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011834:	2a00      	cmp	r2, #0
 8011836:	d1f9      	bne.n	801182c <strcat+0x10>
 8011838:	bd10      	pop	{r4, pc}

0801183a <strcpy>:
 801183a:	4603      	mov	r3, r0
 801183c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011840:	f803 2b01 	strb.w	r2, [r3], #1
 8011844:	2a00      	cmp	r2, #0
 8011846:	d1f9      	bne.n	801183c <strcpy+0x2>
 8011848:	4770      	bx	lr

0801184a <strncmp>:
 801184a:	b510      	push	{r4, lr}
 801184c:	b16a      	cbz	r2, 801186a <strncmp+0x20>
 801184e:	3901      	subs	r1, #1
 8011850:	1884      	adds	r4, r0, r2
 8011852:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011856:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801185a:	4293      	cmp	r3, r2
 801185c:	d103      	bne.n	8011866 <strncmp+0x1c>
 801185e:	42a0      	cmp	r0, r4
 8011860:	d001      	beq.n	8011866 <strncmp+0x1c>
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1f5      	bne.n	8011852 <strncmp+0x8>
 8011866:	1a98      	subs	r0, r3, r2
 8011868:	bd10      	pop	{r4, pc}
 801186a:	4610      	mov	r0, r2
 801186c:	e7fc      	b.n	8011868 <strncmp+0x1e>
	...

08011870 <__swbuf_r>:
 8011870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011872:	460e      	mov	r6, r1
 8011874:	4614      	mov	r4, r2
 8011876:	4605      	mov	r5, r0
 8011878:	b118      	cbz	r0, 8011882 <__swbuf_r+0x12>
 801187a:	6983      	ldr	r3, [r0, #24]
 801187c:	b90b      	cbnz	r3, 8011882 <__swbuf_r+0x12>
 801187e:	f000 f9ef 	bl	8011c60 <__sinit>
 8011882:	4b21      	ldr	r3, [pc, #132]	; (8011908 <__swbuf_r+0x98>)
 8011884:	429c      	cmp	r4, r3
 8011886:	d12b      	bne.n	80118e0 <__swbuf_r+0x70>
 8011888:	686c      	ldr	r4, [r5, #4]
 801188a:	69a3      	ldr	r3, [r4, #24]
 801188c:	60a3      	str	r3, [r4, #8]
 801188e:	89a3      	ldrh	r3, [r4, #12]
 8011890:	071a      	lsls	r2, r3, #28
 8011892:	d52f      	bpl.n	80118f4 <__swbuf_r+0x84>
 8011894:	6923      	ldr	r3, [r4, #16]
 8011896:	b36b      	cbz	r3, 80118f4 <__swbuf_r+0x84>
 8011898:	6923      	ldr	r3, [r4, #16]
 801189a:	6820      	ldr	r0, [r4, #0]
 801189c:	1ac0      	subs	r0, r0, r3
 801189e:	6963      	ldr	r3, [r4, #20]
 80118a0:	b2f6      	uxtb	r6, r6
 80118a2:	4283      	cmp	r3, r0
 80118a4:	4637      	mov	r7, r6
 80118a6:	dc04      	bgt.n	80118b2 <__swbuf_r+0x42>
 80118a8:	4621      	mov	r1, r4
 80118aa:	4628      	mov	r0, r5
 80118ac:	f000 f944 	bl	8011b38 <_fflush_r>
 80118b0:	bb30      	cbnz	r0, 8011900 <__swbuf_r+0x90>
 80118b2:	68a3      	ldr	r3, [r4, #8]
 80118b4:	3b01      	subs	r3, #1
 80118b6:	60a3      	str	r3, [r4, #8]
 80118b8:	6823      	ldr	r3, [r4, #0]
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	6022      	str	r2, [r4, #0]
 80118be:	701e      	strb	r6, [r3, #0]
 80118c0:	6963      	ldr	r3, [r4, #20]
 80118c2:	3001      	adds	r0, #1
 80118c4:	4283      	cmp	r3, r0
 80118c6:	d004      	beq.n	80118d2 <__swbuf_r+0x62>
 80118c8:	89a3      	ldrh	r3, [r4, #12]
 80118ca:	07db      	lsls	r3, r3, #31
 80118cc:	d506      	bpl.n	80118dc <__swbuf_r+0x6c>
 80118ce:	2e0a      	cmp	r6, #10
 80118d0:	d104      	bne.n	80118dc <__swbuf_r+0x6c>
 80118d2:	4621      	mov	r1, r4
 80118d4:	4628      	mov	r0, r5
 80118d6:	f000 f92f 	bl	8011b38 <_fflush_r>
 80118da:	b988      	cbnz	r0, 8011900 <__swbuf_r+0x90>
 80118dc:	4638      	mov	r0, r7
 80118de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e0:	4b0a      	ldr	r3, [pc, #40]	; (801190c <__swbuf_r+0x9c>)
 80118e2:	429c      	cmp	r4, r3
 80118e4:	d101      	bne.n	80118ea <__swbuf_r+0x7a>
 80118e6:	68ac      	ldr	r4, [r5, #8]
 80118e8:	e7cf      	b.n	801188a <__swbuf_r+0x1a>
 80118ea:	4b09      	ldr	r3, [pc, #36]	; (8011910 <__swbuf_r+0xa0>)
 80118ec:	429c      	cmp	r4, r3
 80118ee:	bf08      	it	eq
 80118f0:	68ec      	ldreq	r4, [r5, #12]
 80118f2:	e7ca      	b.n	801188a <__swbuf_r+0x1a>
 80118f4:	4621      	mov	r1, r4
 80118f6:	4628      	mov	r0, r5
 80118f8:	f000 f80c 	bl	8011914 <__swsetup_r>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	d0cb      	beq.n	8011898 <__swbuf_r+0x28>
 8011900:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011904:	e7ea      	b.n	80118dc <__swbuf_r+0x6c>
 8011906:	bf00      	nop
 8011908:	0801565c 	.word	0x0801565c
 801190c:	0801567c 	.word	0x0801567c
 8011910:	0801563c 	.word	0x0801563c

08011914 <__swsetup_r>:
 8011914:	4b32      	ldr	r3, [pc, #200]	; (80119e0 <__swsetup_r+0xcc>)
 8011916:	b570      	push	{r4, r5, r6, lr}
 8011918:	681d      	ldr	r5, [r3, #0]
 801191a:	4606      	mov	r6, r0
 801191c:	460c      	mov	r4, r1
 801191e:	b125      	cbz	r5, 801192a <__swsetup_r+0x16>
 8011920:	69ab      	ldr	r3, [r5, #24]
 8011922:	b913      	cbnz	r3, 801192a <__swsetup_r+0x16>
 8011924:	4628      	mov	r0, r5
 8011926:	f000 f99b 	bl	8011c60 <__sinit>
 801192a:	4b2e      	ldr	r3, [pc, #184]	; (80119e4 <__swsetup_r+0xd0>)
 801192c:	429c      	cmp	r4, r3
 801192e:	d10f      	bne.n	8011950 <__swsetup_r+0x3c>
 8011930:	686c      	ldr	r4, [r5, #4]
 8011932:	89a3      	ldrh	r3, [r4, #12]
 8011934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011938:	0719      	lsls	r1, r3, #28
 801193a:	d42c      	bmi.n	8011996 <__swsetup_r+0x82>
 801193c:	06dd      	lsls	r5, r3, #27
 801193e:	d411      	bmi.n	8011964 <__swsetup_r+0x50>
 8011940:	2309      	movs	r3, #9
 8011942:	6033      	str	r3, [r6, #0]
 8011944:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011948:	81a3      	strh	r3, [r4, #12]
 801194a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801194e:	e03e      	b.n	80119ce <__swsetup_r+0xba>
 8011950:	4b25      	ldr	r3, [pc, #148]	; (80119e8 <__swsetup_r+0xd4>)
 8011952:	429c      	cmp	r4, r3
 8011954:	d101      	bne.n	801195a <__swsetup_r+0x46>
 8011956:	68ac      	ldr	r4, [r5, #8]
 8011958:	e7eb      	b.n	8011932 <__swsetup_r+0x1e>
 801195a:	4b24      	ldr	r3, [pc, #144]	; (80119ec <__swsetup_r+0xd8>)
 801195c:	429c      	cmp	r4, r3
 801195e:	bf08      	it	eq
 8011960:	68ec      	ldreq	r4, [r5, #12]
 8011962:	e7e6      	b.n	8011932 <__swsetup_r+0x1e>
 8011964:	0758      	lsls	r0, r3, #29
 8011966:	d512      	bpl.n	801198e <__swsetup_r+0x7a>
 8011968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801196a:	b141      	cbz	r1, 801197e <__swsetup_r+0x6a>
 801196c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011970:	4299      	cmp	r1, r3
 8011972:	d002      	beq.n	801197a <__swsetup_r+0x66>
 8011974:	4630      	mov	r0, r6
 8011976:	f7ff fdb3 	bl	80114e0 <_free_r>
 801197a:	2300      	movs	r3, #0
 801197c:	6363      	str	r3, [r4, #52]	; 0x34
 801197e:	89a3      	ldrh	r3, [r4, #12]
 8011980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011984:	81a3      	strh	r3, [r4, #12]
 8011986:	2300      	movs	r3, #0
 8011988:	6063      	str	r3, [r4, #4]
 801198a:	6923      	ldr	r3, [r4, #16]
 801198c:	6023      	str	r3, [r4, #0]
 801198e:	89a3      	ldrh	r3, [r4, #12]
 8011990:	f043 0308 	orr.w	r3, r3, #8
 8011994:	81a3      	strh	r3, [r4, #12]
 8011996:	6923      	ldr	r3, [r4, #16]
 8011998:	b94b      	cbnz	r3, 80119ae <__swsetup_r+0x9a>
 801199a:	89a3      	ldrh	r3, [r4, #12]
 801199c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119a4:	d003      	beq.n	80119ae <__swsetup_r+0x9a>
 80119a6:	4621      	mov	r1, r4
 80119a8:	4630      	mov	r0, r6
 80119aa:	f000 fa2f 	bl	8011e0c <__smakebuf_r>
 80119ae:	89a0      	ldrh	r0, [r4, #12]
 80119b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80119b4:	f010 0301 	ands.w	r3, r0, #1
 80119b8:	d00a      	beq.n	80119d0 <__swsetup_r+0xbc>
 80119ba:	2300      	movs	r3, #0
 80119bc:	60a3      	str	r3, [r4, #8]
 80119be:	6963      	ldr	r3, [r4, #20]
 80119c0:	425b      	negs	r3, r3
 80119c2:	61a3      	str	r3, [r4, #24]
 80119c4:	6923      	ldr	r3, [r4, #16]
 80119c6:	b943      	cbnz	r3, 80119da <__swsetup_r+0xc6>
 80119c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80119cc:	d1ba      	bne.n	8011944 <__swsetup_r+0x30>
 80119ce:	bd70      	pop	{r4, r5, r6, pc}
 80119d0:	0781      	lsls	r1, r0, #30
 80119d2:	bf58      	it	pl
 80119d4:	6963      	ldrpl	r3, [r4, #20]
 80119d6:	60a3      	str	r3, [r4, #8]
 80119d8:	e7f4      	b.n	80119c4 <__swsetup_r+0xb0>
 80119da:	2000      	movs	r0, #0
 80119dc:	e7f7      	b.n	80119ce <__swsetup_r+0xba>
 80119de:	bf00      	nop
 80119e0:	20000034 	.word	0x20000034
 80119e4:	0801565c 	.word	0x0801565c
 80119e8:	0801567c 	.word	0x0801567c
 80119ec:	0801563c 	.word	0x0801563c

080119f0 <__assert_func>:
 80119f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119f2:	4614      	mov	r4, r2
 80119f4:	461a      	mov	r2, r3
 80119f6:	4b09      	ldr	r3, [pc, #36]	; (8011a1c <__assert_func+0x2c>)
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	4605      	mov	r5, r0
 80119fc:	68d8      	ldr	r0, [r3, #12]
 80119fe:	b14c      	cbz	r4, 8011a14 <__assert_func+0x24>
 8011a00:	4b07      	ldr	r3, [pc, #28]	; (8011a20 <__assert_func+0x30>)
 8011a02:	9100      	str	r1, [sp, #0]
 8011a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011a08:	4906      	ldr	r1, [pc, #24]	; (8011a24 <__assert_func+0x34>)
 8011a0a:	462b      	mov	r3, r5
 8011a0c:	f000 f9a6 	bl	8011d5c <fiprintf>
 8011a10:	f000 fdd4 	bl	80125bc <abort>
 8011a14:	4b04      	ldr	r3, [pc, #16]	; (8011a28 <__assert_func+0x38>)
 8011a16:	461c      	mov	r4, r3
 8011a18:	e7f3      	b.n	8011a02 <__assert_func+0x12>
 8011a1a:	bf00      	nop
 8011a1c:	20000034 	.word	0x20000034
 8011a20:	080155fe 	.word	0x080155fe
 8011a24:	0801560b 	.word	0x0801560b
 8011a28:	08015355 	.word	0x08015355

08011a2c <__sflush_r>:
 8011a2c:	898a      	ldrh	r2, [r1, #12]
 8011a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a32:	4605      	mov	r5, r0
 8011a34:	0710      	lsls	r0, r2, #28
 8011a36:	460c      	mov	r4, r1
 8011a38:	d458      	bmi.n	8011aec <__sflush_r+0xc0>
 8011a3a:	684b      	ldr	r3, [r1, #4]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	dc05      	bgt.n	8011a4c <__sflush_r+0x20>
 8011a40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	dc02      	bgt.n	8011a4c <__sflush_r+0x20>
 8011a46:	2000      	movs	r0, #0
 8011a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a4e:	2e00      	cmp	r6, #0
 8011a50:	d0f9      	beq.n	8011a46 <__sflush_r+0x1a>
 8011a52:	2300      	movs	r3, #0
 8011a54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a58:	682f      	ldr	r7, [r5, #0]
 8011a5a:	602b      	str	r3, [r5, #0]
 8011a5c:	d032      	beq.n	8011ac4 <__sflush_r+0x98>
 8011a5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	075a      	lsls	r2, r3, #29
 8011a64:	d505      	bpl.n	8011a72 <__sflush_r+0x46>
 8011a66:	6863      	ldr	r3, [r4, #4]
 8011a68:	1ac0      	subs	r0, r0, r3
 8011a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a6c:	b10b      	cbz	r3, 8011a72 <__sflush_r+0x46>
 8011a6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a70:	1ac0      	subs	r0, r0, r3
 8011a72:	2300      	movs	r3, #0
 8011a74:	4602      	mov	r2, r0
 8011a76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a78:	6a21      	ldr	r1, [r4, #32]
 8011a7a:	4628      	mov	r0, r5
 8011a7c:	47b0      	blx	r6
 8011a7e:	1c43      	adds	r3, r0, #1
 8011a80:	89a3      	ldrh	r3, [r4, #12]
 8011a82:	d106      	bne.n	8011a92 <__sflush_r+0x66>
 8011a84:	6829      	ldr	r1, [r5, #0]
 8011a86:	291d      	cmp	r1, #29
 8011a88:	d82c      	bhi.n	8011ae4 <__sflush_r+0xb8>
 8011a8a:	4a2a      	ldr	r2, [pc, #168]	; (8011b34 <__sflush_r+0x108>)
 8011a8c:	40ca      	lsrs	r2, r1
 8011a8e:	07d6      	lsls	r6, r2, #31
 8011a90:	d528      	bpl.n	8011ae4 <__sflush_r+0xb8>
 8011a92:	2200      	movs	r2, #0
 8011a94:	6062      	str	r2, [r4, #4]
 8011a96:	04d9      	lsls	r1, r3, #19
 8011a98:	6922      	ldr	r2, [r4, #16]
 8011a9a:	6022      	str	r2, [r4, #0]
 8011a9c:	d504      	bpl.n	8011aa8 <__sflush_r+0x7c>
 8011a9e:	1c42      	adds	r2, r0, #1
 8011aa0:	d101      	bne.n	8011aa6 <__sflush_r+0x7a>
 8011aa2:	682b      	ldr	r3, [r5, #0]
 8011aa4:	b903      	cbnz	r3, 8011aa8 <__sflush_r+0x7c>
 8011aa6:	6560      	str	r0, [r4, #84]	; 0x54
 8011aa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011aaa:	602f      	str	r7, [r5, #0]
 8011aac:	2900      	cmp	r1, #0
 8011aae:	d0ca      	beq.n	8011a46 <__sflush_r+0x1a>
 8011ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011ab4:	4299      	cmp	r1, r3
 8011ab6:	d002      	beq.n	8011abe <__sflush_r+0x92>
 8011ab8:	4628      	mov	r0, r5
 8011aba:	f7ff fd11 	bl	80114e0 <_free_r>
 8011abe:	2000      	movs	r0, #0
 8011ac0:	6360      	str	r0, [r4, #52]	; 0x34
 8011ac2:	e7c1      	b.n	8011a48 <__sflush_r+0x1c>
 8011ac4:	6a21      	ldr	r1, [r4, #32]
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	4628      	mov	r0, r5
 8011aca:	47b0      	blx	r6
 8011acc:	1c41      	adds	r1, r0, #1
 8011ace:	d1c7      	bne.n	8011a60 <__sflush_r+0x34>
 8011ad0:	682b      	ldr	r3, [r5, #0]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d0c4      	beq.n	8011a60 <__sflush_r+0x34>
 8011ad6:	2b1d      	cmp	r3, #29
 8011ad8:	d001      	beq.n	8011ade <__sflush_r+0xb2>
 8011ada:	2b16      	cmp	r3, #22
 8011adc:	d101      	bne.n	8011ae2 <__sflush_r+0xb6>
 8011ade:	602f      	str	r7, [r5, #0]
 8011ae0:	e7b1      	b.n	8011a46 <__sflush_r+0x1a>
 8011ae2:	89a3      	ldrh	r3, [r4, #12]
 8011ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ae8:	81a3      	strh	r3, [r4, #12]
 8011aea:	e7ad      	b.n	8011a48 <__sflush_r+0x1c>
 8011aec:	690f      	ldr	r7, [r1, #16]
 8011aee:	2f00      	cmp	r7, #0
 8011af0:	d0a9      	beq.n	8011a46 <__sflush_r+0x1a>
 8011af2:	0793      	lsls	r3, r2, #30
 8011af4:	680e      	ldr	r6, [r1, #0]
 8011af6:	bf08      	it	eq
 8011af8:	694b      	ldreq	r3, [r1, #20]
 8011afa:	600f      	str	r7, [r1, #0]
 8011afc:	bf18      	it	ne
 8011afe:	2300      	movne	r3, #0
 8011b00:	eba6 0807 	sub.w	r8, r6, r7
 8011b04:	608b      	str	r3, [r1, #8]
 8011b06:	f1b8 0f00 	cmp.w	r8, #0
 8011b0a:	dd9c      	ble.n	8011a46 <__sflush_r+0x1a>
 8011b0c:	6a21      	ldr	r1, [r4, #32]
 8011b0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b10:	4643      	mov	r3, r8
 8011b12:	463a      	mov	r2, r7
 8011b14:	4628      	mov	r0, r5
 8011b16:	47b0      	blx	r6
 8011b18:	2800      	cmp	r0, #0
 8011b1a:	dc06      	bgt.n	8011b2a <__sflush_r+0xfe>
 8011b1c:	89a3      	ldrh	r3, [r4, #12]
 8011b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b22:	81a3      	strh	r3, [r4, #12]
 8011b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b28:	e78e      	b.n	8011a48 <__sflush_r+0x1c>
 8011b2a:	4407      	add	r7, r0
 8011b2c:	eba8 0800 	sub.w	r8, r8, r0
 8011b30:	e7e9      	b.n	8011b06 <__sflush_r+0xda>
 8011b32:	bf00      	nop
 8011b34:	20400001 	.word	0x20400001

08011b38 <_fflush_r>:
 8011b38:	b538      	push	{r3, r4, r5, lr}
 8011b3a:	690b      	ldr	r3, [r1, #16]
 8011b3c:	4605      	mov	r5, r0
 8011b3e:	460c      	mov	r4, r1
 8011b40:	b913      	cbnz	r3, 8011b48 <_fflush_r+0x10>
 8011b42:	2500      	movs	r5, #0
 8011b44:	4628      	mov	r0, r5
 8011b46:	bd38      	pop	{r3, r4, r5, pc}
 8011b48:	b118      	cbz	r0, 8011b52 <_fflush_r+0x1a>
 8011b4a:	6983      	ldr	r3, [r0, #24]
 8011b4c:	b90b      	cbnz	r3, 8011b52 <_fflush_r+0x1a>
 8011b4e:	f000 f887 	bl	8011c60 <__sinit>
 8011b52:	4b14      	ldr	r3, [pc, #80]	; (8011ba4 <_fflush_r+0x6c>)
 8011b54:	429c      	cmp	r4, r3
 8011b56:	d11b      	bne.n	8011b90 <_fflush_r+0x58>
 8011b58:	686c      	ldr	r4, [r5, #4]
 8011b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d0ef      	beq.n	8011b42 <_fflush_r+0xa>
 8011b62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b64:	07d0      	lsls	r0, r2, #31
 8011b66:	d404      	bmi.n	8011b72 <_fflush_r+0x3a>
 8011b68:	0599      	lsls	r1, r3, #22
 8011b6a:	d402      	bmi.n	8011b72 <_fflush_r+0x3a>
 8011b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b6e:	f000 f927 	bl	8011dc0 <__retarget_lock_acquire_recursive>
 8011b72:	4628      	mov	r0, r5
 8011b74:	4621      	mov	r1, r4
 8011b76:	f7ff ff59 	bl	8011a2c <__sflush_r>
 8011b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b7c:	07da      	lsls	r2, r3, #31
 8011b7e:	4605      	mov	r5, r0
 8011b80:	d4e0      	bmi.n	8011b44 <_fflush_r+0xc>
 8011b82:	89a3      	ldrh	r3, [r4, #12]
 8011b84:	059b      	lsls	r3, r3, #22
 8011b86:	d4dd      	bmi.n	8011b44 <_fflush_r+0xc>
 8011b88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b8a:	f000 f91a 	bl	8011dc2 <__retarget_lock_release_recursive>
 8011b8e:	e7d9      	b.n	8011b44 <_fflush_r+0xc>
 8011b90:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <_fflush_r+0x70>)
 8011b92:	429c      	cmp	r4, r3
 8011b94:	d101      	bne.n	8011b9a <_fflush_r+0x62>
 8011b96:	68ac      	ldr	r4, [r5, #8]
 8011b98:	e7df      	b.n	8011b5a <_fflush_r+0x22>
 8011b9a:	4b04      	ldr	r3, [pc, #16]	; (8011bac <_fflush_r+0x74>)
 8011b9c:	429c      	cmp	r4, r3
 8011b9e:	bf08      	it	eq
 8011ba0:	68ec      	ldreq	r4, [r5, #12]
 8011ba2:	e7da      	b.n	8011b5a <_fflush_r+0x22>
 8011ba4:	0801565c 	.word	0x0801565c
 8011ba8:	0801567c 	.word	0x0801567c
 8011bac:	0801563c 	.word	0x0801563c

08011bb0 <std>:
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	b510      	push	{r4, lr}
 8011bb4:	4604      	mov	r4, r0
 8011bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8011bba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bbe:	6083      	str	r3, [r0, #8]
 8011bc0:	8181      	strh	r1, [r0, #12]
 8011bc2:	6643      	str	r3, [r0, #100]	; 0x64
 8011bc4:	81c2      	strh	r2, [r0, #14]
 8011bc6:	6183      	str	r3, [r0, #24]
 8011bc8:	4619      	mov	r1, r3
 8011bca:	2208      	movs	r2, #8
 8011bcc:	305c      	adds	r0, #92	; 0x5c
 8011bce:	f7ff fc7f 	bl	80114d0 <memset>
 8011bd2:	4b05      	ldr	r3, [pc, #20]	; (8011be8 <std+0x38>)
 8011bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8011bd6:	4b05      	ldr	r3, [pc, #20]	; (8011bec <std+0x3c>)
 8011bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bda:	4b05      	ldr	r3, [pc, #20]	; (8011bf0 <std+0x40>)
 8011bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bde:	4b05      	ldr	r3, [pc, #20]	; (8011bf4 <std+0x44>)
 8011be0:	6224      	str	r4, [r4, #32]
 8011be2:	6323      	str	r3, [r4, #48]	; 0x30
 8011be4:	bd10      	pop	{r4, pc}
 8011be6:	bf00      	nop
 8011be8:	08012511 	.word	0x08012511
 8011bec:	08012533 	.word	0x08012533
 8011bf0:	0801256b 	.word	0x0801256b
 8011bf4:	0801258f 	.word	0x0801258f

08011bf8 <_cleanup_r>:
 8011bf8:	4901      	ldr	r1, [pc, #4]	; (8011c00 <_cleanup_r+0x8>)
 8011bfa:	f000 b8c1 	b.w	8011d80 <_fwalk_reent>
 8011bfe:	bf00      	nop
 8011c00:	08011b39 	.word	0x08011b39

08011c04 <__sfmoreglue>:
 8011c04:	b570      	push	{r4, r5, r6, lr}
 8011c06:	1e4a      	subs	r2, r1, #1
 8011c08:	2568      	movs	r5, #104	; 0x68
 8011c0a:	4355      	muls	r5, r2
 8011c0c:	460e      	mov	r6, r1
 8011c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c12:	f7ff fcb5 	bl	8011580 <_malloc_r>
 8011c16:	4604      	mov	r4, r0
 8011c18:	b140      	cbz	r0, 8011c2c <__sfmoreglue+0x28>
 8011c1a:	2100      	movs	r1, #0
 8011c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8011c20:	300c      	adds	r0, #12
 8011c22:	60a0      	str	r0, [r4, #8]
 8011c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c28:	f7ff fc52 	bl	80114d0 <memset>
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	bd70      	pop	{r4, r5, r6, pc}

08011c30 <__sfp_lock_acquire>:
 8011c30:	4801      	ldr	r0, [pc, #4]	; (8011c38 <__sfp_lock_acquire+0x8>)
 8011c32:	f000 b8c5 	b.w	8011dc0 <__retarget_lock_acquire_recursive>
 8011c36:	bf00      	nop
 8011c38:	2000fa8c 	.word	0x2000fa8c

08011c3c <__sfp_lock_release>:
 8011c3c:	4801      	ldr	r0, [pc, #4]	; (8011c44 <__sfp_lock_release+0x8>)
 8011c3e:	f000 b8c0 	b.w	8011dc2 <__retarget_lock_release_recursive>
 8011c42:	bf00      	nop
 8011c44:	2000fa8c 	.word	0x2000fa8c

08011c48 <__sinit_lock_acquire>:
 8011c48:	4801      	ldr	r0, [pc, #4]	; (8011c50 <__sinit_lock_acquire+0x8>)
 8011c4a:	f000 b8b9 	b.w	8011dc0 <__retarget_lock_acquire_recursive>
 8011c4e:	bf00      	nop
 8011c50:	2000fa87 	.word	0x2000fa87

08011c54 <__sinit_lock_release>:
 8011c54:	4801      	ldr	r0, [pc, #4]	; (8011c5c <__sinit_lock_release+0x8>)
 8011c56:	f000 b8b4 	b.w	8011dc2 <__retarget_lock_release_recursive>
 8011c5a:	bf00      	nop
 8011c5c:	2000fa87 	.word	0x2000fa87

08011c60 <__sinit>:
 8011c60:	b510      	push	{r4, lr}
 8011c62:	4604      	mov	r4, r0
 8011c64:	f7ff fff0 	bl	8011c48 <__sinit_lock_acquire>
 8011c68:	69a3      	ldr	r3, [r4, #24]
 8011c6a:	b11b      	cbz	r3, 8011c74 <__sinit+0x14>
 8011c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c70:	f7ff bff0 	b.w	8011c54 <__sinit_lock_release>
 8011c74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c78:	6523      	str	r3, [r4, #80]	; 0x50
 8011c7a:	4b13      	ldr	r3, [pc, #76]	; (8011cc8 <__sinit+0x68>)
 8011c7c:	4a13      	ldr	r2, [pc, #76]	; (8011ccc <__sinit+0x6c>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c82:	42a3      	cmp	r3, r4
 8011c84:	bf04      	itt	eq
 8011c86:	2301      	moveq	r3, #1
 8011c88:	61a3      	streq	r3, [r4, #24]
 8011c8a:	4620      	mov	r0, r4
 8011c8c:	f000 f820 	bl	8011cd0 <__sfp>
 8011c90:	6060      	str	r0, [r4, #4]
 8011c92:	4620      	mov	r0, r4
 8011c94:	f000 f81c 	bl	8011cd0 <__sfp>
 8011c98:	60a0      	str	r0, [r4, #8]
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f000 f818 	bl	8011cd0 <__sfp>
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	60e0      	str	r0, [r4, #12]
 8011ca4:	2104      	movs	r1, #4
 8011ca6:	6860      	ldr	r0, [r4, #4]
 8011ca8:	f7ff ff82 	bl	8011bb0 <std>
 8011cac:	68a0      	ldr	r0, [r4, #8]
 8011cae:	2201      	movs	r2, #1
 8011cb0:	2109      	movs	r1, #9
 8011cb2:	f7ff ff7d 	bl	8011bb0 <std>
 8011cb6:	68e0      	ldr	r0, [r4, #12]
 8011cb8:	2202      	movs	r2, #2
 8011cba:	2112      	movs	r1, #18
 8011cbc:	f7ff ff78 	bl	8011bb0 <std>
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	61a3      	str	r3, [r4, #24]
 8011cc4:	e7d2      	b.n	8011c6c <__sinit+0xc>
 8011cc6:	bf00      	nop
 8011cc8:	08015584 	.word	0x08015584
 8011ccc:	08011bf9 	.word	0x08011bf9

08011cd0 <__sfp>:
 8011cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cd2:	4607      	mov	r7, r0
 8011cd4:	f7ff ffac 	bl	8011c30 <__sfp_lock_acquire>
 8011cd8:	4b1e      	ldr	r3, [pc, #120]	; (8011d54 <__sfp+0x84>)
 8011cda:	681e      	ldr	r6, [r3, #0]
 8011cdc:	69b3      	ldr	r3, [r6, #24]
 8011cde:	b913      	cbnz	r3, 8011ce6 <__sfp+0x16>
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7ff ffbd 	bl	8011c60 <__sinit>
 8011ce6:	3648      	adds	r6, #72	; 0x48
 8011ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011cec:	3b01      	subs	r3, #1
 8011cee:	d503      	bpl.n	8011cf8 <__sfp+0x28>
 8011cf0:	6833      	ldr	r3, [r6, #0]
 8011cf2:	b30b      	cbz	r3, 8011d38 <__sfp+0x68>
 8011cf4:	6836      	ldr	r6, [r6, #0]
 8011cf6:	e7f7      	b.n	8011ce8 <__sfp+0x18>
 8011cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011cfc:	b9d5      	cbnz	r5, 8011d34 <__sfp+0x64>
 8011cfe:	4b16      	ldr	r3, [pc, #88]	; (8011d58 <__sfp+0x88>)
 8011d00:	60e3      	str	r3, [r4, #12]
 8011d02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011d06:	6665      	str	r5, [r4, #100]	; 0x64
 8011d08:	f000 f859 	bl	8011dbe <__retarget_lock_init_recursive>
 8011d0c:	f7ff ff96 	bl	8011c3c <__sfp_lock_release>
 8011d10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011d14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011d18:	6025      	str	r5, [r4, #0]
 8011d1a:	61a5      	str	r5, [r4, #24]
 8011d1c:	2208      	movs	r2, #8
 8011d1e:	4629      	mov	r1, r5
 8011d20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011d24:	f7ff fbd4 	bl	80114d0 <memset>
 8011d28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011d2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011d30:	4620      	mov	r0, r4
 8011d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d34:	3468      	adds	r4, #104	; 0x68
 8011d36:	e7d9      	b.n	8011cec <__sfp+0x1c>
 8011d38:	2104      	movs	r1, #4
 8011d3a:	4638      	mov	r0, r7
 8011d3c:	f7ff ff62 	bl	8011c04 <__sfmoreglue>
 8011d40:	4604      	mov	r4, r0
 8011d42:	6030      	str	r0, [r6, #0]
 8011d44:	2800      	cmp	r0, #0
 8011d46:	d1d5      	bne.n	8011cf4 <__sfp+0x24>
 8011d48:	f7ff ff78 	bl	8011c3c <__sfp_lock_release>
 8011d4c:	230c      	movs	r3, #12
 8011d4e:	603b      	str	r3, [r7, #0]
 8011d50:	e7ee      	b.n	8011d30 <__sfp+0x60>
 8011d52:	bf00      	nop
 8011d54:	08015584 	.word	0x08015584
 8011d58:	ffff0001 	.word	0xffff0001

08011d5c <fiprintf>:
 8011d5c:	b40e      	push	{r1, r2, r3}
 8011d5e:	b503      	push	{r0, r1, lr}
 8011d60:	4601      	mov	r1, r0
 8011d62:	ab03      	add	r3, sp, #12
 8011d64:	4805      	ldr	r0, [pc, #20]	; (8011d7c <fiprintf+0x20>)
 8011d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d6a:	6800      	ldr	r0, [r0, #0]
 8011d6c:	9301      	str	r3, [sp, #4]
 8011d6e:	f000 f8c3 	bl	8011ef8 <_vfiprintf_r>
 8011d72:	b002      	add	sp, #8
 8011d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d78:	b003      	add	sp, #12
 8011d7a:	4770      	bx	lr
 8011d7c:	20000034 	.word	0x20000034

08011d80 <_fwalk_reent>:
 8011d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d84:	4606      	mov	r6, r0
 8011d86:	4688      	mov	r8, r1
 8011d88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d8c:	2700      	movs	r7, #0
 8011d8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d92:	f1b9 0901 	subs.w	r9, r9, #1
 8011d96:	d505      	bpl.n	8011da4 <_fwalk_reent+0x24>
 8011d98:	6824      	ldr	r4, [r4, #0]
 8011d9a:	2c00      	cmp	r4, #0
 8011d9c:	d1f7      	bne.n	8011d8e <_fwalk_reent+0xe>
 8011d9e:	4638      	mov	r0, r7
 8011da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011da4:	89ab      	ldrh	r3, [r5, #12]
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d907      	bls.n	8011dba <_fwalk_reent+0x3a>
 8011daa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011dae:	3301      	adds	r3, #1
 8011db0:	d003      	beq.n	8011dba <_fwalk_reent+0x3a>
 8011db2:	4629      	mov	r1, r5
 8011db4:	4630      	mov	r0, r6
 8011db6:	47c0      	blx	r8
 8011db8:	4307      	orrs	r7, r0
 8011dba:	3568      	adds	r5, #104	; 0x68
 8011dbc:	e7e9      	b.n	8011d92 <_fwalk_reent+0x12>

08011dbe <__retarget_lock_init_recursive>:
 8011dbe:	4770      	bx	lr

08011dc0 <__retarget_lock_acquire_recursive>:
 8011dc0:	4770      	bx	lr

08011dc2 <__retarget_lock_release_recursive>:
 8011dc2:	4770      	bx	lr

08011dc4 <__swhatbuf_r>:
 8011dc4:	b570      	push	{r4, r5, r6, lr}
 8011dc6:	460e      	mov	r6, r1
 8011dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dcc:	2900      	cmp	r1, #0
 8011dce:	b096      	sub	sp, #88	; 0x58
 8011dd0:	4614      	mov	r4, r2
 8011dd2:	461d      	mov	r5, r3
 8011dd4:	da07      	bge.n	8011de6 <__swhatbuf_r+0x22>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	602b      	str	r3, [r5, #0]
 8011dda:	89b3      	ldrh	r3, [r6, #12]
 8011ddc:	061a      	lsls	r2, r3, #24
 8011dde:	d410      	bmi.n	8011e02 <__swhatbuf_r+0x3e>
 8011de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011de4:	e00e      	b.n	8011e04 <__swhatbuf_r+0x40>
 8011de6:	466a      	mov	r2, sp
 8011de8:	f000 fc00 	bl	80125ec <_fstat_r>
 8011dec:	2800      	cmp	r0, #0
 8011dee:	dbf2      	blt.n	8011dd6 <__swhatbuf_r+0x12>
 8011df0:	9a01      	ldr	r2, [sp, #4]
 8011df2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011df6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011dfa:	425a      	negs	r2, r3
 8011dfc:	415a      	adcs	r2, r3
 8011dfe:	602a      	str	r2, [r5, #0]
 8011e00:	e7ee      	b.n	8011de0 <__swhatbuf_r+0x1c>
 8011e02:	2340      	movs	r3, #64	; 0x40
 8011e04:	2000      	movs	r0, #0
 8011e06:	6023      	str	r3, [r4, #0]
 8011e08:	b016      	add	sp, #88	; 0x58
 8011e0a:	bd70      	pop	{r4, r5, r6, pc}

08011e0c <__smakebuf_r>:
 8011e0c:	898b      	ldrh	r3, [r1, #12]
 8011e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011e10:	079d      	lsls	r5, r3, #30
 8011e12:	4606      	mov	r6, r0
 8011e14:	460c      	mov	r4, r1
 8011e16:	d507      	bpl.n	8011e28 <__smakebuf_r+0x1c>
 8011e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011e1c:	6023      	str	r3, [r4, #0]
 8011e1e:	6123      	str	r3, [r4, #16]
 8011e20:	2301      	movs	r3, #1
 8011e22:	6163      	str	r3, [r4, #20]
 8011e24:	b002      	add	sp, #8
 8011e26:	bd70      	pop	{r4, r5, r6, pc}
 8011e28:	ab01      	add	r3, sp, #4
 8011e2a:	466a      	mov	r2, sp
 8011e2c:	f7ff ffca 	bl	8011dc4 <__swhatbuf_r>
 8011e30:	9900      	ldr	r1, [sp, #0]
 8011e32:	4605      	mov	r5, r0
 8011e34:	4630      	mov	r0, r6
 8011e36:	f7ff fba3 	bl	8011580 <_malloc_r>
 8011e3a:	b948      	cbnz	r0, 8011e50 <__smakebuf_r+0x44>
 8011e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e40:	059a      	lsls	r2, r3, #22
 8011e42:	d4ef      	bmi.n	8011e24 <__smakebuf_r+0x18>
 8011e44:	f023 0303 	bic.w	r3, r3, #3
 8011e48:	f043 0302 	orr.w	r3, r3, #2
 8011e4c:	81a3      	strh	r3, [r4, #12]
 8011e4e:	e7e3      	b.n	8011e18 <__smakebuf_r+0xc>
 8011e50:	4b0d      	ldr	r3, [pc, #52]	; (8011e88 <__smakebuf_r+0x7c>)
 8011e52:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e54:	89a3      	ldrh	r3, [r4, #12]
 8011e56:	6020      	str	r0, [r4, #0]
 8011e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e5c:	81a3      	strh	r3, [r4, #12]
 8011e5e:	9b00      	ldr	r3, [sp, #0]
 8011e60:	6163      	str	r3, [r4, #20]
 8011e62:	9b01      	ldr	r3, [sp, #4]
 8011e64:	6120      	str	r0, [r4, #16]
 8011e66:	b15b      	cbz	r3, 8011e80 <__smakebuf_r+0x74>
 8011e68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e6c:	4630      	mov	r0, r6
 8011e6e:	f000 fbcf 	bl	8012610 <_isatty_r>
 8011e72:	b128      	cbz	r0, 8011e80 <__smakebuf_r+0x74>
 8011e74:	89a3      	ldrh	r3, [r4, #12]
 8011e76:	f023 0303 	bic.w	r3, r3, #3
 8011e7a:	f043 0301 	orr.w	r3, r3, #1
 8011e7e:	81a3      	strh	r3, [r4, #12]
 8011e80:	89a0      	ldrh	r0, [r4, #12]
 8011e82:	4305      	orrs	r5, r0
 8011e84:	81a5      	strh	r5, [r4, #12]
 8011e86:	e7cd      	b.n	8011e24 <__smakebuf_r+0x18>
 8011e88:	08011bf9 	.word	0x08011bf9

08011e8c <__malloc_lock>:
 8011e8c:	4801      	ldr	r0, [pc, #4]	; (8011e94 <__malloc_lock+0x8>)
 8011e8e:	f7ff bf97 	b.w	8011dc0 <__retarget_lock_acquire_recursive>
 8011e92:	bf00      	nop
 8011e94:	2000fa88 	.word	0x2000fa88

08011e98 <__malloc_unlock>:
 8011e98:	4801      	ldr	r0, [pc, #4]	; (8011ea0 <__malloc_unlock+0x8>)
 8011e9a:	f7ff bf92 	b.w	8011dc2 <__retarget_lock_release_recursive>
 8011e9e:	bf00      	nop
 8011ea0:	2000fa88 	.word	0x2000fa88

08011ea4 <__sfputc_r>:
 8011ea4:	6893      	ldr	r3, [r2, #8]
 8011ea6:	3b01      	subs	r3, #1
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	b410      	push	{r4}
 8011eac:	6093      	str	r3, [r2, #8]
 8011eae:	da08      	bge.n	8011ec2 <__sfputc_r+0x1e>
 8011eb0:	6994      	ldr	r4, [r2, #24]
 8011eb2:	42a3      	cmp	r3, r4
 8011eb4:	db01      	blt.n	8011eba <__sfputc_r+0x16>
 8011eb6:	290a      	cmp	r1, #10
 8011eb8:	d103      	bne.n	8011ec2 <__sfputc_r+0x1e>
 8011eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ebe:	f7ff bcd7 	b.w	8011870 <__swbuf_r>
 8011ec2:	6813      	ldr	r3, [r2, #0]
 8011ec4:	1c58      	adds	r0, r3, #1
 8011ec6:	6010      	str	r0, [r2, #0]
 8011ec8:	7019      	strb	r1, [r3, #0]
 8011eca:	4608      	mov	r0, r1
 8011ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ed0:	4770      	bx	lr

08011ed2 <__sfputs_r>:
 8011ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ed4:	4606      	mov	r6, r0
 8011ed6:	460f      	mov	r7, r1
 8011ed8:	4614      	mov	r4, r2
 8011eda:	18d5      	adds	r5, r2, r3
 8011edc:	42ac      	cmp	r4, r5
 8011ede:	d101      	bne.n	8011ee4 <__sfputs_r+0x12>
 8011ee0:	2000      	movs	r0, #0
 8011ee2:	e007      	b.n	8011ef4 <__sfputs_r+0x22>
 8011ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ee8:	463a      	mov	r2, r7
 8011eea:	4630      	mov	r0, r6
 8011eec:	f7ff ffda 	bl	8011ea4 <__sfputc_r>
 8011ef0:	1c43      	adds	r3, r0, #1
 8011ef2:	d1f3      	bne.n	8011edc <__sfputs_r+0xa>
 8011ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011ef8 <_vfiprintf_r>:
 8011ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011efc:	460d      	mov	r5, r1
 8011efe:	b09d      	sub	sp, #116	; 0x74
 8011f00:	4614      	mov	r4, r2
 8011f02:	4698      	mov	r8, r3
 8011f04:	4606      	mov	r6, r0
 8011f06:	b118      	cbz	r0, 8011f10 <_vfiprintf_r+0x18>
 8011f08:	6983      	ldr	r3, [r0, #24]
 8011f0a:	b90b      	cbnz	r3, 8011f10 <_vfiprintf_r+0x18>
 8011f0c:	f7ff fea8 	bl	8011c60 <__sinit>
 8011f10:	4b89      	ldr	r3, [pc, #548]	; (8012138 <_vfiprintf_r+0x240>)
 8011f12:	429d      	cmp	r5, r3
 8011f14:	d11b      	bne.n	8011f4e <_vfiprintf_r+0x56>
 8011f16:	6875      	ldr	r5, [r6, #4]
 8011f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f1a:	07d9      	lsls	r1, r3, #31
 8011f1c:	d405      	bmi.n	8011f2a <_vfiprintf_r+0x32>
 8011f1e:	89ab      	ldrh	r3, [r5, #12]
 8011f20:	059a      	lsls	r2, r3, #22
 8011f22:	d402      	bmi.n	8011f2a <_vfiprintf_r+0x32>
 8011f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f26:	f7ff ff4b 	bl	8011dc0 <__retarget_lock_acquire_recursive>
 8011f2a:	89ab      	ldrh	r3, [r5, #12]
 8011f2c:	071b      	lsls	r3, r3, #28
 8011f2e:	d501      	bpl.n	8011f34 <_vfiprintf_r+0x3c>
 8011f30:	692b      	ldr	r3, [r5, #16]
 8011f32:	b9eb      	cbnz	r3, 8011f70 <_vfiprintf_r+0x78>
 8011f34:	4629      	mov	r1, r5
 8011f36:	4630      	mov	r0, r6
 8011f38:	f7ff fcec 	bl	8011914 <__swsetup_r>
 8011f3c:	b1c0      	cbz	r0, 8011f70 <_vfiprintf_r+0x78>
 8011f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f40:	07dc      	lsls	r4, r3, #31
 8011f42:	d50e      	bpl.n	8011f62 <_vfiprintf_r+0x6a>
 8011f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f48:	b01d      	add	sp, #116	; 0x74
 8011f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4e:	4b7b      	ldr	r3, [pc, #492]	; (801213c <_vfiprintf_r+0x244>)
 8011f50:	429d      	cmp	r5, r3
 8011f52:	d101      	bne.n	8011f58 <_vfiprintf_r+0x60>
 8011f54:	68b5      	ldr	r5, [r6, #8]
 8011f56:	e7df      	b.n	8011f18 <_vfiprintf_r+0x20>
 8011f58:	4b79      	ldr	r3, [pc, #484]	; (8012140 <_vfiprintf_r+0x248>)
 8011f5a:	429d      	cmp	r5, r3
 8011f5c:	bf08      	it	eq
 8011f5e:	68f5      	ldreq	r5, [r6, #12]
 8011f60:	e7da      	b.n	8011f18 <_vfiprintf_r+0x20>
 8011f62:	89ab      	ldrh	r3, [r5, #12]
 8011f64:	0598      	lsls	r0, r3, #22
 8011f66:	d4ed      	bmi.n	8011f44 <_vfiprintf_r+0x4c>
 8011f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f6a:	f7ff ff2a 	bl	8011dc2 <__retarget_lock_release_recursive>
 8011f6e:	e7e9      	b.n	8011f44 <_vfiprintf_r+0x4c>
 8011f70:	2300      	movs	r3, #0
 8011f72:	9309      	str	r3, [sp, #36]	; 0x24
 8011f74:	2320      	movs	r3, #32
 8011f76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011f7e:	2330      	movs	r3, #48	; 0x30
 8011f80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012144 <_vfiprintf_r+0x24c>
 8011f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011f88:	f04f 0901 	mov.w	r9, #1
 8011f8c:	4623      	mov	r3, r4
 8011f8e:	469a      	mov	sl, r3
 8011f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f94:	b10a      	cbz	r2, 8011f9a <_vfiprintf_r+0xa2>
 8011f96:	2a25      	cmp	r2, #37	; 0x25
 8011f98:	d1f9      	bne.n	8011f8e <_vfiprintf_r+0x96>
 8011f9a:	ebba 0b04 	subs.w	fp, sl, r4
 8011f9e:	d00b      	beq.n	8011fb8 <_vfiprintf_r+0xc0>
 8011fa0:	465b      	mov	r3, fp
 8011fa2:	4622      	mov	r2, r4
 8011fa4:	4629      	mov	r1, r5
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	f7ff ff93 	bl	8011ed2 <__sfputs_r>
 8011fac:	3001      	adds	r0, #1
 8011fae:	f000 80aa 	beq.w	8012106 <_vfiprintf_r+0x20e>
 8011fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fb4:	445a      	add	r2, fp
 8011fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8011fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f000 80a2 	beq.w	8012106 <_vfiprintf_r+0x20e>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011fcc:	f10a 0a01 	add.w	sl, sl, #1
 8011fd0:	9304      	str	r3, [sp, #16]
 8011fd2:	9307      	str	r3, [sp, #28]
 8011fd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011fd8:	931a      	str	r3, [sp, #104]	; 0x68
 8011fda:	4654      	mov	r4, sl
 8011fdc:	2205      	movs	r2, #5
 8011fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011fe2:	4858      	ldr	r0, [pc, #352]	; (8012144 <_vfiprintf_r+0x24c>)
 8011fe4:	f7ee f914 	bl	8000210 <memchr>
 8011fe8:	9a04      	ldr	r2, [sp, #16]
 8011fea:	b9d8      	cbnz	r0, 8012024 <_vfiprintf_r+0x12c>
 8011fec:	06d1      	lsls	r1, r2, #27
 8011fee:	bf44      	itt	mi
 8011ff0:	2320      	movmi	r3, #32
 8011ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ff6:	0713      	lsls	r3, r2, #28
 8011ff8:	bf44      	itt	mi
 8011ffa:	232b      	movmi	r3, #43	; 0x2b
 8011ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012000:	f89a 3000 	ldrb.w	r3, [sl]
 8012004:	2b2a      	cmp	r3, #42	; 0x2a
 8012006:	d015      	beq.n	8012034 <_vfiprintf_r+0x13c>
 8012008:	9a07      	ldr	r2, [sp, #28]
 801200a:	4654      	mov	r4, sl
 801200c:	2000      	movs	r0, #0
 801200e:	f04f 0c0a 	mov.w	ip, #10
 8012012:	4621      	mov	r1, r4
 8012014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012018:	3b30      	subs	r3, #48	; 0x30
 801201a:	2b09      	cmp	r3, #9
 801201c:	d94e      	bls.n	80120bc <_vfiprintf_r+0x1c4>
 801201e:	b1b0      	cbz	r0, 801204e <_vfiprintf_r+0x156>
 8012020:	9207      	str	r2, [sp, #28]
 8012022:	e014      	b.n	801204e <_vfiprintf_r+0x156>
 8012024:	eba0 0308 	sub.w	r3, r0, r8
 8012028:	fa09 f303 	lsl.w	r3, r9, r3
 801202c:	4313      	orrs	r3, r2
 801202e:	9304      	str	r3, [sp, #16]
 8012030:	46a2      	mov	sl, r4
 8012032:	e7d2      	b.n	8011fda <_vfiprintf_r+0xe2>
 8012034:	9b03      	ldr	r3, [sp, #12]
 8012036:	1d19      	adds	r1, r3, #4
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	9103      	str	r1, [sp, #12]
 801203c:	2b00      	cmp	r3, #0
 801203e:	bfbb      	ittet	lt
 8012040:	425b      	neglt	r3, r3
 8012042:	f042 0202 	orrlt.w	r2, r2, #2
 8012046:	9307      	strge	r3, [sp, #28]
 8012048:	9307      	strlt	r3, [sp, #28]
 801204a:	bfb8      	it	lt
 801204c:	9204      	strlt	r2, [sp, #16]
 801204e:	7823      	ldrb	r3, [r4, #0]
 8012050:	2b2e      	cmp	r3, #46	; 0x2e
 8012052:	d10c      	bne.n	801206e <_vfiprintf_r+0x176>
 8012054:	7863      	ldrb	r3, [r4, #1]
 8012056:	2b2a      	cmp	r3, #42	; 0x2a
 8012058:	d135      	bne.n	80120c6 <_vfiprintf_r+0x1ce>
 801205a:	9b03      	ldr	r3, [sp, #12]
 801205c:	1d1a      	adds	r2, r3, #4
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	9203      	str	r2, [sp, #12]
 8012062:	2b00      	cmp	r3, #0
 8012064:	bfb8      	it	lt
 8012066:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801206a:	3402      	adds	r4, #2
 801206c:	9305      	str	r3, [sp, #20]
 801206e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012154 <_vfiprintf_r+0x25c>
 8012072:	7821      	ldrb	r1, [r4, #0]
 8012074:	2203      	movs	r2, #3
 8012076:	4650      	mov	r0, sl
 8012078:	f7ee f8ca 	bl	8000210 <memchr>
 801207c:	b140      	cbz	r0, 8012090 <_vfiprintf_r+0x198>
 801207e:	2340      	movs	r3, #64	; 0x40
 8012080:	eba0 000a 	sub.w	r0, r0, sl
 8012084:	fa03 f000 	lsl.w	r0, r3, r0
 8012088:	9b04      	ldr	r3, [sp, #16]
 801208a:	4303      	orrs	r3, r0
 801208c:	3401      	adds	r4, #1
 801208e:	9304      	str	r3, [sp, #16]
 8012090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012094:	482c      	ldr	r0, [pc, #176]	; (8012148 <_vfiprintf_r+0x250>)
 8012096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801209a:	2206      	movs	r2, #6
 801209c:	f7ee f8b8 	bl	8000210 <memchr>
 80120a0:	2800      	cmp	r0, #0
 80120a2:	d03f      	beq.n	8012124 <_vfiprintf_r+0x22c>
 80120a4:	4b29      	ldr	r3, [pc, #164]	; (801214c <_vfiprintf_r+0x254>)
 80120a6:	bb1b      	cbnz	r3, 80120f0 <_vfiprintf_r+0x1f8>
 80120a8:	9b03      	ldr	r3, [sp, #12]
 80120aa:	3307      	adds	r3, #7
 80120ac:	f023 0307 	bic.w	r3, r3, #7
 80120b0:	3308      	adds	r3, #8
 80120b2:	9303      	str	r3, [sp, #12]
 80120b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120b6:	443b      	add	r3, r7
 80120b8:	9309      	str	r3, [sp, #36]	; 0x24
 80120ba:	e767      	b.n	8011f8c <_vfiprintf_r+0x94>
 80120bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80120c0:	460c      	mov	r4, r1
 80120c2:	2001      	movs	r0, #1
 80120c4:	e7a5      	b.n	8012012 <_vfiprintf_r+0x11a>
 80120c6:	2300      	movs	r3, #0
 80120c8:	3401      	adds	r4, #1
 80120ca:	9305      	str	r3, [sp, #20]
 80120cc:	4619      	mov	r1, r3
 80120ce:	f04f 0c0a 	mov.w	ip, #10
 80120d2:	4620      	mov	r0, r4
 80120d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120d8:	3a30      	subs	r2, #48	; 0x30
 80120da:	2a09      	cmp	r2, #9
 80120dc:	d903      	bls.n	80120e6 <_vfiprintf_r+0x1ee>
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d0c5      	beq.n	801206e <_vfiprintf_r+0x176>
 80120e2:	9105      	str	r1, [sp, #20]
 80120e4:	e7c3      	b.n	801206e <_vfiprintf_r+0x176>
 80120e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80120ea:	4604      	mov	r4, r0
 80120ec:	2301      	movs	r3, #1
 80120ee:	e7f0      	b.n	80120d2 <_vfiprintf_r+0x1da>
 80120f0:	ab03      	add	r3, sp, #12
 80120f2:	9300      	str	r3, [sp, #0]
 80120f4:	462a      	mov	r2, r5
 80120f6:	4b16      	ldr	r3, [pc, #88]	; (8012150 <_vfiprintf_r+0x258>)
 80120f8:	a904      	add	r1, sp, #16
 80120fa:	4630      	mov	r0, r6
 80120fc:	f3af 8000 	nop.w
 8012100:	4607      	mov	r7, r0
 8012102:	1c78      	adds	r0, r7, #1
 8012104:	d1d6      	bne.n	80120b4 <_vfiprintf_r+0x1bc>
 8012106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012108:	07d9      	lsls	r1, r3, #31
 801210a:	d405      	bmi.n	8012118 <_vfiprintf_r+0x220>
 801210c:	89ab      	ldrh	r3, [r5, #12]
 801210e:	059a      	lsls	r2, r3, #22
 8012110:	d402      	bmi.n	8012118 <_vfiprintf_r+0x220>
 8012112:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012114:	f7ff fe55 	bl	8011dc2 <__retarget_lock_release_recursive>
 8012118:	89ab      	ldrh	r3, [r5, #12]
 801211a:	065b      	lsls	r3, r3, #25
 801211c:	f53f af12 	bmi.w	8011f44 <_vfiprintf_r+0x4c>
 8012120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012122:	e711      	b.n	8011f48 <_vfiprintf_r+0x50>
 8012124:	ab03      	add	r3, sp, #12
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	462a      	mov	r2, r5
 801212a:	4b09      	ldr	r3, [pc, #36]	; (8012150 <_vfiprintf_r+0x258>)
 801212c:	a904      	add	r1, sp, #16
 801212e:	4630      	mov	r0, r6
 8012130:	f000 f880 	bl	8012234 <_printf_i>
 8012134:	e7e4      	b.n	8012100 <_vfiprintf_r+0x208>
 8012136:	bf00      	nop
 8012138:	0801565c 	.word	0x0801565c
 801213c:	0801567c 	.word	0x0801567c
 8012140:	0801563c 	.word	0x0801563c
 8012144:	0801569c 	.word	0x0801569c
 8012148:	080156a6 	.word	0x080156a6
 801214c:	00000000 	.word	0x00000000
 8012150:	08011ed3 	.word	0x08011ed3
 8012154:	080156a2 	.word	0x080156a2

08012158 <_printf_common>:
 8012158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801215c:	4616      	mov	r6, r2
 801215e:	4699      	mov	r9, r3
 8012160:	688a      	ldr	r2, [r1, #8]
 8012162:	690b      	ldr	r3, [r1, #16]
 8012164:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012168:	4293      	cmp	r3, r2
 801216a:	bfb8      	it	lt
 801216c:	4613      	movlt	r3, r2
 801216e:	6033      	str	r3, [r6, #0]
 8012170:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012174:	4607      	mov	r7, r0
 8012176:	460c      	mov	r4, r1
 8012178:	b10a      	cbz	r2, 801217e <_printf_common+0x26>
 801217a:	3301      	adds	r3, #1
 801217c:	6033      	str	r3, [r6, #0]
 801217e:	6823      	ldr	r3, [r4, #0]
 8012180:	0699      	lsls	r1, r3, #26
 8012182:	bf42      	ittt	mi
 8012184:	6833      	ldrmi	r3, [r6, #0]
 8012186:	3302      	addmi	r3, #2
 8012188:	6033      	strmi	r3, [r6, #0]
 801218a:	6825      	ldr	r5, [r4, #0]
 801218c:	f015 0506 	ands.w	r5, r5, #6
 8012190:	d106      	bne.n	80121a0 <_printf_common+0x48>
 8012192:	f104 0a19 	add.w	sl, r4, #25
 8012196:	68e3      	ldr	r3, [r4, #12]
 8012198:	6832      	ldr	r2, [r6, #0]
 801219a:	1a9b      	subs	r3, r3, r2
 801219c:	42ab      	cmp	r3, r5
 801219e:	dc26      	bgt.n	80121ee <_printf_common+0x96>
 80121a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80121a4:	1e13      	subs	r3, r2, #0
 80121a6:	6822      	ldr	r2, [r4, #0]
 80121a8:	bf18      	it	ne
 80121aa:	2301      	movne	r3, #1
 80121ac:	0692      	lsls	r2, r2, #26
 80121ae:	d42b      	bmi.n	8012208 <_printf_common+0xb0>
 80121b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80121b4:	4649      	mov	r1, r9
 80121b6:	4638      	mov	r0, r7
 80121b8:	47c0      	blx	r8
 80121ba:	3001      	adds	r0, #1
 80121bc:	d01e      	beq.n	80121fc <_printf_common+0xa4>
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	68e5      	ldr	r5, [r4, #12]
 80121c2:	6832      	ldr	r2, [r6, #0]
 80121c4:	f003 0306 	and.w	r3, r3, #6
 80121c8:	2b04      	cmp	r3, #4
 80121ca:	bf08      	it	eq
 80121cc:	1aad      	subeq	r5, r5, r2
 80121ce:	68a3      	ldr	r3, [r4, #8]
 80121d0:	6922      	ldr	r2, [r4, #16]
 80121d2:	bf0c      	ite	eq
 80121d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80121d8:	2500      	movne	r5, #0
 80121da:	4293      	cmp	r3, r2
 80121dc:	bfc4      	itt	gt
 80121de:	1a9b      	subgt	r3, r3, r2
 80121e0:	18ed      	addgt	r5, r5, r3
 80121e2:	2600      	movs	r6, #0
 80121e4:	341a      	adds	r4, #26
 80121e6:	42b5      	cmp	r5, r6
 80121e8:	d11a      	bne.n	8012220 <_printf_common+0xc8>
 80121ea:	2000      	movs	r0, #0
 80121ec:	e008      	b.n	8012200 <_printf_common+0xa8>
 80121ee:	2301      	movs	r3, #1
 80121f0:	4652      	mov	r2, sl
 80121f2:	4649      	mov	r1, r9
 80121f4:	4638      	mov	r0, r7
 80121f6:	47c0      	blx	r8
 80121f8:	3001      	adds	r0, #1
 80121fa:	d103      	bne.n	8012204 <_printf_common+0xac>
 80121fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012204:	3501      	adds	r5, #1
 8012206:	e7c6      	b.n	8012196 <_printf_common+0x3e>
 8012208:	18e1      	adds	r1, r4, r3
 801220a:	1c5a      	adds	r2, r3, #1
 801220c:	2030      	movs	r0, #48	; 0x30
 801220e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012212:	4422      	add	r2, r4
 8012214:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012218:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801221c:	3302      	adds	r3, #2
 801221e:	e7c7      	b.n	80121b0 <_printf_common+0x58>
 8012220:	2301      	movs	r3, #1
 8012222:	4622      	mov	r2, r4
 8012224:	4649      	mov	r1, r9
 8012226:	4638      	mov	r0, r7
 8012228:	47c0      	blx	r8
 801222a:	3001      	adds	r0, #1
 801222c:	d0e6      	beq.n	80121fc <_printf_common+0xa4>
 801222e:	3601      	adds	r6, #1
 8012230:	e7d9      	b.n	80121e6 <_printf_common+0x8e>
	...

08012234 <_printf_i>:
 8012234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012238:	460c      	mov	r4, r1
 801223a:	4691      	mov	r9, r2
 801223c:	7e27      	ldrb	r7, [r4, #24]
 801223e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012240:	2f78      	cmp	r7, #120	; 0x78
 8012242:	4680      	mov	r8, r0
 8012244:	469a      	mov	sl, r3
 8012246:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801224a:	d807      	bhi.n	801225c <_printf_i+0x28>
 801224c:	2f62      	cmp	r7, #98	; 0x62
 801224e:	d80a      	bhi.n	8012266 <_printf_i+0x32>
 8012250:	2f00      	cmp	r7, #0
 8012252:	f000 80d8 	beq.w	8012406 <_printf_i+0x1d2>
 8012256:	2f58      	cmp	r7, #88	; 0x58
 8012258:	f000 80a3 	beq.w	80123a2 <_printf_i+0x16e>
 801225c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012264:	e03a      	b.n	80122dc <_printf_i+0xa8>
 8012266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801226a:	2b15      	cmp	r3, #21
 801226c:	d8f6      	bhi.n	801225c <_printf_i+0x28>
 801226e:	a001      	add	r0, pc, #4	; (adr r0, 8012274 <_printf_i+0x40>)
 8012270:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8012274:	080122cd 	.word	0x080122cd
 8012278:	080122e1 	.word	0x080122e1
 801227c:	0801225d 	.word	0x0801225d
 8012280:	0801225d 	.word	0x0801225d
 8012284:	0801225d 	.word	0x0801225d
 8012288:	0801225d 	.word	0x0801225d
 801228c:	080122e1 	.word	0x080122e1
 8012290:	0801225d 	.word	0x0801225d
 8012294:	0801225d 	.word	0x0801225d
 8012298:	0801225d 	.word	0x0801225d
 801229c:	0801225d 	.word	0x0801225d
 80122a0:	080123ed 	.word	0x080123ed
 80122a4:	08012311 	.word	0x08012311
 80122a8:	080123cf 	.word	0x080123cf
 80122ac:	0801225d 	.word	0x0801225d
 80122b0:	0801225d 	.word	0x0801225d
 80122b4:	0801240f 	.word	0x0801240f
 80122b8:	0801225d 	.word	0x0801225d
 80122bc:	08012311 	.word	0x08012311
 80122c0:	0801225d 	.word	0x0801225d
 80122c4:	0801225d 	.word	0x0801225d
 80122c8:	080123d7 	.word	0x080123d7
 80122cc:	680b      	ldr	r3, [r1, #0]
 80122ce:	1d1a      	adds	r2, r3, #4
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	600a      	str	r2, [r1, #0]
 80122d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80122d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80122dc:	2301      	movs	r3, #1
 80122de:	e0a3      	b.n	8012428 <_printf_i+0x1f4>
 80122e0:	6825      	ldr	r5, [r4, #0]
 80122e2:	6808      	ldr	r0, [r1, #0]
 80122e4:	062e      	lsls	r6, r5, #24
 80122e6:	f100 0304 	add.w	r3, r0, #4
 80122ea:	d50a      	bpl.n	8012302 <_printf_i+0xce>
 80122ec:	6805      	ldr	r5, [r0, #0]
 80122ee:	600b      	str	r3, [r1, #0]
 80122f0:	2d00      	cmp	r5, #0
 80122f2:	da03      	bge.n	80122fc <_printf_i+0xc8>
 80122f4:	232d      	movs	r3, #45	; 0x2d
 80122f6:	426d      	negs	r5, r5
 80122f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122fc:	485e      	ldr	r0, [pc, #376]	; (8012478 <_printf_i+0x244>)
 80122fe:	230a      	movs	r3, #10
 8012300:	e019      	b.n	8012336 <_printf_i+0x102>
 8012302:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012306:	6805      	ldr	r5, [r0, #0]
 8012308:	600b      	str	r3, [r1, #0]
 801230a:	bf18      	it	ne
 801230c:	b22d      	sxthne	r5, r5
 801230e:	e7ef      	b.n	80122f0 <_printf_i+0xbc>
 8012310:	680b      	ldr	r3, [r1, #0]
 8012312:	6825      	ldr	r5, [r4, #0]
 8012314:	1d18      	adds	r0, r3, #4
 8012316:	6008      	str	r0, [r1, #0]
 8012318:	0628      	lsls	r0, r5, #24
 801231a:	d501      	bpl.n	8012320 <_printf_i+0xec>
 801231c:	681d      	ldr	r5, [r3, #0]
 801231e:	e002      	b.n	8012326 <_printf_i+0xf2>
 8012320:	0669      	lsls	r1, r5, #25
 8012322:	d5fb      	bpl.n	801231c <_printf_i+0xe8>
 8012324:	881d      	ldrh	r5, [r3, #0]
 8012326:	4854      	ldr	r0, [pc, #336]	; (8012478 <_printf_i+0x244>)
 8012328:	2f6f      	cmp	r7, #111	; 0x6f
 801232a:	bf0c      	ite	eq
 801232c:	2308      	moveq	r3, #8
 801232e:	230a      	movne	r3, #10
 8012330:	2100      	movs	r1, #0
 8012332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012336:	6866      	ldr	r6, [r4, #4]
 8012338:	60a6      	str	r6, [r4, #8]
 801233a:	2e00      	cmp	r6, #0
 801233c:	bfa2      	ittt	ge
 801233e:	6821      	ldrge	r1, [r4, #0]
 8012340:	f021 0104 	bicge.w	r1, r1, #4
 8012344:	6021      	strge	r1, [r4, #0]
 8012346:	b90d      	cbnz	r5, 801234c <_printf_i+0x118>
 8012348:	2e00      	cmp	r6, #0
 801234a:	d04d      	beq.n	80123e8 <_printf_i+0x1b4>
 801234c:	4616      	mov	r6, r2
 801234e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012352:	fb03 5711 	mls	r7, r3, r1, r5
 8012356:	5dc7      	ldrb	r7, [r0, r7]
 8012358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801235c:	462f      	mov	r7, r5
 801235e:	42bb      	cmp	r3, r7
 8012360:	460d      	mov	r5, r1
 8012362:	d9f4      	bls.n	801234e <_printf_i+0x11a>
 8012364:	2b08      	cmp	r3, #8
 8012366:	d10b      	bne.n	8012380 <_printf_i+0x14c>
 8012368:	6823      	ldr	r3, [r4, #0]
 801236a:	07df      	lsls	r7, r3, #31
 801236c:	d508      	bpl.n	8012380 <_printf_i+0x14c>
 801236e:	6923      	ldr	r3, [r4, #16]
 8012370:	6861      	ldr	r1, [r4, #4]
 8012372:	4299      	cmp	r1, r3
 8012374:	bfde      	ittt	le
 8012376:	2330      	movle	r3, #48	; 0x30
 8012378:	f806 3c01 	strble.w	r3, [r6, #-1]
 801237c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8012380:	1b92      	subs	r2, r2, r6
 8012382:	6122      	str	r2, [r4, #16]
 8012384:	f8cd a000 	str.w	sl, [sp]
 8012388:	464b      	mov	r3, r9
 801238a:	aa03      	add	r2, sp, #12
 801238c:	4621      	mov	r1, r4
 801238e:	4640      	mov	r0, r8
 8012390:	f7ff fee2 	bl	8012158 <_printf_common>
 8012394:	3001      	adds	r0, #1
 8012396:	d14c      	bne.n	8012432 <_printf_i+0x1fe>
 8012398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801239c:	b004      	add	sp, #16
 801239e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123a2:	4835      	ldr	r0, [pc, #212]	; (8012478 <_printf_i+0x244>)
 80123a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80123a8:	6823      	ldr	r3, [r4, #0]
 80123aa:	680e      	ldr	r6, [r1, #0]
 80123ac:	061f      	lsls	r7, r3, #24
 80123ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80123b2:	600e      	str	r6, [r1, #0]
 80123b4:	d514      	bpl.n	80123e0 <_printf_i+0x1ac>
 80123b6:	07d9      	lsls	r1, r3, #31
 80123b8:	bf44      	itt	mi
 80123ba:	f043 0320 	orrmi.w	r3, r3, #32
 80123be:	6023      	strmi	r3, [r4, #0]
 80123c0:	b91d      	cbnz	r5, 80123ca <_printf_i+0x196>
 80123c2:	6823      	ldr	r3, [r4, #0]
 80123c4:	f023 0320 	bic.w	r3, r3, #32
 80123c8:	6023      	str	r3, [r4, #0]
 80123ca:	2310      	movs	r3, #16
 80123cc:	e7b0      	b.n	8012330 <_printf_i+0xfc>
 80123ce:	6823      	ldr	r3, [r4, #0]
 80123d0:	f043 0320 	orr.w	r3, r3, #32
 80123d4:	6023      	str	r3, [r4, #0]
 80123d6:	2378      	movs	r3, #120	; 0x78
 80123d8:	4828      	ldr	r0, [pc, #160]	; (801247c <_printf_i+0x248>)
 80123da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80123de:	e7e3      	b.n	80123a8 <_printf_i+0x174>
 80123e0:	065e      	lsls	r6, r3, #25
 80123e2:	bf48      	it	mi
 80123e4:	b2ad      	uxthmi	r5, r5
 80123e6:	e7e6      	b.n	80123b6 <_printf_i+0x182>
 80123e8:	4616      	mov	r6, r2
 80123ea:	e7bb      	b.n	8012364 <_printf_i+0x130>
 80123ec:	680b      	ldr	r3, [r1, #0]
 80123ee:	6826      	ldr	r6, [r4, #0]
 80123f0:	6960      	ldr	r0, [r4, #20]
 80123f2:	1d1d      	adds	r5, r3, #4
 80123f4:	600d      	str	r5, [r1, #0]
 80123f6:	0635      	lsls	r5, r6, #24
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	d501      	bpl.n	8012400 <_printf_i+0x1cc>
 80123fc:	6018      	str	r0, [r3, #0]
 80123fe:	e002      	b.n	8012406 <_printf_i+0x1d2>
 8012400:	0671      	lsls	r1, r6, #25
 8012402:	d5fb      	bpl.n	80123fc <_printf_i+0x1c8>
 8012404:	8018      	strh	r0, [r3, #0]
 8012406:	2300      	movs	r3, #0
 8012408:	6123      	str	r3, [r4, #16]
 801240a:	4616      	mov	r6, r2
 801240c:	e7ba      	b.n	8012384 <_printf_i+0x150>
 801240e:	680b      	ldr	r3, [r1, #0]
 8012410:	1d1a      	adds	r2, r3, #4
 8012412:	600a      	str	r2, [r1, #0]
 8012414:	681e      	ldr	r6, [r3, #0]
 8012416:	6862      	ldr	r2, [r4, #4]
 8012418:	2100      	movs	r1, #0
 801241a:	4630      	mov	r0, r6
 801241c:	f7ed fef8 	bl	8000210 <memchr>
 8012420:	b108      	cbz	r0, 8012426 <_printf_i+0x1f2>
 8012422:	1b80      	subs	r0, r0, r6
 8012424:	6060      	str	r0, [r4, #4]
 8012426:	6863      	ldr	r3, [r4, #4]
 8012428:	6123      	str	r3, [r4, #16]
 801242a:	2300      	movs	r3, #0
 801242c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012430:	e7a8      	b.n	8012384 <_printf_i+0x150>
 8012432:	6923      	ldr	r3, [r4, #16]
 8012434:	4632      	mov	r2, r6
 8012436:	4649      	mov	r1, r9
 8012438:	4640      	mov	r0, r8
 801243a:	47d0      	blx	sl
 801243c:	3001      	adds	r0, #1
 801243e:	d0ab      	beq.n	8012398 <_printf_i+0x164>
 8012440:	6823      	ldr	r3, [r4, #0]
 8012442:	079b      	lsls	r3, r3, #30
 8012444:	d413      	bmi.n	801246e <_printf_i+0x23a>
 8012446:	68e0      	ldr	r0, [r4, #12]
 8012448:	9b03      	ldr	r3, [sp, #12]
 801244a:	4298      	cmp	r0, r3
 801244c:	bfb8      	it	lt
 801244e:	4618      	movlt	r0, r3
 8012450:	e7a4      	b.n	801239c <_printf_i+0x168>
 8012452:	2301      	movs	r3, #1
 8012454:	4632      	mov	r2, r6
 8012456:	4649      	mov	r1, r9
 8012458:	4640      	mov	r0, r8
 801245a:	47d0      	blx	sl
 801245c:	3001      	adds	r0, #1
 801245e:	d09b      	beq.n	8012398 <_printf_i+0x164>
 8012460:	3501      	adds	r5, #1
 8012462:	68e3      	ldr	r3, [r4, #12]
 8012464:	9903      	ldr	r1, [sp, #12]
 8012466:	1a5b      	subs	r3, r3, r1
 8012468:	42ab      	cmp	r3, r5
 801246a:	dcf2      	bgt.n	8012452 <_printf_i+0x21e>
 801246c:	e7eb      	b.n	8012446 <_printf_i+0x212>
 801246e:	2500      	movs	r5, #0
 8012470:	f104 0619 	add.w	r6, r4, #25
 8012474:	e7f5      	b.n	8012462 <_printf_i+0x22e>
 8012476:	bf00      	nop
 8012478:	080156ad 	.word	0x080156ad
 801247c:	080156be 	.word	0x080156be

08012480 <_putc_r>:
 8012480:	b570      	push	{r4, r5, r6, lr}
 8012482:	460d      	mov	r5, r1
 8012484:	4614      	mov	r4, r2
 8012486:	4606      	mov	r6, r0
 8012488:	b118      	cbz	r0, 8012492 <_putc_r+0x12>
 801248a:	6983      	ldr	r3, [r0, #24]
 801248c:	b90b      	cbnz	r3, 8012492 <_putc_r+0x12>
 801248e:	f7ff fbe7 	bl	8011c60 <__sinit>
 8012492:	4b1c      	ldr	r3, [pc, #112]	; (8012504 <_putc_r+0x84>)
 8012494:	429c      	cmp	r4, r3
 8012496:	d124      	bne.n	80124e2 <_putc_r+0x62>
 8012498:	6874      	ldr	r4, [r6, #4]
 801249a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801249c:	07d8      	lsls	r0, r3, #31
 801249e:	d405      	bmi.n	80124ac <_putc_r+0x2c>
 80124a0:	89a3      	ldrh	r3, [r4, #12]
 80124a2:	0599      	lsls	r1, r3, #22
 80124a4:	d402      	bmi.n	80124ac <_putc_r+0x2c>
 80124a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124a8:	f7ff fc8a 	bl	8011dc0 <__retarget_lock_acquire_recursive>
 80124ac:	68a3      	ldr	r3, [r4, #8]
 80124ae:	3b01      	subs	r3, #1
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	60a3      	str	r3, [r4, #8]
 80124b4:	da05      	bge.n	80124c2 <_putc_r+0x42>
 80124b6:	69a2      	ldr	r2, [r4, #24]
 80124b8:	4293      	cmp	r3, r2
 80124ba:	db1c      	blt.n	80124f6 <_putc_r+0x76>
 80124bc:	b2eb      	uxtb	r3, r5
 80124be:	2b0a      	cmp	r3, #10
 80124c0:	d019      	beq.n	80124f6 <_putc_r+0x76>
 80124c2:	6823      	ldr	r3, [r4, #0]
 80124c4:	1c5a      	adds	r2, r3, #1
 80124c6:	6022      	str	r2, [r4, #0]
 80124c8:	701d      	strb	r5, [r3, #0]
 80124ca:	b2ed      	uxtb	r5, r5
 80124cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80124ce:	07da      	lsls	r2, r3, #31
 80124d0:	d405      	bmi.n	80124de <_putc_r+0x5e>
 80124d2:	89a3      	ldrh	r3, [r4, #12]
 80124d4:	059b      	lsls	r3, r3, #22
 80124d6:	d402      	bmi.n	80124de <_putc_r+0x5e>
 80124d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80124da:	f7ff fc72 	bl	8011dc2 <__retarget_lock_release_recursive>
 80124de:	4628      	mov	r0, r5
 80124e0:	bd70      	pop	{r4, r5, r6, pc}
 80124e2:	4b09      	ldr	r3, [pc, #36]	; (8012508 <_putc_r+0x88>)
 80124e4:	429c      	cmp	r4, r3
 80124e6:	d101      	bne.n	80124ec <_putc_r+0x6c>
 80124e8:	68b4      	ldr	r4, [r6, #8]
 80124ea:	e7d6      	b.n	801249a <_putc_r+0x1a>
 80124ec:	4b07      	ldr	r3, [pc, #28]	; (801250c <_putc_r+0x8c>)
 80124ee:	429c      	cmp	r4, r3
 80124f0:	bf08      	it	eq
 80124f2:	68f4      	ldreq	r4, [r6, #12]
 80124f4:	e7d1      	b.n	801249a <_putc_r+0x1a>
 80124f6:	4629      	mov	r1, r5
 80124f8:	4622      	mov	r2, r4
 80124fa:	4630      	mov	r0, r6
 80124fc:	f7ff f9b8 	bl	8011870 <__swbuf_r>
 8012500:	4605      	mov	r5, r0
 8012502:	e7e3      	b.n	80124cc <_putc_r+0x4c>
 8012504:	0801565c 	.word	0x0801565c
 8012508:	0801567c 	.word	0x0801567c
 801250c:	0801563c 	.word	0x0801563c

08012510 <__sread>:
 8012510:	b510      	push	{r4, lr}
 8012512:	460c      	mov	r4, r1
 8012514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012518:	f000 f89c 	bl	8012654 <_read_r>
 801251c:	2800      	cmp	r0, #0
 801251e:	bfab      	itete	ge
 8012520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012522:	89a3      	ldrhlt	r3, [r4, #12]
 8012524:	181b      	addge	r3, r3, r0
 8012526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801252a:	bfac      	ite	ge
 801252c:	6563      	strge	r3, [r4, #84]	; 0x54
 801252e:	81a3      	strhlt	r3, [r4, #12]
 8012530:	bd10      	pop	{r4, pc}

08012532 <__swrite>:
 8012532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012536:	461f      	mov	r7, r3
 8012538:	898b      	ldrh	r3, [r1, #12]
 801253a:	05db      	lsls	r3, r3, #23
 801253c:	4605      	mov	r5, r0
 801253e:	460c      	mov	r4, r1
 8012540:	4616      	mov	r6, r2
 8012542:	d505      	bpl.n	8012550 <__swrite+0x1e>
 8012544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012548:	2302      	movs	r3, #2
 801254a:	2200      	movs	r2, #0
 801254c:	f000 f870 	bl	8012630 <_lseek_r>
 8012550:	89a3      	ldrh	r3, [r4, #12]
 8012552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801255a:	81a3      	strh	r3, [r4, #12]
 801255c:	4632      	mov	r2, r6
 801255e:	463b      	mov	r3, r7
 8012560:	4628      	mov	r0, r5
 8012562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012566:	f000 b817 	b.w	8012598 <_write_r>

0801256a <__sseek>:
 801256a:	b510      	push	{r4, lr}
 801256c:	460c      	mov	r4, r1
 801256e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012572:	f000 f85d 	bl	8012630 <_lseek_r>
 8012576:	1c43      	adds	r3, r0, #1
 8012578:	89a3      	ldrh	r3, [r4, #12]
 801257a:	bf15      	itete	ne
 801257c:	6560      	strne	r0, [r4, #84]	; 0x54
 801257e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012586:	81a3      	strheq	r3, [r4, #12]
 8012588:	bf18      	it	ne
 801258a:	81a3      	strhne	r3, [r4, #12]
 801258c:	bd10      	pop	{r4, pc}

0801258e <__sclose>:
 801258e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012592:	f000 b81b 	b.w	80125cc <_close_r>
	...

08012598 <_write_r>:
 8012598:	b538      	push	{r3, r4, r5, lr}
 801259a:	4d07      	ldr	r5, [pc, #28]	; (80125b8 <_write_r+0x20>)
 801259c:	4604      	mov	r4, r0
 801259e:	4608      	mov	r0, r1
 80125a0:	4611      	mov	r1, r2
 80125a2:	2200      	movs	r2, #0
 80125a4:	602a      	str	r2, [r5, #0]
 80125a6:	461a      	mov	r2, r3
 80125a8:	f7fe fc0e 	bl	8010dc8 <_write>
 80125ac:	1c43      	adds	r3, r0, #1
 80125ae:	d102      	bne.n	80125b6 <_write_r+0x1e>
 80125b0:	682b      	ldr	r3, [r5, #0]
 80125b2:	b103      	cbz	r3, 80125b6 <_write_r+0x1e>
 80125b4:	6023      	str	r3, [r4, #0]
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	2000bd9c 	.word	0x2000bd9c

080125bc <abort>:
 80125bc:	b508      	push	{r3, lr}
 80125be:	2006      	movs	r0, #6
 80125c0:	f000 f882 	bl	80126c8 <raise>
 80125c4:	2001      	movs	r0, #1
 80125c6:	f7fe fbf9 	bl	8010dbc <_exit>
	...

080125cc <_close_r>:
 80125cc:	b538      	push	{r3, r4, r5, lr}
 80125ce:	4d06      	ldr	r5, [pc, #24]	; (80125e8 <_close_r+0x1c>)
 80125d0:	2300      	movs	r3, #0
 80125d2:	4604      	mov	r4, r0
 80125d4:	4608      	mov	r0, r1
 80125d6:	602b      	str	r3, [r5, #0]
 80125d8:	f7fe fc03 	bl	8010de2 <_close>
 80125dc:	1c43      	adds	r3, r0, #1
 80125de:	d102      	bne.n	80125e6 <_close_r+0x1a>
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	b103      	cbz	r3, 80125e6 <_close_r+0x1a>
 80125e4:	6023      	str	r3, [r4, #0]
 80125e6:	bd38      	pop	{r3, r4, r5, pc}
 80125e8:	2000bd9c 	.word	0x2000bd9c

080125ec <_fstat_r>:
 80125ec:	b538      	push	{r3, r4, r5, lr}
 80125ee:	4d07      	ldr	r5, [pc, #28]	; (801260c <_fstat_r+0x20>)
 80125f0:	2300      	movs	r3, #0
 80125f2:	4604      	mov	r4, r0
 80125f4:	4608      	mov	r0, r1
 80125f6:	4611      	mov	r1, r2
 80125f8:	602b      	str	r3, [r5, #0]
 80125fa:	f7fe fbf5 	bl	8010de8 <_fstat>
 80125fe:	1c43      	adds	r3, r0, #1
 8012600:	d102      	bne.n	8012608 <_fstat_r+0x1c>
 8012602:	682b      	ldr	r3, [r5, #0]
 8012604:	b103      	cbz	r3, 8012608 <_fstat_r+0x1c>
 8012606:	6023      	str	r3, [r4, #0]
 8012608:	bd38      	pop	{r3, r4, r5, pc}
 801260a:	bf00      	nop
 801260c:	2000bd9c 	.word	0x2000bd9c

08012610 <_isatty_r>:
 8012610:	b538      	push	{r3, r4, r5, lr}
 8012612:	4d06      	ldr	r5, [pc, #24]	; (801262c <_isatty_r+0x1c>)
 8012614:	2300      	movs	r3, #0
 8012616:	4604      	mov	r4, r0
 8012618:	4608      	mov	r0, r1
 801261a:	602b      	str	r3, [r5, #0]
 801261c:	f7fe fbe9 	bl	8010df2 <_isatty>
 8012620:	1c43      	adds	r3, r0, #1
 8012622:	d102      	bne.n	801262a <_isatty_r+0x1a>
 8012624:	682b      	ldr	r3, [r5, #0]
 8012626:	b103      	cbz	r3, 801262a <_isatty_r+0x1a>
 8012628:	6023      	str	r3, [r4, #0]
 801262a:	bd38      	pop	{r3, r4, r5, pc}
 801262c:	2000bd9c 	.word	0x2000bd9c

08012630 <_lseek_r>:
 8012630:	b538      	push	{r3, r4, r5, lr}
 8012632:	4d07      	ldr	r5, [pc, #28]	; (8012650 <_lseek_r+0x20>)
 8012634:	4604      	mov	r4, r0
 8012636:	4608      	mov	r0, r1
 8012638:	4611      	mov	r1, r2
 801263a:	2200      	movs	r2, #0
 801263c:	602a      	str	r2, [r5, #0]
 801263e:	461a      	mov	r2, r3
 8012640:	f7fe fbd9 	bl	8010df6 <_lseek>
 8012644:	1c43      	adds	r3, r0, #1
 8012646:	d102      	bne.n	801264e <_lseek_r+0x1e>
 8012648:	682b      	ldr	r3, [r5, #0]
 801264a:	b103      	cbz	r3, 801264e <_lseek_r+0x1e>
 801264c:	6023      	str	r3, [r4, #0]
 801264e:	bd38      	pop	{r3, r4, r5, pc}
 8012650:	2000bd9c 	.word	0x2000bd9c

08012654 <_read_r>:
 8012654:	b538      	push	{r3, r4, r5, lr}
 8012656:	4d07      	ldr	r5, [pc, #28]	; (8012674 <_read_r+0x20>)
 8012658:	4604      	mov	r4, r0
 801265a:	4608      	mov	r0, r1
 801265c:	4611      	mov	r1, r2
 801265e:	2200      	movs	r2, #0
 8012660:	602a      	str	r2, [r5, #0]
 8012662:	461a      	mov	r2, r3
 8012664:	f7fe fbc9 	bl	8010dfa <_read>
 8012668:	1c43      	adds	r3, r0, #1
 801266a:	d102      	bne.n	8012672 <_read_r+0x1e>
 801266c:	682b      	ldr	r3, [r5, #0]
 801266e:	b103      	cbz	r3, 8012672 <_read_r+0x1e>
 8012670:	6023      	str	r3, [r4, #0]
 8012672:	bd38      	pop	{r3, r4, r5, pc}
 8012674:	2000bd9c 	.word	0x2000bd9c

08012678 <_raise_r>:
 8012678:	291f      	cmp	r1, #31
 801267a:	b538      	push	{r3, r4, r5, lr}
 801267c:	4604      	mov	r4, r0
 801267e:	460d      	mov	r5, r1
 8012680:	d904      	bls.n	801268c <_raise_r+0x14>
 8012682:	2316      	movs	r3, #22
 8012684:	6003      	str	r3, [r0, #0]
 8012686:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801268a:	bd38      	pop	{r3, r4, r5, pc}
 801268c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801268e:	b112      	cbz	r2, 8012696 <_raise_r+0x1e>
 8012690:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012694:	b94b      	cbnz	r3, 80126aa <_raise_r+0x32>
 8012696:	4620      	mov	r0, r4
 8012698:	f000 f830 	bl	80126fc <_getpid_r>
 801269c:	462a      	mov	r2, r5
 801269e:	4601      	mov	r1, r0
 80126a0:	4620      	mov	r0, r4
 80126a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80126a6:	f000 b817 	b.w	80126d8 <_kill_r>
 80126aa:	2b01      	cmp	r3, #1
 80126ac:	d00a      	beq.n	80126c4 <_raise_r+0x4c>
 80126ae:	1c59      	adds	r1, r3, #1
 80126b0:	d103      	bne.n	80126ba <_raise_r+0x42>
 80126b2:	2316      	movs	r3, #22
 80126b4:	6003      	str	r3, [r0, #0]
 80126b6:	2001      	movs	r0, #1
 80126b8:	e7e7      	b.n	801268a <_raise_r+0x12>
 80126ba:	2400      	movs	r4, #0
 80126bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80126c0:	4628      	mov	r0, r5
 80126c2:	4798      	blx	r3
 80126c4:	2000      	movs	r0, #0
 80126c6:	e7e0      	b.n	801268a <_raise_r+0x12>

080126c8 <raise>:
 80126c8:	4b02      	ldr	r3, [pc, #8]	; (80126d4 <raise+0xc>)
 80126ca:	4601      	mov	r1, r0
 80126cc:	6818      	ldr	r0, [r3, #0]
 80126ce:	f7ff bfd3 	b.w	8012678 <_raise_r>
 80126d2:	bf00      	nop
 80126d4:	20000034 	.word	0x20000034

080126d8 <_kill_r>:
 80126d8:	b538      	push	{r3, r4, r5, lr}
 80126da:	4d07      	ldr	r5, [pc, #28]	; (80126f8 <_kill_r+0x20>)
 80126dc:	2300      	movs	r3, #0
 80126de:	4604      	mov	r4, r0
 80126e0:	4608      	mov	r0, r1
 80126e2:	4611      	mov	r1, r2
 80126e4:	602b      	str	r3, [r5, #0]
 80126e6:	f7fe fb61 	bl	8010dac <_kill>
 80126ea:	1c43      	adds	r3, r0, #1
 80126ec:	d102      	bne.n	80126f4 <_kill_r+0x1c>
 80126ee:	682b      	ldr	r3, [r5, #0]
 80126f0:	b103      	cbz	r3, 80126f4 <_kill_r+0x1c>
 80126f2:	6023      	str	r3, [r4, #0]
 80126f4:	bd38      	pop	{r3, r4, r5, pc}
 80126f6:	bf00      	nop
 80126f8:	2000bd9c 	.word	0x2000bd9c

080126fc <_getpid_r>:
 80126fc:	f7fe bb54 	b.w	8010da8 <_getpid>

08012700 <_init>:
 8012700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012702:	bf00      	nop
 8012704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012706:	bc08      	pop	{r3}
 8012708:	469e      	mov	lr, r3
 801270a:	4770      	bx	lr

0801270c <_fini>:
 801270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801270e:	bf00      	nop
 8012710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012712:	bc08      	pop	{r3}
 8012714:	469e      	mov	lr, r3
 8012716:	4770      	bx	lr
